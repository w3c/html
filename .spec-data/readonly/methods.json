{
  "AddSearchProvider()": {
    "AddSearchProvider()": {
      "args": [], 
      "for": [
        "External"
      ], 
      "shortname": "html"
    }
  }, 
  "Animation()": {
    "Animation(effect, timeline)": {
      "args": [
        "effect", 
        "timeline"
      ], 
      "for": [
        "Animation"
      ], 
      "shortname": "web-animations"
    }
  }, 
  "AnimationEvent()": {
    "AnimationEvent(type)": {
      "args": [
        "type"
      ], 
      "for": [
        "AnimationEvent"
      ], 
      "shortname": "css-animations"
    }, 
    "AnimationEvent(type, animationEventInitDict)": {
      "args": [
        "type", 
        "animationEventInitDict"
      ], 
      "for": [
        "AnimationEvent"
      ], 
      "shortname": "css-animations"
    }
  }, 
  "AnimationPlaybackEvent()": {
    "AnimationPlaybackEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "AnimationPlaybackEvent"
      ], 
      "shortname": "web-animations"
    }
  }, 
  "Audio()": {
    "Audio(src)": {
      "args": [
        "src"
      ], 
      "for": [
        "HTMLAudioElement"
      ], 
      "shortname": "html"
    }
  }, 
  "AudioTrackList.getTrackById()": {
    "AudioTrackList.getTrackById(id)": {
      "args": [
        "id"
      ], 
      "for": [
        "AudioTrackList"
      ], 
      "shortname": "html"
    }
  }, 
  "Blob()": {
    "Blob()": {
      "args": [], 
      "for": [
        "Blob"
      ], 
      "shortname": "fileapi"
    }, 
    "Blob(blobParts)": {
      "args": [
        "blobParts"
      ], 
      "for": [
        "Blob"
      ], 
      "shortname": "fileapi"
    }, 
    "Blob(blobParts, options)": {
      "args": [
        "blobParts", 
        "options"
      ], 
      "for": [
        "Blob"
      ], 
      "shortname": "fileapi"
    }
  }, 
  "BluetoothAdvertisingEvent()": {
    "BluetoothAdvertisingEvent(type, init)": {
      "args": [
        "type", 
        "init"
      ], 
      "for": [
        "BluetoothAdvertisingEvent"
      ], 
      "shortname": "web-bluetooth"
    }
  }, 
  "ByteLengthQueuingStrategy()": {
    "ByteLengthQueuingStrategy(options)": {
      "args": [
        "options"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "CSSAngleValue()": {
    "CSSAngleValue(value, unit)": {
      "args": [
        "value", 
        "unit"
      ], 
      "for": [
        "CSSAngleValue"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "CSSAnimation()": {
    "CSSAnimation(target, animationName)": {
      "args": [
        "target", 
        "animationName"
      ], 
      "for": [
        "CSSAnimation"
      ], 
      "shortname": "css-animations"
    }, 
    "CSSAnimation(target, animationName, options)": {
      "args": [
        "target", 
        "animationName", 
        "options"
      ], 
      "for": [
        "CSSAnimation"
      ], 
      "shortname": "css-animations"
    }, 
    "CSSAnimation(target, animationName, options, defaultEasing)": {
      "args": [
        "target", 
        "animationName", 
        "options", 
        "defaultEasing"
      ], 
      "for": [
        "CSSAnimation"
      ], 
      "shortname": "css-animations"
    }, 
    "CSSAnimation(target, animationName, options, defaultEasing, timeline)": {
      "args": [
        "target", 
        "animationName", 
        "options", 
        "defaultEasing", 
        "timeline"
      ], 
      "for": [
        "CSSAnimation"
      ], 
      "shortname": "css-animations"
    }
  }, 
  "CSSCalcLength()": {
    "CSSCalcLength(cssText)": {
      "args": [
        "cssText"
      ], 
      "for": [
        "CSSCalcLength"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "CSSFontFaceValue()": {
    "CSSFontFaceValue(fontFaceName)": {
      "args": [
        "fontFaceName"
      ], 
      "for": [
        "CSSFontFaceValue"
      ], 
      "shortname": "css-typed-om"
    }, 
    "CSSFontFaceValue(fontFamilyName)": {
      "args": [
        "fontFamilyName"
      ], 
      "for": [
        "CSSFontFaceValue"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "CSSKeyframeEffectReadOnly()": {
    "CSSKeyframeEffectReadOnly(keyframesName, defaultEasing)": {
      "args": [
        "keyframesName", 
        "defaultEasing"
      ], 
      "for": [
        "CSSKeyframeEffectReadOnly"
      ], 
      "shortname": "css-animations"
    }
  }, 
  "CSSMatrix()": {
    "CSSMatrix(matrix)": {
      "args": [
        "matrix"
      ], 
      "for": [
        "CSSMatrix"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "CSSMatrixComponent()": {
    "CSSMatrixComponent(matrix)": {
      "args": [
        "matrix"
      ], 
      "for": [
        "CSSMatrixComponent"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "CSSNumberValue()": {
    "CSSNumberValue(cssText)": {
      "args": [
        "cssText"
      ], 
      "for": [
        "CSSNumberValue"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "CSSPerspective()": {
    "CSSPerspective(length)": {
      "args": [
        "length"
      ], 
      "for": [
        "CSSPerspective"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "CSSPositionValue()": {
    "CSSPositionValue(x, y)": {
      "args": [
        "x", 
        "y"
      ], 
      "for": [
        "CSSPositionValue"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "CSSRotation()": {
    "CSSRotation(angle)": {
      "args": [
        "angle"
      ], 
      "for": [
        "CSSRotation"
      ], 
      "shortname": "css-typed-om"
    }, 
    "CSSRotation(angle, x, y, z)": {
      "args": [
        "angle", 
        "x", 
        "y", 
        "z"
      ], 
      "for": [
        "CSSRotation"
      ], 
      "shortname": "css-typed-om"
    }, 
    "CSSRotation(degrees)": {
      "args": [
        "degrees"
      ], 
      "for": [
        "CSSRotation"
      ], 
      "shortname": "css-typed-om"
    }, 
    "CSSRotation(degrees, x, y, z)": {
      "args": [
        "degrees", 
        "x", 
        "y", 
        "z"
      ], 
      "for": [
        "CSSRotation"
      ], 
      "shortname": "css-typed-om"
    }, 
    "CSSRotation(x, y, z, angle)": {
      "args": [
        "x", 
        "y", 
        "z", 
        "angle"
      ], 
      "for": [
        "CSSRotation"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "CSSScale()": {
    "CSSScale(x, y)": {
      "args": [
        "x", 
        "y"
      ], 
      "for": [
        "CSSScale"
      ], 
      "shortname": "css-typed-om"
    }, 
    "CSSScale(x, y, z)": {
      "args": [
        "x", 
        "y", 
        "z"
      ], 
      "for": [
        "CSSScale"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "CSSSimpleLength()": {
    "CSSSimpleLength(cssText)": {
      "args": [
        "cssText"
      ], 
      "for": [
        "CSSSimpleLength"
      ], 
      "shortname": "css-typed-om"
    }, 
    "CSSSimpleLength(value, type)": {
      "args": [
        "value", 
        "type"
      ], 
      "for": [
        "CSSSimpleLength"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "CSSSkew()": {
    "CSSSkew(ax, ay)": {
      "args": [
        "ax", 
        "ay"
      ], 
      "for": [
        "CSSSkew"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "CSSTransformValue()": {
    "CSSTransformValue()": {
      "args": [], 
      "for": [
        "CSSTransformValue"
      ], 
      "shortname": "css-typed-om"
    }, 
    "CSSTransformValue(transforms)": {
      "args": [
        "transforms"
      ], 
      "for": [
        "CSSTransformValue"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "CSSTransition()": {
    "CSSTransition(target, transitionProperty, transitionValue)": {
      "args": [
        "target", 
        "transitionProperty", 
        "transitionValue"
      ], 
      "for": [
        "CSSTransition"
      ], 
      "shortname": "css-transitions"
    }, 
    "CSSTransition(target, transitionProperty, transitionValue, options)": {
      "args": [
        "target", 
        "transitionProperty", 
        "transitionValue", 
        "options"
      ], 
      "for": [
        "CSSTransition"
      ], 
      "shortname": "css-transitions"
    }, 
    "CSSTransition(target, transitionProperty, transitionValue, options, timeline)": {
      "args": [
        "target", 
        "transitionProperty", 
        "transitionValue", 
        "options", 
        "timeline"
      ], 
      "for": [
        "CSSTransition"
      ], 
      "shortname": "css-transitions"
    }
  }, 
  "CSSTranslation()": {
    "CSSTranslation(x, y)": {
      "args": [
        "x", 
        "y"
      ], 
      "for": [
        "CSSTranslation"
      ], 
      "shortname": "css-typed-om"
    }, 
    "CSSTranslation(x, y, z)": {
      "args": [
        "x", 
        "y", 
        "z"
      ], 
      "for": [
        "CSSTranslation"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "CSSURLImageValue()": {
    "CSSURLImageValue(url)": {
      "args": [
        "url"
      ], 
      "for": [
        "CSSURLImageValue"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "Comment()": {
    "Comment(data)": {
      "args": [
        "data"
      ], 
      "for": [
        "Comment"
      ], 
      "shortname": "dom"
    }
  }, 
  "CompositionEvent()": {
    "CompositionEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "CompositionEvent"
      ], 
      "shortname": "ui-events"
    }
  }, 
  "ConstraintSpace()": {
    "ConstraintSpace()": {
      "args": [], 
      "for": [
        "ConstraintSpace"
      ], 
      "shortname": "css-layout-api"
    }, 
    "ConstraintSpace(options)": {
      "args": [
        "options"
      ], 
      "for": [
        "ConstraintSpace"
      ], 
      "shortname": "css-layout-api"
    }
  }, 
  "CountQueuingStrategy()": {
    "CountQueuingStrategy(options)": {
      "args": [
        "options"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "CustomEvent()": {
    "CustomEvent(type)": {
      "args": [
        "type"
      ], 
      "for": [
        "CustomEvent"
      ], 
      "shortname": "dom"
    }, 
    "CustomEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "CustomEvent"
      ], 
      "shortname": "dom"
    }
  }, 
  "DOMMatrix()": {
    "DOMMatrix()": {
      "args": [], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "DOMMatrix(numberSequence)": {
      "args": [
        "numberSequence"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "DOMMatrix(transformList)": {
      "args": [
        "transformList"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }
  }, 
  "DOMMatrixReadOnly()": {
    "DOMMatrixReadOnly()": {
      "args": [], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "DOMMatrixReadOnly(numberSequence)": {
      "args": [
        "numberSequence"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "DOMMatrixReadOnly(sequence<unrestricted double> numberSequence)": {
      "args": [
        "sequence<unrestricted double> numberSequence"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "DOMMatrixReadOnly(transformList)": {
      "args": [
        "transformList"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }
  }, 
  "DOMPoint()": {
    "DOMPoint()": {
      "args": [], 
      "for": [
        "DOMPoint"
      ], 
      "shortname": "geometry"
    }, 
    "DOMPoint(x, y, z, w)": {
      "args": [
        "x", 
        "y", 
        "z", 
        "w"
      ], 
      "for": [
        "DOMPoint"
      ], 
      "shortname": "geometry"
    }
  }, 
  "DOMPointReadOnly()": {
    "DOMPointReadOnly()": {
      "args": [], 
      "for": [
        "DOMPointReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "DOMPointReadOnly(x, y, z, w)": {
      "args": [
        "x", 
        "y", 
        "z", 
        "w"
      ], 
      "for": [
        "DOMPointReadOnly"
      ], 
      "shortname": "geometry"
    }
  }, 
  "DOMQuad()": {
    "DOMQuad()": {
      "args": [], 
      "for": [
        "DOMQuad"
      ], 
      "shortname": "geometry"
    }, 
    "DOMQuad(p1, p2, p3, p4)": {
      "args": [
        "p1", 
        "p2", 
        "p3", 
        "p4"
      ], 
      "for": [
        "DOMQuad"
      ], 
      "shortname": "geometry"
    }
  }, 
  "DOMRect()": {
    "DOMRect()": {
      "args": [], 
      "for": [
        "DOMRect"
      ], 
      "shortname": "geometry"
    }, 
    "DOMRect(x, y, width, height)": {
      "args": [
        "x", 
        "y", 
        "width", 
        "height"
      ], 
      "for": [
        "DOMRect"
      ], 
      "shortname": "geometry"
    }
  }, 
  "DOMRectReadOnly()": {
    "DOMRectReadOnly()": {
      "args": [], 
      "for": [
        "DOMRect"
      ], 
      "shortname": "geometry"
    }, 
    "DOMRectReadOnly(x, y, width, height)": {
      "args": [
        "x", 
        "y", 
        "width", 
        "height"
      ], 
      "for": [
        "DOMRectReadOnly"
      ], 
      "shortname": "geometry"
    }
  }, 
  "Document()": {
    "Document()": {
      "args": [], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }
  }, 
  "DocumentFragment()": {
    "DocumentFragment()": {
      "args": [], 
      "for": [
        "DocumentFragment"
      ], 
      "shortname": "dom"
    }
  }, 
  "DocumentTimeline()": {
    "DocumentTimeline(options)": {
      "args": [
        "options"
      ], 
      "for": [
        "DocumentTimeline"
      ], 
      "shortname": "web-animations"
    }
  }, 
  "Event()": {
    "Event(type)": {
      "args": [
        "type"
      ], 
      "for": [
        "Event"
      ], 
      "shortname": "dom"
    }, 
    "Event(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "Event"
      ], 
      "shortname": "dom"
    }
  }, 
  "ExtendableEvent()": {
    "ExtendableEvent(type)": {
      "args": [
        "type"
      ], 
      "for": [
        "ExtendableEvent"
      ], 
      "shortname": "service-workers"
    }, 
    "ExtendableEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "ExtendableEvent"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "ExtendableMessageEvent()": {
    "ExtendableMessageEvent(type)": {
      "args": [
        "type"
      ], 
      "for": [
        "ExtendableMessageEvent"
      ], 
      "shortname": "service-workers"
    }, 
    "ExtendableMessageEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "ExtendableMessageEvent"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "FederatedCredential()": {
    "FederatedCredential(data)": {
      "args": [
        "data"
      ], 
      "for": [
        "FederatedCredential"
      ], 
      "shortname": "webappsec-credential-management"
    }
  }, 
  "FetchEvent()": {
    "FetchEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "FetchEvent"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "File()": {
    "File(fileBits, fileName)": {
      "args": [
        "fileBits", 
        "fileName"
      ], 
      "for": [
        "File"
      ], 
      "shortname": "fileapi"
    }, 
    "File(fileBits, fileName, options)": {
      "args": [
        "fileBits", 
        "fileName", 
        "options"
      ], 
      "for": [
        "File"
      ], 
      "shortname": "fileapi"
    }
  }, 
  "FileReader()": {
    "FileReader()": {
      "args": [], 
      "for": [
        "FileReader"
      ], 
      "shortname": "fileapi"
    }
  }, 
  "FileReaderSync()": {
    "FileReaderSync()": {
      "args": [], 
      "for": [
        "FileReaderSync"
      ], 
      "shortname": "fileapi"
    }
  }, 
  "FocusEvent()": {
    "FocusEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "FocusEvent"
      ], 
      "shortname": "ui-events"
    }
  }, 
  "FontFace()": {
    "FontFace()": {
      "args": [], 
      "for": [
        "FontFace"
      ], 
      "shortname": "css-font-loading"
    }, 
    "FontFace(family, source)": {
      "args": [
        "family", 
        "source"
      ], 
      "for": [
        "FontFace"
      ], 
      "shortname": "css-font-loading"
    }, 
    "FontFace(family, source, descriptors)": {
      "args": [
        "family", 
        "source", 
        "descriptors"
      ], 
      "for": [
        "FontFace"
      ], 
      "shortname": "css-font-loading"
    }
  }, 
  "FontFaceSet()": {
    "FontFaceSet(initialFaces)": {
      "args": [
        "initialFaces"
      ], 
      "for": [
        "FontFaceSet"
      ], 
      "shortname": "css-font-loading"
    }
  }, 
  "FontFaceSetLoadEvent()": {
    "FontFaceSetLoadEvent(type)": {
      "args": [
        "type"
      ], 
      "for": [
        "FontFaceSetLoadEvent"
      ], 
      "shortname": "css-font-loading"
    }, 
    "FontFaceSetLoadEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "FontFaceSetLoadEvent"
      ], 
      "shortname": "css-font-loading"
    }
  }, 
  "ForeignFetchEvent()": {
    "ForeignFetchEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "ForeignFetchEvent"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "FormData()": {
    "FormData(form)": {
      "args": [
        "form"
      ], 
      "for": [
        "FormData"
      ], 
      "shortname": "xhr"
    }
  }, 
  "Headers()": {
    "Headers(init)": {
      "args": [
        "init"
      ], 
      "for": [
        "Headers"
      ], 
      "shortname": "fetch"
    }
  }, 
  "IDBVersionChangeEvent()": {
    "IDBVersionChangeEvent(type)": {
      "args": [
        "type"
      ], 
      "for": [
        "IDBVersionChangeEvent"
      ], 
      "shortname": "indexeddb"
    }, 
    "IDBVersionChangeEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "IDBVersionChangeEvent"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "Image()": {
    "Image(width, height)": {
      "args": [
        "width", 
        "height"
      ], 
      "for": [
        "HTMLImageElement"
      ], 
      "shortname": "html"
    }
  }, 
  "InputEvent()": {
    "InputEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "InputEvent"
      ], 
      "shortname": "ui-events"
    }
  }, 
  "InstallEvent()": {
    "InstallEvent(type)": {
      "args": [
        "type"
      ], 
      "for": [
        "InstallEvent"
      ], 
      "shortname": "service-workers"
    }, 
    "InstallEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "InstallEvent"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "IsSearchProviderInstalled()": {
    "IsSearchProviderInstalled()": {
      "args": [], 
      "for": [
        "External"
      ], 
      "shortname": "html"
    }
  }, 
  "KeyboardEvent()": {
    "KeyboardEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "KeyboardEvent"
      ], 
      "shortname": "ui-events"
    }
  }, 
  "KeyframeEffect()": {
    "KeyframeEffect(source)": {
      "args": [
        "source"
      ], 
      "for": [
        "KeyframeEffect"
      ], 
      "shortname": "web-animations"
    }, 
    "KeyframeEffect(target, keyframes, options)": {
      "args": [
        "target", 
        "keyframes", 
        "options"
      ], 
      "for": [
        "KeyframeEffect"
      ], 
      "shortname": "web-animations"
    }
  }, 
  "KeyframeEffectReadOnly()": {
    "KeyframeEffectReadOnly(source)": {
      "args": [
        "source"
      ], 
      "for": [
        "KeyframeEffectReadOnly"
      ], 
      "shortname": "web-animations"
    }, 
    "KeyframeEffectReadOnly(target, keyframes, options)": {
      "args": [
        "target", 
        "keyframes", 
        "options"
      ], 
      "for": [
        "KeyframeEffectReadOnly"
      ], 
      "shortname": "web-animations"
    }
  }, 
  "MediaQueryListEvent()": {
    "MediaQueryListEvent(type)": {
      "args": [
        "type"
      ], 
      "for": [
        "MediaQueryListEvent"
      ], 
      "shortname": "cssom-view"
    }, 
    "MediaQueryListEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "MediaQueryListEvent"
      ], 
      "shortname": "cssom-view"
    }
  }, 
  "MouseEvent()": {
    "MouseEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "MouseEvent"
      ], 
      "shortname": "ui-events"
    }
  }, 
  "MutationObserver()": {
    "MutationObserver(callback)": {
      "args": [
        "callback"
      ], 
      "for": [
        "MutationObserver"
      ], 
      "shortname": "dom"
    }
  }, 
  "Option()": {
    "Option(text, value, defaultSelected, selected)": {
      "args": [
        "text", 
        "value", 
        "defaultSelected", 
        "selected"
      ], 
      "for": [
        "HTMLOptionElement"
      ], 
      "shortname": "html"
    }
  }, 
  "PasswordCredential()": {
    "PasswordCredential(data)": {
      "args": [
        "data"
      ], 
      "for": [
        "PasswordCredential"
      ], 
      "shortname": "webappsec-credential-management"
    }, 
    "PasswordCredential(form)": {
      "args": [
        "form"
      ], 
      "for": [
        "PasswordCredential"
      ], 
      "shortname": "webappsec-credential-management"
    }
  }, 
  "ProgressEvent()": {
    "ProgressEvent(type)": {
      "args": [
        "type"
      ], 
      "for": [
        "ProgressEvent"
      ], 
      "shortname": "xhr"
    }, 
    "ProgressEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "ProgressEvent"
      ], 
      "shortname": "xhr"
    }
  }, 
  "Range()": {
    "Range()": {
      "args": [], 
      "for": [
        "Range"
      ], 
      "shortname": "dom"
    }
  }, 
  "ReadableByteStreamController()": {
    "ReadableByteStreamController(stream, underlyingByteSource, highWaterMark)": {
      "args": [
        "stream", 
        "underlyingByteSource", 
        "highWaterMark"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "ReadableStream()": {
    "ReadableStream(underlyingSource, queuingStrategy)": {
      "args": [
        "underlyingSource", 
        "queuingStrategy"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "ReadableStreamBYOBReader()": {
    "ReadableStreamBYOBReader(stream)": {
      "args": [
        "stream"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "ReadableStreamBYOBRequest()": {
    "ReadableStreamBYOBRequest(controller, view)": {
      "args": [
        "controller", 
        "view"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "ReadableStreamDefaultController()": {
    "ReadableStreamDefaultController(stream, underlyingSource, size, highWaterMark)": {
      "args": [
        "stream", 
        "underlyingSource", 
        "size", 
        "highWaterMark"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "ReadableStreamDefaultReader()": {
    "ReadableStreamDefaultReader(stream)": {
      "args": [
        "stream"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "Request()": {
    "Request(input, init)": {
      "args": [
        "input", 
        "init"
      ], 
      "for": [
        "Request"
      ], 
      "shortname": "fetch"
    }
  }, 
  "Response()": {
    "Response(body, init)": {
      "args": [
        "body", 
        "init"
      ], 
      "for": [
        "Response"
      ], 
      "shortname": "fetch"
    }
  }, 
  "SecurityPolicyViolationEvent()": {
    "SecurityPolicyViolationEvent(type)": {
      "args": [
        "type"
      ], 
      "for": [
        "SecurityPolicyViolationEvent"
      ], 
      "shortname": "csp"
    }, 
    "SecurityPolicyViolationEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "SecurityPolicyViolationEvent"
      ], 
      "shortname": "csp"
    }
  }, 
  "SensorErrorEvent()": {
    "SensorErrorEvent(type, errorEventInitDict)": {
      "args": [
        "type", 
        "errorEventInitDict"
      ], 
      "for": [
        "SensorErrorEvent"
      ], 
      "shortname": "generic-sensor"
    }
  }, 
  "ServiceWorkerMessageEvent()": {
    "ServiceWorkerMessageEvent(type)": {
      "args": [
        "type"
      ], 
      "for": [
        "ServiceWorkerMessageEvent"
      ], 
      "shortname": "service-workers"
    }, 
    "ServiceWorkerMessageEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "ServiceWorkerMessageEvent"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "SharedKeyframeList()": {
    "SharedKeyframeList(keyframes)": {
      "args": [
        "keyframes"
      ], 
      "for": [
        "SharedKeyframeList"
      ], 
      "shortname": "web-animations"
    }
  }, 
  "SyncEvent()": {
    "SyncEvent(type, init)": {
      "args": [
        "type", 
        "init"
      ], 
      "for": [
        "SyncEvent"
      ], 
      "shortname": "background-sync"
    }
  }, 
  "Text()": {
    "Text(data)": {
      "args": [
        "data"
      ], 
      "for": [
        "Text"
      ], 
      "shortname": "dom"
    }
  }, 
  "TextDecoder()": {
    "TextDecoder(label, options)": {
      "args": [
        "label", 
        "options"
      ], 
      "for": [
        "TextDecoder"
      ], 
      "shortname": "encoding"
    }
  }, 
  "TextEncoder()": {
    "TextEncoder()": {
      "args": [], 
      "for": [
        "TextEncoder"
      ], 
      "shortname": "encoding"
    }
  }, 
  "TransitionEvent()": {
    "TransitionEvent(type, transitionEventInitDict)": {
      "args": [
        "type", 
        "transitionEventInitDict"
      ], 
      "for": [
        "TransitionEvent"
      ], 
      "shortname": "css-transitions"
    }
  }, 
  "UIEvent()": {
    "UIEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "UIEvent"
      ], 
      "shortname": "ui-events"
    }
  }, 
  "URL()": {
    "URL(url, base)": {
      "args": [
        "url", 
        "base"
      ], 
      "for": [
        "URL"
      ], 
      "shortname": "url"
    }
  }, 
  "URLSearchParams()": {
    "URLSearchParams(init)": {
      "args": [
        "init"
      ], 
      "for": [
        "URLSearchParams"
      ], 
      "shortname": "url"
    }
  }, 
  "USBAlternateInterface()": {
    "USBAlternateInterface(deviceInterface, alternateSetting)": {
      "args": [
        "deviceInterface", 
        "alternateSetting"
      ], 
      "for": [
        "USBAlternateInterface"
      ], 
      "shortname": "webusb"
    }
  }, 
  "USBConfiguration()": {
    "USBConfiguration(device, configurationValue)": {
      "args": [
        "device", 
        "configurationValue"
      ], 
      "for": [
        "USBConfiguration"
      ], 
      "shortname": "webusb"
    }
  }, 
  "USBConnectionEvent()": {
    "USBConnectionEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "USBConnectionEvent"
      ], 
      "shortname": "webusb"
    }
  }, 
  "USBEndpoint()": {
    "USBEndpoint(alternate, endpointNumber, direction)": {
      "args": [
        "alternate", 
        "endpointNumber", 
        "direction"
      ], 
      "for": [
        "USBEndpoint"
      ], 
      "shortname": "webusb"
    }
  }, 
  "USBInTransferResult()": {
    "USBInTransferResult(status)": {
      "args": [
        "status"
      ], 
      "for": [
        "USBInTransferResult"
      ], 
      "shortname": "webusb"
    }, 
    "USBInTransferResult(status, data)": {
      "args": [
        "status", 
        "data"
      ], 
      "for": [
        "USBInTransferResult"
      ], 
      "shortname": "webusb"
    }
  }, 
  "USBInterface()": {
    "USBInterface(configuration, interfaceNumber)": {
      "args": [
        "configuration", 
        "interfaceNumber"
      ], 
      "for": [
        "USBInterface"
      ], 
      "shortname": "webusb"
    }
  }, 
  "USBIsochronousInTransferPacket()": {
    "USBIsochronousInTransferPacket(status)": {
      "args": [
        "status"
      ], 
      "for": [
        "USBIsochronousInTransferPacket"
      ], 
      "shortname": "webusb"
    }, 
    "USBIsochronousInTransferPacket(status, data)": {
      "args": [
        "status", 
        "data"
      ], 
      "for": [
        "USBIsochronousInTransferPacket"
      ], 
      "shortname": "webusb"
    }
  }, 
  "USBIsochronousInTransferResult()": {
    "USBIsochronousInTransferResult(packets)": {
      "args": [
        "packets"
      ], 
      "for": [
        "USBIsochronousInTransferResult"
      ], 
      "shortname": "webusb"
    }, 
    "USBIsochronousInTransferResult(packets, data)": {
      "args": [
        "packets", 
        "data"
      ], 
      "for": [
        "USBIsochronousInTransferResult"
      ], 
      "shortname": "webusb"
    }
  }, 
  "USBIsochronousOutTransferPacket()": {
    "USBIsochronousOutTransferPacket(status)": {
      "args": [
        "status"
      ], 
      "for": [
        "USBIsochronousOutTransferPacket"
      ], 
      "shortname": "webusb"
    }, 
    "USBIsochronousOutTransferPacket(status, bytesWritten)": {
      "args": [
        "status", 
        "bytesWritten"
      ], 
      "for": [
        "USBIsochronousOutTransferPacket"
      ], 
      "shortname": "webusb"
    }
  }, 
  "USBIsochronousOutTransferResult()": {
    "USBIsochronousOutTransferResult(packets)": {
      "args": [
        "packets"
      ], 
      "for": [
        "USBIsochronousOutTransferResult"
      ], 
      "shortname": "webusb"
    }
  }, 
  "USBOutTransferResult()": {
    "USBOutTransferResult(status)": {
      "args": [
        "status"
      ], 
      "for": [
        "USBOutTransferResult"
      ], 
      "shortname": "webusb"
    }, 
    "USBOutTransferResult(status, bytesWritten)": {
      "args": [
        "status", 
        "bytesWritten"
      ], 
      "for": [
        "USBOutTransferResult"
      ], 
      "shortname": "webusb"
    }
  }, 
  "ValueEvent()": {
    "ValueEvent(type)": {
      "args": [
        "type"
      ], 
      "for": [
        "ValueEvent"
      ], 
      "shortname": "web-bluetooth"
    }, 
    "ValueEvent(type, initDict)": {
      "args": [
        "type", 
        "initDict"
      ], 
      "for": [
        "ValueEvent"
      ], 
      "shortname": "web-bluetooth"
    }
  }, 
  "VideoTrackList.getTrackById()": {
    "VideoTrackList.getTrackById(id)": {
      "args": [
        "id"
      ], 
      "for": [
        "VideoTrackList"
      ], 
      "shortname": "html"
    }
  }, 
  "WheelEvent()": {
    "WheelEvent(type, eventInitDict)": {
      "args": [
        "type", 
        "eventInitDict"
      ], 
      "for": [
        "WheelEvent"
      ], 
      "shortname": "ui-events"
    }
  }, 
  "WritableStream()": {
    "WritableStream(underlyingSink, queuingStrategy)": {
      "args": [
        "underlyingSink", 
        "queuingStrategy"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "WritableStreamDefaultController()": {
    "WritableStreamDefaultController(stream, underlyingSink, size, highWaterMark)": {
      "args": [
        "stream", 
        "underlyingSink", 
        "size", 
        "highWaterMark"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "WritableStreamDefaultWriter()": {
    "WritableStreamDefaultWriter(stream)": {
      "args": [
        "stream"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "XMLHttpRequest()": {
    "XMLHttpRequest()": {
      "args": [], 
      "for": [
        "XMLHttpRequest"
      ], 
      "shortname": "xhr"
    }
  }, 
  "[[Clone]] ()": {
    "[[Clone]] ( targetRealm, memory )": {
      "args": [
        "targetRealm", 
        "memory"
      ], 
      "for": [
        "platform object"
      ], 
      "shortname": "html"
    }
  }, 
  "[[Clone]]()": {
    "[[Clone]]()": {
      "args": [], 
      "for": [
        "platform object"
      ], 
      "shortname": "html"
    }
  }, 
  "[[Transfer]]()": {
    "[[Transfer]]( targetRealm )": {
      "args": [
        "targetRealm"
      ], 
      "for": [
        "platform object"
      ], 
      "shortname": "html"
    }, 
    "[[Transfer]]()": {
      "args": [], 
      "for": [
        "platform object"
      ], 
      "shortname": "html"
    }
  }, 
  "abort()": {
    "abort()": {
      "args": [], 
      "for": [
        "FileReader", 
        "XMLHttpRequest", 
        "ApplicationCache", 
        "IDBTransaction"
      ], 
      "shortname": "fileapi"
    }, 
    "abort(reason)": {
      "args": [
        "reason"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "acceptNode()": {
    "acceptNode(node)": {
      "args": [
        "node"
      ], 
      "for": [
        "NodeFilter"
      ], 
      "shortname": "dom"
    }
  }, 
  "add()": {
    "add()": {
      "args": [], 
      "for": [
        "DataTransferItemList", 
        "DOMTokenList", 
        "HTMLSelectElement"
      ], 
      "shortname": "dom"
    }, 
    "add(CSSLengthValue value)": {
      "args": [
        "CSSLengthValue value"
      ], 
      "for": [
        "CSSLengthValue"
      ], 
      "shortname": "css-typed-om"
    }, 
    "add(element)": {
      "args": [
        "element"
      ], 
      "for": [
        "HTMLOptionsCollection"
      ], 
      "shortname": "html"
    }, 
    "add(font)": {
      "args": [
        "font"
      ], 
      "for": [
        "FontFaceSet"
      ], 
      "shortname": "css-font-loading"
    }, 
    "add(request)": {
      "args": [
        "request"
      ], 
      "for": [
        "Cache"
      ], 
      "shortname": "service-workers"
    }, 
    "add(tokens)": {
      "args": [
        "tokens"
      ], 
      "for": [
        "DOMTokenList"
      ], 
      "shortname": "dom"
    }, 
    "add(value)": {
      "args": [
        "value"
      ], 
      "for": [
        "CSSLengthValue", 
        "CSSNumericValue", 
        "IDBObjectStore"
      ], 
      "shortname": "css-typed-om"
    }, 
    "add(value, key)": {
      "args": [
        "value", 
        "key"
      ], 
      "for": [
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "addAll()": {
    "addAll(requests)": {
      "args": [
        "requests"
      ], 
      "for": [
        "Cache"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "addColorStop()": {
    "addColorStop(offset, color)": {
      "args": [
        "offset", 
        "color"
      ], 
      "for": [
        "CanvasGradient"
      ], 
      "shortname": "html"
    }
  }, 
  "addCue()": {
    "addCue(cue)": {
      "args": [
        "cue"
      ], 
      "for": [
        "TextTrack"
      ], 
      "shortname": "html"
    }
  }, 
  "addEventListener()": {
    "addEventListener()": {
      "args": [], 
      "for": [], 
      "shortname": "html"
    }, 
    "addEventListener(type, callback)": {
      "args": [
        "type", 
        "callback"
      ], 
      "for": [
        "EventTarget"
      ], 
      "shortname": "dom"
    }, 
    "addEventListener(type, callback, options)": {
      "args": [
        "type", 
        "callback", 
        "options"
      ], 
      "for": [
        "EventTarget"
      ], 
      "shortname": "dom"
    }
  }, 
  "addListener()": {
    "addListener(listener)": {
      "args": [
        "listener"
      ], 
      "for": [
        "MediaQueryList"
      ], 
      "shortname": "cssom-view"
    }
  }, 
  "addPath()": {
    "addPath(b, transform)": {
      "args": [
        "b", 
        "transform"
      ], 
      "for": [
        "Path2D"
      ], 
      "shortname": "html"
    }
  }, 
  "addTextTrack()": {
    "addTextTrack(kind)": {
      "args": [
        "kind"
      ], 
      "for": [
        "HTMLMediaElement"
      ], 
      "shortname": "html"
    }, 
    "addTextTrack(kind, label)": {
      "args": [
        "kind", 
        "label"
      ], 
      "for": [
        "HTMLMediaElement"
      ], 
      "shortname": "html"
    }
  }, 
  "adoptNode()": {
    "adoptNode(node)": {
      "args": [
        "node"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }
  }, 
  "advance()": {
    "advance(count)": {
      "args": [
        "count"
      ], 
      "for": [
        "IDBCursor"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "after()": {
    "after(nodes)": {
      "args": [
        "nodes"
      ], 
      "for": [
        "ChildNode"
      ], 
      "shortname": "dom"
    }, 
    "after(nodes...)": {
      "args": [
        "nodes..."
      ], 
      "for": [
        "ChildNode"
      ], 
      "shortname": "dom"
    }
  }, 
  "alert()": {
    "alert(message)": {
      "args": [
        "message"
      ], 
      "for": [
        "Window"
      ], 
      "shortname": "html"
    }
  }, 
  "animate()": {
    "animate(keyframes, options)": {
      "args": [
        "keyframes", 
        "options"
      ], 
      "for": [
        "Animatable"
      ], 
      "shortname": "web-animations"
    }
  }, 
  "append()": {
    "append(DOMString property (CSSStyleValue or DOMString)... values)": {
      "args": [
        "DOMString property (CSSStyleValue or DOMString)... values"
      ], 
      "for": [
        "StylePropertyMap"
      ], 
      "shortname": "css-typed-om"
    }, 
    "append(name, blobValue)": {
      "args": [
        "name", 
        "blobValue"
      ], 
      "for": [
        "FormData"
      ], 
      "shortname": "xhr"
    }, 
    "append(name, blobValue, filename)": {
      "args": [
        "name", 
        "blobValue", 
        "filename"
      ], 
      "for": [
        "FormData"
      ], 
      "shortname": "xhr"
    }, 
    "append(name, value)": {
      "args": [
        "name", 
        "value"
      ], 
      "for": [
        "Headers", 
        "FormData", 
        "URLSearchParams"
      ], 
      "shortname": "fetch"
    }, 
    "append(nodes)": {
      "args": [
        "nodes"
      ], 
      "for": [
        "ParentNode"
      ], 
      "shortname": "dom"
    }, 
    "append(nodes...)": {
      "args": [
        "nodes..."
      ], 
      "for": [
        "ParentNode"
      ], 
      "shortname": "dom"
    }, 
    "append(property)": {
      "args": [
        "property"
      ], 
      "for": [
        "StylePropertyMap"
      ], 
      "shortname": "css-typed-om"
    }, 
    "append(property, values)": {
      "args": [
        "property", 
        "values"
      ], 
      "for": [
        "StylePropertyMap"
      ], 
      "shortname": "css-typed-om"
    }, 
    "append(property, values...)": {
      "args": [
        "property", 
        "values..."
      ], 
      "for": [
        "StylePropertyMap"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "appendChild()": {
    "appendChild()": {
      "args": [], 
      "for": [], 
      "shortname": "html"
    }, 
    "appendChild(node)": {
      "args": [
        "node"
      ], 
      "for": [
        "Node"
      ], 
      "shortname": "dom"
    }
  }, 
  "appendData()": {
    "appendData(data)": {
      "args": [
        "data"
      ], 
      "for": [
        "CharacterData"
      ], 
      "shortname": "dom"
    }
  }, 
  "appendMedium()": {
    "appendMedium(medium)": {
      "args": [
        "medium"
      ], 
      "for": [
        "MediaList"
      ], 
      "shortname": "cssom"
    }
  }, 
  "appendRule()": {
    "appendRule(rule)": {
      "args": [
        "rule"
      ], 
      "for": [
        "CSSKeyframesRule"
      ], 
      "shortname": "css-animations"
    }
  }, 
  "arc()": {
    "arc(x, y, radius, startAngle, endAngle)": {
      "args": [
        "x", 
        "y", 
        "radius", 
        "startAngle", 
        "endAngle"
      ], 
      "for": [
        "CanvasPath"
      ], 
      "shortname": "html"
    }
  }, 
  "arcTo()": {
    "arcTo(x1, y1, x2, y2, radiusX, radiusY, rotation)": {
      "args": [
        "x1", 
        "y1", 
        "x2", 
        "y2", 
        "radiusX", 
        "radiusY", 
        "rotation"
      ], 
      "for": [
        "CanvasPath"
      ], 
      "shortname": "html"
    }
  }, 
  "arrayBuffer()": {
    "arrayBuffer()": {
      "args": [], 
      "for": [
        "Body"
      ], 
      "shortname": "fetch"
    }
  }, 
  "assert()": {
    "assert(condition, ...data)": {
      "args": [
        "condition", 
        "...data"
      ], 
      "for": [], 
      "shortname": "console"
    }
  }, 
  "assign()": {
    "assign(url)": {
      "args": [
        "url"
      ], 
      "for": [
        "Location"
      ], 
      "shortname": "html"
    }
  }, 
  "assignedNodes()": {
    "assignedNodes()": {
      "args": [], 
      "for": [
        "HTMLSlotElement"
      ], 
      "shortname": "html"
    }
  }, 
  "atob()": {
    "atob(data)": {
      "args": [
        "data"
      ], 
      "for": [
        "WindowOrWorkerGlobalScope"
      ], 
      "shortname": "html"
    }
  }, 
  "attachShadow()": {
    "attachShadow(init)": {
      "args": [
        "init"
      ], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "back()": {
    "back()": {
      "args": [], 
      "for": [
        "History"
      ], 
      "shortname": "html"
    }
  }, 
  "before()": {
    "before(nodes)": {
      "args": [
        "nodes"
      ], 
      "for": [
        "ChildNode"
      ], 
      "shortname": "dom"
    }, 
    "before(nodes...)": {
      "args": [
        "nodes..."
      ], 
      "for": [
        "ChildNode"
      ], 
      "shortname": "dom"
    }
  }, 
  "beginPath()": {
    "beginPath()": {
      "args": [], 
      "for": [
        "CanvasDrawPath"
      ], 
      "shortname": "html"
    }
  }, 
  "bezierCurveTo()": {
    "bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y)": {
      "args": [
        "cp1x", 
        "cp1y", 
        "cp2x", 
        "cp2y", 
        "x", 
        "y"
      ], 
      "for": [
        "CanvasPath"
      ], 
      "shortname": "html"
    }
  }, 
  "blob()": {
    "blob()": {
      "args": [], 
      "for": [
        "Body"
      ], 
      "shortname": "fetch"
    }
  }, 
  "blur()": {
    "blur()": {
      "args": [], 
      "for": [
        "HTMLElement"
      ], 
      "shortname": "html"
    }
  }, 
  "bound()": {
    "bound(lower, upper)": {
      "args": [
        "lower", 
        "upper"
      ], 
      "for": [
        "IDBKeyRange"
      ], 
      "shortname": "indexeddb"
    }, 
    "bound(lower, upper, lowerOpen)": {
      "args": [
        "lower", 
        "upper", 
        "lowerOpen"
      ], 
      "for": [
        "IDBKeyRange"
      ], 
      "shortname": "indexeddb"
    }, 
    "bound(lower, upper, lowerOpen, upperOpen)": {
      "args": [
        "lower", 
        "upper", 
        "lowerOpen", 
        "upperOpen"
      ], 
      "for": [
        "IDBKeyRange"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "btoa()": {
    "btoa(data)": {
      "args": [
        "data"
      ], 
      "for": [
        "WindowOrWorkerGlobalScope"
      ], 
      "shortname": "html"
    }
  }, 
  "canPlayType()": {
    "canPlayType(type)": {
      "args": [
        "type"
      ], 
      "for": [
        "HTMLMediaElement"
      ], 
      "shortname": "html"
    }
  }, 
  "cancel()": {
    "cancel()": {
      "args": [], 
      "for": [
        "Animation"
      ], 
      "shortname": "web-animations"
    }, 
    "cancel(reason)": {
      "args": [
        "reason"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "cancelAnimationFrame()": {
    "cancelAnimationFrame()": {
      "args": [], 
      "for": [
        "Window"
      ], 
      "shortname": "html"
    }
  }, 
  "canonicalUUID()": {
    "canonicalUUID(alias)": {
      "args": [
        "alias"
      ], 
      "for": [
        "BluetoothUUID"
      ], 
      "shortname": "web-bluetooth"
    }
  }, 
  "captureEvents()": {
    "captureEvents()": {
      "args": [], 
      "for": [
        "Window", 
        "Document"
      ], 
      "shortname": "html"
    }
  }, 
  "caretPositionFromPoint()": {
    "caretPositionFromPoint(x, y)": {
      "args": [
        "x", 
        "y"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "cssom-view"
    }
  }, 
  "check()": {
    "check()": {
      "args": [], 
      "for": [
        "FontFaceSet"
      ], 
      "shortname": "css-font-loading"
    }, 
    "check(font)": {
      "args": [
        "font"
      ], 
      "for": [
        "FontFaceSet"
      ], 
      "shortname": "css-font-loading"
    }, 
    "check(font, text)": {
      "args": [
        "font", 
        "text"
      ], 
      "for": [
        "FontFaceSet"
      ], 
      "shortname": "css-font-loading"
    }
  }, 
  "checkValidity()": {
    "checkValidity()": {
      "args": [], 
      "for": [
        "HTMLFormElement", 
        "HTMLFieldSetElement"
      ], 
      "shortname": "html"
    }
  }, 
  "claim()": {
    "claim()": {
      "args": [], 
      "for": [
        "Clients"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "claimInterface()": {
    "claimInterface(interfaceNumber)": {
      "args": [
        "interfaceNumber"
      ], 
      "for": [
        "USBDevice"
      ], 
      "shortname": "webusb"
    }
  }, 
  "clear()": {
    "clear()": {
      "args": [], 
      "for": [
        "DataTransferItemList", 
        "Document", 
        "Storage", 
        "IDBObjectStore", 
        "FontFaceSet"
      ], 
      "shortname": "console"
    }
  }, 
  "clearData()": {
    "clearData()": {
      "args": [], 
      "for": [
        "DataTransfer"
      ], 
      "shortname": "html"
    }
  }, 
  "clearHalt()": {
    "clearHalt(direction, endpointNumber)": {
      "args": [
        "direction", 
        "endpointNumber"
      ], 
      "for": [
        "USBDevice"
      ], 
      "shortname": "webusb"
    }
  }, 
  "clearInterval()": {
    "clearInterval()": {
      "args": [], 
      "for": [
        "WindowOrWorkerGlobalScope"
      ], 
      "shortname": "html"
    }
  }, 
  "clearRect()": {
    "clearRect(x, y, w, h)": {
      "args": [
        "x", 
        "y", 
        "w", 
        "h"
      ], 
      "for": [
        "CanvasRect"
      ], 
      "shortname": "html"
    }
  }, 
  "clearTimeout()": {
    "clearTimeout()": {
      "args": [], 
      "for": [
        "WindowOrWorkerGlobalScope"
      ], 
      "shortname": "html"
    }
  }, 
  "click()": {
    "click()": {
      "args": [], 
      "for": [
        "HTMLElement"
      ], 
      "shortname": "html"
    }
  }, 
  "clip()": {
    "clip()": {
      "args": [], 
      "for": [
        "CanvasDrawPath"
      ], 
      "shortname": "html"
    }
  }, 
  "clone()": {
    "clone()": {
      "args": [], 
      "for": [
        "Request", 
        "Response"
      ], 
      "shortname": "fetch"
    }
  }, 
  "cloneContents()": {
    "cloneContents()": {
      "args": [], 
      "for": [
        "Range"
      ], 
      "shortname": "dom"
    }
  }, 
  "cloneNode()": {
    "cloneNode()": {
      "args": [], 
      "for": [
        "Node"
      ], 
      "shortname": "dom"
    }, 
    "cloneNode(deep)": {
      "args": [
        "deep"
      ], 
      "for": [
        "Node"
      ], 
      "shortname": "dom"
    }
  }, 
  "cloneRange()": {
    "cloneRange()": {
      "args": [], 
      "for": [
        "Range"
      ], 
      "shortname": "dom"
    }
  }, 
  "close()": {
    "close()": {
      "args": [], 
      "for": [
        "WebSocket", 
        "DedicatedWorkerGlobalScope", 
        "MessagePort", 
        "ImageBitmap", 
        "Window", 
        "EventSource", 
        "BroadcastChannel", 
        "SharedWorkerGlobalScope", 
        "HTMLDialogElement", 
        "IDBDatabase", 
        "USBDevice"
      ], 
      "shortname": "html"
    }, 
    "close(code)": {
      "args": [
        "code"
      ], 
      "for": [
        "WebSocket"
      ], 
      "shortname": "html"
    }
  }, 
  "closePath()": {
    "closePath()": {
      "args": [], 
      "for": [
        "CanvasPath"
      ], 
      "shortname": "html"
    }
  }, 
  "closest()": {
    "closest(selectors)": {
      "args": [
        "selectors"
      ], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "cmp()": {
    "cmp(first, second)": {
      "args": [
        "first", 
        "second"
      ], 
      "for": [
        "IDBFactory"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "collapse()": {
    "collapse()": {
      "args": [], 
      "for": [
        "Range"
      ], 
      "shortname": "dom"
    }, 
    "collapse(toStart)": {
      "args": [
        "toStart"
      ], 
      "for": [
        "Range"
      ], 
      "shortname": "dom"
    }
  }, 
  "compareBoundaryPoints()": {
    "compareBoundaryPoints(how, sourceRange)": {
      "args": [
        "how", 
        "sourceRange"
      ], 
      "for": [
        "Range"
      ], 
      "shortname": "dom"
    }
  }, 
  "compareDocumentPosition()": {
    "compareDocumentPosition(other)": {
      "args": [
        "other"
      ], 
      "for": [
        "Node"
      ], 
      "shortname": "dom"
    }
  }, 
  "comparePoint()": {
    "comparePoint(node, offset)": {
      "args": [
        "node", 
        "offset"
      ], 
      "for": [
        "Range"
      ], 
      "shortname": "dom"
    }
  }, 
  "composedPath()": {
    "composedPath()": {
      "args": [], 
      "for": [
        "Event"
      ], 
      "shortname": "dom"
    }
  }, 
  "confirm()": {
    "confirm(message)": {
      "args": [
        "message"
      ], 
      "for": [
        "Window"
      ], 
      "shortname": "html"
    }
  }, 
  "connect()": {
    "connect()": {
      "args": [], 
      "for": [
        "BluetoothRemoteGATTServer"
      ], 
      "shortname": "web-bluetooth"
    }
  }, 
  "contains()": {
    "contains(other)": {
      "args": [
        "other"
      ], 
      "for": [
        "Node"
      ], 
      "shortname": "dom"
    }, 
    "contains(string)": {
      "args": [
        "string"
      ], 
      "for": [
        "DOMStringList"
      ], 
      "shortname": "html"
    }, 
    "contains(token)": {
      "args": [
        "token"
      ], 
      "for": [
        "DOMTokenList"
      ], 
      "shortname": "dom"
    }
  }, 
  "continue()": {
    "continue()": {
      "args": [], 
      "for": [
        "IDBCursor"
      ], 
      "shortname": "indexeddb"
    }, 
    "continue(key)": {
      "args": [
        "key"
      ], 
      "for": [
        "IDBCursor"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "continuePrimaryKey()": {
    "continuePrimaryKey(key, primaryKey)": {
      "args": [
        "key", 
        "primaryKey"
      ], 
      "for": [
        "IDBCursor"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "controlTransferIn()": {
    "controlTransferIn(setup, length)": {
      "args": [
        "setup", 
        "length"
      ], 
      "for": [
        "USBDevice"
      ], 
      "shortname": "webusb"
    }
  }, 
  "controlTransferOut()": {
    "controlTransferOut(setup)": {
      "args": [
        "setup"
      ], 
      "for": [
        "USBDevice"
      ], 
      "shortname": "webusb"
    }, 
    "controlTransferOut(setup, data)": {
      "args": [
        "setup", 
        "data"
      ], 
      "for": [
        "USBDevice"
      ], 
      "shortname": "webusb"
    }
  }, 
  "convertPointFromNode()": {
    "convertPointFromNode(point, from)": {
      "args": [
        "point", 
        "from"
      ], 
      "for": [
        "GeometryUtils"
      ], 
      "shortname": "cssom-view"
    }, 
    "convertPointFromNode(point, from, options)": {
      "args": [
        "point", 
        "from", 
        "options"
      ], 
      "for": [
        "GeometryUtils"
      ], 
      "shortname": "cssom-view"
    }
  }, 
  "convertQuadFromNode()": {
    "convertQuadFromNode(quad, from)": {
      "args": [
        "quad", 
        "from"
      ], 
      "for": [
        "GeometryUtils"
      ], 
      "shortname": "cssom-view"
    }, 
    "convertQuadFromNode(quad, from, options)": {
      "args": [
        "quad", 
        "from", 
        "options"
      ], 
      "for": [
        "GeometryUtils"
      ], 
      "shortname": "cssom-view"
    }
  }, 
  "convertRectFromNode()": {
    "convertRectFromNode(rect, from)": {
      "args": [
        "rect", 
        "from"
      ], 
      "for": [
        "GeometryUtils"
      ], 
      "shortname": "cssom-view"
    }, 
    "convertRectFromNode(rect, from, options)": {
      "args": [
        "rect", 
        "from", 
        "options"
      ], 
      "for": [
        "GeometryUtils"
      ], 
      "shortname": "cssom-view"
    }
  }, 
  "convertToBlob()": {
    "convertToBlob()": {
      "args": [], 
      "for": [
        "OffscreenCanvas"
      ], 
      "shortname": "html"
    }
  }, 
  "count()": {
    "count()": {
      "args": [], 
      "for": [
        "IDBIndex", 
        "IDBObjectStore"
      ], 
      "shortname": "console"
    }, 
    "count(label)": {
      "args": [
        "label"
      ], 
      "for": [], 
      "shortname": "console"
    }, 
    "count(query)": {
      "args": [
        "query"
      ], 
      "for": [
        "IDBIndex", 
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "createAttribute()": {
    "createAttribute(localName)": {
      "args": [
        "localName"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }
  }, 
  "createAttributeNS()": {
    "createAttributeNS(namespace, qualifiedName)": {
      "args": [
        "namespace", 
        "qualifiedName"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }
  }, 
  "createCDATASection()": {
    "createCDATASection(data)": {
      "args": [
        "data"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }
  }, 
  "createCaption()": {
    "createCaption()": {
      "args": [], 
      "for": [
        "HTMLTableElement"
      ], 
      "shortname": "html"
    }
  }, 
  "createComment()": {
    "createComment(data)": {
      "args": [
        "data"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }
  }, 
  "createDocument()": {
    "createDocument()": {
      "args": [], 
      "for": [], 
      "shortname": "html"
    }, 
    "createDocument(namespace, qualifiedName)": {
      "args": [
        "namespace", 
        "qualifiedName"
      ], 
      "for": [
        "DOMImplementation"
      ], 
      "shortname": "dom"
    }, 
    "createDocument(namespace, qualifiedName, doctype)": {
      "args": [
        "namespace", 
        "qualifiedName", 
        "doctype"
      ], 
      "for": [
        "DOMImplementation"
      ], 
      "shortname": "dom"
    }
  }, 
  "createDocumentFragment()": {
    "createDocumentFragment()": {
      "args": [], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }
  }, 
  "createDocumentType()": {
    "createDocumentType(qualifiedName, publicId, systemId)": {
      "args": [
        "qualifiedName", 
        "publicId", 
        "systemId"
      ], 
      "for": [
        "DOMImplementation"
      ], 
      "shortname": "dom"
    }
  }, 
  "createElement()": {
    "createElement()": {
      "args": [], 
      "for": [], 
      "shortname": "html"
    }, 
    "createElement(localName)": {
      "args": [
        "localName"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }, 
    "createElement(localName, options)": {
      "args": [
        "localName", 
        "options"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }
  }, 
  "createElementNS()": {
    "createElementNS()": {
      "args": [], 
      "for": [], 
      "shortname": "html"
    }, 
    "createElementNS(namespace, qualifiedName)": {
      "args": [
        "namespace", 
        "qualifiedName"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }, 
    "createElementNS(namespace, qualifiedName, options)": {
      "args": [
        "namespace", 
        "qualifiedName", 
        "options"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }
  }, 
  "createEntityReference()": {
    "createEntityReference()": {
      "args": [], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }
  }, 
  "createEvent()": {
    "createEvent(interface)": {
      "args": [
        "interface"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }
  }, 
  "createHTMLDocument()": {
    "createHTMLDocument()": {
      "args": [], 
      "for": [
        "DOMImplementation"
      ], 
      "shortname": "dom"
    }, 
    "createHTMLDocument(title)": {
      "args": [
        "title"
      ], 
      "for": [
        "DOMImplementation"
      ], 
      "shortname": "dom"
    }
  }, 
  "createImageBitmap()": {
    "createImageBitmap()": {
      "args": [], 
      "for": [
        "WindowOrWorkerGlobalScope"
      ], 
      "shortname": "html"
    }
  }, 
  "createImageData()": {
    "createImageData()": {
      "args": [], 
      "for": [
        "CanvasImageData"
      ], 
      "shortname": "html"
    }
  }, 
  "createIndex()": {
    "createIndex(name, keyPath)": {
      "args": [
        "name", 
        "keyPath"
      ], 
      "for": [
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }, 
    "createIndex(name, keyPath, options)": {
      "args": [
        "name", 
        "keyPath", 
        "options"
      ], 
      "for": [
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "createLinearGradient()": {
    "createLinearGradient(x0, y0, x1, y1)": {
      "args": [
        "x0", 
        "y0", 
        "x1", 
        "y1"
      ], 
      "for": [
        "CanvasFillStrokeStyles"
      ], 
      "shortname": "html"
    }
  }, 
  "createNodeIterator()": {
    "createNodeIterator(root)": {
      "args": [
        "root"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }, 
    "createNodeIterator(root, whatToShow)": {
      "args": [
        "root", 
        "whatToShow"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }, 
    "createNodeIterator(root, whatToShow, filter)": {
      "args": [
        "root", 
        "whatToShow", 
        "filter"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }
  }, 
  "createObjectStore()": {
    "createObjectStore(name)": {
      "args": [
        "name"
      ], 
      "for": [
        "IDBDatabase"
      ], 
      "shortname": "indexeddb"
    }, 
    "createObjectStore(name, options)": {
      "args": [
        "name", 
        "options"
      ], 
      "for": [
        "IDBDatabase"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "createObjectURL()": {
    "createObjectURL(blob)": {
      "args": [
        "blob"
      ], 
      "for": [
        "URL"
      ], 
      "shortname": "fileapi"
    }
  }, 
  "createPattern()": {
    "createPattern(image, repetition)": {
      "args": [
        "image", 
        "repetition"
      ], 
      "for": [
        "CanvasFillStrokeStyles"
      ], 
      "shortname": "html"
    }
  }, 
  "createProcessingInstruction()": {
    "createProcessingInstruction(target, data)": {
      "args": [
        "target", 
        "data"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }
  }, 
  "createRadialGradient()": {
    "createRadialGradient(x0, y0, r0, x1, y1, r1)": {
      "args": [
        "x0", 
        "y0", 
        "r0", 
        "x1", 
        "y1", 
        "r1"
      ], 
      "for": [
        "CanvasFillStrokeStyles"
      ], 
      "shortname": "html"
    }
  }, 
  "createRange()": {
    "createRange()": {
      "args": [], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }
  }, 
  "createTBody()": {
    "createTBody()": {
      "args": [], 
      "for": [
        "HTMLTableElement"
      ], 
      "shortname": "html"
    }
  }, 
  "createTFoot()": {
    "createTFoot()": {
      "args": [], 
      "for": [
        "HTMLTableElement"
      ], 
      "shortname": "html"
    }
  }, 
  "createTHead()": {
    "createTHead()": {
      "args": [], 
      "for": [
        "HTMLTableElement"
      ], 
      "shortname": "html"
    }
  }, 
  "createTextNode()": {
    "createTextNode(data)": {
      "args": [
        "data"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }
  }, 
  "createTreeWalker()": {
    "createTreeWalker(root)": {
      "args": [
        "root"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }, 
    "createTreeWalker(root, whatToShow)": {
      "args": [
        "root", 
        "whatToShow"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }, 
    "createTreeWalker(root, whatToShow, filter)": {
      "args": [
        "root", 
        "whatToShow", 
        "filter"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }
  }, 
  "debug()": {
    "debug(...data)": {
      "args": [
        "...data"
      ], 
      "for": [], 
      "shortname": "console"
    }
  }, 
  "decode()": {
    "decode()": {
      "args": [], 
      "for": [
        "TextDecoder"
      ], 
      "shortname": "encoding"
    }, 
    "decode(input)": {
      "args": [
        "input"
      ], 
      "for": [
        "TextDecoder"
      ], 
      "shortname": "encoding"
    }, 
    "decode(input, options)": {
      "args": [
        "input", 
        "options"
      ], 
      "for": [
        "TextDecoder"
      ], 
      "shortname": "encoding"
    }
  }, 
  "define()": {
    "define(name, constructor)": {
      "args": [
        "name", 
        "constructor"
      ], 
      "for": [
        "CustomElementRegistry"
      ], 
      "shortname": "html"
    }
  }, 
  "delete()": {
    "delete()": {
      "args": [], 
      "for": [
        "IDBCursor", 
        "NamedFlowMap"
      ], 
      "shortname": "css-regions"
    }, 
    "delete(cacheName)": {
      "args": [
        "cacheName"
      ], 
      "for": [
        "CacheStorage"
      ], 
      "shortname": "service-workers"
    }, 
    "delete(flowName)": {
      "args": [
        "flowName"
      ], 
      "for": [
        "NamedFlowMap"
      ], 
      "shortname": "css-regions"
    }, 
    "delete(font)": {
      "args": [
        "font"
      ], 
      "for": [
        "FontFaceSet"
      ], 
      "shortname": "css-font-loading"
    }, 
    "delete(name)": {
      "args": [
        "name"
      ], 
      "for": [
        "Headers", 
        "FormData", 
        "URLSearchParams"
      ], 
      "shortname": "fetch"
    }, 
    "delete(property)": {
      "args": [
        "property"
      ], 
      "for": [
        "StylePropertyMap"
      ], 
      "shortname": "css-typed-om"
    }, 
    "delete(query)": {
      "args": [
        "query"
      ], 
      "for": [
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }, 
    "delete(request)": {
      "args": [
        "request"
      ], 
      "for": [
        "Cache"
      ], 
      "shortname": "service-workers"
    }, 
    "delete(request, options)": {
      "args": [
        "request", 
        "options"
      ], 
      "for": [
        "Cache"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "deleteCaption()": {
    "deleteCaption()": {
      "args": [], 
      "for": [
        "HTMLTableElement"
      ], 
      "shortname": "html"
    }
  }, 
  "deleteCell()": {
    "deleteCell(index)": {
      "args": [
        "index"
      ], 
      "for": [
        "HTMLTableRowElement"
      ], 
      "shortname": "html"
    }
  }, 
  "deleteContents()": {
    "deleteContents()": {
      "args": [], 
      "for": [
        "Range"
      ], 
      "shortname": "dom"
    }
  }, 
  "deleteData()": {
    "deleteData(offset, count)": {
      "args": [
        "offset", 
        "count"
      ], 
      "for": [
        "CharacterData"
      ], 
      "shortname": "dom"
    }
  }, 
  "deleteDatabase()": {
    "deleteDatabase(name)": {
      "args": [
        "name"
      ], 
      "for": [
        "IDBFactory"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "deleteIndex()": {
    "deleteIndex(indexName)": {
      "args": [
        "indexName"
      ], 
      "for": [
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }, 
    "deleteIndex(name)": {
      "args": [
        "name"
      ], 
      "for": [
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "deleteMedium()": {
    "deleteMedium(medium)": {
      "args": [
        "medium"
      ], 
      "for": [
        "MediaList"
      ], 
      "shortname": "cssom"
    }
  }, 
  "deleteObjectStore()": {
    "deleteObjectStore(name)": {
      "args": [
        "name"
      ], 
      "for": [
        "IDBDatabase"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "deleteRow()": {
    "deleteRow(index)": {
      "args": [
        "index"
      ], 
      "for": [
        "HTMLTableSectionElement", 
        "HTMLTableElement"
      ], 
      "shortname": "html"
    }
  }, 
  "deleteRule()": {
    "deleteRule(index)": {
      "args": [
        "index"
      ], 
      "for": [
        "CSSGroupingRule", 
        "CSSStyleSheet"
      ], 
      "shortname": "css-conditional"
    }, 
    "deleteRule(select)": {
      "args": [
        "select"
      ], 
      "for": [
        "CSSKeyframesRule"
      ], 
      "shortname": "css-animations"
    }
  }, 
  "deleteTFoot()": {
    "deleteTFoot()": {
      "args": [], 
      "for": [
        "HTMLTableElement"
      ], 
      "shortname": "html"
    }
  }, 
  "deleteTHead()": {
    "deleteTHead()": {
      "args": [], 
      "for": [
        "HTMLTableElement"
      ], 
      "shortname": "html"
    }
  }, 
  "detach()": {
    "detach()": {
      "args": [], 
      "for": [
        "Range", 
        "NodeIterator"
      ], 
      "shortname": "dom"
    }
  }, 
  "disable()": {
    "disable()": {
      "args": [], 
      "for": [
        "NavigationPreloadManager"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "disconnect()": {
    "disconnect()": {
      "args": [], 
      "for": [
        "MutationObserver", 
        "BluetoothRemoteGATTServer"
      ], 
      "shortname": "dom"
    }
  }, 
  "dispatchEvent()": {
    "dispatchEvent(event)": {
      "args": [
        "event"
      ], 
      "for": [
        "EventTarget"
      ], 
      "shortname": "dom"
    }
  }, 
  "div()": {
    "div(value)": {
      "args": [
        "value"
      ], 
      "for": [
        "CSSNumericValue"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "divide()": {
    "divide(double value)": {
      "args": [
        "double value"
      ], 
      "for": [
        "CSSLengthValue"
      ], 
      "shortname": "css-typed-om"
    }, 
    "divide(value)": {
      "args": [
        "value"
      ], 
      "for": [
        "CSSLengthValue", 
        "CSSNumericValue"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "document.write()": {
    "document.write(...)": {
      "args": [
        "..."
      ], 
      "for": [], 
      "shortname": "html"
    }
  }, 
  "document.writeln()": {
    "document.writeln(...)": {
      "args": [
        "..."
      ], 
      "for": [], 
      "shortname": "html"
    }
  }, 
  "drawFocusIfNeeded()": {
    "drawFocusIfNeeded(element)": {
      "args": [
        "element"
      ], 
      "for": [
        "CanvasUserInterface"
      ], 
      "shortname": "html"
    }
  }, 
  "drawImage()": {
    "drawImage(image, dx, dy, dw, dh)": {
      "args": [
        "image", 
        "dx", 
        "dy", 
        "dw", 
        "dh"
      ], 
      "for": [
        "CanvasDrawImage"
      ], 
      "shortname": "html"
    }, 
    "drawImage(image, sx, sy, sw, sh, dx, dy, dw, dh)": {
      "args": [
        "image", 
        "sx", 
        "sy", 
        "sw", 
        "sh", 
        "dx", 
        "dy", 
        "dw", 
        "dh"
      ], 
      "for": [
        "CanvasDrawImage"
      ], 
      "shortname": "html"
    }
  }, 
  "elementFromPoint()": {
    "elementFromPoint(x, y)": {
      "args": [
        "x", 
        "y"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "cssom-view"
    }
  }, 
  "elementsFromPoint()": {
    "elementsFromPoint(x, y)": {
      "args": [
        "x", 
        "y"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "cssom-view"
    }
  }, 
  "ellipse()": {
    "ellipse(x, y, radiusX, radiusY, rotation, startAngle, endAngle)": {
      "args": [
        "x", 
        "y", 
        "radiusX", 
        "radiusY", 
        "rotation", 
        "startAngle", 
        "endAngle"
      ], 
      "for": [
        "CanvasPath"
      ], 
      "shortname": "html"
    }
  }, 
  "enable()": {
    "enable()": {
      "args": [], 
      "for": [
        "NavigationPreloadManager"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "encode()": {
    "encode()": {
      "args": [], 
      "for": [
        "TextEncoder"
      ], 
      "shortname": "encoding"
    }, 
    "encode(input)": {
      "args": [
        "input"
      ], 
      "for": [
        "TextEncoder"
      ], 
      "shortname": "encoding"
    }
  }, 
  "end()": {
    "end(index)": {
      "args": [
        "index"
      ], 
      "for": [
        "TimeRanges"
      ], 
      "shortname": "html"
    }
  }, 
  "enqueue()": {
    "enqueue(chunk)": {
      "args": [
        "chunk"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "error()": {
    "error()": {
      "args": [], 
      "for": [
        "Response"
      ], 
      "shortname": "fetch"
    }, 
    "error(...data)": {
      "args": [
        "...data"
      ], 
      "for": [], 
      "shortname": "console"
    }, 
    "error(e)": {
      "args": [
        "e"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "escape()": {
    "escape(ident)": {
      "args": [
        "ident"
      ], 
      "for": [
        "CSS"
      ], 
      "shortname": "cssom"
    }
  }, 
  "estimate()": {
    "estimate()": {
      "args": [], 
      "for": [
        "StorageManager"
      ], 
      "shortname": "storage"
    }
  }, 
  "extractContents()": {
    "extractContents()": {
      "args": [], 
      "for": [
        "Range"
      ], 
      "shortname": "dom"
    }
  }, 
  "fastSeek()": {
    "fastSeek()": {
      "args": [], 
      "for": [
        "HTMLMediaElement"
      ], 
      "shortname": "html"
    }
  }, 
  "fetch()": {
    "fetch(input)": {
      "args": [
        "input"
      ], 
      "for": [
        "WindowOrWorkerGlobalScope"
      ], 
      "shortname": "fetch"
    }, 
    "fetch(input, init)": {
      "args": [
        "input", 
        "init"
      ], 
      "for": [
        "WindowOrWorkerGlobalScope"
      ], 
      "shortname": "fetch"
    }
  }, 
  "fill()": {
    "fill()": {
      "args": [], 
      "for": [
        "CanvasDrawPath"
      ], 
      "shortname": "html"
    }
  }, 
  "fillRect()": {
    "fillRect(x, y, w, h)": {
      "args": [
        "x", 
        "y", 
        "w", 
        "h"
      ], 
      "for": [
        "CanvasRect"
      ], 
      "shortname": "html"
    }
  }, 
  "fillText()": {
    "fillText()": {
      "args": [], 
      "for": [
        "CanvasText"
      ], 
      "shortname": "html"
    }
  }, 
  "findRule()": {
    "findRule(select)": {
      "args": [
        "select"
      ], 
      "for": [
        "CSSKeyframesRule"
      ], 
      "shortname": "css-animations"
    }
  }, 
  "finish()": {
    "finish()": {
      "args": [], 
      "for": [
        "Animation"
      ], 
      "shortname": "web-animations"
    }
  }, 
  "firstChild()": {
    "firstChild()": {
      "args": [], 
      "for": [
        "TreeWalker"
      ], 
      "shortname": "dom"
    }
  }, 
  "flipX()": {
    "flipX()": {
      "args": [], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }
  }, 
  "flipY()": {
    "flipY()": {
      "args": [], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }
  }, 
  "focus()": {
    "focus()": {
      "args": [], 
      "for": [
        "WindowClient", 
        "HTMLElement"
      ], 
      "shortname": "html"
    }
  }, 
  "forceSpellCheck()": {
    "forceSpellCheck()": {
      "args": [], 
      "for": [
        "HTMLElement"
      ], 
      "shortname": "html"
    }
  }, 
  "formData()": {
    "formData()": {
      "args": [], 
      "for": [
        "Body"
      ], 
      "shortname": "fetch"
    }
  }, 
  "forward()": {
    "forward()": {
      "args": [], 
      "for": [
        "History"
      ], 
      "shortname": "html"
    }
  }, 
  "from()": {
    "from(CSSCalcDictionary dictionary)": {
      "args": [
        "CSSCalcDictionary dictionary"
      ], 
      "for": [
        "CSSLengthValue"
      ], 
      "shortname": "css-typed-om"
    }, 
    "from(DOMString cssText)": {
      "args": [
        "DOMString cssText"
      ], 
      "for": [
        "CSSLengthValue"
      ], 
      "shortname": "css-typed-om"
    }, 
    "from(cssText)": {
      "args": [
        "cssText"
      ], 
      "for": [
        "CSSLengthValue", 
        "CSSNumericValue"
      ], 
      "shortname": "css-typed-om"
    }, 
    "from(dictionary)": {
      "args": [
        "dictionary"
      ], 
      "for": [
        "CSSLengthValue"
      ], 
      "shortname": "css-typed-om"
    }, 
    "from(double value, LengthType type)": {
      "args": [
        "double value", 
        "LengthType type"
      ], 
      "for": [
        "CSSLengthValue"
      ], 
      "shortname": "css-typed-om"
    }, 
    "from(value, type)": {
      "args": [
        "value", 
        "type"
      ], 
      "for": [
        "CSSLengthValue"
      ], 
      "shortname": "css-typed-om"
    }, 
    "from(value, unit)": {
      "args": [
        "value", 
        "unit"
      ], 
      "for": [
        "CSSNumericValue"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "fromFloat32Array()": {
    "fromFloat32Array(array32)": {
      "args": [
        "array32"
      ], 
      "for": [
        "DOMMatrixReadOnly", 
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }
  }, 
  "fromFloat64Array()": {
    "fromFloat64Array(array64)": {
      "args": [
        "array64"
      ], 
      "for": [
        "DOMMatrixReadOnly", 
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }
  }, 
  "fromMatrix()": {
    "fromMatrix()": {
      "args": [], 
      "for": [
        "DOMMatrixReadOnly", 
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }
  }, 
  "fromPoint()": {
    "fromPoint()": {
      "args": [], 
      "for": [
        "DOMPointReadOnly", 
        "DOMPoint"
      ], 
      "shortname": "geometry"
    }, 
    "fromPoint(other)": {
      "args": [
        "other"
      ], 
      "for": [
        "DOMPointReadOnly", 
        "DOMPoint"
      ], 
      "shortname": "geometry"
    }
  }, 
  "fromQuad()": {
    "fromQuad()": {
      "args": [], 
      "for": [
        "DOMQuad"
      ], 
      "shortname": "geometry"
    }
  }, 
  "fromRect()": {
    "fromRect()": {
      "args": [], 
      "for": [
        "DOMRect", 
        "DOMRectReadOnly", 
        "DOMQuad"
      ], 
      "shortname": "geometry"
    }
  }, 
  "get()": {
    "get()": {
      "args": [], 
      "for": [
        "CredentialsContainer", 
        "NamedFlowMap"
      ], 
      "shortname": "css-regions"
    }, 
    "get(flowName)": {
      "args": [
        "flowName"
      ], 
      "for": [
        "NamedFlowMap"
      ], 
      "shortname": "css-regions"
    }, 
    "get(id)": {
      "args": [
        "id"
      ], 
      "for": [
        "Clients"
      ], 
      "shortname": "service-workers"
    }, 
    "get(name)": {
      "args": [
        "name"
      ], 
      "for": [
        "Headers", 
        "FormData", 
        "URLSearchParams", 
        "CustomElementRegistry"
      ], 
      "shortname": "fetch"
    }, 
    "get(options)": {
      "args": [
        "options"
      ], 
      "for": [
        "CredentialsContainer"
      ], 
      "shortname": "webappsec-credential-management"
    }, 
    "get(property)": {
      "args": [
        "property"
      ], 
      "for": [
        "StylePropertyMapReadOnly"
      ], 
      "shortname": "css-typed-om"
    }, 
    "get(query)": {
      "args": [
        "query"
      ], 
      "for": [
        "IDBIndex", 
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "getAll()": {
    "getAll()": {
      "args": [], 
      "for": [
        "IDBIndex", 
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }, 
    "getAll(name)": {
      "args": [
        "name"
      ], 
      "for": [
        "FormData", 
        "URLSearchParams"
      ], 
      "shortname": "url"
    }, 
    "getAll(property)": {
      "args": [
        "property"
      ], 
      "for": [
        "StylePropertyMapReadOnly"
      ], 
      "shortname": "css-typed-om"
    }, 
    "getAll(query)": {
      "args": [
        "query"
      ], 
      "for": [
        "IDBIndex", 
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }, 
    "getAll(query, count)": {
      "args": [
        "query", 
        "count"
      ], 
      "for": [
        "IDBIndex", 
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "getAllKeys()": {
    "getAllKeys()": {
      "args": [], 
      "for": [
        "IDBIndex", 
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }, 
    "getAllKeys(query)": {
      "args": [
        "query"
      ], 
      "for": [
        "IDBIndex", 
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }, 
    "getAllKeys(query, count)": {
      "args": [
        "query", 
        "count"
      ], 
      "for": [
        "IDBIndex", 
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "getAllResponseHeaders()": {
    "getAllResponseHeaders()": {
      "args": [], 
      "for": [
        "XMLHttpRequest"
      ], 
      "shortname": "xhr"
    }
  }, 
  "getAnimations()": {
    "getAnimations()": {
      "args": [], 
      "for": [
        "Animatable", 
        "Document"
      ], 
      "shortname": "web-animations"
    }
  }, 
  "getAsFile()": {
    "getAsFile()": {
      "args": [], 
      "for": [
        "DataTransferItem"
      ], 
      "shortname": "html"
    }
  }, 
  "getAsString()": {
    "getAsString(callback)": {
      "args": [
        "callback"
      ], 
      "for": [
        "DataTransferItem"
      ], 
      "shortname": "html"
    }
  }, 
  "getAssertion()": {
    "getAssertion(assertionChallenge)": {
      "args": [
        "assertionChallenge"
      ], 
      "for": [
        "WebAuthentication"
      ], 
      "shortname": "webauthn"
    }, 
    "getAssertion(assertionChallenge, options)": {
      "args": [
        "assertionChallenge", 
        "options"
      ], 
      "for": [
        "WebAuthentication"
      ], 
      "shortname": "webauthn"
    }
  }, 
  "getAttribute()": {
    "getAttribute(qualifiedName)": {
      "args": [
        "qualifiedName"
      ], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "getAttributeNS()": {
    "getAttributeNS(namespace, localName)": {
      "args": [
        "namespace", 
        "localName"
      ], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "getAttributeNames()": {
    "getAttributeNames()": {
      "args": [], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "getAttributeNode()": {
    "getAttributeNode(qualifiedName)": {
      "args": [
        "qualifiedName"
      ], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "getAttributeNodeNS()": {
    "getAttributeNodeNS(namespace, localName)": {
      "args": [
        "namespace", 
        "localName"
      ], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "getAvailability()": {
    "getAvailability()": {
      "args": [], 
      "for": [
        "Bluetooth"
      ], 
      "shortname": "web-bluetooth"
    }
  }, 
  "getBattery()": {
    "getBattery()": {
      "args": [], 
      "for": [], 
      "shortname": "html"
    }
  }, 
  "getBoundingClientRect()": {
    "getBoundingClientRect()": {
      "args": [], 
      "for": [
        "Range", 
        "Element"
      ], 
      "shortname": "cssom-view"
    }
  }, 
  "getBounds()": {
    "getBounds()": {
      "args": [], 
      "for": [
        "DOMQuad"
      ], 
      "shortname": "geometry"
    }
  }, 
  "getBoxQuads()": {
    "getBoxQuads()": {
      "args": [], 
      "for": [
        "GeometryUtils"
      ], 
      "shortname": "cssom-view"
    }, 
    "getBoxQuads(options)": {
      "args": [
        "options"
      ], 
      "for": [
        "GeometryUtils"
      ], 
      "shortname": "cssom-view"
    }
  }, 
  "getByType()": {
    "getByType()": {
      "args": [], 
      "for": [
        "CSSPseudoElementList"
      ], 
      "shortname": "css-pseudo"
    }, 
    "getByType(type)": {
      "args": [
        "type"
      ], 
      "for": [
        "CSSPseudoElementList"
      ], 
      "shortname": "css-pseudo"
    }
  }, 
  "getCharacteristic()": {
    "getCharacteristic(characteristic)": {
      "args": [
        "characteristic"
      ], 
      "for": [
        "BluetoothRemoteGATTService"
      ], 
      "shortname": "web-bluetooth"
    }, 
    "getCharacteristic(name)": {
      "args": [
        "name"
      ], 
      "for": [
        "BluetoothUUID"
      ], 
      "shortname": "web-bluetooth"
    }
  }, 
  "getCharacteristics()": {
    "getCharacteristics(characteristic)": {
      "args": [
        "characteristic"
      ], 
      "for": [
        "BluetoothRemoteGATTService"
      ], 
      "shortname": "web-bluetooth"
    }
  }, 
  "getClientRect()": {
    "getClientRect()": {
      "args": [], 
      "for": [
        "CaretPosition"
      ], 
      "shortname": "cssom-view"
    }
  }, 
  "getClientRects()": {
    "getClientRects()": {
      "args": [], 
      "for": [
        "Range", 
        "Element"
      ], 
      "shortname": "cssom-view"
    }
  }, 
  "getComputedStyle()": {
    "getComputedStyle(elt)": {
      "args": [
        "elt"
      ], 
      "for": [
        "Window"
      ], 
      "shortname": "cssom"
    }, 
    "getComputedStyle(elt, pseudoElt)": {
      "args": [
        "elt", 
        "pseudoElt"
      ], 
      "for": [
        "Window"
      ], 
      "shortname": "cssom"
    }
  }, 
  "getComputedStyleMap()": {
    "getComputedStyleMap(Element, optional DOMString?)": {
      "args": [
        "Element", 
        "optional DOMString?"
      ], 
      "for": [
        "Window"
      ], 
      "shortname": "css-typed-om"
    }, 
    "getComputedStyleMap(element)": {
      "args": [
        "element"
      ], 
      "for": [
        "Window"
      ], 
      "shortname": "css-typed-om"
    }, 
    "getComputedStyleMap(element, pseudoElt)": {
      "args": [
        "element", 
        "pseudoElt"
      ], 
      "for": [
        "Window"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "getComputedTiming()": {
    "getComputedTiming()": {
      "args": [], 
      "for": [
        "AnimationEffectReadOnly"
      ], 
      "shortname": "web-animations"
    }
  }, 
  "getContent()": {
    "getContent()": {
      "args": [], 
      "for": [
        "NamedFlow"
      ], 
      "shortname": "css-regions"
    }
  }, 
  "getContext()": {
    "getContext(contextId, arguments...)": {
      "args": [
        "contextId", 
        "arguments..."
      ], 
      "for": [
        "OffscreenCanvas", 
        "HTMLCanvasElement"
      ], 
      "shortname": "html"
    }
  }, 
  "getCueById()": {
    "getCueById(id)": {
      "args": [
        "id"
      ], 
      "for": [
        "TextTrackCueList"
      ], 
      "shortname": "html"
    }
  }, 
  "getData()": {
    "getData(format)": {
      "args": [
        "format"
      ], 
      "for": [
        "DataTransfer"
      ], 
      "shortname": "html"
    }
  }, 
  "getDescriptor()": {
    "getDescriptor(descriptor)": {
      "args": [
        "descriptor"
      ], 
      "for": [
        "BluetoothRemoteGATTCharacteristic"
      ], 
      "shortname": "web-bluetooth"
    }, 
    "getDescriptor(name)": {
      "args": [
        "name"
      ], 
      "for": [
        "BluetoothUUID"
      ], 
      "shortname": "web-bluetooth"
    }
  }, 
  "getDescriptors()": {
    "getDescriptors(descriptor)": {
      "args": [
        "descriptor"
      ], 
      "for": [
        "BluetoothRemoteGATTCharacteristic"
      ], 
      "shortname": "web-bluetooth"
    }
  }, 
  "getDevices()": {
    "getDevices()": {
      "args": [], 
      "for": [
        "USB"
      ], 
      "shortname": "webusb"
    }
  }, 
  "getElementById()": {
    "getElementById()": {
      "args": [], 
      "for": [], 
      "shortname": "html"
    }, 
    "getElementById(elementId)": {
      "args": [
        "elementId"
      ], 
      "for": [
        "NonElementParentNode"
      ], 
      "shortname": "dom"
    }
  }, 
  "getElementsByClassName()": {
    "getElementsByClassName()": {
      "args": [], 
      "for": [], 
      "shortname": "html"
    }, 
    "getElementsByClassName(classNames)": {
      "args": [
        "classNames"
      ], 
      "for": [
        "Document", 
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "getElementsByName()": {
    "getElementsByName(name)": {
      "args": [
        "name"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "html"
    }
  }, 
  "getElementsByTagName()": {
    "getElementsByTagName(qualifiedName)": {
      "args": [
        "qualifiedName"
      ], 
      "for": [
        "Document", 
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "getElementsByTagNameNS()": {
    "getElementsByTagNameNS(namespace, localName)": {
      "args": [
        "namespace", 
        "localName"
      ], 
      "for": [
        "Document", 
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "getFeature()": {
    "getFeature()": {
      "args": [], 
      "for": [
        "Node", 
        "DOMImplementation"
      ], 
      "shortname": "dom"
    }
  }, 
  "getFragmentInformation()": {
    "getFragmentInformation(filter)": {
      "args": [
        "filter"
      ], 
      "for": [
        "Element"
      ], 
      "shortname": "box-tree-api"
    }
  }, 
  "getImageData()": {
    "getImageData(sx, sy, sw, sh)": {
      "args": [
        "sx", 
        "sy", 
        "sw", 
        "sh"
      ], 
      "for": [
        "CanvasImageData"
      ], 
      "shortname": "html"
    }
  }, 
  "getIncludedService()": {
    "getIncludedService(service)": {
      "args": [
        "service"
      ], 
      "for": [
        "BluetoothRemoteGATTService"
      ], 
      "shortname": "web-bluetooth"
    }
  }, 
  "getIncludedServices()": {
    "getIncludedServices(service)": {
      "args": [
        "service"
      ], 
      "for": [
        "BluetoothRemoteGATTService"
      ], 
      "shortname": "web-bluetooth"
    }
  }, 
  "getItem()": {
    "getItem(key)": {
      "args": [
        "key"
      ], 
      "for": [
        "Storage"
      ], 
      "shortname": "html"
    }
  }, 
  "getKey()": {
    "getKey(query)": {
      "args": [
        "query"
      ], 
      "for": [
        "IDBIndex", 
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "getKeyframes()": {
    "getKeyframes()": {
      "args": [], 
      "for": [
        "KeyframeEffectReadOnly"
      ], 
      "shortname": "web-animations"
    }
  }, 
  "getLineDash()": {
    "getLineDash()": {
      "args": [], 
      "for": [
        "CanvasPathDrawingStyles"
      ], 
      "shortname": "html"
    }
  }, 
  "getModifierState()": {
    "getModifierState(keyArg)": {
      "args": [
        "keyArg"
      ], 
      "for": [
        "KeyboardEvent", 
        "MouseEvent"
      ], 
      "shortname": "ui-events"
    }
  }, 
  "getNamedItem()": {
    "getNamedItem(qualifiedName)": {
      "args": [
        "qualifiedName"
      ], 
      "for": [
        "NamedNodeMap"
      ], 
      "shortname": "dom"
    }
  }, 
  "getNamedItemNS()": {
    "getNamedItemNS(namespace, localName)": {
      "args": [
        "namespace", 
        "localName"
      ], 
      "for": [
        "NamedNodeMap"
      ], 
      "shortname": "dom"
    }
  }, 
  "getPrimaryService()": {
    "getPrimaryService(service)": {
      "args": [
        "service"
      ], 
      "for": [
        "BluetoothRemoteGATTServer"
      ], 
      "shortname": "web-bluetooth"
    }
  }, 
  "getPrimaryServices()": {
    "getPrimaryServices()": {
      "args": [], 
      "for": [
        "BluetoothRemoteGATTServer"
      ], 
      "shortname": "web-bluetooth"
    }, 
    "getPrimaryServices(service)": {
      "args": [
        "service"
      ], 
      "for": [
        "BluetoothRemoteGATTServer"
      ], 
      "shortname": "web-bluetooth"
    }
  }, 
  "getProperties()": {
    "getProperties()": {
      "args": [], 
      "for": [
        "StylePropertyMapReadOnly", 
        "StylePropertyMap"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "getPropertyPriority()": {
    "getPropertyPriority(property)": {
      "args": [
        "property"
      ], 
      "for": [
        "CSSStyleDeclaration"
      ], 
      "shortname": "cssom"
    }
  }, 
  "getPropertyValue()": {
    "getPropertyValue(property)": {
      "args": [
        "property"
      ], 
      "for": [
        "CSSStyleDeclaration"
      ], 
      "shortname": "cssom"
    }
  }, 
  "getPseudoElements()": {
    "getPseudoElements()": {
      "args": [], 
      "for": [
        "Window"
      ], 
      "shortname": "css-pseudo"
    }, 
    "getPseudoElements(elt, type)": {
      "args": [
        "elt", 
        "type"
      ], 
      "for": [
        "Window"
      ], 
      "shortname": "css-pseudo"
    }
  }, 
  "getReader()": {
    "getReader({ mode } = {})": {
      "args": [
        "{ mode } = {}"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "getRegionFlowRanges()": {
    "getRegionFlowRanges()": {
      "args": [], 
      "for": [
        "Region"
      ], 
      "shortname": "css-regions"
    }
  }, 
  "getRegions()": {
    "getRegions()": {
      "args": [], 
      "for": [
        "NamedFlow"
      ], 
      "shortname": "css-regions"
    }
  }, 
  "getRegionsByContent()": {
    "getRegionsByContent()": {
      "args": [], 
      "for": [
        "NamedFlow"
      ], 
      "shortname": "css-regions"
    }, 
    "getRegionsByContent(node)": {
      "args": [
        "node"
      ], 
      "for": [
        "NamedFlow"
      ], 
      "shortname": "css-regions"
    }
  }, 
  "getRegistration()": {
    "getRegistration()": {
      "args": [], 
      "for": [
        "ServiceWorkerContainer"
      ], 
      "shortname": "service-workers"
    }, 
    "getRegistration(clientURL)": {
      "args": [
        "clientURL"
      ], 
      "for": [
        "ServiceWorkerContainer"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "getRegistrations()": {
    "getRegistrations()": {
      "args": [], 
      "for": [
        "ServiceWorkerContainer"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "getResponseHeader()": {
    "getResponseHeader(name)": {
      "args": [
        "name"
      ], 
      "for": [
        "XMLHttpRequest"
      ], 
      "shortname": "xhr"
    }
  }, 
  "getRootNode()": {
    "getRootNode()": {
      "args": [], 
      "for": [
        "Node"
      ], 
      "shortname": "dom"
    }, 
    "getRootNode(options)": {
      "args": [
        "options"
      ], 
      "for": [
        "Node"
      ], 
      "shortname": "dom"
    }
  }, 
  "getSVGDocument()": {
    "getSVGDocument()": {
      "args": [], 
      "for": [
        "HTMLObjectElement"
      ], 
      "shortname": "html"
    }
  }, 
  "getService()": {
    "getService(name)": {
      "args": [
        "name"
      ], 
      "for": [
        "BluetoothUUID"
      ], 
      "shortname": "web-bluetooth"
    }
  }, 
  "getStartDate()": {
    "getStartDate()": {
      "args": [], 
      "for": [
        "HTMLMediaElement"
      ], 
      "shortname": "html"
    }
  }, 
  "getState()": {
    "getState()": {
      "args": [], 
      "for": [
        "NavigationPreloadManager"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "getTags()": {
    "getTags()": {
      "args": [], 
      "for": [
        "SyncManager"
      ], 
      "shortname": "background-sync"
    }
  }, 
  "getTrackById()": {
    "getTrackById(id)": {
      "args": [
        "id"
      ], 
      "for": [
        "TextTrackList"
      ], 
      "shortname": "html"
    }
  }, 
  "getTransform()": {
    "getTransform()": {
      "args": [], 
      "for": [
        "CanvasTransform"
      ], 
      "shortname": "html"
    }
  }, 
  "getUserData()": {
    "getUserData()": {
      "args": [], 
      "for": [
        "Node"
      ], 
      "shortname": "dom"
    }
  }, 
  "getUserMedia()": {
    "getUserMedia()": {
      "args": [], 
      "for": [], 
      "shortname": "html"
    }
  }, 
  "getWriter()": {
    "getWriter()": {
      "args": [], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "go()": {
    "go()": {
      "args": [], 
      "for": [
        "History"
      ], 
      "shortname": "html"
    }
  }, 
  "group()": {
    "group(...data)": {
      "args": [
        "...data"
      ], 
      "for": [], 
      "shortname": "console"
    }
  }, 
  "groupCollapsed()": {
    "groupCollapsed(...data)": {
      "args": [
        "...data"
      ], 
      "for": [], 
      "shortname": "console"
    }
  }, 
  "groupEnd()": {
    "groupEnd()": {
      "args": [], 
      "for": [], 
      "shortname": "console"
    }
  }, 
  "handleEvent()": {
    "handleEvent(event)": {
      "args": [
        "event"
      ], 
      "for": [
        "EventListener"
      ], 
      "shortname": "dom"
    }
  }, 
  "has()": {
    "has()": {
      "args": [], 
      "for": [
        "NamedFlowMap"
      ], 
      "shortname": "css-regions"
    }, 
    "has(cacheName)": {
      "args": [
        "cacheName"
      ], 
      "for": [
        "CacheStorage"
      ], 
      "shortname": "service-workers"
    }, 
    "has(flowName)": {
      "args": [
        "flowName"
      ], 
      "for": [
        "NamedFlowMap"
      ], 
      "shortname": "css-regions"
    }, 
    "has(name)": {
      "args": [
        "name"
      ], 
      "for": [
        "Headers", 
        "FormData", 
        "URLSearchParams"
      ], 
      "shortname": "fetch"
    }, 
    "has(property)": {
      "args": [
        "property"
      ], 
      "for": [
        "StylePropertyMapReadOnly"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "hasAttribute()": {
    "hasAttribute(qualifiedName)": {
      "args": [
        "qualifiedName"
      ], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "hasAttributeNS()": {
    "hasAttributeNS(namespace, localName)": {
      "args": [
        "namespace", 
        "localName"
      ], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "hasAttributes()": {
    "hasAttributes()": {
      "args": [], 
      "for": [
        "Node", 
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "hasChildNodes()": {
    "hasChildNodes()": {
      "args": [], 
      "for": [
        "Node"
      ], 
      "shortname": "dom"
    }
  }, 
  "hasFeature()": {
    "hasFeature()": {
      "args": [], 
      "for": [
        "DOMImplementation"
      ], 
      "shortname": "dom"
    }
  }, 
  "hasFocus()": {
    "hasFocus()": {
      "args": [], 
      "for": [
        "Document"
      ], 
      "shortname": "html"
    }
  }, 
  "import()": {
    "import(moduleURL)": {
      "args": [
        "moduleURL"
      ], 
      "for": [
        "Worklet"
      ], 
      "shortname": "worklets"
    }
  }, 
  "importNode()": {
    "importNode()": {
      "args": [], 
      "for": [], 
      "shortname": "html"
    }, 
    "importNode(node)": {
      "args": [
        "node"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }, 
    "importNode(node, deep)": {
      "args": [
        "node", 
        "deep"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }
  }, 
  "importScripts()": {
    "importScripts(urls)": {
      "args": [
        "urls"
      ], 
      "for": [
        "ServiceWorkerGlobalScope", 
        "WorkerGlobalScope"
      ], 
      "shortname": "html"
    }
  }, 
  "includes()": {
    "includes(key)": {
      "args": [
        "key"
      ], 
      "for": [
        "IDBKeyRange"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "index()": {
    "index(name)": {
      "args": [
        "name"
      ], 
      "for": [
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "info()": {
    "info(...data)": {
      "args": [
        "...data"
      ], 
      "for": [], 
      "shortname": "console"
    }
  }, 
  "initCustomEvent()": {
    "initCustomEvent(type, bubbles, cancelable, detail)": {
      "args": [
        "type", 
        "bubbles", 
        "cancelable", 
        "detail"
      ], 
      "for": [
        "CustomEvent"
      ], 
      "shortname": "dom"
    }
  }, 
  "initEvent()": {
    "initEvent()": {
      "args": [], 
      "for": [], 
      "shortname": "html"
    }, 
    "initEvent(type, bubbles, cancelable)": {
      "args": [
        "type", 
        "bubbles", 
        "cancelable"
      ], 
      "for": [
        "Event"
      ], 
      "shortname": "dom"
    }
  }, 
  "initMessageEvent()": {
    "initMessageEvent()": {
      "args": [], 
      "for": [
        "MessageEvent"
      ], 
      "shortname": "html"
    }
  }, 
  "insertAdjacentElement()": {
    "insertAdjacentElement(where, element)": {
      "args": [
        "where", 
        "element"
      ], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "insertAdjacentText()": {
    "insertAdjacentText(where, data)": {
      "args": [
        "where", 
        "data"
      ], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "insertBefore()": {
    "insertBefore(node, child)": {
      "args": [
        "node", 
        "child"
      ], 
      "for": [
        "Node"
      ], 
      "shortname": "dom"
    }
  }, 
  "insertCell()": {
    "insertCell()": {
      "args": [], 
      "for": [
        "HTMLTableRowElement"
      ], 
      "shortname": "html"
    }
  }, 
  "insertData()": {
    "insertData(offset, data)": {
      "args": [
        "offset", 
        "data"
      ], 
      "for": [
        "CharacterData"
      ], 
      "shortname": "dom"
    }
  }, 
  "insertNode()": {
    "insertNode(node)": {
      "args": [
        "node"
      ], 
      "for": [
        "Range"
      ], 
      "shortname": "dom"
    }
  }, 
  "insertRow()": {
    "insertRow()": {
      "args": [], 
      "for": [
        "HTMLTableSectionElement", 
        "HTMLTableElement"
      ], 
      "shortname": "html"
    }
  }, 
  "insertRule()": {
    "insertRule(rule, index)": {
      "args": [
        "rule", 
        "index"
      ], 
      "for": [
        "CSSGroupingRule", 
        "CSSStyleSheet"
      ], 
      "shortname": "css-conditional"
    }
  }, 
  "intersectsNode()": {
    "intersectsNode(node)": {
      "args": [
        "node"
      ], 
      "for": [
        "Range"
      ], 
      "shortname": "dom"
    }
  }, 
  "inverse()": {
    "inverse()": {
      "args": [], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }
  }, 
  "invertSelf()": {
    "invertSelf()": {
      "args": [], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }
  }, 
  "isContentHandlerRegistered()": {
    "isContentHandlerRegistered()": {
      "args": [], 
      "for": [
        "NavigatorContentUtils"
      ], 
      "shortname": "html"
    }
  }, 
  "isDefaultNamespace()": {
    "isDefaultNamespace(namespace)": {
      "args": [
        "namespace"
      ], 
      "for": [
        "Node"
      ], 
      "shortname": "dom"
    }
  }, 
  "isEqualNode()": {
    "isEqualNode(otherNode)": {
      "args": [
        "otherNode"
      ], 
      "for": [
        "Node"
      ], 
      "shortname": "dom"
    }
  }, 
  "isPointInPath()": {
    "isPointInPath()": {
      "args": [], 
      "for": [
        "CanvasDrawPath"
      ], 
      "shortname": "html"
    }
  }, 
  "isPointInRange()": {
    "isPointInRange(node, offset)": {
      "args": [
        "node", 
        "offset"
      ], 
      "for": [
        "Range"
      ], 
      "shortname": "dom"
    }
  }, 
  "isPointInStroke()": {
    "isPointInStroke()": {
      "args": [], 
      "for": [
        "CanvasDrawPath"
      ], 
      "shortname": "html"
    }
  }, 
  "isProtocolHandlerRegistered()": {
    "isProtocolHandlerRegistered()": {
      "args": [], 
      "for": [
        "NavigatorContentUtils"
      ], 
      "shortname": "html"
    }
  }, 
  "isSameNode()": {
    "isSameNode(otherNode)": {
      "args": [
        "otherNode"
      ], 
      "for": [
        "Node"
      ], 
      "shortname": "dom"
    }
  }, 
  "isochronousTransferIn()": {
    "isochronousTransferIn(endpointNumber, packetLengths)": {
      "args": [
        "endpointNumber", 
        "packetLengths"
      ], 
      "for": [
        "USBDevice"
      ], 
      "shortname": "webusb"
    }
  }, 
  "isochronousTransferOut()": {
    "isochronousTransferOut(endpointNumber, data, packetLengths)": {
      "args": [
        "endpointNumber", 
        "data", 
        "packetLengths"
      ], 
      "for": [
        "USBDevice"
      ], 
      "shortname": "webusb"
    }
  }, 
  "item()": {
    "item()": {
      "args": [], 
      "for": [
        "DOMRectList", 
        "Plugin", 
        "CSSPseudoElementList", 
        "HTMLAllCollection"
      ], 
      "shortname": "css-pseudo"
    }, 
    "item(index)": {
      "args": [
        "index"
      ], 
      "for": [
        "NodeList", 
        "CSSPseudoElementList", 
        "DOMTokenList", 
        "StyleSheetList", 
        "NamedNodeMap", 
        "FileList", 
        "CSSStyleDeclaration", 
        "HTMLSelectElement", 
        "CSSRuleList", 
        "MediaList", 
        "DOMStringList", 
        "HTMLCollection"
      ], 
      "shortname": "css-pseudo"
    }
  }, 
  "json()": {
    "json()": {
      "args": [], 
      "for": [
        "Body"
      ], 
      "shortname": "fetch"
    }
  }, 
  "key()": {
    "key(n)": {
      "args": [
        "n"
      ], 
      "for": [
        "Storage"
      ], 
      "shortname": "html"
    }
  }, 
  "keys()": {
    "keys()": {
      "args": [], 
      "for": [
        "CacheStorage", 
        "Cache"
      ], 
      "shortname": "service-workers"
    }, 
    "keys(request)": {
      "args": [
        "request"
      ], 
      "for": [
        "Cache"
      ], 
      "shortname": "service-workers"
    }, 
    "keys(request, options)": {
      "args": [
        "request", 
        "options"
      ], 
      "for": [
        "Cache"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "lastChild()": {
    "lastChild()": {
      "args": [], 
      "for": [
        "TreeWalker"
      ], 
      "shortname": "dom"
    }
  }, 
  "layoutNextFragment()": {
    "layoutNextFragment(space, breakToken)": {
      "args": [
        "space", 
        "breakToken"
      ], 
      "for": [
        "LayoutChild"
      ], 
      "shortname": "css-layout-api"
    }
  }, 
  "layoutNow()": {
    "layoutNow()": {
      "args": [], 
      "for": [
        "Document"
      ], 
      "shortname": "box-tree-api"
    }
  }, 
  "lineTo()": {
    "lineTo(x, y)": {
      "args": [
        "x", 
        "y"
      ], 
      "for": [
        "CanvasPath"
      ], 
      "shortname": "html"
    }
  }, 
  "load()": {
    "load()": {
      "args": [], 
      "for": [
        "HTMLMediaElement", 
        "FontFace", 
        "FontFaceSet"
      ], 
      "shortname": "css-font-loading"
    }, 
    "load(font)": {
      "args": [
        "font"
      ], 
      "for": [
        "FontFaceSet"
      ], 
      "shortname": "css-font-loading"
    }, 
    "load(font, text)": {
      "args": [
        "font", 
        "text"
      ], 
      "for": [
        "FontFaceSet"
      ], 
      "shortname": "css-font-loading"
    }
  }, 
  "log()": {
    "log(...data)": {
      "args": [
        "...data"
      ], 
      "for": [], 
      "shortname": "console"
    }
  }, 
  "lookupNamespaceURI()": {
    "lookupNamespaceURI(prefix)": {
      "args": [
        "prefix"
      ], 
      "for": [
        "Node"
      ], 
      "shortname": "dom"
    }
  }, 
  "lookupPrefix()": {
    "lookupPrefix(namespace)": {
      "args": [
        "namespace"
      ], 
      "for": [
        "Node"
      ], 
      "shortname": "dom"
    }
  }, 
  "lowerBound()": {
    "lowerBound(lower)": {
      "args": [
        "lower"
      ], 
      "for": [
        "IDBKeyRange"
      ], 
      "shortname": "indexeddb"
    }, 
    "lowerBound(lower, lowerOpen)": {
      "args": [
        "lower", 
        "lowerOpen"
      ], 
      "for": [
        "IDBKeyRange"
      ], 
      "shortname": "indexeddb"
    }, 
    "lowerBound(lower, open)": {
      "args": [
        "lower", 
        "open"
      ], 
      "for": [
        "IDBKeyRange"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "makeCredential()": {
    "makeCredential(accountInformation, cryptoParameters, attestationChallenge)": {
      "args": [
        "accountInformation", 
        "cryptoParameters", 
        "attestationChallenge"
      ], 
      "for": [
        "WebAuthentication"
      ], 
      "shortname": "webauthn"
    }, 
    "makeCredential(accountInformation, cryptoParameters, attestationChallenge, options)": {
      "args": [
        "accountInformation", 
        "cryptoParameters", 
        "attestationChallenge", 
        "options"
      ], 
      "for": [
        "WebAuthentication"
      ], 
      "shortname": "webauthn"
    }
  }, 
  "match()": {
    "match(request)": {
      "args": [
        "request"
      ], 
      "for": [
        "CacheStorage", 
        "Cache"
      ], 
      "shortname": "service-workers"
    }, 
    "match(request, options)": {
      "args": [
        "request", 
        "options"
      ], 
      "for": [
        "CacheStorage", 
        "Cache"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "matchAll()": {
    "matchAll()": {
      "args": [], 
      "for": [
        "Cache", 
        "Clients"
      ], 
      "shortname": "service-workers"
    }, 
    "matchAll(options)": {
      "args": [
        "options"
      ], 
      "for": [
        "Clients"
      ], 
      "shortname": "service-workers"
    }, 
    "matchAll(request)": {
      "args": [
        "request"
      ], 
      "for": [
        "Cache"
      ], 
      "shortname": "service-workers"
    }, 
    "matchAll(request, options)": {
      "args": [
        "request", 
        "options"
      ], 
      "for": [
        "Cache"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "matchMedia()": {
    "matchMedia(query)": {
      "args": [
        "query"
      ], 
      "for": [
        "Window"
      ], 
      "shortname": "cssom-view"
    }
  }, 
  "matches()": {
    "matches(selectors)": {
      "args": [
        "selectors"
      ], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "matrixTransform()": {
    "matrixTransform()": {
      "args": [], 
      "for": [
        "DOMPointReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "matrixTransform(matrix)": {
      "args": [
        "matrix"
      ], 
      "for": [
        "DOMPointReadOnly"
      ], 
      "shortname": "geometry"
    }
  }, 
  "measureElement()": {
    "measureElement(element)": {
      "args": [
        "element"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "font-metrics-api"
    }
  }, 
  "measureText()": {
    "measureText()": {
      "args": [], 
      "for": [
        "CanvasText"
      ], 
      "shortname": "html"
    }, 
    "measureText(text, styleMap)": {
      "args": [
        "text", 
        "styleMap"
      ], 
      "for": [
        "Document"
      ], 
      "shortname": "font-metrics-api"
    }
  }, 
  "moveBy()": {
    "moveBy(x, y)": {
      "args": [
        "x", 
        "y"
      ], 
      "for": [
        "Window"
      ], 
      "shortname": "cssom-view"
    }
  }, 
  "moveTo()": {
    "moveTo(x, y)": {
      "args": [
        "x", 
        "y"
      ], 
      "for": [
        "Window", 
        "CanvasPath"
      ], 
      "shortname": "cssom-view"
    }
  }, 
  "mul()": {
    "mul(value)": {
      "args": [
        "value"
      ], 
      "for": [
        "CSSNumericValue"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "multiply()": {
    "multiply()": {
      "args": [], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "multiply(double value)": {
      "args": [
        "double value"
      ], 
      "for": [
        "CSSLengthValue"
      ], 
      "shortname": "css-typed-om"
    }, 
    "multiply(other)": {
      "args": [
        "other"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "multiply(value)": {
      "args": [
        "value"
      ], 
      "for": [
        "CSSLengthValue", 
        "CSSNumericValue"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "multiplySelf()": {
    "multiplySelf()": {
      "args": [], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "multiplySelf(other)": {
      "args": [
        "other"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }
  }, 
  "namedItem()": {
    "namedItem()": {
      "args": [], 
      "for": [
        "Plugin"
      ], 
      "shortname": "html"
    }, 
    "namedItem(key)": {
      "args": [
        "key"
      ], 
      "for": [
        "HTMLCollection"
      ], 
      "shortname": "dom"
    }, 
    "namedItem(name)": {
      "args": [
        "name"
      ], 
      "for": [
        "HTMLAllCollection", 
        "HTMLSelectElement", 
        "HTMLCollection", 
        "HTMLFormControlsCollection"
      ], 
      "shortname": "dom"
    }
  }, 
  "navigate()": {
    "navigate()": {
      "args": [], 
      "for": [
        "WindowClient"
      ], 
      "shortname": "service-workers"
    }, 
    "navigate(url)": {
      "args": [
        "url"
      ], 
      "for": [
        "WindowClient"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "navigator.javaEnabled()": {
    "navigator.javaEnabled()": {
      "args": [], 
      "for": [], 
      "shortname": "html"
    }
  }, 
  "nextNode()": {
    "nextNode()": {
      "args": [], 
      "for": [
        "TreeWalker", 
        "NodeIterator"
      ], 
      "shortname": "dom"
    }
  }, 
  "nextSibling()": {
    "nextSibling()": {
      "args": [], 
      "for": [
        "TreeWalker"
      ], 
      "shortname": "dom"
    }
  }, 
  "normalize()": {
    "normalize()": {
      "args": [], 
      "for": [
        "Node"
      ], 
      "shortname": "dom"
    }
  }, 
  "normalizeDocument()": {
    "normalizeDocument()": {
      "args": [], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }
  }, 
  "now()": {
    "now()": {
      "args": [], 
      "for": [], 
      "shortname": "html"
    }
  }, 
  "objectStore()": {
    "objectStore(name)": {
      "args": [
        "name"
      ], 
      "for": [
        "IDBTransaction"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "observe()": {
    "observe(target)": {
      "args": [
        "target"
      ], 
      "for": [
        "MutationObserver"
      ], 
      "shortname": "dom"
    }, 
    "observe(target, options)": {
      "args": [
        "target", 
        "options"
      ], 
      "for": [
        "MutationObserver"
      ], 
      "shortname": "dom"
    }
  }, 
  "only()": {
    "only(value)": {
      "args": [
        "value"
      ], 
      "for": [
        "IDBKeyRange"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "open()": {
    "open()": {
      "args": [], 
      "for": [
        "Window", 
        "USBDevice"
      ], 
      "shortname": "html"
    }, 
    "open(cacheName)": {
      "args": [
        "cacheName"
      ], 
      "for": [
        "CacheStorage"
      ], 
      "shortname": "service-workers"
    }, 
    "open(method, url)": {
      "args": [
        "method", 
        "url"
      ], 
      "for": [
        "XMLHttpRequest"
      ], 
      "shortname": "xhr"
    }, 
    "open(method, url, async)": {
      "args": [
        "method", 
        "url", 
        "async"
      ], 
      "for": [
        "XMLHttpRequest"
      ], 
      "shortname": "xhr"
    }, 
    "open(method, url, async, username)": {
      "args": [
        "method", 
        "url", 
        "async", 
        "username"
      ], 
      "for": [
        "XMLHttpRequest"
      ], 
      "shortname": "xhr"
    }, 
    "open(method, url, async, username, password)": {
      "args": [
        "method", 
        "url", 
        "async", 
        "username", 
        "password"
      ], 
      "for": [
        "XMLHttpRequest"
      ], 
      "shortname": "xhr"
    }, 
    "open(name)": {
      "args": [
        "name"
      ], 
      "for": [
        "IDBFactory"
      ], 
      "shortname": "indexeddb"
    }, 
    "open(name, version)": {
      "args": [
        "name", 
        "version"
      ], 
      "for": [
        "IDBFactory"
      ], 
      "shortname": "indexeddb"
    }, 
    "open(url, target, features)": {
      "args": [
        "url", 
        "target", 
        "features"
      ], 
      "for": [
        "Window"
      ], 
      "shortname": "html"
    }
  }, 
  "openCursor()": {
    "openCursor()": {
      "args": [], 
      "for": [
        "IDBIndex", 
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }, 
    "openCursor(query)": {
      "args": [
        "query"
      ], 
      "for": [
        "IDBIndex", 
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }, 
    "openCursor(query, direction)": {
      "args": [
        "query", 
        "direction"
      ], 
      "for": [
        "IDBIndex", 
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "openKeyCursor()": {
    "openKeyCursor()": {
      "args": [], 
      "for": [
        "IDBIndex", 
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }, 
    "openKeyCursor(query)": {
      "args": [
        "query"
      ], 
      "for": [
        "IDBIndex", 
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }, 
    "openKeyCursor(query, direction)": {
      "args": [
        "query", 
        "direction"
      ], 
      "for": [
        "IDBIndex", 
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "openWindow()": {
    "openWindow(url)": {
      "args": [
        "url"
      ], 
      "for": [
        "Clients"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "overrideMimeType()": {
    "overrideMimeType(mime)": {
      "args": [
        "mime"
      ], 
      "for": [
        "XMLHttpRequest"
      ], 
      "shortname": "xhr"
    }
  }, 
  "parentNode()": {
    "parentNode()": {
      "args": [], 
      "for": [
        "TreeWalker"
      ], 
      "shortname": "dom"
    }
  }, 
  "parse()": {
    "parse(DOMString property, DOMString cssText)": {
      "args": [
        "DOMString property", 
        "DOMString cssText"
      ], 
      "for": [
        "CSSStyleValue"
      ], 
      "shortname": "css-typed-om"
    }, 
    "parse(property, cssText)": {
      "args": [
        "property", 
        "cssText"
      ], 
      "for": [
        "CSSStyleValue"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "pause()": {
    "pause()": {
      "args": [], 
      "for": [
        "Animation", 
        "HTMLMediaElement"
      ], 
      "shortname": "html"
    }
  }, 
  "persist()": {
    "persist()": {
      "args": [], 
      "for": [
        "StorageManager"
      ], 
      "shortname": "storage"
    }
  }, 
  "persisted()": {
    "persisted()": {
      "args": [], 
      "for": [
        "StorageManager"
      ], 
      "shortname": "storage"
    }
  }, 
  "pipeThrough()": {
    "pipeThrough(transform, options)": {
      "args": [
        "transform", 
        "options"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "pipeTo()": {
    "pipeTo(dest, options)": {
      "args": [
        "dest", 
        "options"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "play()": {
    "play()": {
      "args": [], 
      "for": [
        "Animation", 
        "HTMLMediaElement"
      ], 
      "shortname": "html"
    }
  }, 
  "postMessage()": {
    "postMessage()": {
      "args": [], 
      "for": [
        "Worker", 
        "DedicatedWorkerGlobalScope"
      ], 
      "shortname": "html"
    }, 
    "postMessage(message)": {
      "args": [
        "message"
      ], 
      "for": [
        "Client", 
        "MessagePort", 
        "BroadcastChannel"
      ], 
      "shortname": "html"
    }, 
    "postMessage(message, targetOrigin, transfer)": {
      "args": [
        "message", 
        "targetOrigin", 
        "transfer"
      ], 
      "for": [
        "Window"
      ], 
      "shortname": "html"
    }, 
    "postMessage(message, transfer)": {
      "args": [
        "message", 
        "transfer"
      ], 
      "for": [
        "Client", 
        "ServiceWorker"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "preMultiplySelf()": {
    "preMultiplySelf()": {
      "args": [], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "preMultiplySelf(other)": {
      "args": [
        "other"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }
  }, 
  "prepend()": {
    "prepend(nodes)": {
      "args": [
        "nodes"
      ], 
      "for": [
        "ParentNode"
      ], 
      "shortname": "dom"
    }, 
    "prepend(nodes...)": {
      "args": [
        "nodes..."
      ], 
      "for": [
        "ParentNode"
      ], 
      "shortname": "dom"
    }
  }, 
  "preventDefault()": {
    "preventDefault()": {
      "args": [], 
      "for": [
        "Event"
      ], 
      "shortname": "dom"
    }
  }, 
  "previousNode()": {
    "previousNode()": {
      "args": [], 
      "for": [
        "TreeWalker", 
        "NodeIterator"
      ], 
      "shortname": "dom"
    }
  }, 
  "previousSibling()": {
    "previousSibling()": {
      "args": [], 
      "for": [
        "TreeWalker"
      ], 
      "shortname": "dom"
    }
  }, 
  "print()": {
    "print()": {
      "args": [], 
      "for": [
        "Window"
      ], 
      "shortname": "html"
    }
  }, 
  "prompt()": {
    "prompt(message, default)": {
      "args": [
        "message", 
        "default"
      ], 
      "for": [
        "Window"
      ], 
      "shortname": "html"
    }
  }, 
  "pushState()": {
    "pushState(data, title)": {
      "args": [
        "data", 
        "title"
      ], 
      "for": [
        "History"
      ], 
      "shortname": "html"
    }
  }, 
  "put()": {
    "put(request, response)": {
      "args": [
        "request", 
        "response"
      ], 
      "for": [
        "Cache"
      ], 
      "shortname": "service-workers"
    }, 
    "put(value)": {
      "args": [
        "value"
      ], 
      "for": [
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }, 
    "put(value, key)": {
      "args": [
        "value", 
        "key"
      ], 
      "for": [
        "IDBObjectStore"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "putImageData()": {
    "putImageData()": {
      "args": [], 
      "for": [
        "CanvasImageData"
      ], 
      "shortname": "html"
    }
  }, 
  "quadraticCurveTo()": {
    "quadraticCurveTo(cpx, cpy, x, y)": {
      "args": [
        "cpx", 
        "cpy", 
        "x", 
        "y"
      ], 
      "for": [
        "CanvasPath"
      ], 
      "shortname": "html"
    }
  }, 
  "query()": {
    "query()": {
      "args": [], 
      "for": [
        "Permissions"
      ], 
      "shortname": "permissions"
    }, 
    "query(permissionDesc)": {
      "args": [
        "permissionDesc"
      ], 
      "for": [
        "Permissions"
      ], 
      "shortname": "permissions"
    }
  }, 
  "queryCommandEnabled()": {
    "queryCommandEnabled()": {
      "args": [], 
      "for": [
        "Document"
      ], 
      "shortname": "html"
    }
  }, 
  "queryCommandIndeterm()": {
    "queryCommandIndeterm()": {
      "args": [], 
      "for": [
        "Document"
      ], 
      "shortname": "html"
    }
  }, 
  "queryCommandState()": {
    "queryCommandState()": {
      "args": [], 
      "for": [
        "Document"
      ], 
      "shortname": "html"
    }
  }, 
  "queryCommandSupported()": {
    "queryCommandSupported()": {
      "args": [], 
      "for": [
        "Document"
      ], 
      "shortname": "html"
    }
  }, 
  "queryCommandValue()": {
    "queryCommandValue()": {
      "args": [], 
      "for": [
        "Document"
      ], 
      "shortname": "html"
    }
  }, 
  "querySelector()": {
    "querySelector(selectors)": {
      "args": [
        "selectors"
      ], 
      "for": [
        "ParentNode"
      ], 
      "shortname": "dom"
    }
  }, 
  "querySelectorAll()": {
    "querySelectorAll(selectors)": {
      "args": [
        "selectors"
      ], 
      "for": [
        "ParentNode"
      ], 
      "shortname": "dom"
    }
  }, 
  "read()": {
    "read()": {
      "args": [], 
      "for": [], 
      "shortname": "streams"
    }, 
    "read(view)": {
      "args": [
        "view"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "readAsArrayBuffer()": {
    "readAsArrayBuffer(blob)": {
      "args": [
        "blob"
      ], 
      "for": [
        "FileReader", 
        "FileReaderSync"
      ], 
      "shortname": "fileapi"
    }
  }, 
  "readAsBinaryString()": {
    "readAsBinaryString(blob)": {
      "args": [
        "blob"
      ], 
      "for": [
        "FileReader", 
        "FileReaderSync"
      ], 
      "shortname": "fileapi"
    }
  }, 
  "readAsDataURL()": {
    "readAsDataURL(blob)": {
      "args": [
        "blob"
      ], 
      "for": [
        "FileReader", 
        "FileReaderSync"
      ], 
      "shortname": "fileapi"
    }
  }, 
  "readAsText()": {
    "readAsText(blob)": {
      "args": [
        "blob"
      ], 
      "for": [
        "FileReader", 
        "FileReaderSync"
      ], 
      "shortname": "fileapi"
    }, 
    "readAsText(blob, label)": {
      "args": [
        "blob", 
        "label"
      ], 
      "for": [
        "FileReader", 
        "FileReaderSync"
      ], 
      "shortname": "fileapi"
    }
  }, 
  "readValue()": {
    "readValue()": {
      "args": [], 
      "for": [
        "BluetoothRemoteGATTCharacteristic", 
        "BluetoothRemoteGATTDescriptor"
      ], 
      "shortname": "web-bluetooth"
    }
  }, 
  "ready()": {
    "ready()": {
      "args": [], 
      "for": [
        "FontFaceSet"
      ], 
      "shortname": "css-font-loading"
    }
  }, 
  "rect()": {
    "rect(x, y, w, h)": {
      "args": [
        "x", 
        "y", 
        "w", 
        "h"
      ], 
      "for": [
        "CanvasPath"
      ], 
      "shortname": "html"
    }
  }, 
  "redirect()": {
    "redirect(url, status)": {
      "args": [
        "url", 
        "status"
      ], 
      "for": [
        "Response"
      ], 
      "shortname": "fetch"
    }
  }, 
  "refresh()": {
    "refresh()": {
      "args": [], 
      "for": [
        "PluginArray"
      ], 
      "shortname": "html"
    }
  }, 
  "register()": {
    "register(scriptURL)": {
      "args": [
        "scriptURL"
      ], 
      "for": [
        "ServiceWorkerContainer"
      ], 
      "shortname": "service-workers"
    }, 
    "register(scriptURL, options)": {
      "args": [
        "scriptURL", 
        "options"
      ], 
      "for": [
        "ServiceWorkerContainer"
      ], 
      "shortname": "service-workers"
    }, 
    "register(tag)": {
      "args": [
        "tag"
      ], 
      "for": [
        "SyncManager"
      ], 
      "shortname": "background-sync"
    }
  }, 
  "registerAnArbitaryClass()": {
    "registerAnArbitaryClass(type, classConstructor)": {
      "args": [
        "type", 
        "classConstructor"
      ], 
      "for": [
        "FakeWorkletGlobalScope"
      ], 
      "shortname": "worklets"
    }
  }, 
  "registerContentHandler()": {
    "registerContentHandler()": {
      "args": [], 
      "for": [
        "NavigatorContentUtils"
      ], 
      "shortname": "html"
    }
  }, 
  "registerForeignFetch()": {
    "registerForeignFetch(options)": {
      "args": [
        "options"
      ], 
      "for": [
        "InstallEvent"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "registerLayout()": {
    "registerLayout(name, layoutCtor)": {
      "args": [
        "name", 
        "layoutCtor"
      ], 
      "for": [
        "LayoutWorkletGlobalScope"
      ], 
      "shortname": "css-layout-api"
    }
  }, 
  "registerPaint()": {
    "registerPaint(name, paintCtor)": {
      "args": [
        "name", 
        "paintCtor"
      ], 
      "for": [
        "PaintWorkletGlobalScope"
      ], 
      "shortname": "css-paint-api"
    }
  }, 
  "registerProperty()": {
    "registerProperty(PropertyDescriptor descriptor)": {
      "args": [
        "PropertyDescriptor descriptor"
      ], 
      "for": [
        "CSS"
      ], 
      "shortname": "css-properties-values-api"
    }, 
    "registerProperty(descriptor)": {
      "args": [
        "descriptor"
      ], 
      "for": [
        "CSS"
      ], 
      "shortname": "css-properties-values-api"
    }
  }, 
  "registerProtocolHandler()": {
    "registerProtocolHandler()": {
      "args": [], 
      "for": [
        "NavigatorContentUtils"
      ], 
      "shortname": "html"
    }
  }, 
  "releaseEvents()": {
    "releaseEvents()": {
      "args": [], 
      "for": [
        "Window", 
        "Document"
      ], 
      "shortname": "html"
    }
  }, 
  "releaseInterface()": {
    "releaseInterface(interfaceNumber)": {
      "args": [
        "interfaceNumber"
      ], 
      "for": [
        "USBDevice"
      ], 
      "shortname": "webusb"
    }
  }, 
  "releaseLock()": {
    "releaseLock()": {
      "args": [], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "reload()": {
    "reload()": {
      "args": [], 
      "for": [
        "Location"
      ], 
      "shortname": "html"
    }
  }, 
  "remove()": {
    "remove()": {
      "args": [], 
      "for": [
        "DataTransferItemList", 
        "DOMTokenList", 
        "HTMLSelectElement", 
        "ChildNode"
      ], 
      "shortname": "dom"
    }, 
    "remove(index)": {
      "args": [
        "index"
      ], 
      "for": [
        "HTMLOptionsCollection"
      ], 
      "shortname": "html"
    }, 
    "remove(tokens)": {
      "args": [
        "tokens"
      ], 
      "for": [
        "DOMTokenList"
      ], 
      "shortname": "dom"
    }
  }, 
  "removeAttribute()": {
    "removeAttribute(qualifiedName)": {
      "args": [
        "qualifiedName"
      ], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "removeAttributeNS()": {
    "removeAttributeNS(namespace, localName)": {
      "args": [
        "namespace", 
        "localName"
      ], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "removeAttributeNode()": {
    "removeAttributeNode(attr)": {
      "args": [
        "attr"
      ], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "removeChild()": {
    "removeChild(child)": {
      "args": [
        "child"
      ], 
      "for": [
        "Node"
      ], 
      "shortname": "dom"
    }
  }, 
  "removeCue()": {
    "removeCue(cue)": {
      "args": [
        "cue"
      ], 
      "for": [
        "TextTrack"
      ], 
      "shortname": "html"
    }
  }, 
  "removeEventListener()": {
    "removeEventListener(type, callback)": {
      "args": [
        "type", 
        "callback"
      ], 
      "for": [
        "EventTarget"
      ], 
      "shortname": "dom"
    }, 
    "removeEventListener(type, callback, options)": {
      "args": [
        "type", 
        "callback", 
        "options"
      ], 
      "for": [
        "EventTarget"
      ], 
      "shortname": "dom"
    }
  }, 
  "removeItem()": {
    "removeItem(key)": {
      "args": [
        "key"
      ], 
      "for": [
        "Storage"
      ], 
      "shortname": "html"
    }
  }, 
  "removeListener()": {
    "removeListener(listener)": {
      "args": [
        "listener"
      ], 
      "for": [
        "MediaQueryList"
      ], 
      "shortname": "cssom-view"
    }
  }, 
  "removeNamedItem()": {
    "removeNamedItem(qualifiedName)": {
      "args": [
        "qualifiedName"
      ], 
      "for": [
        "NamedNodeMap"
      ], 
      "shortname": "dom"
    }
  }, 
  "removeNamedItemNS()": {
    "removeNamedItemNS(namespace, localName)": {
      "args": [
        "namespace", 
        "localName"
      ], 
      "for": [
        "NamedNodeMap"
      ], 
      "shortname": "dom"
    }
  }, 
  "removeProperty()": {
    "removeProperty(property)": {
      "args": [
        "property"
      ], 
      "for": [
        "CSSStyleDeclaration"
      ], 
      "shortname": "cssom"
    }
  }, 
  "renameNode()": {
    "renameNode()": {
      "args": [], 
      "for": [
        "Document"
      ], 
      "shortname": "dom"
    }
  }, 
  "replace()": {
    "replace(token, newToken)": {
      "args": [
        "token", 
        "newToken"
      ], 
      "for": [
        "DOMTokenList"
      ], 
      "shortname": "dom"
    }, 
    "replace(url)": {
      "args": [
        "url"
      ], 
      "for": [
        "Location"
      ], 
      "shortname": "html"
    }
  }, 
  "replaceChild()": {
    "replaceChild(node, child)": {
      "args": [
        "node", 
        "child"
      ], 
      "for": [
        "Node"
      ], 
      "shortname": "dom"
    }
  }, 
  "replaceData()": {
    "replaceData(offset, count, data)": {
      "args": [
        "offset", 
        "count", 
        "data"
      ], 
      "for": [
        "CharacterData"
      ], 
      "shortname": "dom"
    }
  }, 
  "replaceState()": {
    "replaceState(data, title)": {
      "args": [
        "data", 
        "title"
      ], 
      "for": [
        "History"
      ], 
      "shortname": "html"
    }
  }, 
  "replaceWholeText()": {
    "replaceWholeText()": {
      "args": [], 
      "for": [
        "Text"
      ], 
      "shortname": "dom"
    }
  }, 
  "replaceWith()": {
    "replaceWith(nodes)": {
      "args": [
        "nodes"
      ], 
      "for": [
        "ChildNode"
      ], 
      "shortname": "dom"
    }, 
    "replaceWith(nodes...)": {
      "args": [
        "nodes..."
      ], 
      "for": [
        "ChildNode"
      ], 
      "shortname": "dom"
    }
  }, 
  "reportValidity()": {
    "reportValidity()": {
      "args": [], 
      "for": [
        "HTMLFormElement", 
        "HTMLFieldSetElement"
      ], 
      "shortname": "html"
    }
  }, 
  "request()": {
    "request()": {
      "args": [], 
      "for": [
        "Permissions"
      ], 
      "shortname": "permissions"
    }, 
    "request(permissionDesc)": {
      "args": [
        "permissionDesc"
      ], 
      "for": [
        "Permissions"
      ], 
      "shortname": "permissions"
    }
  }, 
  "requestAnimationFrame()": {
    "requestAnimationFrame()": {
      "args": [], 
      "for": [
        "Window"
      ], 
      "shortname": "html"
    }
  }, 
  "requestDevice()": {
    "requestDevice(options)": {
      "args": [
        "options"
      ], 
      "for": [
        "USB", 
        "Bluetooth"
      ], 
      "shortname": "web-bluetooth"
    }
  }, 
  "requestFullscreen()": {
    "requestFullscreen()": {
      "args": [], 
      "for": [], 
      "shortname": "html"
    }
  }, 
  "requireUserMediation()": {
    "requireUserMediation()": {
      "args": [], 
      "for": [
        "CredentialsContainer"
      ], 
      "shortname": "webappsec-credential-management"
    }
  }, 
  "reset()": {
    "reset()": {
      "args": [], 
      "for": [
        "HTMLFormElement", 
        "USBDevice"
      ], 
      "shortname": "html"
    }
  }, 
  "resetClip()": {
    "resetClip()": {
      "args": [], 
      "for": [
        "CanvasDrawPath"
      ], 
      "shortname": "html"
    }
  }, 
  "resetTransform()": {
    "resetTransform()": {
      "args": [], 
      "for": [
        "CanvasTransform"
      ], 
      "shortname": "html"
    }
  }, 
  "resizeBy()": {
    "resizeBy(x, y)": {
      "args": [
        "x", 
        "y"
      ], 
      "for": [
        "Window"
      ], 
      "shortname": "cssom-view"
    }
  }, 
  "resizeTo()": {
    "resizeTo(x, y)": {
      "args": [
        "x", 
        "y"
      ], 
      "for": [
        "Window"
      ], 
      "shortname": "cssom-view"
    }
  }, 
  "resolveBlockSize()": {
    "resolveBlockSize(constraintSpace, styleMap)": {
      "args": [
        "constraintSpace", 
        "styleMap"
      ], 
      "for": [
        "LayoutWorkletGlobalScope"
      ], 
      "shortname": "css-layout-api"
    }, 
    "resolveBlockSize(constraintSpace, styleMap, contentSize)": {
      "args": [
        "constraintSpace", 
        "styleMap", 
        "contentSize"
      ], 
      "for": [
        "LayoutWorkletGlobalScope"
      ], 
      "shortname": "css-layout-api"
    }
  }, 
  "resolveBordersAndPadding()": {
    "resolveBordersAndPadding(constraintSpace, styleMap)": {
      "args": [
        "constraintSpace", 
        "styleMap"
      ], 
      "for": [
        "LayoutWorkletGlobalScope"
      ], 
      "shortname": "css-layout-api"
    }
  }, 
  "resolveInlineSize()": {
    "resolveInlineSize(constraintSpace, styleMap)": {
      "args": [
        "constraintSpace", 
        "styleMap"
      ], 
      "for": [
        "LayoutWorkletGlobalScope"
      ], 
      "shortname": "css-layout-api"
    }
  }, 
  "resolveScrollbarSize()": {
    "resolveScrollbarSize(constraintSpace, styleMap)": {
      "args": [
        "constraintSpace", 
        "styleMap"
      ], 
      "for": [
        "LayoutWorkletGlobalScope"
      ], 
      "shortname": "css-layout-api"
    }
  }, 
  "respond()": {
    "respond(bytesWritten)": {
      "args": [
        "bytesWritten"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "respondWith()": {
    "respondWith(r)": {
      "args": [
        "r"
      ], 
      "for": [
        "ForeignFetchEvent", 
        "FetchEvent"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "respondWithNewView()": {
    "respondWithNewView(view)": {
      "args": [
        "view"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "restore()": {
    "restore()": {
      "args": [], 
      "for": [
        "CanvasState"
      ], 
      "shortname": "html"
    }
  }, 
  "reverse()": {
    "reverse()": {
      "args": [], 
      "for": [
        "Animation"
      ], 
      "shortname": "web-animations"
    }
  }, 
  "revoke()": {
    "revoke(permissionDesc)": {
      "args": [
        "permissionDesc"
      ], 
      "for": [
        "Permissions"
      ], 
      "shortname": "permissions"
    }
  }, 
  "revokeObjectURL()": {
    "revokeObjectURL(url)": {
      "args": [
        "url"
      ], 
      "for": [
        "URL"
      ], 
      "shortname": "fileapi"
    }
  }, 
  "rotate()": {
    "rotate()": {
      "args": [], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "rotate(angle)": {
      "args": [
        "angle"
      ], 
      "for": [
        "DOMMatrixReadOnly", 
        "CanvasTransform"
      ], 
      "shortname": "geometry"
    }, 
    "rotate(angle, originX)": {
      "args": [
        "angle", 
        "originX"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "rotate(rotX)": {
      "args": [
        "rotX"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "rotate(rotX, rotY)": {
      "args": [
        "rotX", 
        "rotY"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "rotate(rotX, rotY, rotZ)": {
      "args": [
        "rotX", 
        "rotY", 
        "rotZ"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }
  }, 
  "rotateAxisAngle()": {
    "rotateAxisAngle()": {
      "args": [], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "rotateAxisAngle(x)": {
      "args": [
        "x"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "rotateAxisAngle(x, y)": {
      "args": [
        "x", 
        "y"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "rotateAxisAngle(x, y, z)": {
      "args": [
        "x", 
        "y", 
        "z"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "rotateAxisAngle(x, y, z, angle)": {
      "args": [
        "x", 
        "y", 
        "z", 
        "angle"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }
  }, 
  "rotateAxisAngleSelf()": {
    "rotateAxisAngleSelf()": {
      "args": [], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "rotateAxisAngleSelf(x)": {
      "args": [
        "x"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "rotateAxisAngleSelf(x, y)": {
      "args": [
        "x", 
        "y"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "rotateAxisAngleSelf(x, y, z)": {
      "args": [
        "x", 
        "y", 
        "z"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "rotateAxisAngleSelf(x, y, z, angle)": {
      "args": [
        "x", 
        "y", 
        "z", 
        "angle"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }
  }, 
  "rotateFromVector()": {
    "rotateFromVector()": {
      "args": [], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "rotateFromVector(x)": {
      "args": [
        "x"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "rotateFromVector(x, y)": {
      "args": [
        "x", 
        "y"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }
  }, 
  "rotateFromVectorSelf()": {
    "rotateFromVectorSelf()": {
      "args": [], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "rotateFromVectorSelf(x)": {
      "args": [
        "x"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "rotateFromVectorSelf(x, y)": {
      "args": [
        "x", 
        "y"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }
  }, 
  "rotateSelf()": {
    "rotateSelf()": {
      "args": [], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "rotateSelf(angle)": {
      "args": [
        "angle"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "rotateSelf(angle, originX)": {
      "args": [
        "angle", 
        "originX"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "rotateSelf(rotX)": {
      "args": [
        "rotX"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "rotateSelf(rotX, rotY)": {
      "args": [
        "rotX", 
        "rotY"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "rotateSelf(rotX, rotY, rotZ)": {
      "args": [
        "rotX", 
        "rotY", 
        "rotZ"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }
  }, 
  "save()": {
    "save()": {
      "args": [], 
      "for": [
        "CanvasState"
      ], 
      "shortname": "html"
    }
  }, 
  "scale()": {
    "scale()": {
      "args": [], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "scale(scale)": {
      "args": [
        "scale"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "scale(scale, originX)": {
      "args": [
        "scale", 
        "originX"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "scale(scaleX)": {
      "args": [
        "scaleX"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "scale(scaleX, scaleY)": {
      "args": [
        "scaleX", 
        "scaleY"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "scale(scaleX, scaleY, scaleZ)": {
      "args": [
        "scaleX", 
        "scaleY", 
        "scaleZ"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "scale(scaleX, scaleY, scaleZ, originX)": {
      "args": [
        "scaleX", 
        "scaleY", 
        "scaleZ", 
        "originX"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "scale(scaleX, scaleY, scaleZ, originX, originY)": {
      "args": [
        "scaleX", 
        "scaleY", 
        "scaleZ", 
        "originX", 
        "originY"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "scale(scaleX, scaleY, scaleZ, originX, originY, originZ)": {
      "args": [
        "scaleX", 
        "scaleY", 
        "scaleZ", 
        "originX", 
        "originY", 
        "originZ"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "scale(x, y)": {
      "args": [
        "x", 
        "y"
      ], 
      "for": [
        "CanvasTransform"
      ], 
      "shortname": "html"
    }
  }, 
  "scale3d()": {
    "scale3d()": {
      "args": [], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "scale3d(scale)": {
      "args": [
        "scale"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "scale3d(scale, originX)": {
      "args": [
        "scale", 
        "originX"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "scale3d(scale, originX, originY)": {
      "args": [
        "scale", 
        "originX", 
        "originY"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "scale3d(scale, originX, originY, originZ)": {
      "args": [
        "scale", 
        "originX", 
        "originY", 
        "originZ"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }
  }, 
  "scale3dSelf()": {
    "scale3dSelf()": {
      "args": [], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "scale3dSelf(scale)": {
      "args": [
        "scale"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "scale3dSelf(scale, originX)": {
      "args": [
        "scale", 
        "originX"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "scale3dSelf(scale, originX, originY)": {
      "args": [
        "scale", 
        "originX", 
        "originY"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "scale3dSelf(scale, originX, originY, originZ)": {
      "args": [
        "scale", 
        "originX", 
        "originY", 
        "originZ"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }
  }, 
  "scaleNonUniform()": {
    "scaleNonUniform()": {
      "args": [], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "scaleNonUniform(scaleX)": {
      "args": [
        "scaleX"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "scaleNonUniform(scaleX, scaleY)": {
      "args": [
        "scaleX", 
        "scaleY"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "scaleNonUniform(scaleX, scaleY, scaleZ)": {
      "args": [
        "scaleX", 
        "scaleY", 
        "scaleZ"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "scaleNonUniform(scaleX, scaleY, scaleZ, originX)": {
      "args": [
        "scaleX", 
        "scaleY", 
        "scaleZ", 
        "originX"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "scaleNonUniform(scaleX, scaleY, scaleZ, originX, originY)": {
      "args": [
        "scaleX", 
        "scaleY", 
        "scaleZ", 
        "originX", 
        "originY"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }
  }, 
  "scaleNonUniformSelf()": {
    "scaleNonUniformSelf()": {
      "args": [], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "scaleNonUniformSelf(scaleX)": {
      "args": [
        "scaleX"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "scaleNonUniformSelf(scaleX, scaleY)": {
      "args": [
        "scaleX", 
        "scaleY"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "scaleNonUniformSelf(scaleX, scaleY, scaleZ)": {
      "args": [
        "scaleX", 
        "scaleY", 
        "scaleZ"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "scaleNonUniformSelf(scaleX, scaleY, scaleZ, originX)": {
      "args": [
        "scaleX", 
        "scaleY", 
        "scaleZ", 
        "originX"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "scaleNonUniformSelf(scaleX, scaleY, scaleZ, originX, originY)": {
      "args": [
        "scaleX", 
        "scaleY", 
        "scaleZ", 
        "originX", 
        "originY"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }
  }, 
  "scaleSelf()": {
    "scaleSelf()": {
      "args": [], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "scaleSelf(scale)": {
      "args": [
        "scale"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "scaleSelf(scale, originX)": {
      "args": [
        "scale", 
        "originX"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "scaleSelf(scaleX)": {
      "args": [
        "scaleX"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "scaleSelf(scaleX, scaleY)": {
      "args": [
        "scaleX", 
        "scaleY"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "scaleSelf(scaleX, scaleY, scaleZ)": {
      "args": [
        "scaleX", 
        "scaleY", 
        "scaleZ"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "scaleSelf(scaleX, scaleY, scaleZ, originX)": {
      "args": [
        "scaleX", 
        "scaleY", 
        "scaleZ", 
        "originX"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "scaleSelf(scaleX, scaleY, scaleZ, originX, originY)": {
      "args": [
        "scaleX", 
        "scaleY", 
        "scaleZ", 
        "originX", 
        "originY"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "scaleSelf(scaleX, scaleY, scaleZ, originX, originY, originZ)": {
      "args": [
        "scaleX", 
        "scaleY", 
        "scaleZ", 
        "originX", 
        "originY", 
        "originZ"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }
  }, 
  "scroll()": {
    "scroll()": {
      "args": [], 
      "for": [
        "Window", 
        "Element"
      ], 
      "shortname": "cssom-view"
    }, 
    "scroll(options)": {
      "args": [
        "options"
      ], 
      "for": [
        "Window", 
        "Element"
      ], 
      "shortname": "cssom-view"
    }, 
    "scroll(x, y)": {
      "args": [
        "x", 
        "y"
      ], 
      "for": [
        "Window", 
        "Element"
      ], 
      "shortname": "cssom-view"
    }
  }, 
  "scrollBy()": {
    "scrollBy()": {
      "args": [], 
      "for": [
        "Window", 
        "Element"
      ], 
      "shortname": "cssom-view"
    }, 
    "scrollBy(options)": {
      "args": [
        "options"
      ], 
      "for": [
        "Window", 
        "Element"
      ], 
      "shortname": "cssom-view"
    }, 
    "scrollBy(x, y)": {
      "args": [
        "x", 
        "y"
      ], 
      "for": [
        "Window", 
        "Element"
      ], 
      "shortname": "cssom-view"
    }
  }, 
  "scrollIntoView()": {
    "scrollIntoView(arg)": {
      "args": [
        "arg"
      ], 
      "for": [
        "Element"
      ], 
      "shortname": "cssom-view"
    }
  }, 
  "scrollPathIntoView()": {
    "scrollPathIntoView()": {
      "args": [], 
      "for": [
        "CanvasUserInterface"
      ], 
      "shortname": "html"
    }
  }, 
  "scrollTo()": {
    "scrollTo()": {
      "args": [], 
      "for": [
        "Window", 
        "Element"
      ], 
      "shortname": "cssom-view"
    }, 
    "scrollTo(options)": {
      "args": [
        "options"
      ], 
      "for": [
        "Window", 
        "Element"
      ], 
      "shortname": "cssom-view"
    }, 
    "scrollTo(x, y)": {
      "args": [
        "x", 
        "y"
      ], 
      "for": [
        "Window", 
        "Element"
      ], 
      "shortname": "cssom-view"
    }
  }, 
  "select()": {
    "select()": {
      "args": [], 
      "for": [
        "HTMLTextAreaElement"
      ], 
      "shortname": "html"
    }
  }, 
  "selectAlternateInterface()": {
    "selectAlternateInterface(interfaceNumber, alternateSetting)": {
      "args": [
        "interfaceNumber", 
        "alternateSetting"
      ], 
      "for": [
        "USBDevice"
      ], 
      "shortname": "webusb"
    }
  }, 
  "selectConfiguration()": {
    "selectConfiguration(configurationValue)": {
      "args": [
        "configurationValue"
      ], 
      "for": [
        "USBDevice"
      ], 
      "shortname": "webusb"
    }
  }, 
  "selectNode()": {
    "selectNode(node)": {
      "args": [
        "node"
      ], 
      "for": [
        "Range"
      ], 
      "shortname": "dom"
    }
  }, 
  "selectNodeContents()": {
    "selectNodeContents(node)": {
      "args": [
        "node"
      ], 
      "for": [
        "Range"
      ], 
      "shortname": "dom"
    }
  }, 
  "send()": {
    "send()": {
      "args": [], 
      "for": [
        "XMLHttpRequest"
      ], 
      "shortname": "xhr"
    }, 
    "send(body)": {
      "args": [
        "body"
      ], 
      "for": [
        "XMLHttpRequest"
      ], 
      "shortname": "xhr"
    }, 
    "send(data)": {
      "args": [
        "data"
      ], 
      "for": [
        "WebSocket"
      ], 
      "shortname": "html"
    }
  }, 
  "set()": {
    "set()": {
      "args": [], 
      "for": [
        "NamedFlowMap"
      ], 
      "shortname": "css-regions"
    }, 
    "set(flowName, flowValue)": {
      "args": [
        "flowName", 
        "flowValue"
      ], 
      "for": [
        "NamedFlowMap"
      ], 
      "shortname": "css-regions"
    }, 
    "set(name, blobValue)": {
      "args": [
        "name", 
        "blobValue"
      ], 
      "for": [
        "FormData"
      ], 
      "shortname": "xhr"
    }, 
    "set(name, blobValue, filename)": {
      "args": [
        "name", 
        "blobValue", 
        "filename"
      ], 
      "for": [
        "FormData"
      ], 
      "shortname": "xhr"
    }, 
    "set(name, value)": {
      "args": [
        "name", 
        "value"
      ], 
      "for": [
        "Headers", 
        "FormData", 
        "URLSearchParams"
      ], 
      "shortname": "fetch"
    }, 
    "set(property)": {
      "args": [
        "property"
      ], 
      "for": [
        "StylePropertyMap"
      ], 
      "shortname": "css-typed-om"
    }, 
    "set(property, values)": {
      "args": [
        "property", 
        "values"
      ], 
      "for": [
        "StylePropertyMap"
      ], 
      "shortname": "css-typed-om"
    }, 
    "set(property, values...)": {
      "args": [
        "property", 
        "values..."
      ], 
      "for": [
        "StylePropertyMap"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "setAttribute()": {
    "setAttribute(qualifiedName, value)": {
      "args": [
        "qualifiedName", 
        "value"
      ], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "setAttributeNS()": {
    "setAttributeNS(namespace, qualifiedName, value)": {
      "args": [
        "namespace", 
        "qualifiedName", 
        "value"
      ], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "setAttributeNode()": {
    "setAttributeNode(attr)": {
      "args": [
        "attr"
      ], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "setAttributeNodeNS()": {
    "setAttributeNodeNS(attr)": {
      "args": [
        "attr"
      ], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "setCustomValidity()": {
    "setCustomValidity(message)": {
      "args": [
        "message"
      ], 
      "for": [
        "HTMLFieldSetElement"
      ], 
      "shortname": "html"
    }
  }, 
  "setData()": {
    "setData(format, data)": {
      "args": [
        "format", 
        "data"
      ], 
      "for": [
        "DataTransfer"
      ], 
      "shortname": "html"
    }
  }, 
  "setDragImage()": {
    "setDragImage(element, x, y)": {
      "args": [
        "element", 
        "x", 
        "y"
      ], 
      "for": [
        "DataTransfer"
      ], 
      "shortname": "html"
    }
  }, 
  "setEnd()": {
    "setEnd(node, offset)": {
      "args": [
        "node", 
        "offset"
      ], 
      "for": [
        "Range"
      ], 
      "shortname": "dom"
    }
  }, 
  "setEndAfter()": {
    "setEndAfter(node)": {
      "args": [
        "node"
      ], 
      "for": [
        "Range"
      ], 
      "shortname": "dom"
    }
  }, 
  "setEndBefore()": {
    "setEndBefore(node)": {
      "args": [
        "node"
      ], 
      "for": [
        "Range"
      ], 
      "shortname": "dom"
    }
  }, 
  "setHeaderValue()": {
    "setHeaderValue(value)": {
      "args": [
        "value"
      ], 
      "for": [
        "NavigationPreloadManager"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "setIdAttribute()": {
    "setIdAttribute()": {
      "args": [], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "setIdAttributeNS()": {
    "setIdAttributeNS()": {
      "args": [], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "setIdAttributeNode()": {
    "setIdAttributeNode()": {
      "args": [], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "setInterval()": {
    "setInterval()": {
      "args": [], 
      "for": [
        "WindowOrWorkerGlobalScope"
      ], 
      "shortname": "html"
    }
  }, 
  "setItem()": {
    "setItem(key, value)": {
      "args": [
        "key", 
        "value"
      ], 
      "for": [
        "Storage"
      ], 
      "shortname": "html"
    }
  }, 
  "setKeyframes()": {
    "setKeyframes(keyframes)": {
      "args": [
        "keyframes"
      ], 
      "for": [
        "KeyframeEffect"
      ], 
      "shortname": "web-animations"
    }
  }, 
  "setLineDash()": {
    "setLineDash()": {
      "args": [], 
      "for": [
        "CanvasPathDrawingStyles"
      ], 
      "shortname": "html"
    }
  }, 
  "setMatrixValue()": {
    "setMatrixValue()": {
      "args": [], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "setMatrixValue(transformList)": {
      "args": [
        "transformList"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }
  }, 
  "setNamedItem()": {
    "setNamedItem(attr)": {
      "args": [
        "attr"
      ], 
      "for": [
        "NamedNodeMap"
      ], 
      "shortname": "dom"
    }
  }, 
  "setNamedItemNS()": {
    "setNamedItemNS(attr)": {
      "args": [
        "attr"
      ], 
      "for": [
        "NamedNodeMap"
      ], 
      "shortname": "dom"
    }
  }, 
  "setProperty()": {
    "setProperty(property, value)": {
      "args": [
        "property", 
        "value"
      ], 
      "for": [
        "CSSStyleDeclaration"
      ], 
      "shortname": "cssom"
    }, 
    "setProperty(property, value, priority)": {
      "args": [
        "property", 
        "value", 
        "priority"
      ], 
      "for": [
        "CSSStyleDeclaration"
      ], 
      "shortname": "cssom"
    }
  }, 
  "setPropertyPriority()": {
    "setPropertyPriority(property, priority)": {
      "args": [
        "property", 
        "priority"
      ], 
      "for": [
        "CSSStyleDeclaration"
      ], 
      "shortname": "cssom"
    }
  }, 
  "setPropertyValue()": {
    "setPropertyValue(property, value)": {
      "args": [
        "property", 
        "value"
      ], 
      "for": [
        "CSSStyleDeclaration"
      ], 
      "shortname": "cssom"
    }
  }, 
  "setRangeText()": {
    "setRangeText(replacement, start, end, selectMode)": {
      "args": [
        "replacement", 
        "start", 
        "end", 
        "selectMode"
      ], 
      "for": [
        "HTMLTextAreaElement"
      ], 
      "shortname": "html"
    }
  }, 
  "setRequestHeader()": {
    "setRequestHeader(name, value)": {
      "args": [
        "name", 
        "value"
      ], 
      "for": [
        "XMLHttpRequest"
      ], 
      "shortname": "xhr"
    }
  }, 
  "setSelectionRange()": {
    "setSelectionRange(start, end)": {
      "args": [
        "start", 
        "end"
      ], 
      "for": [
        "HTMLTextAreaElement"
      ], 
      "shortname": "html"
    }
  }, 
  "setStart()": {
    "setStart(node, offset)": {
      "args": [
        "node", 
        "offset"
      ], 
      "for": [
        "Range"
      ], 
      "shortname": "dom"
    }
  }, 
  "setStartAfter()": {
    "setStartAfter(node)": {
      "args": [
        "node"
      ], 
      "for": [
        "Range"
      ], 
      "shortname": "dom"
    }
  }, 
  "setStartBefore()": {
    "setStartBefore(node)": {
      "args": [
        "node"
      ], 
      "for": [
        "Range"
      ], 
      "shortname": "dom"
    }
  }, 
  "setTimeout()": {
    "setTimeout()": {
      "args": [], 
      "for": [
        "WindowOrWorkerGlobalScope"
      ], 
      "shortname": "html"
    }
  }, 
  "setTransform()": {
    "setTransform()": {
      "args": [], 
      "for": [
        "CanvasPattern"
      ], 
      "shortname": "html"
    }, 
    "setTransform(a, b, c, d, e, f)": {
      "args": [
        "a", 
        "b", 
        "c", 
        "d", 
        "e", 
        "f"
      ], 
      "for": [
        "CanvasPattern"
      ], 
      "shortname": "html"
    }
  }, 
  "setUserData()": {
    "setUserData()": {
      "args": [], 
      "for": [
        "Node"
      ], 
      "shortname": "dom"
    }
  }, 
  "show()": {
    "show()": {
      "args": [], 
      "for": [
        "HTMLDialogElement"
      ], 
      "shortname": "html"
    }
  }, 
  "showModal()": {
    "showModal()": {
      "args": [], 
      "for": [
        "HTMLDialogElement"
      ], 
      "shortname": "html"
    }
  }, 
  "size()": {
    "size()": {
      "args": [], 
      "for": [], 
      "shortname": "streams"
    }, 
    "size(chunk)": {
      "args": [
        "chunk"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "skewX()": {
    "skewX()": {
      "args": [], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "skewX(sx)": {
      "args": [
        "sx"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }
  }, 
  "skewXSelf()": {
    "skewXSelf()": {
      "args": [], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "skewXSelf(sx)": {
      "args": [
        "sx"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }
  }, 
  "skewY()": {
    "skewY()": {
      "args": [], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "skewY(sy)": {
      "args": [
        "sy"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }
  }, 
  "skewYSelf()": {
    "skewYSelf()": {
      "args": [], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "skewYSelf(sy)": {
      "args": [
        "sy"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }
  }, 
  "skipWaiting()": {
    "skipWaiting()": {
      "args": [], 
      "for": [
        "ServiceWorkerGlobalScope"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "slice()": {
    "slice()": {
      "args": [], 
      "for": [
        "Blob"
      ], 
      "shortname": "fileapi"
    }, 
    "slice(start)": {
      "args": [
        "start"
      ], 
      "for": [
        "Blob"
      ], 
      "shortname": "fileapi"
    }, 
    "slice(start, end)": {
      "args": [
        "start", 
        "end"
      ], 
      "for": [
        "Blob"
      ], 
      "shortname": "fileapi"
    }, 
    "slice(start, end, contentType), slice(start, end), slice(start), slice()": {
      "args": [
        "start", 
        "end", 
        "contentType)", 
        "slice(start", 
        "end)", 
        "slice(start)", 
        "slice("
      ], 
      "for": [
        "Blob"
      ], 
      "shortname": "fileapi"
    }
  }, 
  "sort()": {
    "sort()": {
      "args": [], 
      "for": [
        "URLSearchParams"
      ], 
      "shortname": "url"
    }
  }, 
  "splitText()": {
    "splitText(offset)": {
      "args": [
        "offset"
      ], 
      "for": [
        "Text"
      ], 
      "shortname": "dom"
    }
  }, 
  "start()": {
    "start()": {
      "args": [], 
      "for": [
        "MessagePort", 
        "Sensor", 
        "HTMLMarqueeElement"
      ], 
      "shortname": "generic-sensor"
    }, 
    "start(index)": {
      "args": [
        "index"
      ], 
      "for": [
        "TimeRanges"
      ], 
      "shortname": "html"
    }
  }, 
  "startMessages()": {
    "startMessages()": {
      "args": [], 
      "for": [
        "ServiceWorkerContainer"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "startNotifications()": {
    "startNotifications()": {
      "args": [], 
      "for": [
        "BluetoothRemoteGATTCharacteristic"
      ], 
      "shortname": "web-bluetooth"
    }
  }, 
  "stepDown()": {
    "stepDown()": {
      "args": [], 
      "for": [
        "HTMLInputElement"
      ], 
      "shortname": "html"
    }
  }, 
  "stepUp()": {
    "stepUp()": {
      "args": [], 
      "for": [
        "HTMLInputElement"
      ], 
      "shortname": "html"
    }
  }, 
  "stop()": {
    "stop()": {
      "args": [], 
      "for": [
        "Window", 
        "Sensor", 
        "HTMLMarqueeElement"
      ], 
      "shortname": "generic-sensor"
    }
  }, 
  "stopImmediatePropagation()": {
    "stopImmediatePropagation()": {
      "args": [], 
      "for": [
        "Event"
      ], 
      "shortname": "dom"
    }
  }, 
  "stopNotifications()": {
    "stopNotifications()": {
      "args": [], 
      "for": [
        "BluetoothRemoteGATTCharacteristic"
      ], 
      "shortname": "web-bluetooth"
    }
  }, 
  "stopPropagation()": {
    "stopPropagation()": {
      "args": [], 
      "for": [
        "Event"
      ], 
      "shortname": "dom"
    }
  }, 
  "store()": {
    "store(credential)": {
      "args": [
        "credential"
      ], 
      "for": [
        "CredentialsContainer"
      ], 
      "shortname": "webappsec-credential-management"
    }
  }, 
  "stringifier()": {
    "stringifier()": {
      "args": [], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }
  }, 
  "stroke()": {
    "stroke()": {
      "args": [], 
      "for": [
        "CanvasDrawPath"
      ], 
      "shortname": "html"
    }
  }, 
  "strokeRect()": {
    "strokeRect(x, y, w, h)": {
      "args": [
        "x", 
        "y", 
        "w", 
        "h"
      ], 
      "for": [
        "CanvasRect"
      ], 
      "shortname": "html"
    }
  }, 
  "strokeText()": {
    "strokeText()": {
      "args": [], 
      "for": [
        "CanvasText"
      ], 
      "shortname": "html"
    }
  }, 
  "sub()": {
    "sub(value)": {
      "args": [
        "value"
      ], 
      "for": [
        "CSSNumericValue"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "submit()": {
    "submit()": {
      "args": [], 
      "for": [
        "HTMLFormElement"
      ], 
      "shortname": "html"
    }
  }, 
  "substringData()": {
    "substringData(offset, count)": {
      "args": [
        "offset", 
        "count"
      ], 
      "for": [
        "CharacterData"
      ], 
      "shortname": "dom"
    }
  }, 
  "subtract()": {
    "subtract(CSSLengthValue value)": {
      "args": [
        "CSSLengthValue value"
      ], 
      "for": [
        "CSSLengthValue"
      ], 
      "shortname": "css-typed-om"
    }, 
    "subtract(value)": {
      "args": [
        "value"
      ], 
      "for": [
        "CSSLengthValue", 
        "CSSNumericValue"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "supports()": {
    "supports(conditionText)": {
      "args": [
        "conditionText"
      ], 
      "for": [
        "CSS"
      ], 
      "shortname": "css-conditional"
    }, 
    "supports(property, value)": {
      "args": [
        "property", 
        "value"
      ], 
      "for": [
        "CSS"
      ], 
      "shortname": "css-conditional"
    }, 
    "supports(token)": {
      "args": [
        "token"
      ], 
      "for": [
        "DOMTokenList"
      ], 
      "shortname": "dom"
    }
  }, 
  "surroundContents()": {
    "surroundContents(newParent)": {
      "args": [
        "newParent"
      ], 
      "for": [
        "Range"
      ], 
      "shortname": "dom"
    }
  }, 
  "swapCache()": {
    "swapCache()": {
      "args": [], 
      "for": [
        "ApplicationCache"
      ], 
      "shortname": "html"
    }
  }, 
  "table()": {
    "table(tabularData)": {
      "args": [
        "tabularData"
      ], 
      "for": [], 
      "shortname": "console"
    }, 
    "table(tabularData, properties)": {
      "args": [
        "tabularData", 
        "properties"
      ], 
      "for": [], 
      "shortname": "console"
    }
  }, 
  "taintEnabled()": {
    "taintEnabled()": {
      "args": [], 
      "for": [
        "NavigatorID"
      ], 
      "shortname": "html"
    }
  }, 
  "takeRecords()": {
    "takeRecords()": {
      "args": [], 
      "for": [
        "MutationObserver"
      ], 
      "shortname": "dom"
    }
  }, 
  "tee()": {
    "tee()": {
      "args": [], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "terminate()": {
    "terminate()": {
      "args": [], 
      "for": [
        "Worker"
      ], 
      "shortname": "html"
    }
  }, 
  "text()": {
    "text()": {
      "args": [], 
      "for": [
        "Body"
      ], 
      "shortname": "fetch"
    }
  }, 
  "time()": {
    "time()": {
      "args": [], 
      "for": [], 
      "shortname": "console"
    }, 
    "time(label)": {
      "args": [
        "label"
      ], 
      "for": [], 
      "shortname": "console"
    }
  }, 
  "timeEnd()": {
    "timeEnd()": {
      "args": [], 
      "for": [], 
      "shortname": "console"
    }, 
    "timeEnd(label)": {
      "args": [
        "label"
      ], 
      "for": [], 
      "shortname": "console"
    }
  }, 
  "to()": {
    "to(unit)": {
      "args": [
        "unit"
      ], 
      "for": [
        "CSSNumericValue"
      ], 
      "shortname": "css-typed-om"
    }
  }, 
  "toBlob()": {
    "toBlob(callback)": {
      "args": [
        "callback"
      ], 
      "for": [
        "HTMLCanvasElement"
      ], 
      "shortname": "html"
    }, 
    "toBlob(callback, type)": {
      "args": [
        "callback", 
        "type"
      ], 
      "for": [
        "HTMLCanvasElement"
      ], 
      "shortname": "html"
    }
  }, 
  "toDataURL()": {
    "toDataURL()": {
      "args": [], 
      "for": [
        "HTMLCanvasElement"
      ], 
      "shortname": "html"
    }, 
    "toDataURL(type)": {
      "args": [
        "type"
      ], 
      "for": [
        "HTMLCanvasElement"
      ], 
      "shortname": "html"
    }
  }, 
  "toFloat32Array()": {
    "toFloat32Array()": {
      "args": [], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }
  }, 
  "toFloat64Array()": {
    "toFloat64Array()": {
      "args": [], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }
  }, 
  "toJSON()": {
    "toJSON()": {
      "args": [], 
      "for": [
        "URL"
      ], 
      "shortname": "url"
    }
  }, 
  "toggle()": {
    "toggle(token)": {
      "args": [
        "token"
      ], 
      "for": [
        "DOMTokenList"
      ], 
      "shortname": "dom"
    }, 
    "toggle(token, force)": {
      "args": [
        "token", 
        "force"
      ], 
      "for": [
        "DOMTokenList"
      ], 
      "shortname": "dom"
    }
  }, 
  "trace()": {
    "trace(...data)": {
      "args": [
        "...data"
      ], 
      "for": [], 
      "shortname": "console"
    }
  }, 
  "transaction()": {
    "transaction(storeNames)": {
      "args": [
        "storeNames"
      ], 
      "for": [
        "IDBDatabase"
      ], 
      "shortname": "indexeddb"
    }, 
    "transaction(storeNames, mode)": {
      "args": [
        "storeNames", 
        "mode"
      ], 
      "for": [
        "IDBDatabase"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "transferControlToOffscreen()": {
    "transferControlToOffscreen()": {
      "args": [], 
      "for": [
        "HTMLCanvasElement"
      ], 
      "shortname": "html"
    }
  }, 
  "transferFromImageBitmap()": {
    "transferFromImageBitmap(imageBitmap)": {
      "args": [
        "imageBitmap"
      ], 
      "for": [
        "ImageBitmapRenderingContext"
      ], 
      "shortname": "html"
    }
  }, 
  "transferIn()": {
    "transferIn(endpointNumber, length)": {
      "args": [
        "endpointNumber", 
        "length"
      ], 
      "for": [
        "USBDevice"
      ], 
      "shortname": "webusb"
    }
  }, 
  "transferOut()": {
    "transferOut(endpointNumber, data)": {
      "args": [
        "endpointNumber", 
        "data"
      ], 
      "for": [
        "USBDevice"
      ], 
      "shortname": "webusb"
    }
  }, 
  "transferToImageBitmap()": {
    "transferToImageBitmap()": {
      "args": [], 
      "for": [
        "OffscreenCanvas"
      ], 
      "shortname": "html"
    }
  }, 
  "transform()": {
    "transform(a, b, c, d, e, f)": {
      "args": [
        "a", 
        "b", 
        "c", 
        "d", 
        "e", 
        "f"
      ], 
      "for": [
        "CanvasTransform"
      ], 
      "shortname": "html"
    }
  }, 
  "transformPoint()": {
    "transformPoint()": {
      "args": [], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "transformPoint(point)": {
      "args": [
        "point"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }
  }, 
  "transformToDocument()": {
    "transformToDocument()": {
      "args": [], 
      "for": [], 
      "shortname": "html"
    }
  }, 
  "transformToFragment()": {
    "transformToFragment()": {
      "args": [], 
      "for": [], 
      "shortname": "html"
    }
  }, 
  "translate()": {
    "translate()": {
      "args": [], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "translate(tx)": {
      "args": [
        "tx"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "translate(tx, ty)": {
      "args": [
        "tx", 
        "ty"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "translate(tx, ty, tz)": {
      "args": [
        "tx", 
        "ty", 
        "tz"
      ], 
      "for": [
        "DOMMatrixReadOnly"
      ], 
      "shortname": "geometry"
    }, 
    "translate(x, y)": {
      "args": [
        "x", 
        "y"
      ], 
      "for": [
        "CanvasTransform"
      ], 
      "shortname": "html"
    }
  }, 
  "translateSelf()": {
    "translateSelf()": {
      "args": [], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "translateSelf(tx)": {
      "args": [
        "tx"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "translateSelf(tx, ty)": {
      "args": [
        "tx", 
        "ty"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }, 
    "translateSelf(tx, ty, tz)": {
      "args": [
        "tx", 
        "ty", 
        "tz"
      ], 
      "for": [
        "DOMMatrix"
      ], 
      "shortname": "geometry"
    }
  }, 
  "unregister()": {
    "unregister()": {
      "args": [], 
      "for": [
        "ServiceWorkerRegistration"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "unregisterContentHandler()": {
    "unregisterContentHandler()": {
      "args": [], 
      "for": [
        "NavigatorContentUtils"
      ], 
      "shortname": "html"
    }
  }, 
  "unregisterProperty()": {
    "unregisterProperty(DOMString name)": {
      "args": [
        "DOMString name"
      ], 
      "for": [
        "CSS"
      ], 
      "shortname": "css-properties-values-api"
    }, 
    "unregisterProperty(name)": {
      "args": [
        "name"
      ], 
      "for": [
        "CSS"
      ], 
      "shortname": "css-properties-values-api"
    }
  }, 
  "unregisterProtocolHandler()": {
    "unregisterProtocolHandler()": {
      "args": [], 
      "for": [
        "NavigatorContentUtils"
      ], 
      "shortname": "html"
    }
  }, 
  "unwatchAdvertisements()": {
    "unwatchAdvertisements()": {
      "args": [], 
      "for": [
        "BluetoothDevice"
      ], 
      "shortname": "web-bluetooth"
    }
  }, 
  "update()": {
    "update()": {
      "args": [], 
      "for": [
        "ApplicationCache", 
        "ServiceWorkerRegistration"
      ], 
      "shortname": "html"
    }, 
    "update(DOMString property, UpdateFunction updateFunction)": {
      "args": [
        "DOMString property", 
        "UpdateFunction updateFunction"
      ], 
      "for": [
        "StylePropertyMap"
      ], 
      "shortname": "css-typed-om"
    }, 
    "update(property, updateFunction)": {
      "args": [
        "property", 
        "updateFunction"
      ], 
      "for": [
        "StylePropertyMap"
      ], 
      "shortname": "css-typed-om"
    }, 
    "update(value)": {
      "args": [
        "value"
      ], 
      "for": [
        "IDBCursor"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "upperBound()": {
    "upperBound(upper)": {
      "args": [
        "upper"
      ], 
      "for": [
        "IDBKeyRange"
      ], 
      "shortname": "indexeddb"
    }, 
    "upperBound(upper, open)": {
      "args": [
        "upper", 
        "open"
      ], 
      "for": [
        "IDBKeyRange"
      ], 
      "shortname": "indexeddb"
    }, 
    "upperBound(upper, upperOpen)": {
      "args": [
        "upper", 
        "upperOpen"
      ], 
      "for": [
        "IDBKeyRange"
      ], 
      "shortname": "indexeddb"
    }
  }, 
  "void setKeyframes()": {
    "void setKeyframes(object? keyframes)": {
      "args": [
        "object? keyframes"
      ], 
      "for": [
        "KeyframeEffect"
      ], 
      "shortname": "web-animations"
    }
  }, 
  "waitUntil()": {
    "waitUntil(f)": {
      "args": [
        "f"
      ], 
      "for": [
        "ExtendableEvent"
      ], 
      "shortname": "service-workers"
    }
  }, 
  "warn()": {
    "warn(...data)": {
      "args": [
        "...data"
      ], 
      "for": [], 
      "shortname": "console"
    }
  }, 
  "watchAdvertisements()": {
    "watchAdvertisements()": {
      "args": [], 
      "for": [
        "BluetoothDevice"
      ], 
      "shortname": "web-bluetooth"
    }
  }, 
  "webkitMatchesSelector()": {
    "webkitMatchesSelector(selectors)": {
      "args": [
        "selectors"
      ], 
      "for": [
        "Element"
      ], 
      "shortname": "dom"
    }
  }, 
  "whenDefined()": {
    "whenDefined(name)": {
      "args": [
        "name"
      ], 
      "for": [
        "CustomElementRegistry"
      ], 
      "shortname": "html"
    }
  }, 
  "write()": {
    "write(chunk)": {
      "args": [
        "chunk"
      ], 
      "for": [], 
      "shortname": "streams"
    }
  }, 
  "writeValue()": {
    "writeValue(value)": {
      "args": [
        "value"
      ], 
      "for": [
        "BluetoothRemoteGATTCharacteristic", 
        "BluetoothRemoteGATTDescriptor"
      ], 
      "shortname": "web-bluetooth"
    }
  }
}