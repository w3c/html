<section>

<!--

    Text-level semantics

  This source produces section 4.5: Text-level semantics
  https://w3c.github.io/html/textlevel-semantics.html

  It covers:
  - a, em, strong, small, s, cite, q, dfn, abbr, ruby, rb, rt, rtc, rp, data, time, code,
      var, samp, kbd, sub, sup, i, b, u, mark, bdi, bdo, span, br, and wbr elements
  - Usage summary table

-->

<h3 id="textlevel-semantics">Text-level semantics</h3>

<h4 id="the-a-element">The <dfn element><code>a</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd>If the element has an <code>href</code> attribute: <a>Interactive content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Transparent</a>, but there must be no <a>interactive content</a> or <{a}> element descendants.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><{a/href}> - Address of the <a>hyperlink</a></dd>
    <dd>
      <code>target</code> - Default <a>browsing context</a> for <a>hyperlink</a> <a>navigation</a>
      and [[#forms-form-submission]]
    </dd>
    <dd>
      <code>download</code> - Indicates to download the linked resource
      instead of navigating to it. If the attribute has a set value, change the resource's <var>proposed filename</var> to the set value.
    </dd>
    <dd><{a/rel}> — Relationship of this document (or subsection/topic) to the destination resource</dd>
    <dd><{a/rev}> — <a>Reverse link</a> relationship of the destination resource to this document (or subsection/topic)</dd>
    <dd><code>hreflang</code> - Language of the linked resource</dd>
    <dd><code>type</code> - Hint for the type of the referenced resource</dd>
    <dd><code>referrerpolicy</code> - <a>Referrer policy</a> for <a>fetches</a> initiated by the element</dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd>
      If <{a/href}> is set:
      <a attr-value for="aria/role"><code>link</code></a> (default - <a><em>do not set</em></a>),
      <a attr-value for="aria/role"><code>button</code></a>,
      <a attr-value for="aria/role"><code>checkbox</code></a>,
      <a attr-value for="aria/role"><code>menuitem</code></a>,
      <a attr-value for="aria/role"><code>menuitemcheckbox</code></a>,
      <a attr-value for="aria/role"><code>menuitemradio</code></a>,
      <a attr-value for="aria/role"><code>option</code></a>,
      <a attr-value for="aria/role"><code>radio</code></a>,
      <a attr-value for="aria/role"><code>switch</code></a>,
      <a attr-value for="aria/role"><code>tab</code></a>
      or
      <a attr-value for="aria/role"><code>treeitem</code></a>
    </dd>
    <dd>
      If no <{a/href}> is set:
      <a href="#allowed-aria-roles-states-and-properties">Any role value</a>.
    </dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        interface HTMLAnchorElement : HTMLElement {
          attribute DOMString target;
          attribute DOMString download;
          attribute DOMString rel;
          attribute DOMString rev;
          [SameObject, PutForwards=value] readonly attribute DOMTokenList relList;
          attribute DOMString hreflang;
          attribute DOMString type;
          attribute DOMString text;
          attribute DOMString referrerPolicy;
        };
        HTMLAnchorElement implements HTMLHyperlinkElementUtils;
      </pre>
    </dd>
    <dt>
      DPub Roles:
    </dt>
    <dd>
      <a href="https://www.w3.org/TR/dpub-aria-1.0/#doc-backlink"><code>doc-backlink</code></a>,
      <a href="https://www.w3.org/TR/dpub-aria-1.0/#doc-biblioref"><code>doc-biblioref</code></a>,
      <a href="https://www.w3.org/TR/dpub-aria-1.0/#doc-glossref"><code>doc-glossref</code></a>
      or
      <a href="https://www.w3.org/TR/dpub-aria-1.0/#doc-noteref"><code>doc-noteref</code></a>
    </dd>
  </dl>

  If the <{a}> element has an <{a/href}> attribute, then it <a>represents</a> a
  <a>hyperlink</a> (a hypertext anchor) labeled by its contents.

  If the <{a}> element has no <{a/href}> attribute, then the element
  <a>represents</a> a placeholder for where a link might otherwise have been placed, if it had been
  relevant, consisting of just the element's contents.

  The <code>target</code>, <code>download</code>, <{a/rel}>, <{a/rev}>, <code>hreflang</code>,
  <code>type</code>, and <code>referrerpolicy</code> attributes must be omitted if the
  <{a/href}> attribute is not present.

  <div class="example">

    If a site uses a consistent navigation toolbar on every page, then the link that would
    normally link to the page itself could be marked up using an <{a}> element:

    <xmp highlight="html">
      <nav>
        <ul>
          <li> <a href="/">Home</a> </li>
          <li> <a href="/news">News</a> </li>
          <li> <a>Examples</a> </li>
          <li> <a href="/legal">Legal</a> </li>
        </ul>
      </nav>
    </xmp>
  </div>

    The <{a/href}>, <code>target</code>, <code>download</code>, and <code>referrerpolicy</code>
    attributes affect what happens when users <a>follow hyperlinks</a> or <a>download hyperlinks</a>
    created using the <{a}> element. The <{a/rel}>, <{a/rev}>, <code>hreflang</code>, and
    <code>type</code> attributes may be used to indicate to the user the likely nature of
    the target resource before the user follows the link.

    The <a>activation behavior</a> of <{a}> elements that create <a>hyperlinks</a> is to
    run the following steps:

    1. If the <{a}> element's {{Document}} is not <a>fully active</a>, then abort
        these steps.
    2. If either the <{a}> element has a <code>download</code> attribute and the algorithm
        is not <a>allowed to show a popup</a>, or the element's <code>target</code> attribute is
        present and applying
        <a>the rules for choosing a browsing context given a browsing context name</a>, using the
        value of the <code>target</code> attribute as the browsing context name, would result
        in there not being a chosen browsing context, then run these substeps:
        1. If there is an <a>entry settings object</a>, throw an {{InvalidAccessError}}
            exception.
        2. Abort these steps without following the hyperlink.
    3. If the target of the <code>click</code> event is an <{img}> element with an
        <{img/ismap}> attribute specified, then server-side image map processing must be
        performed, as follows:
        1. If the <code>click</code> event was a real pointing-device-triggered <code>click</code>
            event on the <{img}> element, then let |x| be the distance in CSS
            pixels from the left edge of the image
            to the location of the click, and let |y| be the distance
            in CSS pixels from the top edge of the image
            to the location of the click. Otherwise, let |x|
            and |y| be zero.
        2. Let <var>hyperlink suffix</var> be a U+003F QUESTION MARK character, the value of
            <var>x</var> expressed as a base-ten integer using <a>ASCII digits</a>, a U+002C COMMA
            character (,), and the value of <var>y</var> expressed as a base-ten integer using
            <a>ASCII digits</a>.
    4. Finally, the user agent must <a>follow the hyperlink</a> or <a>download the hyperlink</a>
        created by the <{a}> element, as determined by the <code>download</code> attribute
        and any expressed user preference, passing <var>hyperlink suffix</var>, if the steps above
        defined it.

  <dl class="domintro">
    <dt><var>a</var> . <code>text</code></dt>
    <dd>Same as {{Node/textContent}}.</dd>
  </dl>

    The IDL attributes <dfn attribute for="HTMLAnchorElement"><code>download</code></dfn>,
    <dfn attribute for="HTMLAnchorElement"><code>target</code></dfn>,
    <dfn attribute for="HTMLAnchorElement"><code>rel</code></dfn>,
    <dfn attribute for="HTMLAnchorElement"><code>rev</code></dfn>,
    <dfn attribute for="HTMLAnchorElement"><code>hreflang</code></dfn>, and
    <dfn attribute for="HTMLAnchorElement"><code>type</code></dfn>, must <a>reflect</a> the
    respective content attributes of the same name.

    The IDL attribute <dfn attribute for="HTMLAnchorElement"><code>relList</code></dfn> must
    <a>reflect</a> the <{a/rel}> content attribute.

    The IDL attribute <dfn><code>referrerPolicy</code></dfn> must <a>reflect</a> the
    <code>referrerpolicy</code> content attribute, <a>limited to only known values</a>.

    The <dfn attribute for="HTMLAnchorElement"><code>text</code></dfn> IDL attribute, on getting,
    must return the same value as the {{Node/textContent}} IDL attribute on the element, and on
    setting, must act as if the {{Node/textContent}} IDL attribute on the element had been set to
    the new value.

    <hr />

    The <{a}> element also supports the <code>HTMLHyperlinkElementUtils</code> interface. [[!URL]]

    When the element is created, and whenever the element's <{links/href}> content attribute is
    set, changed, or removed, the user agent must invoke the element's <code>HTMLHyperlinkElementUtils</code>
    interface's set the input algorithm with the value of the <{links/href}> content
    attribute, if any, or the empty string otherwise, as the given value.

    The element's <code>HTMLHyperlinkElementUtils</code> interface's get the base algorithm must simply return
    the <a>document base URL</a>.

    The element's <code>HTMLHyperlinkElementUtils</code> interface's query encoding is the
    <a>document's character encoding</a>.

    When the element's <code>HTMLHyperlinkElementUtils</code> interface invokes its update steps with a string
    <var>value</var>, the user agent must set the element's <{links/href}> content attribute to
    the string <var>value</var>.

  <div class="example">
    The <{a}> element may be wrapped around entire paragraphs, lists, tables, and so forth,
    even entire sections, so long as there is no interactive content within (e.g., buttons or other
    links). This example shows how this can be used to make an entire advertising block into a link:

    <xmp highlight="html">
      <aside class="advertising">
        <h2>Advertising</h2>
        <a href="https://ad.example.com/?adid=1929&amp;pubid=1422">
          <section>
            <h3>Mellblomatic 9000!</h3>
            <p>Turn all your widgets into mellbloms!</p>
            <p>Only $9.99 plus shipping and handling.</p>
          </section>
        </a>
        <a href="https://ad.example.com/?adid=375&amp;pubid=1422">
          <section>
            <h3>The Mellblom Browser</h3>
            <p>Web browsing at the speed of light.</p>
            <p>No other browser goes faster!</p>
          </section>
        </a>
      </aside>
    </xmp>
  </div>

<h4 id="the-em-element">The <dfn element><code>em</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

  The <{em}> element <a>represents</a> stress emphasis of its contents.

  The level of stress that a particular piece of content has is given by its number of ancestor
  <{em}> elements.

  The placement of stress emphasis changes the meaning of the sentence. The element thus forms an
  integral part of the content. The precise way in which stress is used in this way depends on the
  language.

  <div class="example">
    These examples show how changing the stress emphasis changes the meaning. First, a general
    statement of fact, with no stress:

    <xmp highlight="html"><p>Cats are cute animals.</p></xmp>

    By emphasizing the first word, the statement implies that the kind of animal under discussion
    is in question (maybe someone is asserting that dogs are cute):

    <xmp highlight="html"><p><em>Cats</em> are cute animals.</p></xmp>

    Moving the stress to the verb, one highlights that the truth of the entire sentence is in
    question (maybe someone is saying cats are not cute):

    <xmp highlight="html"><p>Cats <em>are</em> cute animals.</p></xmp>

    By moving it to the adjective, the exact nature of the cats is reasserted (maybe someone
    suggested cats were <em>mean</em> animals):

    <xmp highlight="html"><p>Cats are <em>cute</em> animals.</p></xmp>

    Similarly, if someone asserted that cats were vegetables, someone correcting this might
    emphasize the last word:

    <xmp highlight="html"><p>Cats are cute <em>animals</em>.</p></xmp>

    By emphasizing the entire sentence, it becomes clear that the speaker is fighting hard to get
    the point across. This kind of stress emphasis also typically affects the punctuation, hence the
    exclamation mark here.

    <xmp highlight="html"><p><em>Cats are cute animals!</em></p></xmp>

    Anger mixed with emphasizing the cuteness could lead to markup such as:

    <xmp highlight="html"><p><em>Cats are <em>cute</em> animals!</em></p></xmp>
  </div>

  <div class="note">
    The <{em}> element isn't a generic "italics" element. Sometimes, text is intended to
    stand out from the rest of the paragraph, as if it was in a different mood or voice. For this,
    the <{i}> element is more appropriate.

    The <{em}> element also isn't intended to convey importance; for that purpose, the
    <{strong}> element is more appropriate.
  </div>

<h4 id="the-strong-element">The <dfn element><code>strong</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

  The <{strong}> element <a>represents</a> strong importance, seriousness, or
  urgency for its contents.

  <strong>Importance</strong>: The <{strong}> element can be used in a heading, caption,
  or paragraph to distinguish the part that really matters from other parts that might be more
  detailed, more jovial, or merely boilerplate.

  <p class="example">For example, the first word of the previous paragraph is marked up with
  <code>strong</code> to distinguish it from the more detailed text in the rest of the
  paragraph.</p>

  <strong>Seriousness</strong>: The <{strong}> element can be used to mark up a warning
  or caution notice.

  <strong>Urgency</strong>: The <{strong}> element can be used to denote contents that
  the user needs to see sooner than other parts of the document.

  The relative level of importance of a piece of content is given by its number of ancestor
  <{strong}> elements; each <{strong}> element increases the importance of its
  contents.

  Changing the importance of a piece of text with the <{strong}> element does not change
  the meaning of the sentence.

  <div class="example">
    Here, the word "chapter" and the actual chapter number are mere boilerplate, and the actual
    name of the chapter is marked up with <code>strong</code>:

    <xmp highlight="html"><h1>Chapter 1: <strong>The Praxis</strong></h1></xmp>

    In the following example, the name of the diagram in the caption is marked up with
    <{strong}>, to distinguish it from boilerplate text (before) and the description
    (after):

    <xmp highlight="html">
      <figcaption>
        Figure 1. <strong>Ant colony dynamics</strong>. The ants in this colony are affected by the heat source (upper left) and the food source (lower right).
      </figcaption>
    </xmp>

    In this example, the heading is really "Flowers, Bees, and Honey", but the author has added a
    light-hearted addition to the heading. The <{strong}> element is thus used to mark up
    the first part to distinguish it from the latter part.

    <xmp highlight="html"><h1><strong>Flowers, Bees, and Honey</strong> and other things I don't understand</h1></xmp>
  </div>

  <div class="example">
    Here is an example of a warning notice in a game, with the
    various parts marked up according to how important they are:

    <xmp highlight="html">
      <p>
        <strong>Warning.</strong> This dungeon is dangerous.
        <strong>Avoid the ducks.</strong> Take any gold you find.
        <strong><strong>Do not take any of the diamonds</strong>, they are explosive and <strong>will destroy anything within ten meters.</strong></strong> You have been warned.
      </p>
    </xmp>
  </div>

  <div class="example">
    In this example, the <{strong}> element is used to denote the part of the text that
    the user is intended to read first.

    <xmp highlight="html">
      <p>Welcome to Remy, the reminder system.</p>
      <p>Your tasks for today:</p>
      <ul>
        <li><strong>Turn off the oven.</strong></li>
        <li>Put out the trash.</li>
        <li>Do the laundry.</li>
      </ul>
    </xmp>
  </div>

<h4 id="the-small-element">The <dfn element><code>small</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

  The <{small}> element <a>represents</a> side comments such as small print.

  <p class="note">
    Small print typically features disclaimers, caveats, legal restrictions, or copyrights. Small
    print is also sometimes used for attribution, or for satisfying licensing requirements.
  </p>

  <p class="note">
    The <{small}> element does not "de-emphasize" or lower the importance of text
    emphasized by the <{em}> element or marked as important with the <code>strong</code>
    element. To mark text as not emphasized or important, simply do not mark it up with the
    <code>em</code> or <{strong}> elements respectively.
  </p>

  The <{small}> element should not be used for extended spans of text, such as multiple
  paragraphs, lists, or sections of text. It is only intended for short runs of text. The text of a
  page listing terms of use, for instance, would not be a suitable candidate for the
  <{small}> element: in such a case, the text is not a side comment, it is the main content
  of the page.

  <div class="example">
    In this example, the <{small}> element is used to indicate that value-added tax is
    not included in a price of a hotel room:

    <xmp highlight="html">
      <dl>
        <dt>Single room</dt>
        <dd>199 € <small>breakfast included, VAT not included</small></dd>
        <dt>Double room</dt>
        <dd>239 € <small>breakfast included, VAT not included</small></dd>
      </dl>
    </xmp>
  </div>

  <div class="example">
    In this second example, the <{small}> element is used for a side comment in an article.

    <xmp highlight="html">
      <p>Example Corp today announced record profits for the second quarter <small>(Full Disclosure: Foo News is a subsidiary of Example Corp)</small>, leading to speculation about a third quarter merger with Demo Group.</p>
    </xmp>

    This is distinct from a sidebar, which might be multiple paragraphs long and is removed from the
    main flow of text. In the following example, we see a sidebar from the same article. This
    sidebar also has small print, indicating the source of the information in the sidebar.

    <xmp highlight="html">
      <aside>
        <h1>Example Corp</h1>
        <p>This company mostly creates small software and Web sites.</p>
        <p>The Example Corp company mission is "To provide entertainment and news on a sample basis".</p>
        <p><small>Information obtained from <a href="https://example.com/about.html">example.com</a> home page.</small></p>
      </aside>
    </xmp>

    In this last example, the <{small}> element is marked as being <em>important</em>
    small print.

    <xmp highlight="html">
      <p><strong><small>Continued use of this service will result in a kiss.</small></strong></p>
    </xmp>
  </div>

<h4 id="the-s-element">The <dfn element><code>s</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

  The <{s}> element <a>represents</a> contents that are no longer accurate or no longer
  relevant.

  <p class="note">
    The <{s}> element is not appropriate when indicating document edits; to mark a span of
    text as having been removed from a document, use the <{del}> element.
  </p>

  <div class="example">
    In this example a recommended retail price has been marked as no longer relevant as the product
    in question has a new sale price.

    <xmp highlight="html">
      <p>Buy our Iced Tea and Lemonade!</p>
      <p><s>Recommended retail price: $3.99 per bottle</s></p>
      <p><strong>Now selling for just $2.99 a bottle!</strong></p>
    </xmp>
  </div>

<h4 id="the-cite-element">The <dfn element><code>cite</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

  The <{cite}> element <a>represents</a> a reference to a creative work. It must include
  the title of the work or the name of the author (person, people or organization) or an URL
  reference, or a reference in abbreviated form as per the conventions used for the addition of
  citation metadata.

  <p class="note">
    Creative works include a book, a paper, an essay, a poem, a score, a song, a script, a film, a
    TV show, a game, a sculpture, a painting, a theatre production, a play, an opera, a musical, an
    exhibition, a legal case report, a computer program, a web site, a web page, a blog post or
    comment, a forum post or comment, a tweet, a written or oral statement, etc.
  </p>

  <div class="example">
    Here is an example of the author of a quote referenced using the <{cite}> element:

    <xmp highlight="html">
      <p>
        In the words of <cite>Charles Bukowski</cite> -
        <q>An intellectual says a simple thing in a hard way. An artist says a hard thing in a simple way.</q>
      </p>
    </xmp>
  </div>

  <div class="example">
    This second example identifies the author of a tweet by referencing the authors name using the <{cite}> element:

    <xmp highlight="html">
      <blockquote class="twitter-tweet">
        <p>This is for everyone #london2012 #oneweb #openingceremony @webfoundation @w3c</p>
        <cite>— Tim Berners-Lee (@timberners_lee) <a href="https://twitter.com/timberners_lee/status/228960085672599552">27 July 2012</a></cite>
      </blockquote>
    </xmp>
  </div>

  <div class="example">
    In this example the <{cite}> element is used to reference the title of a work in a
    bibliography:

    <xmp highlight="html">
      <p><cite>Universal Declaration of Human Rights</cite>, United Nations, December 1948. Adopted by General Assembly resolution 217 A (III).</p>
    </xmp>
  </div>

  <div class="example">
    In this example the <{cite}> element is used to reference the title of a television
    show:

    <xmp highlight="html"><p>Who is your favorite doctor (in <cite>Doctor Who</cite>)?</p></xmp>
  </div>

  <div class="example">
    A very common use for the <{cite}> element is to identify the author of a comment in a
    blog post or forum, as in this example:

    <xmp highlight="html">
      <article id="comment-1">
        Comment by <cite><a href="https://example.net">Elizabeth Bennet</a></cite>
        <time datetime="2013-08-19T16:01">August 19th, 2013 at 4:01 pm</time>
        <p>There is a stubbornness about me that never can bear to be frightened at the will of others. My courage always rises at every attempt to intimidate me</p>
      </article>
    </xmp>
  </div>

  <div class="example">
    Another common use for the <{cite}> element is to reference the <code>URL</code>
    of a search result, as in this example:

    <xmp highlight="html">
      <div id="resultStats">About 416,000,000 results 0.33 seconds) </div>

        <p><a href="https://www.w3.org/html/wg/">W3C <i>HTML Working Group</i></a></p>
        <p><cite>www.w3.org/<b>html</b>/wg/</cite></p>
        <p>15 Apr 2013 - The <i>HTML Working Group</i> is currently chartered to continue its work through 31 December 2014. A Plan 2014 document published by the...</p>
      ...
    </xmp>
  </div>

  <div class="example">
    Where the <{cite}> element is used to identify an abbreviated reference such as
    <i>Ibid.</i> it is suggested that this reference be linked to the base reference:

    <xmp highlight="html">
      <article>
        <h2>Book notes</h2>
        <blockquote>"Money is the real cause of poverty,"
          <footer>
            <cite id="baseref">The Ragged-Trousered Philanthropists, page 89.</cite>
          </footer>
        </blockquote>
        <blockquote>"Money is the cause of poverty because it is the device by which those who are too lazy to work are enabled to rob the workers of the fruits of their labour."
          <a href="#baseref"><cite>Ibid.</cite></a>
        </blockquote>
      </article>
    </xmp>
  </div>

  <p class="note">
    A <em>citation</em> is not a <em>quote</em> (for which the <{q}> element is
    appropriate).
  </p>

  <div class="example">
    This is incorrect usage, because <{cite}> is not for quotes:

    <xmp highlight="html">
      <p><cite>This is wrong!, said Hillary.</cite> is a quote from the popular daytime TV drama When Ian became Hillary.</p>
    </xmp>

    This is an example of the correct usage:

    <xmp highlight="html">
      <p><q>This is correct, said Hillary.</q> is a quote from the popular daytime TV drama <cite>When Ian became Hillary</cite>.</p>
    </xmp>
  </div>

<h4 id="the-q-element">The <dfn element><code>q</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd>
      <code>cite</code> - Link to the source of the quotation.
    </dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a>.</dd>
    <dd>
      Any <code>aria-*</code> attributes
      <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.
    </dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLQuoteElement}}.</dd>
  </dl>

  The <{q}> element <a>represents</a> some <a>phrasing content</a> quoted from another source.

  Quotation punctuation (such as quotation marks) that is quoting the contents of the element must
  not appear immediately before, after, or inside <{q}> elements; they will be inserted
  into the rendering by the user agent.

  Content inside a <{q}> element must be quoted from another source, whose address, if it
  has one, may be cited in the <dfn element-attr for="q"><code>cite</code></dfn> attribute. The source may be fictional,
  as when quoting characters in a novel or screenplay.

  If the <{q/cite}> attribute is present, it must be a
  <a>valid URL potentially surrounded by spaces</a>. To obtain the corresponding citation link, the
  value of the attribute must be <a>parsed</a> relative to the element's <a>node document</a>.
  User agents may allow users to follow such citation links, but they are primarily intended for
  private use (e.g., by server-side scripts collecting statistics about a site's use of quotations),
  not for readers.

  The <{q}> element must not be used in place of quotation marks that do not represent
  quotes; for example, it is inappropriate to use the <{q}> element for marking up
  sarcastic statements.

  The use of <{q}> elements to mark up quotations is entirely optional; using explicit
  quotation punctuation without <{q}> elements is just as correct.

  <div class="example">
    Here is a simple example of the use of the <{q}> element:

    <xmp highlight="html">
      <p>The man said <q>Things that are impossible just take longer</q>. I disagreed with him.</p>
    </xmp>
  </div>

  <div class="example">
    Here is an example with both an explicit citation link in the <{q}> element, and an
    explicit citation outside:

    <xmp highlight="html">
      <p>The W3C page <cite>About W3C</cite> says the W3C's mission is <q cite="https://www.w3.org/Consortium/">To lead the World Wide Web to its full potential by developing protocols and guidelines that ensure long-term growth for the Web</q>. I fully agree with this mission.</p>
    </xmp>
  </div>

  <div class="example">
    In the following example, the quotation itself contains a quotation:

    <xmp highlight="html">
      <p>In <cite>Example One</cite>, he writes <q>The man said <q>Things that are impossible just take longer</q>. I disagreed with him</q>. Well, I disagree even more!</p>
    </xmp>
  </div>

  <div class="example">
    In the following example, quotation marks are used instead of the <{q}> element:

    <xmp highlight="html">
      <p>His best argument was ❝I disagree❞, which I thought was laughable.</p>
    </xmp>
  </div>

  <div class="example">
    In the following example, there is no quote — the quotation marks are used to name a
    word. Use of the <{q}> element in this case would be inappropriate.

    <xmp highlight="html">
      <p>The word "ineffable" could have been used to describe the disaster resulting from the campaign's mismanagement.</p>
    </xmp>
  </div>

<h4 id="the-dfn-element">The <dfn element><code>dfn</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>, but there must be no <{dfn}> element descendants.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd>Also, the <{dfn/title}> attribute has special semantics on this element.</dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

  The <{dfn}> element <a>represents</a> the defining instance of a term. The
  <a>term-description group</a>, <{p}>, <{li}> or <{section}> element that is the nearest
  ancestor of the <{dfn}> element must also contain the definition(s) for the <a>term</a>
  given by the <{dfn}> element.

  <dfn lt="defines the term|defining term|term">Defining term</dfn>: If the <{dfn}> element has a
  <dfn element-attr for="dfn"><code>title</code></dfn>
  attribute, then the exact value of that attribute is the term being defined. Otherwise, if it
  contains exactly one element child node and no child {{Text}} nodes, and that child
  element is an <{abbr}> element with a <{abbr/title}> attribute, then the exact value
  of <em>that</em> attribute is the term being defined. Otherwise, it is the exact
  {{Node/textContent}} of the <{dfn}> element that gives the term being defined.

  If the <{dfn/title}> attribute of the <{dfn}> element is present, then it must
  contain only the term being defined.

  <p class="note">
    The <{global/title}> attribute of ancestor elements does not affect <{dfn}> elements.
  </p>

  An <{a}> element that links to a <{dfn}> element represents an instance of the
  term defined by the <{dfn}> element.

  <div class="example">
    In the following fragment, the term "Garage Door Opener" is first defined in the first
    paragraph, then used in the second. In both cases, its abbreviation is what is actually
    displayed.

    <xmp highlight="html">
      <p>The <dfn><abbr title="Garage Door Opener">GDO</abbr></dfn> is a device that allows off-world teams to open the iris.</p>
      <!-- ... later in the document: -->
      <p>Teal'c activated his <abbr title="Garage Door Opener">GDO</abbr> and so Hammond ordered the iris to be opened.</p>
    </xmp>

    With the addition of an <{a}> element, the reference can be made explicit:

    <xmp highlight="html">
      <p>The <dfn id="gdo"><abbr title="Garage Door Opener">GDO</abbr></dfn> is a device that allows off-world teams to open the iris.</p>
      <!-- ... later in the document: -->
      <p>Teal'c activated his <a href="#gdo"><abbr title="Garage Door Opener">GDO</abbr></a> and so Hammond ordered the iris to be opened.</p>
    </xmp>
</div>

<h4 id="the-abbr-element">The <dfn element><code>abbr</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd>Also, the <{abbr/title}> attribute has special semantics on this element.</dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

  The <{abbr}> element <a>represents</a> an abbreviation or acronym, optionally with its
  expansion. The <dfn element-attr for="abbr"><code>title</code></dfn> attribute may be used to provide an expansion of the
  abbreviation. The attribute, if specified, must contain an expansion of the abbreviation, and
  nothing else.

  <div class="example">
    The paragraph below contains an abbreviation marked up with the <{abbr}> element.
    This paragraph <a>defines the term</a> "Web Hypertext Application
    Technology Working Group".

    <xmp highlight="html">
      <p>The <dfn id="w3c"><abbr title="World Wide Web Consortium">W3C</abbr></dfn> is the main international standards organization for the World Wide Web.</p>
    </xmp>

    An alternative way to write this would be:

    <xmp highlight="html">
      <p>The <dfn id="w3c">World Wide Web Consortium</dfn> (<abbr title="World Wide Web Consortium">W3C</abbr>) is the main international standards organization for the World Wide Web.</p>
    </xmp>
  </div>

  <div class="example">
    This paragraph has two abbreviations. Notice how only one is defined; the other, with no
    expansion associated with it, does not use the <{abbr}> element.

    <xmp highlight="html">
      <p>The <abbr title="World Wide Web Consortium">W3C</abbr> started working on HTML in 1994.</p>
    </xmp>
  </div>

  <div class="example">
    This paragraph links an abbreviation to its definition.

    <xmp highlight="html">
      <p>The <a href="#w3c"><abbr title="World Wide Web Consortium">W3C</abbr></a> has members all over the world.</p>
    </xmp>

  </div>

  <div class="example">
    This paragraph marks up an abbreviation without giving an expansion, possibly as a hook to
    apply styles for abbreviations (e.g., smallcaps).

    <xmp highlight="html">
      <p>There are several <abbr>W3C</abbr> offices around the world.</p>
    </xmp>
  </div>

  If an abbreviation is pluralized, the expansion's grammatical number (plural vs singular) must
  match the grammatical number of the contents of the element.

  <div class="example">
    Here the plural is outside the element, so the expansion is in the singular:

    <xmp highlight="html">
      <p>Two <abbr title="Working Group">WG</abbr>s worked on this specification: the <abbr>CSSWG</abbr> and the <abbr>ARIA</abbr>.</p>
    </xmp>

    Here the plural is inside the element, so the expansion is in the plural:

    <xmp highlight="html">
      <p>Two <abbr title="Working Groups">WGs</abbr> worked on this specification: the <abbr>CSSWG</abbr> and the <abbr>ARIA</abbr>.</p>
    </xmp>
  </div>

  Abbreviations do not have to be marked up using this element. It is expected to be useful in the
  following cases:

  * Abbreviations for which the author wants to give expansions, where using the <{abbr}>
    element with a <{abbr/title}> attribute is an alternative to including the expansion inline
    (e.g., in parentheses).
  * Abbreviations that are likely to be unfamiliar to the document's readers, for which authors are
    encouraged to either mark up the abbreviation using an <{abbr}> element with a
    <{abbr/title}> attribute or include the expansion inline in the text the first time the
    abbreviation is used.
  * Abbreviations whose presence needs to be semantically annotated, e.g., so that they can be
    identified from a style sheet and given specific styles, for which the <{abbr}> element
    can be used without a <{abbr/title}> attribute.

  Providing an expansion in a <{abbr/title}> attribute once will not necessarily cause other
  <{abbr}> elements in the same document with the same contents but without a
  <{abbr/title}> attribute to behave as if they had the same expansion. Every <{abbr}>
  element is independent.

<h4 id="the-ruby-element">The <dfn element><code>ruby</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>See prose.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

  The <{ruby}> element allows one or more spans of phrasing content to be marked with ruby
  annotations. Ruby annotations are short runs of text presented alongside base text, primarily
  used in East Asian typography as a guide for pronunciation or to include other annotations. In
  Japanese, this form of typography is also known as <i>furigana</i>. Ruby text can appear on either
  side, and sometimes both sides, of the base text, and it is possible to control its position using
  CSS. A more complete introduction to ruby can be found in the <cite>Use Cases &amp; Exploratory
  Approaches for Ruby Markup</cite> document as well as in <cite>CSS Ruby</cite>.
  [[RUBY-UC]] [[CSS3-RUBY]]

  The content model of <{ruby}> elements consists of one or more of the following sequences:

  1. One or more <a>phrasing content</a> nodes or <{rb}> elements.
  2. One or more <code>rt</code> or <{rtc}> elements, each of which either immediately
      preceded or followed by an <{rp}> elements.

  The <{ruby}>, <{rb}>, <{rtc}>, and <{rt}> elements can be used
  for a variety of kinds of annotations, including in particular (though by no means limited to)
  those described below. For more details on Japanese Ruby in particular, and how to render Ruby for
  Japanese, see <cite>Requirements for Japanese Text Layout</cite>. [[!JLREQ]] The <code>rp</code>
  element can be used as fallback content when ruby rendering is not supported.

  : Mono-ruby for individual base characters
  :: Annotations (the ruby text) are associated individually with each ideographic character (the
      base text). In Japanese this is typically hiragana or katakana characters used to provide
      readings of kanji characters.

      <div class="example">
        <xmp highlight="html"><ruby>base<rt>annotation</ruby></xmp>
      </div>

      When no <{rb}> element is used, the base is implied, as above. But you can also make
      it explicit. This can be useful notably for styling, or when consecutive bases are to be
      treated as a group, as in the jukugo ruby example further down.

      <div class="example">
        <xmp highlight="html"><ruby><rb>base<rt>annotation</ruby></xmp>
      </div>

      In the following example, notice how each annotation corresponds to a single base character.

      <div class="example">
        <xmp highlight="html">
          <ruby>日<rt>に</rt></ruby><ruby>本<rt>ほん</rt></ruby>
          <ruby>語<rt>ご</rt></ruby>で<ruby>書<rt>か</rt></ruby> いた
          <ruby>作<rt>さく</rt></ruby><ruby>文<rt>ぶん</rt></ruby>です。
        </xmp>
      </div>

      Ruby text interspersed in regular text provides structure akin to the following image:

      <img src="images/composition.png" width="390" height="87" alt="An example of ruby text mixed up with regular text." />

      This example can also be written as follows, using one <{ruby}> element with two
      segments of base text and two annotations (one for each) rather than two back-to-back
      <{ruby}> elements each with one base text segment and annotation (as in the markup
      above):

      <div class="example">
        <xmp highlight="html">
          <ruby>日<rt>に</rt>本<rt>ほん</rt>語<rt>ご</rt></ruby>
          で<ruby>書<rt>か</rt></ruby>
          いた<ruby>作<rt>さく</rt>文<rt>ぶん</rt></ruby>です。
        </xmp>
      </div>

    : Group ruby
    :: Group ruby is often used where phonetic annotations don't map to discreet base characters, or
        for semantic glosses that span the whole base text. For example, the word "today" is written
        with the characters 今日, literally "this day". But it's pronounced きょう (kyou), which
        can't be broken down into a "this" part and a "day" part. In typical rendering, you can't
        split text that is annotated with group ruby; it has to wrap as a single unit onto the next
        line. When a <a>ruby text annotation</a> maps to a base that is comprised of more than one
        character, then that base is grouped.

        The following group ruby:

        <img src="images/group.png" width="78" height="88" alt="Group ruby example with きょう annotating 今日" />

        Can be marked up as follows:

        <div class="example">
          <xmp highlight="html"><ruby>今日<rt>きょう</ruby></xmp>
        </div>

    : Jukugo ruby
    :: <em>Jukugo</em> refers to a Japanese compound noun, i.e., a word made up of more than one
        kanji character. <em>Jukugo ruby</em> is a term that is used not to describe ruby
        annotations over jukugo text, but rather to describe ruby with a behavior slightly
        different from mono or group ruby. Jukugo ruby is similar to mono ruby, in that there is
        a strong association between ruby text and individual base characters, but the ruby text
        is typically rendered as grouped together over multiple ideographs when they are on the
        same line.

        The distinction is captured in this example:

        <img src="images/hokekyou.png" width="66" height="126" alt="Example of jukugo ruby" />

        Which can be marked up as follows:

        <div class="example">
          <xmp highlight="html">
            <ruby>法<rb>華<rb>経<rt>ほ<rt>け<rt>きょう</ruby>
          </xmp>
        </div>

        In this example, each <{rt}> element is paired with its respective <code>rb</code>
        element, the difference with an interleaved <code>rb</code>/<code>rt</code> approach being
        that the sequences of both base text and ruby annotations are implicitly placed in common
        containers so that the grouping information is captured.

        <p class="note">
          For more details on <a>Jukugo Ruby rendering</a>, see Appendix F in the
          <cite>Requirements for Japanese Text Layout</cite> and Use Case C: Jukugo ruby in the
          <cite>Use Cases &amp; Exploratory Approaches for Ruby Markup</cite>. [[!JLREQ]]
          [[RUBY-UC]]
        </p>

    : Inline ruby
    :: In some contexts, for instance when the font size or line height are too small for ruby to be
        readable, it is desirable to inline the ruby annotation such that it appears in parentheses
        after the text it annotates. This also provides a convenient fallback strategy for user
        agents that do not support rendering ruby annotations.

        Inlining takes grouping into account. For example, Tokyo is written with two kanji
        characters, 東, which is pronounced とう, and 京, which is pronounced きょう. Each base
        character should be annotated individually, but the fallback should be 東京(とうきょう) not
        東(とう)京(きょう). This can be marked up as follows:

        <div class="example">
          <xmp highlight="html">
            <ruby>東<rb>京<rt>とう<rt>きょう</ruby>
          </xmp>
        </div>

        Note that the above markup will enable the usage of parentheses when inlining for browsers
        that support ruby layout, but for those that don't it will fail to provide parenthetical
        fallback. This is where the <{rp}> element is useful. It can be inserted into the
        above example to provide the appropriate fallback when ruby layout is not supported:

      <div class="example">
        <xmp highlight="html">
          <ruby>東<rb>京<rp>(<rt>とう<rt>きょう<rp>)</ruby>
        </xmp>
      </div>

    : Text with both phonetic and semantic annotations (double-sided ruby)
    :: Sometimes, ruby can be used to annotate a base twice.

        In the following example, the Chinese word for San Francisco (旧金山, i.e., "old gold
        mountain") is annotated both using pinyin to give the pronunciation, and with the original
        English.

        <img src="images/group-double.png" width="113" height="84" alt="San Francisco in Chinese, with both pinyin and the original English as annotations." />

        Which is marked up as follows:

        <div class="example">
          <xmp highlight="html">
            <ruby><rb>旧<rb>金<rb>山<rt>jiù<rt>jīn<rt>shān<rtc>San Francisco</ruby>
          </xmp>
        </div>

          In this example, a single base run of three base characters is annotated with three pinyin
          ruby text segments in a first (implicit) container, and an <{rtc}> element is
          introduced in order to provide a second single <a>ruby text annotation</a> being the
          city's English name.

          We can also revisit our jukugo example above with 上手 ("skill") to show how it can be
          annotation in both kana and romaji phonetics while at the same time maintaining the
          pairing to bases and annotation grouping information.

          <img src="images/mono-or-jukugo-double.png" width="185" height="120" alt="上手 (&quot;skill&quot;) annotated in both kana and romaji, shown in both jukugo and mono styles." />

          Which is marked up as follows:

        <div class="example">
          <xmp highlight="html">
            <ruby><rb>上<rb>手<rt>じよう<rt>ず<rtc><rt>jou<rt>zu</ruby>
          </xmp>
        </div>

        Text that is a direct child of the <{rtc}> element implicitly produces a ruby text
        segment as if it were contained in an <{rt}> element. In this contrived example,
        this is shown with some symbols that are given names in English and French with annotations
        intended to appear on either side of the base symbol.

        <div class="example">
          <xmp highlight="html">
            <ruby>
              ♥<rt>Heart<rtc lang="fr">Cœur</rtc>
              ☘<rt>Shamrock<rtc lang="fr">Trèfle</rtc>
              ✶<rt>Star<rtc lang="fr">Étoile
            </ruby>
          </xmp>
        </div>

        Similarly, text directly inside a <{ruby}> element implicitly produces a ruby base
        as if it were contained in an <{rb}> element, and <code>rt</code> children of
        <code>ruby</code> are implicitly contained in an <code>rtc</code> container. In effect, the
        above example is equivalent (in meaning, though not in the DOM it produces) to the
        following:

        <div class="example">
          <xmp highlight="html">
            <ruby>
              <rb>♥</rb><rtc><rt>Heart</rt></rtc><rtc lang="fr"><rt>Cœur</rt></rtc>
              <rb>☘</rb><rtc><rt>Shamrock</rt></rtc><rtc lang="fr"><rt>Trèfle</rt></rtc>
              <rb>✶</rb><rtc><rt>Star</rt></rtc><rtc lang="fr"><rt>Étoile</rt></rtc>
            </ruby>
          </xmp>
        </div>

  <hr>

    Within a ruby element, content is parcelled into a series of ruby segments. Each
    <dfn>ruby segment</dfn> is described by:

      * Zero or more <dfn>ruby bases</dfn>, each of which is a DOM range that may contain phrasing
          content or an <{rb}> element.
      * A base range, that is a DOM range including all the bases. This is the
          <dfn>ruby base container</dfn>.
      * Zero or more <a>ruby text containers</a> which may correspond to explicit <code>rtc</code>
          elements, or to sequences of <{rt}> elements implicitly recognized as contained
          in an anonymous <a>ruby text container</a>.

    Each <dfn>ruby text container</dfn> is described by zero or more
    <dfn>ruby text annotations</dfn> each of which is a DOM range that may contain phrasing content
    or an <{rt}> element, and an annotations range that is a range including all the
    annotations for that container. A <a>ruby text container</a> is also known (primarily in a CSS
    context) as a <dfn>ruby annotation container</dfn>.

    Furthermore, a ruby element contains <dfn>ignored ruby content</dfn>. Ignored ruby content does
    not form part of the document's semantics. It consists of some <a>inter-element white space</a>
    and <{rp}> elements, the latter of which are used for legacy user agents that do not
    support ruby at all.

    The process of <dfn>annotation pairing</dfn> associates <a>ruby annotations</a> with
    <a>ruby bases</a>. Within each <a>ruby segment</a>, each <a>ruby base</a> in the
    <a>ruby base container</a> is paired with one <a>ruby text annotation</a> from the
    <a>ruby text container</a>, in order. If there are not enough <a>ruby text annotations</a> in a
    <a>ruby annotation container</a>, the last one is associated with any excess <a>ruby bases</a>.
    (If there are not any in the <a>ruby annotation container</a>, an anonymous empty one is assumed
    to exist.) If there are not enough <a>ruby bases</a>, any remaining <a>ruby text annotations</a>
    are assumed to be associated with empty, anonymous bases inserted at the end of the
    <a>ruby base container</a>.

    Note that the terms <a>ruby segment</a>, <a>ruby base</a>, <a>ruby text annotation</a>,
    <a>ruby text container</a>, <a>ruby base container</a>, and <a>ruby annotation container</a>
    have their equivalents in <cite>CSS Ruby Module Level 3</cite>. [[CSS3-RUBY]]

    Informally, the segmentation and categorization algorithm below performs a simple set of
    tasks. First it processes adjacent <{rb}> elements, text nodes, and non-ruby
    elements into a list of bases. Then it processes any number of <{rtc}> elements or
    sequences of <{rt}> elements that are considered to automatically map to an
    anonymous <a>ruby text container</a>. Put together these data items form a <a>ruby
    segment</a> as detailed in the data model above. It will continue to produce such segments
    until it reaches the end of the content of a given <{ruby}> element. The complexity
    of the algorithm below compared to this informal description stems from the need to support
    an author-friendly syntax and being mindful of inter-element white space.

    At any particular time, the <dfn>segmentation and categorization of content of a
    <code>ruby</code></dfn> element is the result that would be obtained from running the following
    algorithm:

<!-- Start cleanup here -->

    <ol>
      <li>
        Let <var>root</var> be the <{ruby}> element for which the algorithm is
        being run.
      </li>
      <li>Let <var>index</var> be 0.</li>
      <li>Let <var>ruby segments</var> be an empty list.</li>
      <li>Let <var>current bases</var> be an empty list of DOM ranges.</li>
      <li>Let <var>current bases range</var> be null.</li>
      <li>Let <var>current bases range start</var> be null.</li>
      <li>Let <var>current annotations</var> be an empty list of DOM ranges.</li>
      <li>Let <var>current annotations range</var> be null.</li>
      <li>Let <var>current annotations range start</var> be null.</li>
      <li>Let <var>current annotation containers</var> be an empty list.</li>
      <li>Let <var>current automatic base nodes</var> be an empty list of DOM Nodes.</li>
      <li>Let <var>current automatic base range start</var> be null.</li>
      <li>
        <i>Process a ruby child</i>: If <var>index</var> is equal to or greater than the number of
        child nodes in <var>root</var>, then run the steps to <a>commit a ruby segment</a>,
        return <var>ruby segments</var>, and abort these steps.
      </li>
      <li>
        Let <var>current child</var> be the <var>index</var>th node in <var>root</var>.
      </li>
      <li>
        If <var>current child</var> is not a <a>Text</a> node and is not an
        {{Element}} node, then increment <var>index</var> by one and jump to the step
        labelled <i>process a ruby child</i>.
      </li>
      <li>
        If <var>current child</var> is an <{rp}> element, then increment
        <var>index</var> by one and jump to the step labelled <i>process a ruby child</i>. (Note
        that this has the effect of including this element in any range that we are currently
        processing. This is done intentionally so that misplaced <code>rp</code> can be
        processed correctly; semantically they are ignored all the same.)
      </li>
      <li>
        If <var>current child</var> is an <{rt}> element, then run these substeps:
    <ol>
          <li>Run the steps to <a>commit an automatic base</a>.</li>
          <li>Run the steps to <a>commit the base range</a>.</li>
          <li>
            If <var>current annotations</var> is empty, set <var>current annotations range
            start</var> to the value of <var>index</var>.
          </li>
          <li>
            Create a new DOM range whose <a lt="range start">start</a> is the
            <a lt="range bp">boundary point</a> (<var>root</var>,
            <var>index</var>) and whose <a lt="range end">end</a> is the <a lt="range bp">boundary point</a> (<var>root</var>, <var>index</var> plus
            one), and append it at the end of <var>current annotations</var>.
          </li>
          <li>
            Increment <var>index</var> by one and jump to the step labelled <i>process a ruby
            child</i>.
          </li>
        </ol>
      </li>
      <li>
        If <var>current child</var> is an <{rtc}> element, then run these
        substeps:
        <ol>
          <li>Run the steps to <a>commit an automatic base</a>.</li>
          <li>Run the steps to <a>commit the base range</a>.</li>
          <li>Run the steps to <a>commit current annotations</a>.</li>
          <li>
            Create a new <a>ruby annotation container</a>. It is described by the list of
            annotations returned by running the steps to <a>process an <code>rtc</code>
            element</a> and a DOM range whose <a lt="range start">start</a> is
            the <a lt="range bp">boundary point</a> (<var>root</var>,
            <var>index</var>) and whose <a lt="range end">end</a> is the <a lt="range bp">boundary point</a> (<var>root</var>, <var>index</var> plus
            one). Append this new <a>ruby annotation container</a> at the end of <var>current
            annotation containers</var>.
          </li>
          <li>
            Increment <var>index</var> by one and jump to the step labelled <i>process a ruby
            child</i>.
          </li>
        </ol>
      </li>
      <li>
        If <var>current child</var> is a {{Text}} node and is <a>inter-element
        white space</a>, then run these substeps:
        <ol>
          <li>
            If <var>current annotations</var> is not empty, increment <var>index</var> by one and
            jump to the step labelled <i>process a ruby child</i>.
          </li>
          <li>
            Run the following substeps:
            <ol>
              <li>Let <var>lookahead index</var> be set to the value of <var>index</var>.</li>
              <li><i>Peek ahead</i>: Increment <var>lookahead index</var> by one.</li>
              <li>
                If <var>lookahead index</var> is equal to or greater than the number of
                child nodes in <var>root</var>, then abort these substeps.
              </li>
              <li>
                Let <var>peek child</var> be the <var>lookahead index</var>th node in
                <var>root</var>.
              </li>
              <li>
                If <var>peek child</var> is a {{Text}} node and is <a>inter-element
                white space</a>, then jump to the step labelled <i>peek ahead</i>.
              </li>
              <li>
                If <var>peek child</var> is an <{rt}> element, an
                <{rtc}> element, or an <{rp}> element, then set
                <var>index</var> to the value of <var>lookahead index</var> and jump to the step
                labelled <i>process a ruby child</i>.
              </li>
            </ol>
          </li>
        </ol>
      </li>
      <li>
        If <var>current annotations</var> is not empty or if <var>current annotation
        containers</var> is not empty, then run the steps to <a>commit a ruby segment</a>.
      </li>
      <li>
        If <var>current child</var> is an <{rb}> element, then run these substeps:
        <ol>
          <li>Run the steps to <a>commit an automatic base</a>.</li>
          <li>
            If <var>current bases</var> is empty, then set <var>current bases range start</var> to
            the value of <var>index</var>.
          </li>
          <li>
            Create a new DOM range whose <a lt="range start">start</a> is the
            <a lt="range bp">boundary point</a> (<var>root</var>,
            <var>index</var>) and whose <a lt="range end">end</a> is the <a lt="range bp">boundary point</a> (<var>root</var>, <var>index</var> plus
            one), and append it at the end of <var>current bases</var>.
          </li>
          <li>
            Increment <var>index</var> by one and jump to the step labelled <i>process a ruby
            child</i>.
            </li>
        </ol>
      </li>
      <li>
        If <var>current automatic base nodes</var> is empty, set <var>current automatic base range
        start</var> to the value of <var>index</var>.
      </li>
      <li>
        Append <var>current child</var> at the end of <var>current automatic base nodes</var>.
      </li>
      <li>
        Increment <var>index</var> by one and jump to the step labelled <i>process a ruby
        child</i>.
      </li>
    </ol>

      When the steps above say to <dfn>commit a ruby segment</dfn>, it means to run the
      following steps at that point in the algorithm:

    <ol>
      <li>Run the steps to <a>commit an automatic base</a>.</li>
      <li>
        If <var>current bases</var>, <var>current annotations</var>, and <var>current annotation
        containers</var> are all empty, abort these steps.
      </li>
      <li>Run the steps to <a>commit the base range</a>.</li>
      <li>Run the steps to <a>commit current annotations</a>.</li>
      <li>
        Create a new <a>ruby segment</a>. It is described by a list of bases set to
        <var>current bases</var>, a base DOM range set to <var>current bases range</var>, and a
        list of <a>ruby annotation containers</a>
        that are the <var>current annotation containers</var> list. Append this new
        <a>ruby segment</a> at the end of <var>ruby segments</var>.
      </li>
      <li>Let <var>current bases</var> be an empty list.</li>
      <li>Let <var>current bases range</var> be null.</li>
      <li>Let <var>current bases range start</var> be null.</li>
      <li>Let <var>current annotation containers</var> be an empty list.</li>
    </ol>

      When the steps above say to <dfn>commit the base range</dfn>, it means to run the following
      steps at that point in the algorithm:

    <ol>
      <li>If <var>current bases</var> is empty, abort these steps.</li>
      <li>If <var>current bases range</var> is not null, abort these steps.</li>
      <li>
        Let <var>current bases range</var> be a DOM range whose <a lt="range start">start</a> is the <a lt="range bp">boundary
        point</a> (<var>root</var>, <var>current bases range start</var>) and whose <a lt="range end">end</a> is the <a lt="range bp">boundary
        point</a> (<var>root</var>, <var>index</var>).
      </li>
    </ol>

      When the steps above say to <dfn>commit current annotations</dfn>, it means to run the
      following steps at that point in the algorithm:

    <ol>
      <li>
        If <var>current annotations</var> is not empty and <var>current annotations range</var> is
        null let <var>current annotations range</var> be a DOM range whose <a lt="range start">start</a> is the <a lt="range bp">boundary
        point</a> (<var>root</var>, <var>current annotations range start</var>) and whose <a lt="range end">end</a> is the <a lt="range bp">boundary
        point</a> (<var>root</var>, <var>index</var>).
      </li>
      <li>
        If <var>current annotations</var> is not empty, create a new <a>ruby annotation
        container</a>. It is described by an annotations list set to <var>current
        annotations</var> and a range set to <var>current annotations range</var>. Append this new
        <a>ruby annotation container</a> at the end of <var>current annotation
        containers</var>.
      </li>
      <li>Let <var>current annotations</var> be an empty list of DOM ranges.</li>
      <li>Let <var>current annotations range</var> be null.</li>
      <li>Let <var>current annotations range start</var> be null.</li>
    </ol>

      When the steps above say to <dfn>commit an automatic base</dfn>, it means to run the
      following steps at that point in the algorithm:

    <ol>
      <li>
        If <var>current automatic base nodes</var> is empty, abort these steps.
      </li>
      <li>
        If <var>current automatic base nodes</var> contains nodes that are not {{Text}}
        nodes, or {{Text}} nodes that are not <a>inter-element white space</a>, then
        run these substeps:
        <ol>
          <li>
            It <var>current bases</var> is empty, set <var>current bases range start</var> to the
            value of <var>current automatic base range start</var>.
          </li>
          <li>
            Create a new DOM range whose <a lt="range start">start</a> is the
            <a lt="range bp">boundary point</a> (<var>root</var>, <var>current
            automatic base range start</var>) and whose <a lt="range end">end</a>
            is the <a lt="range bp">boundary point</a> (<var>root</var>,
            <var>index</var>), and append it at the end of <var>current bases</var>.
          </li>
        </ol>
        </li><li>Let <var>current automatic base nodes</var> be an empty list of DOM Nodes.</li>
        <li>Let <var>current automatic base range start</var> be null.</li>

    </ol>

<h4 id="the-rb-element">The <dfn element><code>rb</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <{ruby}> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>
      An <{rb}> element's <a>end tag</a> may be omitted if the <{rb}> element is
      immediately followed by an <{rb}>, <{rt}>, <code>rtc</code> or
      <{rp}> element, or if there is no more content in the parent element.
    </dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

    The <{rb}> element marks the base text component of a ruby annotation. When it is
    the child of a <{ruby}> element, it doesn't <a>represent</a> anything itself, but its parent <code>ruby</code>
    element uses it as part of determining what <em>it</em> <a>represents</a>.

    An <{rb}> element that is not a child of a <{ruby}> element <a>represents</a>
    the same thing as its children.

<h4 id="the-rt-element">The <dfn element><code>rt</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <code>ruby</code> or of an <{rtc}> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>
      An <{rt}> element's <a>end tag</a> may be omitted if the <{rt}> element is
      immediately followed by an <{rb}>, <{rt}>, <code>rtc</code> or
      <{rp}> element, or if there is no more content in the parent element.
    </dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

  The <{rt}> element marks the ruby text component of a ruby annotation. When it is
  the child of a <{ruby}> element or of an <{rtc}> element that is itself
  the child of a <{ruby}> element, it doesn't <a>represent</a> anything itself, but its ancestor <code>ruby</code>
  element uses it as part of determining what <em>it</em> <a>represents</a>.

    An <{rt}> element that is not a child of a <{ruby}> element or of an
    <{rtc}> element that is itself the child of a <{ruby}> element
    <a>represents</a> the same thing as its children.

<h4 id="the-rtc-element">The <dfn element><code>rtc</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <{ruby}> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>, <{rt}>, or <{rp}> elements.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>
      An <{rtc}> element's <a>end tag</a> may be omitted if the <{rtc}> element is
      immediately followed by an <code>rb</code> or <{rtc}> element, or if there is no more
      content in the parent element.
    </dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

  The <{rtc}> element marks a <a>ruby text container</a> for ruby text components
  in a ruby annotation. When it is the child of a <{ruby}> element it doesn't <a>represent</a> anything itself, but its parent <{ruby}> element
  uses it as part of determining what <em>it</em> <a>represents</a>.


      An <{rtc}> element that is not a child of a <{ruby}> element
      <a>represents</a> the same thing as its children.

      When an <{rtc}> element is processed as part of the segmentation and
      categorization of content for a <{ruby}> element, the following algorithm
      defines how to <dfn>process an <{rtc}> element</dfn>:

    <ol>
      <li>
        Let <var>root</var> be the <{rtc}> element for which the algorithm is
        being run.
        </li>
      <li>Let <var>index</var> be 0.</li>
      <li>Let <var>annotations</var> be an empty list of DOM ranges.</li>
      <li>Let <var>current automatic annotation nodes</var> be an empty list of DOM nodes.</li>
      <li>Let <var>current automatic annotation range start</var> be null.</li>
      <li>
        <i>Process an rtc child</i>: If <var>index</var> is equal to or greater than the number of
        child nodes in <var>root</var>, then run the steps to <a>commit an automatic
        annotation</a>, return <var>annotations</var>, and abort these steps.
      </li>
      <li>
        Let <var>current child</var> be the <var>index</var>th node in <var>root</var>.
      </li>
      <li>
        If <var>current child</var> is an <{rt}> element, then run these substeps:
        <ol>
          <li>Run the steps to <a>commit an automatic annotation</a>.</li>
          <li>
            Create a new DOM range whose <a lt="range start">start</a> is the
            <a lt="range bp">boundary point</a> (<var>root</var>,
            <var>index</var>) and whose <a lt="range end">end</a> is the <a lt="range bp">boundary point</a> (<var>root</var>, <var>index</var> plus
            one), and append it at the end of <var>annotations</var>.
          </li>
          <li>
            Increment <var>index</var> by one and jump to the step labelled <i>process an rtc
            child</i>.
          </li>
        </ol>
      </li>
      <li>
        If <var>current automatic annotation nodes</var> is empty, set <var>current automatic
        annotation range start</var> to the value of <var>index</var>.
      </li>
      <li>
        Append <var>current child</var> at the end of <var>current automatic annotation
        nodes</var>.
      </li>
      <li>
        Increment <var>index</var> by one and jump to the step labelled <i>process an rtc
        child</i>.
      </li>
    </ol>

      When the steps above say to <dfn>commit an automatic annotation</dfn>, it means to run the
      following steps at that point in the algorithm:

    <ol>
      <li>
        If <var>current automatic annotation nodes</var> is empty, abort these steps.
      </li>
      <li>
        If <var>current automatic annotation nodes</var> contains nodes that are not
        {{Text}} nodes, or {{Text}} nodes that are not <a>inter-element
        white space</a>, then create a new DOM range whose <a lt="range start">start</a> is the <a lt="range bp">boundary
        point</a> (<var>root</var>, <var>current automatic annotation range start</var>) and
        whose <a lt="range end">end</a> is the <a lt="range bp">boundary point</a> (<var>root</var>, <var>index</var>), and
        append it at the end of <var>annotations</var>.
      </li>
      <li>Let <var>current automatic annotation nodes</var> be an empty list of DOM nodes.</li>
      <li>Let <var>current automatic annotation range start</var> be null.</li>
    </ol>

<h4 id="the-rp-element">The <dfn element><code>rp</code></dfn> element</h4>
  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>
      As a child of a <code>ruby</code> or <{rtc}> element, either immediately before or
      immediately after an <code>rt</code> or <{rtc}> element, but not between
      <{rt}> elements.
    </dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>An <{rp}> element's <a>end tag</a> may be omitted
    if the <{rp}> element is immediately followed by an <{rb}>, <{rt}>,
    <code>rtc</code> or <{rp}> element, or if there is no more content in the parent
    element.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

    The <{rp}> element is used to provide fallback text to be shown by user agents that
    don't support ruby annotations. One widespread convention is to provide parentheses around
    the ruby text component of a ruby annotation.

    The contents of the <{rp}> elements are typically not displayed by user agents
    which do support ruby annotations

    An <{rp}> element that is a child of a <{ruby}>
    element <a>represents</a> nothing. An <code>rp</code>
    element whose parent element is not a <{ruby}> element <a>represents</a> its
    children.

    The example shown previously, in which each ideograph in the text <span lang="ja">漢字</span> is annotated with its phonetic reading, could be expanded
    to use <code>rp</code> so that in legacy user agents the readings are in parentheses (please
    note that white space has been introduced into this example in order to make it more
    readable):

    <div class="example">
      <xmp lang="ja" highlight="html">...
        <ruby>
          漢
          <rb>字</rb>
          <rp> (</rp>
          <rt>かん</rt>
          <rt>じ</rt>
          <rp>) </rp>
        </ruby>
        ...
      </xmp>
    </div>

    In conforming user agents the rendering would be as above, but in user agents that do not
    support ruby, the rendering would be:

  <div class="example"><pre lang="ja">... 漢字 (かんじ) ...</pre></div>

    When there are multiple annotations for a segment, <{rp}> elements can also be
    placed between the annotations. Here is another copy of an earlier contrived example showing
    some symbols with names given in English and French using double-sided annotations, but this
    time with <{rp}> elements as well:

  <div class="example">
    <xmp highlight="html">
      <ruby>
        ♥<rp>: </rp><rt>Heart</rt><rp>, </rp><rtc><rt lang="fr">Cœur</rt></rtc><rp>.</rp>
        ☘<rp>: </rp><rt>Shamrock</rt><rp>, </rp><rtc><rt lang="fr">Trèfle</rt></rtc><rp>.</rp>
        ✶<rp>: </rp><rt>Star</rt><rp>, </rp><rtc><rt lang="fr">Étoile</rt></rtc><rp>.</rp>
      </ruby>
    </xmp>
  </div>

    This would make the example render as follows in non-ruby-capable user agents:

  <div class="example">
    <pre highlight="html">
      ♥: Heart, <span lang="fr">Cœur</span>.
      ☘: Shamrock, <span lang="fr">Trèfle</span>.
      ✶: Star, <span lang="fr">Étoile</span>.
    </pre>
  </div>

<h4 id="the-data-element">The <dfn element><code>data</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>value</code> - Machine-readable value </dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        interface HTMLDataElement : HTMLElement {
          attribute DOMString value;
        };
      </pre>
    </dd>
  </dl>

  The <{data}> element <a>represents</a> its contents, along with a
  machine-readable form of those contents in the <code>value</code>
  attribute.

  The <dfn element-attr for="data"><code>value</code></dfn> attribute must be present. Its value
  must be a representation of the element's contents in a machine-readable format.

  <p class="note">
  When the value is a date or time, the more specific <{time}>
  element should be used instead.
  </p>

  The element can be used to provide a machine-readable value for data processors,
  including scripts running in the page, alongside a more human-readable value
  that is rendered in a Web browser. Typical uses include microdata and microformats. [[microdata]][[microformats]]

  <xmp highlight="html">
<h1 itemscope>
 <data itemprop="product-id" value="9678AOU879">The Instigator 2000</data>
</h1>
  </xmp>

  The <dfn attribute for="HTMLDataElement"><code>value</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name.


<h4 id="the-time-element">The <dfn element><code>time</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>If the element has a <code>datetime</code> attribute: <a>Phrasing content</a>.</dd>
    <dd>Otherwise: <a>Text</a> , but must match requirements described in prose below.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>datetime</code> - Machine-readable value</dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        interface HTMLTimeElement : HTMLElement {
          attribute DOMString dateTime;
        };
      </pre>
    </dd>
  </dl>

  The <{time}> element <a>represents</a> its contents, along with a
  machine-readable form of those contents in the <code>datetime</code>
  attribute. The kind of content is limited to various kinds of dates, times, time-zone offsets, and
  durations, as described below.

  The <dfn element-attr for="time"><code>datetime</code></dfn> attribute may be present. If
  present, its value must be a representation of the element's contents in a machine-readable
  format.

  A <{time}> element that does not have a <code>datetime</code> content attribute must not have any element
  descendants.

  The <dfn>datetime value</dfn> of a <{time}> element is the value of the element's
  <{time/datetime}> content attribute, if it has one, otherwise the <a>child text content</a> of
  the <{time}> element.


  The <a>datetime value</a> of a <{time}> element must match one of the following
  syntaxes.

  <dl>

    <dt>A <a>valid month string</a></dt>

    <dd>

    <xmp class="example" highlight="html"><time>2011-11</time></xmp>

    </dd>

    <dt>A <a>valid date string</a></dt>

    <dd>

    <xmp class="example" highlight="html"><time>2011-11-18</time></xmp>

    </dd>

    <dt>A <a>valid yearless date string</a></dt>

    <dd>

    <xmp class="example" highlight="html"><time>11-18</time></xmp>

    </dd>

    <dt>A <a>valid time string</a></dt>

    <dd>

    <xmp class="example" highlight="html"><time>09:54</time></xmp>
    <xmp class="example" highlight="html"><time>09:54:39</time></xmp>
    <xmp class="example" highlight="html"><time>09:54:39.929</time></xmp>

    </dd>

    <dt>A <a>valid floating date and time string</a></dt>

    <dd>

    <xmp class="example" highlight="html"><time>2011-11-18T14:54</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18T14:54:39</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18T14:54:39.929</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18 14:54</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18 14:54:39</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18 14:54:39.929</time></xmp>

    <p class="note">
    Times with dates but without a time zone offset are useful for specifying events
    that are observed at the same specific time in each time zone, throughout a day. For example,
    the 2020 new year is celebrated at 2020-01-01 00:00 in each time zone, not at the same precise
    moment across all time zones. For events that occur at the same time across all time zones, for
    example a videoconference meeting, a <a>valid global date and time string</a> is likely
    more useful.
  </p>

    </dd>

    <dt>A <a>valid time-zone offset string</a></dt>

    <dd>

    <xmp class="example" highlight="html"><time>Z</time></xmp>
    <xmp class="example" highlight="html"><time>+0000</time></xmp>
    <xmp class="example" highlight="html"><time>+00:00</time></xmp>
    <xmp class="example" highlight="html"><time>-0800</time></xmp>
    <xmp class="example" highlight="html"><time>-08:00</time></xmp>

    <p class="note">
    For times without dates (or times referring to events that recur on multiple
    dates), specifying the geographic location that controls the time is usually more useful than
    specifying a time zone offset, because geographic locations change time zone offsets with
    daylight savings time. In some cases, geographic locations even change time zone, e.g., when the
    boundaries of those time zones are redrawn, as happened with Samoa at the end of 2011. There
    exists a time zone database that describes the boundaries of time zones and what rules apply
    within each such zone, known as the <i>time zone database</i>. [[TZDATABASE]]
  </p>

    </dd>

    <dt>A <a>valid global date and time string</a></dt>

    <dd>

    <xmp class="example" highlight="html"><time>2011-11-18T14:54Z</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18T14:54:39Z</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18T14:54:39.929Z</time></xmp>

    <xmp class="example" highlight="html"><time>2011-11-18T14:54+0000</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18T14:54:39+0000</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18T14:54:39.929+0000</time></xmp>

    <xmp class="example" highlight="html"><time>2011-11-18T14:54+00:00</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18T14:54:39+00:00</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18T14:54:39.929+00:00</time></xmp>

    <xmp class="example" highlight="html"><time>2011-11-18T06:54-0800</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18T06:54:39-0800</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18T06:54:39.929-0800</time></xmp>

    <xmp class="example" highlight="html"><time>2011-11-18T06:54-08:00</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18T06:54:39-08:00</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18T06:54:39.929-08:00</time></xmp>

    <xmp class="example" highlight="html"><time>2011-11-18 14:54Z</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18 14:54:39Z</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18 14:54:39.929Z</time></xmp>

    <xmp class="example" highlight="html"><time>2011-11-18 14:54+0000</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18 14:54:39+0000</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18 14:54:39.929+0000</time></xmp>

    <xmp class="example" highlight="html"><time>2011-11-18 14:54+00:00</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18 14:54:39+00:00</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18 14:54:39.929+00:00</time></xmp>

    <xmp class="example" highlight="html"><time>2011-11-18 06:54-0800</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18 06:54:39-0800</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18 06:54:39.929-0800</time></xmp>

    <xmp class="example" highlight="html"><time>2011-11-18 06:54-08:00</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18 06:54:39-08:00</time></xmp>
    <xmp class="example" highlight="html"><time>2011-11-18 06:54:39.929-08:00</time></xmp>

    <p class="note">
    Times with dates and a time zone offset are useful for specifying specific
    events, or recurring virtual events where the time is not anchored to a specific geographic
    location. For example, the precise time of an asteroid impact, or a particular meeting in a
    series of meetings held at 1400 UTC every day, regardless of whether any particular part of the
    world is observing daylight savings time or not. For events where the precise time varies by the
    local time zone offset of a specific geographic location, a <a>valid floating date and time
    string</a> combined with that geographic location is likely more useful.
  </p>

    </dd>

    <dt>A <a>valid week string</a></dt>

    <dd>

    <xmp class="example" highlight="html"><time>2011-W47</time></xmp>

    </dd>

    <dt>Four <a>ASCII digits</a></dt>, at least one of which is not U+0030 DIGIT ZERO (0)

    <dd>

    <xmp class="example" highlight="html"><time>2011</time></xmp>

    <xmp class="example" highlight="html"><time>0001</time></xmp>

    </dd>

    <dt>A <a>valid duration string</a></dt>

    <dd>

    <xmp class="example" highlight="html"><time>PT4H18M3S</time></xmp>

    <xmp class="example" highlight="html"><time>4h 18m 3s</time></xmp>

    </dd>

  </dl>

  <p class="note">
    Many of the preceding valid syntaxes describe "floating" date and/or time values
  (they do not include a <a>time-zone offset</a>). Care is needed when
  converting floating time values to or from global ("incremental") time values (e.g., JavaScript's
  Date object). In many cases, an implicit time-of-day and time zone are used in the conversion and
  may result in unexpected changes to the value of the date itself.
  [[TIMEZONE]]
  </p>


  The <dfn>machine-readable equivalent of the element's contents</dfn> must be obtained from the
  element's <a>datetime value</a> by using the following algorithm:

  <ol>

    <li>If <a>parsing a month string</a> from the element's
    <a>datetime value</a> returns a <a>month</a>, that is the
    machine-readable equivalent; abort these steps.</li>

    <li>If <a>parsing a date string</a> from the element's
    <a>datetime value</a> returns a <a for="dates">date</a>, that is the
    machine-readable equivalent; abort these steps.</li>

    <li>If <a>parsing a yearless date string</a> from
    the element's <a>datetime value</a> returns a <a>yearless
    date</a>, that is the machine-readable equivalent; abort these steps.</li>

    <li>If <a>parsing a time string</a> from the element's
    <a>datetime value</a> returns a <a>time</a>, that is the
    machine-readable equivalent; abort these steps.</li>

    <li>If <a>parsing a floating date and time string</a> from the element's <a>datetime value</a> returns a <a>floating date and time</a>, that is the machine-readable
    equivalent; abort these steps.</li>

    <li>If <a>parsing a time-zone offset string</a>
    from the element's <a>datetime value</a> returns a <a>time-zone
    offset</a>, that is the machine-readable equivalent; abort these steps.</li>

    <li>If <a>parsing a floating date and time string</a> from the element's <a>datetime value</a> returns a <a>global date and time</a>, that is the machine-readable equivalent;
    abort these steps.</li>

    <li>If <a>parsing a week string</a> from the element's
    <a>datetime value</a> returns a <a>week</a>, that is the
    machine-readable equivalent; abort these steps.</li>

    <li>If the element's <a>datetime value</a> consists of only <a>ASCII digits</a>,
    at least one of which is not U+0030 DIGIT ZERO (0), then the machine-readable equivalent is the
    base-ten interpretation of those digits, representing a year; abort these steps.</li>

    <li>If <a>parsing a duration string</a> from the
    element's <a>datetime value</a> returns a <a>duration</a>,
    that is the machine-readable equivalent; abort these steps.</li>

    <li>There is no machine-readable equivalent.</li>

  </ol>

  <p class="note">
    The algorithms referenced above are intended to be designed such that for any
  arbitrary string <var>s</var>, only one of the algorithms returns a value. A more
  efficient approach might be to create a single algorithm that parses all these data types in one
  pass; developing such an algorithm is left as an exercise to the reader.
  </p>

  The <dfn attribute for="HTMLTimeElement"><code>dateTime</code></dfn> IDL attribute must
  <a>reflect</a> the element's <code>datetime</code> content
  attribute.


  <div class="example">
    The <{time}> element can be used to encode dates, for example in microformats. The
    following shows a hypothetical way of encoding an event using a variant on hCalendar that uses
    the <{time}> element:

    <xmp highlight="html">
      <div class="vevent">
        <a class="url" href="https://conference.example.com/">https://conference.example.com/</a>
        <span class="summary">Web 3.0 Conference</span>:
        <time class="dtstart" datetime="2025-10-05">October 5</time> -
        <time class="dtend" datetime="2025-10-07">7</time>, at the <span class="location">Argent Hotel, San Francisco, CA</span>
      </div>
    </xmp>

  </div>

  <div class="example">
    Here, a fictional RDFa vocabulary based on the Atom vocabulary is used with the
    <{time}> element to mark up a blog post's publication date [[html-rdfa]].

    <xmp highlight="html">
      <article vocab="https://n.example.org/" typeof="rfc4287">
        <h1 property="title">Big tasks</h1>
        <footer>Published <time property="published" datetime="2009-08-29">two days ago</time>.</footer>
        <p property="content">Today, I went out and bought a bike for my kid.</p>
      </article>
    </xmp>

  </div>

  <div class="example">
    In this example, another article's publication date is marked up using <{time}>, this
    time using the schema.org vocabulary:

    <xmp highlight="html">
      <article typeof="schema:BlogPosting">
        <h1 property="schema:headline">Small tasks</h1>
        <footer>Published <time property="schema:datePublished" datetime="2009-08-30">yesterday</time>.</footer>
        <p property="schema:articleBody">I put a bike bell on his bike.</p>
      </article>
    </xmp>

  </div>

  <div class="example">
    In the following snippet, the <{time}> element is used to encode a date in the
    ISO8601 format, for later processing by a script:

    <xmp highlight="html">
      <p>Our first date was <time datetime="2006-09-23">a Saturday</time>.</p>
    </xmp>

    In this second snippet, the value includes a time:

    <xmp highlight="html">
      <p>We stopped talking at <time datetime="2006-09-24T05:00-07:00">5am the next morning</time>.</p>
    </xmp>

    A script loaded by the page (and thus privy to the page's internal convention of marking up
    dates and times using the <{time}> element) could scan through the page and look at all
    the <{time}> elements therein to create an index of dates and times.

  </div>

  <div class="example">
    For example, this element conveys the string "Friday" with the additional semantic that the
    18th of November 2011 is the meaning that corresponds to "Friday":

    <xmp highlight="html">
      Today is <time datetime="2011-11-18">Friday</time>.
    </xmp>

  </div>

  <div class="example">
    In this example, a specific time in the Pacific Standard Time timezone is specified:

    <xmp highlight="html">
      Your next meeting is at <time datetime="2011-11-18T15:00-08:00">3pm</time>.
    </xmp>

  </div>

<h4 id="the-code-element">The <dfn element><code>code</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

  The <{code}> element <a>represents</a> a fragment of computer code. This could
  be an XML element name, a file name, a computer program, or any other string that a computer would
  recognize.

  There is no formal way to indicate the language of computer code being marked up. Authors who
  wish to mark <{code}> elements with the language used, e.g., so that syntax highlighting
  scripts can use the right rules, can use the <{global/class}> attribute, e.g.,
  by adding a class prefixed with "<code>language-</code>" to the element.

  <div class="example">
    The following example shows how the element can be used in a paragraph to mark up element
    names and computer code, including punctuation.

    <xmp highlight="html">
      <p>The <code>code</code> element represents a fragment of computer code.</p>

      <p>When you call the <code>activate()</code> method on the <code>robotSnowman</code> object, the eyes glow.</p>

      <p>The example below uses the <code>begin</code> keyword to indicate the start of a statement block. It is paired with an <code>end</code> keyword, which is followed by the <code>.</code> punctuation character (full stop) to indicate the end of the program.</p>
    </xmp>

  </div>

  <div class="example">
    The following example shows how a block of code could be marked up using the <code>pre</code>
    and <{code}> elements.

    <xmp highlight="html">
      <pre><code class="language-pascal">var i: Integer;
      begin
          i := 1;
      end.</code></pre>
    </xmp>

    A class is used in that example to indicate the language used.

  </div>

  <p class="note">
    See the <{pre}> element for more details.
  </p>

<h4 id="the-var-element">The <dfn element><code>var</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

  The <{var}> element <a>represents</a> a variable. This could be an actual
  variable in a mathematical expression or programming context, an identifier representing a
  constant, a symbol identifying a physical quantity, a function parameter, or just be a term used
  as a placeholder in prose.

  <div class="example">
    In the paragraph below, the letter "n" is being used as a
    variable in prose:
    <xmp highlight="html">
      <p>If there are <var>n</var> pipes leading to the ice cream factory then I expect at <em>least</em> <var>n</var> flavors of ice cream to be available for purchase!</p>
    </xmp>
  </div>

  For mathematics, in particular for anything beyond the simplest of expressions, MathML is more
  appropriate. However, the <{var}> element can still be used to refer to specific
  variables that are then mentioned in MathML expressions.

  <div class="example">
    In this example, an equation is shown, with a legend that references the variables in the
    equation. The expression itself is marked up with MathML, but the variables are mentioned in the
    figure's legend using <{var}>.

    <xmp highlight="html">
      <figure>
        <math>
          <mi>a</mi>
          <mo>=</mo>
          <msqrt>
            <msup><mi>b</mi><mn>2</mn></msup>
            <mi>+</mi>
            <msup><mi>c</mi><mn>2</mn></msup>
          </msqrt>
        </math>
        <figcaption>
          Using Pythagoras' theorem to solve for the hypotenuse <var>a</var> of a triangle with sides <var>b</var> and <var>c</var>
        </figcaption>
      </figure>
    </xmp>

  </div>

  <div class="example">
    Here, the equation describing mass-energy equivalence is used in a sentence, and the
    <{var}> element is used to mark the variables and constants in that equation:

    <xmp highlight="html">
      <p>Then he turned to the blackboard and picked up the chalk. After a few moment's thought, he wrote <var>E</var> = <var>m</var> <var>c</var><sup>2</sup>. The teacher looked pleased.</p>
    </xmp>

  </div>

<h4 id="the-samp-element">The <dfn element><code>samp</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

  The <{samp}> element <a>represents</a> sample or quoted output from another
  program or computing system.

  <p class="note">
    See the <code>pre</code> and <{kbd}> elements for more details.
  </p>

  <p class="note">
    This element can be contrasted with the <{output}> element, which can be
  used to provide immediate output in a Web application.
  </p>

  <div class="example">
    This example shows the <{samp}> element being used
    inline:
    <xmp highlight="html">
      <p>The computer said <samp>Too much cheese in tray two</samp> but I didn't know what that meant.</p>
    </xmp>
  </div>

  <div class="example">
    This second example shows a block of sample output. Nested <code>samp</code> and
    <{kbd}> elements allow for the styling of specific elements of the sample output using a
    style sheet. There's also a few parts of the <code>samp</code> that are annotated with even more
    detailed markup, to enable very precise styling. To achieve this, <{span}> elements are
    used.

    <xmp highlight="html">
      <pre><samp><span class="prompt">jdoe@mowmow:~$</span> <kbd>ssh demo.example.com</kbd>
      Last login: Tue Apr 12 09:10:17 2005 from mowmow.example.com on pts/1
      Linux demo 2.6.10-grsec+gg3+e+fhs6b+nfs+gr0501+++p3+c4a+gr2b-reslog-v6.189 #1 SMP Tue Feb 1 11:22:36 PST 2005 i686 unknown

      <span class="prompt">jdoe@demo:~$</span> <span class="cursor">_</span></samp></pre>
    </xmp>

  </div>

<h4 id="the-kbd-element">The <dfn element><code>kbd</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

  The <{kbd}> element <a>represents</a> user input (typically keyboard input,
  although it may also be used to represent other input, such as voice commands).

  When the <{kbd}> element is nested inside a <{samp}> element, it represents
  the input as it was echoed by the system.

  When the <{kbd}> element <em>contains</em> a <{samp}> element, it represents
  input based on system output.

  When the <{kbd}> element is nested inside another <{kbd}> element, it
  represents an actual key or other single unit of input as appropriate for the input mechanism.

  <div class="example">
    Here the <{kbd}> element is used to indicate keys to press:

    <xmp highlight="html">
      <p>To make George eat an apple, press <kbd><kbd>Shift</kbd>+<kbd>F3</kbd></kbd></p>
    </xmp>

    In this second example, the user is told to pick a particular menu item. The outer
    <{kbd}> element marks up a block of input, with the inner <{kbd}> elements
    representing each individual step of the input, and the <{samp}> elements inside them
    indicating that the steps are input based on something being displayed by the system, in this
    case menu labels:

    <xmp highlight="html">
      <p>To make George eat an apple, select
          <kbd><kbd><samp>File</samp></kbd>|<kbd><samp>Eat Apple...</samp></kbd></kbd>
      </p>
    </xmp>

    Such precision isn't necessary; the following is equally fine:

    <xmp highlight="html">
      <p>To make George eat an apple, select <kbd>File | Eat Apple...</kbd></p>
    </xmp>

  </div>

<h4 id="the-sub-and-sup-elements">The <dfn element><code>sub</code></dfn> and <dfn element><code>sup</code></dfn> elements</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Use <code>HTMLElement</code>.</dd>
  </dl>

  The <{sub}> element <a>represents</a> a subscript, and the <{sup}> element <a>represents</a> a superscript.

  These elements must be used only to mark up typographical conventions with specific meanings,
  not for typographical presentation for presentation's sake. For example, it would be inappropriate
  for the <{sub}> and <{sup}> elements to be used in the name of the LaTeX
  document preparation system. In general, authors should use these elements only if the
  <em>absence</em> of those elements would change the meaning of the content.

  In certain languages, superscripts are part of the typographical conventions for some
  abbreviations.

  <div class="example">
    <xmp highlight="html">
      <p>The most intelligent women are
      <span lang="fr"><abbr>M<sup>lle</sup></abbr> de Beauvoir</span> and
      <span lang="fr"><abbr>M<sup>me</sup></abbr> Colette</span>.</p>
    </xmp>
  </div>

  The <{sub}> element can be used inside a <{var}> element, for variables that
  have subscripts.

  <div class="example">
    Here, the <{sub}> element is used to represent the subscript that identifies the
    variable in a family of variables:

    <xmp highlight="html">
      <p>The coordinate of the <var>i</var>th point is (<var>x<sub><var>i</var></sub></var>, <var>y<sub><var>i</var></sub></var>).
      For example, the 10th point has coordinate (<var>x<sub>10</sub></var>, <var>y<sub>10</sub></var>).</p>
    </xmp>
  </div>

  Mathematical expressions often use subscripts and superscripts. Authors are encouraged to use
  MathML for marking up mathematics, but authors may opt to use <{sub}> and
  <{sup}> if detailed mathematical markup is not desired. [[!MATHML]]

  <div class="example">
    <xmp highlight="html">
      <var>E</var>=<var>m</var><var>c</var><sup>2</sup>

      f(<var>x</var>, <var>n</var>) = log<sub>4</sub><var>x</var><sup><var>n</var></sup>
    </xmp>
  </div>

<h4 id="the-i-element">The <dfn element><code>i</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

  The <{i}> element <a>represents</a> a span of text in an alternate voice or
  mood, or otherwise offset from the normal prose in a manner indicating a different quality of
  text, such as a taxonomic designation, a technical term, an idiomatic phrase from another
  language, transliteration, a thought, or a ship name in Western texts.

  Terms in languages different from the main text should be annotated with <{global/lang}> attributes (or, in XML, <{global/lang}> attributes in the <a>XML namespace</a>).

  <div class="example">
    The examples below show uses of the <{i}> element:
    <xmp highlight="html">
      <p>The <i class="taxonomy">Felis silvestris catus</i> is cute.</p>
      <p>The term <i>prose content</i> is defined above.</p>
      <p>There is a certain <i lang="fr">je ne sais quoi</i> in the air.</p>
    </xmp>
    In the following example, a dream sequence is marked up using
    <{i}> elements.
    <xmp highlight="html">
      <p>Raymond tried to sleep.</p>
      <p><i>The ship sailed away on Thursday</i>, he dreamt. <i>The ship had many people aboard, including a beautiful princess called Carey. He watched her, day-in, day-out, hoping she would notice him, but she never did.</i></p>
      <p><i>Finally one night he picked up the courage to speak with her—</i></p>
      <p>Raymond woke with a start as the fire alarm rang out.</p>
    </xmp>
  </div>

  Authors are encouraged to consider whether other elements might be more applicable than the
  <{i}> element, for instance the <{em}> element for marking up stress emphasis,
  or the <{dfn}> element to mark up the defining instance of a term.

  <p class="note">
    Style sheets can be used to format <{i}> elements, just like any other
  element can be restyled. Thus, it is not the case that content in <{i}> elements will
  necessarily be italicized.
  </p>

<h4 id="the-b-element">The <dfn element><code>b</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

  The <{b}> element <a>represents</a> a span of text to which attention is being
  drawn for utilitarian purposes without conveying any extra importance and with no implication of
  an alternate voice or mood, such as key words in a document abstract, product names in a review,
  actionable words in interactive text-driven software, or an article lede.

  <div class="example">
    The following example shows a use of the <{b}> element to highlight key words without
    marking them up as important:

    <xmp highlight="html">
      <p>The <b>frobonitor</b> and <b>barbinator</b> components are fried.</p>
    </xmp>

  </div>

  <div class="example">
    In the following example, objects in a text adventure are highlighted as being special by use
    of the <{b}> element.

    <xmp highlight="html">
      <p>You enter a small room. Your <b>sword</b> glows brighter. A <b>rat</b> scurries past the corner wall.</p>
    </xmp>

  </div>

  <div class="example">
    Another case where the <{b}> element is appropriate is in marking up the lede (or
    lead) sentence or paragraph. The following example shows how a <a href="http://news.bbc.co.uk/2/hi/uk_news/scotland/north_east/7101506.stm">BBC article about
    kittens adopting a rabbit as their own</a> could be marked up:

    <xmp highlight="html">
      <article>
        <h2>Kittens 'adopted' by pet rabbit</h2>
        <p><b class="lede">Six abandoned kittens have found an unexpected new mother figure — a pet rabbit.</b></p>
        <p>Veterinary nurse Melanie Humble took the three-week-old kittens to her Aberdeen home.</p>
        ...
      </article>
    </xmp>

  </div>

  As with the <{i}> element, authors can use the <{global/class}>
  attribute on the <{b}> element to identify why the element is being used, so that if the
  style of a particular use is to be changed at a later date, the author doesn't have to go through
  annotating each use.

  The <{b}> element should be used as a last resort when no other element is more
  appropriate. In particular, headings should use the <code>h1</code> to <code>h6</code> elements,
  stress emphasis should use the <{em}> element, importance should be denoted with the
  <{strong}> element, and text marked or highlighted should use the <code>mark</code>
  element.

  <div class="example">
    The following would be <em>incorrect</em> usage:

    <xmp class="bad" highlight="html"><p><b>WARNING!</b> Do not frob the barbinator!</p></xmp>

    In the previous example, the correct element to use would have been <{strong}>, not
    <{b}>.

  </div>

  <p class="note">
    Style sheets can be used to format <{b}> elements, just like any other
  element can be restyled. Thus, it is not the case that content in <{b}> elements will
  necessarily be boldened.
  </p>

<h4 id="the-u-element">The <dfn element><code>u</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

  The <{u}> element <a>represents</a> a span of text with a non-textual annotation,
  such as labeling a proper name in Chinese text, a surname, or text as being misspelt.

  <div class="example">
    Underlining as a stylistic presentation is a convention in some cases:

    <xmp highlight="html">
      <p>Among others, Japanese, Hungarian and Chinese names are generally written with the family name first: <u>Wu</u> Xiaoqian.</p>
    </xmp>

    <xmp highlight="html">
      and when the sun rises over the trees of fire, there are no other <u class="spelling">incediaris</u> as powerful in this collection of dwelling
    </xmp>

    <xmp highlight="html">
      <p>The <u>see</u> is full of fish</p>
    </xmp>
  </div>

  In most cases, another element is likely to be more appropriate: for marking stress emphasis,
  the <{em}> element should be used; for marking key words or phrases either the <{b}> element or
  the <{mark}> element should be used, depending on the context; for marking book titles, the
  <{cite}> element should be used; for labeling text with explicit textual annotations, the
  <{ruby}> element should be used; for technical terms, taxonomic designation, transliteration,
  a thought, or for labeling ship names in Western texts, the <{i}> element should be used.

  <p class="note">
    The default rendering of the <{u}> element in visual presentations clashes with the
    conventional rendering of hyperlinks (underlining). Authors are encouraged to avoid using
    the <{u}> element where it could be confused for a hyperlink.
  </p>

<h4 id="the-mark-element">The <dfn element><code>mark</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

  The <{mark}> element <a>represents</a> a run of text in one document marked or highlighted for
  reference purposes, due to its relevance in another context. When used in a quotation or other
  block of text referred to from the prose, it indicates a highlight that was not originally
  present but which has been added to bring the reader's attention to a part of the text that
  might not have been considered important by the original author when the block was originally
  written, but which is now under previously unexpected scrutiny. When used in the main prose of a
  document, it indicates a part of the document that has been highlighted due to its likely
  relevance to the user's current activity.

  <div class="example">
    This example shows how the <{mark}> element can be used to bring attention to a
    particular part of a quotation:

    <xmp highlight="html">
      <p lang="en-US">Consider the following quote:</p>
      <blockquote lang="en-GB">
        <p>Look around and you will find, no-one's really <mark>colour</mark> blind.</p>
      </blockquote>
      <p lang="en-US">As we can tell from the <em>spelling</em> of the word, the person writing this quote is clearly not American.</p>
    </xmp>

    (If the goal was to mark the element as misspelt, however, the <{u}> element,
    possibly with a class, would be more appropriate.)

  </div>

  <div class="example">
    Another example of the <{mark}> element is highlighting parts of a document that are matching
    some search string. If someone looked at a document, and the server knew that the user was
    searching for the word "kitten", then the server might return the document with one paragraph
    modified as follows:

    <xmp highlight="html">
      <p>I also have some <mark>kitten</mark>s who are visiting me these days. They're really cute. I think they like my garden! Maybe I should adopt a <mark>kitten</mark>.</p>
    </xmp>

  </div>

  <div class="example">
    In the following snippet, a paragraph of text refers to a specific part of a code fragment.

    <xmp highlight="html">
      <p>The highlighted part below is where the error lies:</p>
      <pre><code>var i: Integer;
      begin
          i := <mark>1.1</mark>;
      end.</code></pre>
    </xmp>

    This is separate from <em>syntax highlighting</em>, for which <code>span</code> is more
    appropriate. Combining both, one would get:

    <xmp highlight="html">
      <p>The highlighted part below is where the error lies:</p>
      <pre><code><span class="keyword">var</span> <span class="ident">i</span>: <span class="type">Integer</span>;
      <span class="keyword">begin</span>
          <span class="ident">i</span> := <span class="literal"><mark>1.1</mark></span>;
      <span class="keyword">end</span>.</code></pre>
    </xmp>

  </div>

  <div class="example">
    This is another example showing the use of <code>mark</code> to highlight a part of quoted
    text that was originally not emphasized. In this example, common typographic conventions have led
    the author to explicitly style <{mark}> elements in quotes to render in italics.

    <xmp highlight="html">
      <head>
        <style>
          blockquote mark, q mark {
            font: inherit;
            font-style: italic;
            text-decoration: none;
            background: transparent;
            color: inherit;
          }

          .bubble em {
            font: inherit;
            font-size: larger;
            text-decoration: underline;
          }
        </style>
      </head>
      <body>
        <article>
          <h1>She knew</h1>
          <p>Did you notice the subtle joke in the joke on panel 4?</p>
          <blockquote>
            <p class="bubble">I didn't <em>want</em> to believe. <mark>Of course on some level I realized it was a known-plaintext attack.</mark> But I couldn't admit it until I saw for myself.</p>
          </blockquote>
          <p>(Emphasis mine.) I thought that was great. It's so pedantic, yet it explains everything neatly.</p>
        </article>
      </body>
    </xmp>

    Note, incidentally, the distinction between the <{em}> element in this example, which
    is part of the original text being quoted, and the <{mark}> element, which is
    highlighting a part for comment.

  </div>

  <div class="example">
    The following example shows the difference between denoting the <em>importance</em> of a span
    of text (<code>strong</code>) as opposed to denoting the <em>relevance</em> of a span of text
    (<code>mark</code>). It is an extract from a textbook, where the extract has had the parts
    relevant to the exam highlighted. The safety warnings, important though they may be, are
    apparently not relevant to the exam.

    <xmp highlight="html">
      <h3>Wormhole Physics Introduction</h3>

      <p><mark>A wormhole in normal conditions can be held open for a maximum of just under 39 minutes.</mark> Conditions that can increase the time include a powerful energy source coupled to one or both of the gates connecting the wormhole, and a large gravity well (such as a black hole).</p>

      <p><mark>Momentum is preserved across the wormhole. Electromagnetic radiation can travel in both directions through a wormhole, but matter cannot.</mark></p>

      <p>When a wormhole is created, a vortex normally forms. <strong>Warning: The vortex caused by the wormhole opening will annihilate anything in its path.</strong> Vortexes can be avoided when using sufficiently advanced dialing technology.</p>

      <p><mark>An obstruction in a gate will prevent it from accepting a wormhole connection.</mark></p>
    </xmp>

  </div>

<h4 id="the-bdi-element">The <dfn element><code>bdi</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd>Also, the <code>dir</code> global attribute has special semantics on this element.</dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>
      Any <code>aria-*</code> attributes
      <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.
    </dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

  The <{bdi}> element <a>represents</a> a span of text that is to be isolated from
  its surroundings for the purposes of bidirectional text formatting. [[!BIDI]]

  <p class="note">
    The <code>dir</code> global attribute defaults to <code>auto</code> on this element
    (it never inherits from the parent element like with other elements).
  </p>


  <p class="note">
    This element
    <a href="#bidireq">has rendering requirements involving the bidirectional algorithm</a>.
  </p>

  <div class="example">
    The <{bdi}> element is especially useful when embedding user-generated content with an unknown
    directionality, or when incorporating spans of text that need to be rendered in the opposite
    direction of the surrounding text.

    In this example, usernames are shown along with the number of posts that the user has
    submitted. If the <{bdi}> element were not used, the username of the Arabic user would end
    up confusing the text (the bidirectional algorithm would put the colon and the number "3"
    next to the word "User" rather than next to the word "posts").

    <xmp highlight="html">
      <ul>
        <li>User <bdi>jcranmer</bdi>: 12 posts.</li>
        <li>User <bdi>hober</bdi>: 5 posts.</li>
        <li>User <bdi><bdo dir="rtl">إيان</bdo></bdi>: 3 posts.</li>
      </ul>
    </xmp>

    <figure>
      <img src="images/sample-bdi.png" />
      <figcaption>When using the <{bdi}> element, the username acts as expected.</figcaption>
    </figure>
  </div>

  <div class="example">
    The <{bdi}> element is a shorthand for <{span/dir}> with a value of <code>auto</code>, so the
    <{global/dir}> attribute can be applied to another element to achieve the same result.

    For example, the <{b}> element may be used to draw attention to part of the content:

    <figure>
      <img src="images/sample-not-bdi.png" />
      <figcaption>If the <{bdi}> element were to be replaced by a <{b}> element, the username would confuse the bidirectional algorithm and the third bullet would end up saying "User 3 :", followed by the Arabic name (right-to-left), followed by "posts" and a period.</figcaption>
    </figure>

    In this case the <{bdi}> and <{b}> elements could both be used, but where there is an
    existing element available, the shortest way to achieve the same result is to apply the
    <{global/dir}> attribute directly to the <{b}> element:

    <xmp highlight="html">
      <ul>
        <li>User <b dir="auto">jcranmer</b>: 12 posts.</li>
        <li>User <b dir="auto">hober</b>: 5 posts.</li>
        <li>User <b dir="auto">إيان</b>: 3 posts.</li>
      </ul>
    </xmp>

    When there is no existing element available, the <{bdi}> element can be used to achieve the
    same effect.

    <xmp highlight="html">
      <ul>
        <li>User <bdi>jcranmer</bdi>: 12 posts.</li>
        <li>User <bdi>hober</bdi>: 5 posts.</li>
        <li>User <bdi>إيان</bdi>: 3 posts.</li>
      </ul>
    </xmp>

  </div>

<h4 id="the-bdo-element">The <dfn element><code>bdo</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd>Also, the <code>dir</code> global attribute has special semantics on this element.</dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>
      Any <code>aria-*</code> attributes
      <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.
    </dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

  The <{bdo}> element <a>represents</a> explicit text directionality formatting control for its
  children. It allows authors to override the Unicode bidirectional algorithm while
  explicitly specifying a direction override. [[!BIDI]]

  Authors must specify the <{global/dir}> attribute on this element, with the value
  <a attr-value for="global/dir"><code>ltr</code></a> to specify a left-to-right override and with
  the value <a attr-value for="global/dir"><code>rtl</code></a> to specify a right-to-left
  override. The <a attr-value for="global/dir"><code>auto</code></a> value must not be specified.

  <p class="note">
    This element
    <a href="#bidireq">has rendering requirements involving the bidirectional algorithm</a>.
  </p>

  <p class="note">
    The effect of using the <{bdo}> element is to <em>completely disable</em> the bidirectional
    algorithm. This means that characters within the <{bdo}> element will be displayed exactly
    as stored in memory and in the direction specified.
    This is different than the <{bdi}> element, where the characters will be re-ordered and
    re-arranged according to the directional algorithm. Use the <{bdo}> element only if you
    specifically want to disable the bidirectional algorithm completely for that text.
  </p>

  <div class="example">
  The following example shows the difference in rendering between the <{bdi}> and <{bdo}> element.
    <xmp highlight="html">
    <bdi dir="rtl">שלום Majima! מה שלומך היום?</bdi>
    <bdo dir="rtl">שלום Majima! מה שלומך היום?</bdo>
    <bdo dir="ltr">שלום Majima! מה שלומך היום?</bdo>
    </xmp>

    <bdi dir="rtl">שלום Majima! מה שלומך היום?</bdi><br>
    <bdo dir="rtl">שלום Majima! מה שלומך היום?</bdo><br>
    <bdo dir="ltr">שלום Majima! מה שלומך היום?</bdo>

    In this example, you can see the Latin characters in the <{bdi}> element being rendered from
    left-to-right, whereas the rest of the text being rendered right-to-left. This is because the
    bidirectional algorithm recognizes Latin characters and automatically applies a left-to-right
    rendering for just those characters.

    In the <{bdo}> text, the bidirectional algorithm is disabled. So the text will be rendered
    character by character in the direction specified, in a sequential order corresponding to
    that of the characters in memory.
  </div>

<h4 id="the-span-element">The <dfn element><code>span</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>
      Any <code>aria-*</code> attributes
      <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.
    </dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        interface HTMLSpanElement : HTMLElement {};
      </pre>
    </dd>
  </dl>

  The <{span}> element doesn't mean anything on its own, but can be useful when used together with
  the <a>Global attributes</a>, e.g., <{global/class}>, <{global/lang}>, or <{global/dir}>.
  It <a>represents</a> its children.

  <div class="example">
    In this example, a code fragment is marked up using
    <{span}> elements and <{global/class}> attributes so that its keywords and
    identifiers can be color-coded from CSS:

    <xmp highlight="html">
      <pre>
        <code class="lang-c">
          <span class="keyword">for</span> (<span class="ident">j</span> = 0; <span class="ident">j</span> &lt; 256; <span class="ident">j</span>++) {
            <span class="ident">i_t3</span> = (<span class="ident">i_t3</span> &amp; 0x1ffff) | (<span class="ident">j</span> &lt;&lt; 17);
            <span class="ident">i_t6</span> = (((((((<span class="ident">i_t3</span> >> 3) ^ <span class="ident">i_t3</span>) >> 1) ^ <span class="ident">i_t3</span>) >> 8) ^ <span class="ident">i_t3</span>) >> 5) &amp; 0xff;
            <span class="keyword">if</span> (<span class="ident">i_t6</span> == <span class="ident">i_t1</span>)
              <span class="keyword">break</span>;
          }
        </code>
      </xmp>
    </pre>

  </div>

<h4 id="the-br-element">The <dfn element><code>br</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a></dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl">
        interface HTMLBRElement : HTMLElement {};
      </pre>
    </dd>
  </dl>

  The <{br}> element <a>represents</a> a line break.

  <p class="note">
    While line breaks are usually represented in visual media by physically moving
  subsequent text to a new line, a style sheet or user agent would be equally justified in causing
  line breaks to be rendered in a different manner, for instance as green dots, or as extra
  spacing.
  </p>

  <{br}> elements must be used only for line breaks that are actually part of the
  content, as in poems or addresses.

  <div class="example">
  The following example is correct usage of the <{br}> element:

    <xmp highlight="html">
      <p>P. Sherman<br>
      42 Wallaby Way<br>
      Sydney</p>
    </xmp>

  </div>

  <{br}> elements must not be used for separating thematic groups in a paragraph.

  <div class="example">
    The following examples are non-conforming, as they abuse the <{br}> element:

    <xmp class="bad" highlight="html">
      <p><a ...>34 comments.</a><br>
      <a ...>Add a comment.</a></p>
    </xmp>

    <xmp class="bad" highlight="html">
      <p><label>Name: <input name="name"></label><br>
      <label>Address: <input name="address"></label></p>
    </xmp>

    Here are alternatives to the above, which are correct:

    <xmp highlight="html">
      <p><a ...>34 comments.</a></p>
      <p><a ...>Add a comment.</a></p>
    </xmp>

    <xmp highlight="html">
      <p><label>Name: <input name="name"></label></p>
      <p><label>Address: <input name="address"></label></p>
    </xmp>

  </div>

  If a <a>paragraph</a> consists of nothing but a single <{br}> element, it
  represents a placeholder blank line (e.g., as in a template). Such blank lines must not be used for
  presentation purposes.


  Any content inside <{br}> elements must not be considered part of the surrounding
  text.

  <p class="note">
    This element <a href="#bidireq">has rendering requirements involving the bidirectional algorithm</a>.
  </p>


<h4 id="the-wbr-element">The <dfn element><code>wbr</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a></dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>[=Allowed ARIA role attribute values=]:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>[=Allowed ARIA state and property attributes=]:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses {{HTMLElement}}.</dd>
  </dl>

  The <{wbr}> element <a>represents</a> a line break opportunity.

  <div class="example">
    In the following example, someone is quoted as saying something which, for effect, is written
    as one long word. However, to ensure that the text can be wrapped in a readable fashion, the
    individual words in the quote are separated using a <{wbr}> element.

    <xmp highlight="html">
      <p>So then he pointed at the tiger and screamed "there<wbr>is<wbr>no<wbr>way<wbr>you<wbr>are<wbr>ever<wbr>going<wbr>to<wbr>catch<wbr>me"!</p>
    </xmp>

  </div>

  <div class="example">
    Here, especially long lines of code in a program listing have suggested wrapping points given
    using <{wbr}> elements.

    <xmp highlight="html">
      <pre>
        Heading heading = Helm.HeadingFactory(HeadingCoordinates[1], <wbr>HeadingCoordinates[2], <wbr>HeadingCoordinates[3], <wbr>HeadingCoordinates[4]);
        Course course = Helm.CourseFactory(Heading, <wbr>Maps.MapFactoryFromHeading(heading), <wbr>Speeds.GetMaximumSpeed().ConvertToWarp());
      </pre>
    </xmp>

  </div>


  Any content inside <{wbr}> elements must not be considered part of the surrounding
  text.

    <pre class="example" highlight="javascript">
      var wbr = document.createElement("wbr");
      wbr.textContent = "This is wrong";
      document.body.appendChild(wbr);
    </pre>

  <p class="note">
    This element <a href="#bidireq">has rendering requirements involving the bidirectional algorithm</a>.
  </p>


<h4 id="text-level-semantics-usage-summary">Usage summary</h4>

  <em>This section is non-normative.</em>

  <table>
    <thead>
    <tr>
      <th>Element
      </th><th>Purpose
      </th><th>Example
    </th></tr></thead><tbody>
    <tr>
      <td><{a}>
      </td><td>Hyperlinks
      </td><td><xmp class="example" highlight="html">Visit my <a href="drinks.html">drinks</a> page.</xmp>

    </td></tr><tr>
      <td><{em}>
      </td><td>Stress emphasis
      </td><td><xmp class="example" highlight="html">I must say I <em>adore</em> lemonade.</xmp>

    </td></tr><tr>
      <td><{strong}>
      </td><td>Importance
      </td><td><xmp class="example" highlight="html">This tea is <strong>very hot</strong>.</xmp>

    </td></tr><tr>
      <td><{small}>
      </td><td>Side comments
      </td><td><xmp class="example" highlight="html">These grapes are made into wine. <small>Alcohol is addictive.</small></xmp>

    </td></tr><tr>
      <td><{s}>
      </td><td>Inaccurate text
      </td><td><xmp class="example" highlight="html">Price: <s>£4.50</s> £2.00!</xmp>

    </td></tr><tr>
      <td><{cite}>
      </td><td>Titles of works
      </td><td><xmp class="example" highlight="html">The case <cite>Hugo v. Danielle</cite> is relevant here.</xmp>

    </td></tr><tr>
      <td><{q}>
      </td><td>Quotations
      </td><td><xmp class="example" highlight="html">The judge said <q>You can drink water from the fish tank</q> but advised against it.</xmp>

    </td></tr><tr>
      <td><{dfn}>
      </td><td>Defining instance
      </td><td><xmp class="example" highlight="html">The term <dfn>organic food</dfn> refers to food produced without synthetic chemicals.</xmp>

    </td></tr><tr>
      <td><{abbr}>
      </td><td>Abbreviations
      </td><td><xmp class="example" highlight="html">Organic food in Ireland is certified by the <abbr title="Irish Organic Farmers and Growers Association">IOFGA</abbr>.</xmp>

    </td></tr><tr>
      <td><{ruby}>, <{rb}>, <{rp}>, <{rt}>, <code>rtc</code>
      </td><td>Ruby annotations
      </td><td><xmp class="example" highlight="html"><ruby> <rb>OJ <rp>(<rtc><rt>Orange Juice</rtc><rp>)</ruby></xmp>

    </td></tr><tr>
      <td><{data}>
      </td><td>Machine-readable equivalent
      </td><td><xmp class="example" highlight="html">Available starting today! <data value="UPC:022014640201">North Coast Organic Apple Cider</data></xmp>

    </td></tr><tr>
      <td><{time}>
      </td><td>Machine-readable equivalent of date- or time-related data
      </td><td><xmp class="example" highlight="html">Available starting on <time datetime="2011-11-18">November 18th</time>!</xmp>

    </td></tr><tr>
      <td><{code}>
      </td><td>Computer code
      </td><td><xmp class="example" highlight="html">The <code>fruitdb</code> program can be used for tracking fruit production.</xmp>

    </td></tr><tr>
      <td><{var}>
      </td><td>Variables
      </td><td><xmp class="example" highlight="html">If there are <var>n</var> fruit in the bowl, at least <var>n</var>÷2 will be ripe.</xmp>

    </td></tr><tr>
      <td><{samp}>
      </td><td>Computer output
      </td><td><xmp class="example" highlight="html">The computer said <samp>Unknown error -3</samp>.</xmp>

    </td></tr><tr>
      <td><{kbd}>
      </td><td>User input
      </td><td><xmp class="example" highlight="html">Hit <kbd>F1</kbd> to continue.</xmp>

    </td></tr><tr>
      <td><{sub}>
      </td><td>Subscripts
      </td><td><xmp class="example" highlight="html">Water is H<sub>2</sub>O.</xmp>

    </td></tr><tr>
      <td><{sup}>
      </td><td>Superscripts
      </td><td><xmp class="example" highlight="html">The Hydrogen in heavy water is usually <sup>2</sup>H.</xmp>

    </td></tr><tr>
      <td><{i}>
      </td><td>Alternative voice
      </td><td><xmp class="example" highlight="html">Lemonade consists primarily of <i>Citrus limon</i>.</xmp>

    </td></tr><tr>
      <td><{b}>
      </td><td>Keywords
      </td><td><xmp class="example" highlight="html">Take a <b>lemon</b> and squeeze it with a <b>juicer</b>.</xmp>

    </td></tr><tr>
      <td><{u}>
      </td><td>Annotations
      </td><td><xmp class="example" highlight="html">The mixture of apple juice and <u class="spelling">eldeflower</u> juice is very pleasant.</xmp>

    </td></tr><tr>
      <td><{mark}>
      </td><td>Highlight
      </td><td><xmp class="example" highlight="html">Elderflower cordial, with one <mark>part</mark> cordial to ten <mark>part</mark>s water, stands a<mark>part</mark> from the rest.</xmp>

    </td></tr><tr>
      <td><{bdi}>
      </td><td>Text directionality isolation
      </td><td><xmp class="example" highlight="html">The recommended restaurant is <bdi lang="">My Juice Café (At The Beach)</bdi>.</xmp>

    </td></tr><tr>
      <td><{bdo}>
      </td><td>Text directionality formatting
      </td><td><xmp class="example" highlight="html">The proposal is to write English, but in reverse order. "Juice" would become "<bdo dir="rtl">Juice</bdo>"</xmp>

    </td></tr><tr>
      <td><{span}>
      </td><td>Other
      </td><td><xmp class="example" highlight="html">In French we call it <span lang="fr">sirop de sureau</span>.</xmp>

    </td></tr><tr>
      <td><{br}>
      </td><td>Line break
      </td><td><xmp class="example" highlight="html">Simply Orange Juice Company<br>Apopka, FL 32703<br>U.S.A.</xmp>

    </td></tr><tr>
      <td><{wbr}>
      </td><td>Line breaking opportunity
      </td><td><xmp class="example" highlight="html">www.simply<wbr>orange<wbr>juice.com</xmp>

  </td></tr></tbody></table>

</section>
