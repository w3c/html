<section>
<!--
 ██████  ████████ ██     ██    ███    ██    ██ ████████ ████  ██████   ██████
██    ██ ██       ███   ███   ██ ██   ███   ██    ██     ██  ██    ██ ██    ██
██       ██       ████ ████  ██   ██  ████  ██    ██     ██  ██       ██
 ██████  ██████   ██ ███ ██ ██     ██ ██ ██ ██    ██     ██  ██        ██████
      ██ ██       ██     ██ █████████ ██  ████    ██     ██  ██             ██
██    ██ ██       ██     ██ ██     ██ ██   ███    ██     ██  ██    ██ ██    ██
 ██████  ████████ ██     ██ ██     ██ ██    ██    ██    ████  ██████   ██████
-->

<h2 id="semantics">The elements of HTML</h2>

<pre class="include">
path: sections/semantics-root.include
</pre>

<pre class="include">
path: sections/semantics-document-metadata.include
</pre>

<pre class="include">
path: sections/semantics-sections.include
</pre>

<pre class="include">
path: sections/semantics-grouping-content.include
</pre>

<pre class="include">
path: sections/semantics-textlevel.include
</pre>

<pre class="include">
path: sections/semantics-edits.include
</pre>

<pre class="include">
path: sections/semantics-embedded-content.include
</pre>

<pre class="include">
path: sections/semantics-links.include
</pre>

<pre class="include">
path: sections/semantics-tabular-data.include
</pre>

<pre class="include">
path: sections/semantics-forms.include
</pre>

<pre class="include">
path: sections/semantics-interactive-elements.include
</pre>

<pre class="include">
path: sections/semantics-scriptings.include
</pre>

<pre class="include">
path: sections/semantics-common-idioms.include
</pre>

<section>

<h3 id="disabled-elements">Disabled elements</h3>

  An element is said to be <dfn lt="disabling|actually disabled">actually disabled</dfn> if it
  falls into one of the following categories:

  <ul>

    <li>a <{button}> element that is disabled</li>

    <li>an <{input}> element that is disabled</li>

    <li>a <{select}> element that is disabled</li>

    <li>a <{textarea}> element that is disabled</li>

    <li>an <{optgroup}> element that has a <code>disabled</code> attribute</li>

    <li>an <{option}> element that is disabled</li>

    <li>a <{menuitem}> element that has a <code>disabled</code> attribute</li>

    <li>a <{fieldset}> element that is a <a>disabled fieldset</a></li>

  </ul>

  <p class="note">
    This definition is used to determine what elements <a>can be focused</a> and which elements match the <code>:disabled</code> pseudo-class.
  </p>

  <div class="impl">

</section>

<section>

<h3 id="matching-html-elements-using-selectors">Matching HTML elements using selectors</h3>

<h4 id="casesensitivity">Case-sensitivity</h4>

  The Selectors specification leaves the case-sensitivity of element names, attribute names, and
  attribute values to be defined by the host language. [[!CSS3-SELECTORS]]

  <p class="note"><cite>Selectors</cite> defines that ID and class selectors, when matched against
  elements in documents that are in <a>quirks mode</a>, will be matched in an <a>ASCII
  case-insensitive</a> manner.</p>

  When comparing a CSS element type selector to the names of <a>html elements</a> in
  <a>HTML documents</a>, the CSS element type selector must first be <a>converted to ASCII
  lowercase</a>. The same selector when compared to other elements must be compared according to
  its original case. In both cases, the comparison is <a>case-sensitive</a>.

  When comparing the name part of a CSS attribute selector to the names of namespace-less
  attributes on <a>html elements</a> in <a>HTML documents</a>, the name part of the CSS
  attribute selector must first be <a>converted to ASCII lowercase</a>. The same selector when
  compared to other attributes must be compared according to its original case. In both cases, the
  comparison is <a>case-sensitive</a>.

  Attribute selectors on an <a>HTML element</a> in an
  <a>HTML document</a> must treat the <em>values</em> of attributes
  with the following names as <a>ASCII case-insensitive</a>, with one
  exception as noted in [[#rendering]]:

  <ul class="brief">
    <li><code>accept</code>
    </li><li><code>accept-charset</code>
    </li><li><code>align</code>
    </li><li><code>alink</code>
    </li><li><code>axis</code>
    </li><li><code>bgcolor</code>
    </li><li><code>charset</code>
    </li><li><code>checked</code>
    </li><li><code>clear</code>
    </li><li><code>codetype</code>
    </li><li><code>color</code>
    </li><li><code>compact</code>
    </li><li><code>declare</code>
    </li><li><code>defer</code>
    </li><li><code>dir</code>
    </li><li><code>direction</code>
    </li><li><code>disabled</code>
    </li><li><code>enctype</code>
    </li><li><code>face</code>
    </li><li><code>frame</code>
    </li><li><code>hreflang</code>
    </li><li><code>http-equiv</code>
    </li><li><{global/lang}>
    </li><li><code>language</code>
    </li><li><code>link</code>
    </li><li><code>media</code>
    </li><li><code>method</code>
    </li><li><code>multiple</code>
    </li><li><code>nohref</code>
    </li><li><code>noresize</code>
    </li><li><code>noshade</code>
    </li><li><code>nowrap</code>
    </li><li><code>readonly</code>
    </li><li><{links/rel}>
    </li><li><code>rev</code>
    </li><li><code>rules</code>
    </li><li><code>scope</code>
    </li><li><code>scrolling</code>
    </li><li><code>selected</code>
    </li><li><code>shape</code>
    </li><li><code>target</code>
    </li><li><code>text</code>
    </li><li><code>type</code> (except as specified in [[#rendering]])
    </li><li><code>valign</code>
    </li><li><code>valuetype</code>
    </li><li><code>vlink</code>
  </li></ul>

  All other attribute values and everything else must be treated as entirely <a>case-sensitive</a>
  for the purposes of selector matching. This includes:

  <ul class="brief">
    <li> IDs and classes in <a>no-quirks mode</a> and <a>limited-quirks mode</a>
    </li><li> the names of elements not in the <a>HTML namespace</a>
    </li><li> the names of <a>html elements</a> in <a>XML documents</a>
    </li><li> the names of attributes of elements not in the <a>HTML namespace</a>
    </li><li> the names of attributes of <a>html elements</a> in <a>XML documents</a>
    </li><li> the names of attributes that themselves have namespaces
  </li></ul>

<h4 id="pseudoclasses">Pseudo-classes</h4>

  Warning: There is only one known native implementation of <code>:dir(ltr)</code> pseudo-class matching (Firefox/Gecko). Therefore this feature cannot be relied upon. 
  
  There are a number of dynamic selectors that can be used with HTML. This section defines when
  these selectors match HTML elements. [[!CSS3-SELECTORS]] [[!CSS-UI-3]]

  <dl>

    <dt><dfn noexport><code>:link</code></dfn></dt>
    <dt><dfn noexport><code>:visited</code></dfn></dt>

    <dd>

    All <{a}> elements that have an <{links/href}>
    attribute, all <{area}> elements that have an <{links/href}> attribute, and all <{link}> elements that have
    an <{link/href}> attribute, must match one of <code>:link</code> and <code>:visited</code>.

    Other specifications might apply more specific rules regarding how these elements are to
    match these pseudo-classes, to mitigate some privacy concerns that apply with straightforward
    implementations of this requirement.

    </dd>

    <dt><dfn noexport><code>:active</code></dfn></dt>

    <dd>

    The <code>:active</code> pseudo-class is defined to match an element
    <q cite="https://drafts.csswg.org/selectors3/#the-user-action-pseudo-classes-hover-act">while an
    element is <dfn><i>being activated</i></dfn> by the user</q>.

    To determine whether a particular element is <i>being activated</i> for the purposes of
    defining the <code>:active</code> pseudo-class only, an HTML user agent
    must use the first relevant entry in the following list.

    <dl>

      <dt>If the element has a descendant that is currently matching the <code>:active</code> pseudo-class</dt>

      <dd>The element is <i>being activated</i>.</dd>

      <dt>If the element is the <a>labeled control</a> of a <{label}> element that is
      currently matching <a>:active</a></dt>

      <dd>The element is <i>being activated</i>.</dd>

      <dt>If the element is a <{button}> element</dt>

      <dt>If the element is an <{input}> element whose <code>type</code> attribute is in the
      <a element-state for="input">submit button</a>, <a element-state for="input">image button</a>,
      <a element-state for="input">Reset Button</a>, or <a element-state for="input">Button</a> state</dt>

      <dd>

      The element is <i>being activated</i> if it is <a>in a formal activation state</a>
      and it is not disabled.

      <p class="example">For example, if the user is using a keyboard to push a <code>button</code>
      element by pressing the space bar, the element would match this pseudo-class in between the
      time that the element received the <code>keydown</code> event and the
      time the element received the <code>keyup</code> event.</p>

      </dd>

      <dt>If the element is a <{menuitem}> element</dt>

      <dd>The element is <i>being activated</i> if it is <a>in a formal activation state</a>
      and it does not have a <code>disabled</code>
      attribute.</dd>

      <dt>If the element is an <{a}> element that has an <{links/href}> attribute</dt>

      <dt>If the element is an <{area}> element that has an <{links/href}> attribute</dt>

      <dt>If the element is a <{link}> element that has an <{link/href}> attribute</dt>

      <dt>If the element has its <a>tabindex focus flag</a> set</dt>

      <dd>The element is <i>being activated</i> if it is <a>in a formal activation
      state</a>.</dd>

      <dt>If the element is <a>being actively pointed at</a></dt>

      <dd>The element is <i>being activated</i>.</dd>

    </dl>

    An element is said to be <dfn>in a formal activation state</dfn> between the time the user
    begins to indicate an intent to trigger the element's <a>activation behavior</a> and
    either the time the user stops indicating an intent to trigger the element's <a>activation
    behavior</a>, or the time the element's <a>activation behavior</a> has finished
    running, which ever comes first.

    An element is said to be <dfn>being actively pointed at</dfn> while the user indicates the
    element using a pointing device while that pointing device is in the "down" state (e.g., for a
    mouse, between the time the mouse button is pressed and the time it is depressed; for a finger
    in a multitouch environment, while the finger is touching the display surface).

    </dd>

    <dt><dfn noexport><code>:hover</code></dfn></dt>

    <dd>

    The <code>:hover</code> pseudo-class is defined to match an element <q cite="https://drafts.csswg.org/selectors3/#the-user-action-pseudo-classes-hover-act">while the
    user <i>designates</i> an element with a pointing device</q>. For the purposes of defining the
    <code>:hover</code> pseudo-class only, an HTML user agent must consider
    an element as being one that the user <i>designates</i> if it is:

    <ul>

      <li>

      An element that the user indicates using a pointing device.

      </li>

      <li>

      An element that has a descendant that the user indicates using a pointing device.

      </li>

      <li>

      An element that is the <a>labeled control</a> of a <{label}> element that is
      currently matching <a>:hover</a>.

      </li>

    </ul>

    <div class="example">
      Consider in particular a fragment such as:

      <pre highlight="html">
&lt;p&gt; &lt;label for=c&gt; &lt;input id=a&gt; &lt;/label&gt; &lt;span id=b&gt; &lt;input id=c&gt; &lt;/span&gt; &lt;/p&gt;
    </pre>

      If the user designates the element with ID "<{a}>" with their pointing
      device, then the <{p}> element (and all its ancestors not shown in the snippet above),
      the <{label}> element, the element with ID "<{a}>", and the element
      with ID "<code>c</code>" will match the <a>:hover</a>
      pseudo-class. The element with ID "<{a}>" matches it from condition 1, the
      <code>label</code> and <{p}> elements match it because of condition 2 (one of their
      descendants is designated), and the element with ID "<code>c</code>" matches it
      through condition 3 (its <{label}> element matches <a>:hover</a>). However, the element with ID "<code>b</code>"
      does <em>not</em> match <a>:hover</a>: its descendant is not
      designated, even though it matches <a>:hover</a>.

    </div>

    </dd>

    <dt><dfn noexport><code>:focus</code></dfn></dt>

    <dd>

    For the purposes of the CSS ':focus' pseudo-class, an <dfn>element has the focus</dfn> when
    its <a>top-level browsing context</a> has the system focus, it is not itself a
    <a>browsing context container</a>, and it is one of the elements listed in the <a>focus
    chain</a> of the <a>currently focused area of the top-level browsing context</a>.

    </dd>

    <dt><dfn noexport><code>:enabled</code></dfn></dt>

    <dd>

    The <code>:enabled</code> pseudo-class must match any element
    that is one of the following:

    <ul>

      <li>a <{button}> element that is not disabled</li>

      <li>an <{input}> element that is not disabled</li>

      <li>a <{select}> element that is not disabled</li>

      <li>a <{textarea}> element that is not disabled</li>

      <li>an <{optgroup}> element that does not have a <code>disabled</code> attribute</li>

      <li>an <{option}> element that is not disabled</li>

      <li>a <{menuitem}> element that does not have a <code>disabled</code> attribute</li>

      <li>a <{fieldset}> element that is not a <a>disabled fieldset</a></li>

    </ul>

    </dd>

    <dt><dfn noexport><code>:disabled</code></dfn></dt>

    <dd>

    The <code>:disabled</code> pseudo-class must match any element that
    is <a>actually disabled</a>.

    </dd>

    <dt><dfn noexport><code>:checked</code></dfn></dt>

    <dd>

    The <code>:checked</code> pseudo-class must match any element
    falling into one of the following categories:

    <ul>

      <li><{input}> elements whose <code>type</code> attribute is in
      the <a element-state for="input">Checkbox</a> state and whose <a for="forms">checkedness</a> state is true</li>

      <li><{input}> elements whose <code>type</code> attribute is in
      the <a element-state for="input">Radio Button</a> state and whose <a for="forms">checkedness</a> state is true</li>

      <li><{option}> elements whose <a state for="option">selectedness</a> is true</li>

      <li><{menuitem}> elements whose <code>type</code> attribute
      is in the <a state for="menuitem">Checkbox</a> state and that have a
      <code>checked</code> attribute</li>

      <li><{menuitem}> elements whose <code>type</code> attribute
      is in the <a state for="menuitem">Radio</a> state and that have a <code>checked</code> attribute</li>

    </ul>

    </dd>

    <dt><dfn noexport><code>:indeterminate</code></dfn></dt>

    <dd>

    The <code>:indeterminate</code> pseudo-class must match any
    element falling into one of the following categories:

    <ul>

      <li><{input}> elements whose <code>type</code> attribute is in
      the <a element-state for="input">Checkbox</a> state and whose <code>indeterminate</code> IDL attribute is set to true</li>

      <li><{input}> elements whose <code>type</code> attribute is in
      the <a element-state for="input">Radio Button</a> state and whose <a>radio button
      group</a> contains no <{input}> elements whose <a for="forms">checkedness</a> state is true.</li>

      <li><{progress}> elements with no <code>value</code>
      content attribute</li>

    </ul>

    </dd>

    <dt><dfn noexport><code>:default</code></dfn></dt>

    <dd>

    The <code>:default</code> pseudo-class must match any element
    falling into one of the following categories:

    <ul>

      <li><{button}> elements that are their form's <a>default button</a></li>

      <li><{input}> elements whose <code>type</code> attribute is in
      the <a element-state for="input">submit button</a> or <a element-state for="input">image button</a> state, and that are their form's
      <a>default button</a></li>

      <li><{input}> elements to which the <code>checked</code>
      attribute applies and that have a <code>checked</code>
      attribute</li>

      <li><{option}> elements that have a <code>selected</code>
      attribute</li>

    </ul>

    </dd>

    <dt><dfn noexport><code>:valid</code></dfn></dt>

    <dd>

    The <code>:valid</code> pseudo-class must match any element falling
    into one of the following categories:

    <ul>

      <li>elements that are <a>candidates for
      constraint validation</a> and that <a>satisfy their constraints</a></li>

      <li><{form}> elements that are not the <a>form owner</a> of any elements that
      themselves are <a>candidates for constraint
      validation</a> but do not <a>satisfy their constraints</a></li>

      <li><{fieldset}> elements that have no descendant elements that themselves are <a>candidates for constraint validation</a> but do
      not <a>satisfy their constraints</a></li>

    </ul>

    </dd>

    <dt><dfn noexport><code>:invalid</code></dfn></dt>

    <dd>

    The <code>:invalid</code> pseudo-class must match any element
    falling into one of the following categories:

    <ul>

      <li>elements that are <a>candidates for
      constraint validation</a> but that do not <a>satisfy their constraints</a></li>

      <li><{form}> elements that are the <a>form owner</a> of one or more elements
      that themselves are <a>candidates for constraint
      validation</a> but do not <a>satisfy their constraints</a></li>

      <li><{fieldset}> elements that have of one or more descendant elements that themselves
      are <a>candidates for constraint
      validation</a> but do not <a>satisfy their constraints</a></li>

    </ul>

    </dd>

    <dt><dfn noexport><code>:in-range</code></dfn></dt>

    <dd>

    The <code>:in-range</code> pseudo-class must match all elements
    that are <a>candidates for constraint
    validation</a>, <a>have range limitations</a>, and that are neither <a>suffering
    from an underflow</a> nor <a>suffering from an overflow</a>.

    </dd>

    <dt><dfn noexport><code>:out-of-range</code></dfn></dt>

    <dd>

    The <code>:out-of-range</code> pseudo-class must match all
    elements that are <a>candidates for constraint
    validation</a>, <a>have range limitations</a>, and that are either <a>suffering from
    an underflow</a> or <a>suffering from an overflow</a>.

    </dd>

    <dt><dfn noexport><code>:required</code></dfn></dt>

    <dd>

    The <code>:required</code> pseudo-class must match any element
    falling into one of the following categories:

    <ul>

      <li><{input}> elements that are <i>required</i></li>

      <li><{select}> elements that have a <code>required</code>
      attribute</li>

      <li><{textarea}> elements that have a <code>required</code> attribute</li>

    </ul>

    </dd>

    <dt><dfn noexport><code>:optional</code></dfn></dt>

    <dd>

    The <code>:optional</code> pseudo-class must match any element
    falling into one of the following categories:

    <ul>

      <li><{input}> elements to which the <code>required</code>
      attribute applies that are not <i>required</i></li>

      <li><{select}> elements that do not have a <code>required</code> attribute</li>

      <li><{textarea}> elements that do not have a <code>required</code> attribute</li>

    </ul>

    </dd>

    <dt><dfn noexport><code>:read-only</code></dfn></dt>
    <dt><dfn noexport><code>:read-write</code></dfn></dt>

    <dd>

    The <code>:read-write</code> pseudo-class must match any element
    falling into one of the following categories, which for the purposes of Selectors are thus
    considered <i>user-alterable</i>: [[!CSS3-SELECTORS]]

    <ul>

      <li><{input}> elements to which the <code>readonly</code>
      attribute applies, and that are <i>mutable</i> (i.e., that do not
      have the <code>readonly</code> attribute specified and that are not
      disabled)</li>

      <li><{textarea}> elements that do not have a <code>readonly</code> attribute, and that are not disabled</li>

      <li>elements that are <a>editing hosts</a> or <a>editable</a>
      and are neither <{input}> elements nor <{textarea}> elements</li>

    </ul>

    The <code>:read-only</code> pseudo-class must match all other
    <a>html elements</a>.

    </dd>

    <dt><dfn noexport><code>:dir(ltr)</code></dfn></dt>

    <dd>

    The <code>:dir(ltr)</code> pseudo-class must match all elements whose
    <a>directionality</a> is '<a state for="dir">ltr</a>'.

    </dd>

    <dt><dfn noexport><code>:dir(rtl)</code></dfn></dt>

    <dd>

    The <code>:dir(rtl)</code> pseudo-class must match all elements whose
    <a>directionality</a> is '<a state for="dir">rtl</a>'.

    </dd>

  </dl>

  <p class="note">
    Another section of this specification defines the <i>target element</i> used with the
    <code>:target</code> pseudo-class.
  </p>

  <p class="note">
    This specification does not define when an element matches the <code>:lang()</code> dynamic
    pseudo-class, as it is defined in sufficient detail in a language-agnostic fashion in the
    Selectors specification. [[!CSS3-SELECTORS]]
  </p>

</section>

</section>
