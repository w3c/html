<section>
<!--
████████   ███████  ██     ██
██     ██ ██     ██ ███   ███
██     ██ ██     ██ ████ ████
██     ██ ██     ██ ██ ███ ██
██     ██ ██     ██ ██     ██
██     ██ ██     ██ ██     ██
████████   ███████  ██     ██
-->
<!-- This section ostensibly kept up to date by travil@microsoft.com -->

<h2 id="dom">Semantics, structure, and APIs of HTML documents</h2>

<h3 id="documents">Documents</h3>

  Every XML and HTML document in an HTML UA is represented by a {{Document}} object. [[!DOM]]

  The {{Document}} object's [=Document/URL=] is defined in the DOM specification. It is initially
  set when the {{Document}} object is created, but that can change during the lifetime of the
  {{Document}} object; for example, it changes when the user [=navigates=] to a [=url/fragment=] on
  the page and when the {{History/pushState()}} method is called with a new [=url/URL=]. [[!DOM]]

  <p class="warning">Interactive user agents typically expose the {{Document}} object's
  [=Document/URL=] in their user interface. This is the primary mechanism by which a user can tell
  if a site is attempting to impersonate another.</p>

  When a {{Document}} is created by a [=concept/script=] using the
  {{DOMImplementation/createDocument()}} or {{DOMImplementation/createHTMLDocument()}} APIs, the
  {{Document}} is both [=ready for post-load tasks=] and [=completely loaded=] immediately.

  <dfn>The document's referrer</dfn> is a string (representing a [=url/URL=]) that can be set when
  the {{Document}} is created. If it is not explicitly set, then its value is the empty string.

  Each {{Document}} object has a <dfn>reload override flag</dfn> that is originally unset. The flag
  is set by the {{Document/open()|document.open()}} and {{Document/write()|document.write()}}
  methods in certain situations. When the flag is set, the {{Document}} also has a
  <dfn>reload override buffer</dfn> which is a Unicode string that is used as the source of the
  document when it is reloaded.

  When the user agent is to perform
  <dfn lt="overridden reload|an overridden reload">an overridden reload</dfn>, given a
  [=source browsing context=], it must act as follows:

  1. Let |source| be the value of the [=browsing context=]'s [=active document=]'s
      [=reload override buffer=].
  2. Let |address| be the [=browsing context=]'s [=active document=]'s [=document url|URL=].
  3. Let |HTTPS state| be the <a for="document">HTTPS state</a> of the [=browsing context=]'s
      [=active document=].
  4. Let |referrer policy| be the <a lt="document referrer policy">referrer policy</a> of the
      [=browsing context=]'s [=active document=].
  4. Let |CSP list| be the <a for="document">CSP list</a> of the [=browsing context=]'s
      [=active document=].
  5. [=Navigate=] the [=browsing context=] to a new [=response=] whose [=response/body=] is
      |source|, [=response/header list=] is <code>Referrer-Policy/</code>|referrer policy|,
      [=response/CSP list=] is |CSP list| and [=response/HTTPS state=] is |HTTPS state|, with the
      [=exceptions enabled flag=] set and [=replacement enabled=]. The [=source browsing context=]
      is that given to the [=overridden reload=] algorithm. When the [=navigate=] algorithm creates
      a {{Document}} object for this purpose, set that {{Document}}'s [=reload override flag=] and
      set its [=reload override buffer=] to |source|. Rethrow any exceptions.

      When it comes time to <a>set the document's address</a> in the [=navigation algorithm=], use
      |address| as the [=override URL=].

<h4 id="the-document-object">The <dfn element>Document</dfn> object</h4>

  The DOM specification defines a {{Document}} interface, which this specification extends
  significantly:

  <pre class="idl" data-highlight="webidl">
    enum DocumentReadyState { "loading", "interactive", "complete" };

    typedef (HTMLScriptElement or SVGScriptElement) HTMLOrSVGScriptElement;

    [OverrideBuiltins]
    partial interface Document {
      // resource metadata management
      [PutForwards=href, Unforgeable] readonly attribute Location? location;
      attribute USVString domain;
      readonly attribute USVString referrer;
      attribute USVString cookie;
      readonly attribute DOMString lastModified;
      readonly attribute DocumentReadyState readyState;

      // DOM tree accessors
      getter object (DOMString name);
      [CEReactions] attribute DOMString title;
      attribute DOMString dir;
      attribute HTMLElement? body;
      readonly attribute HTMLHeadElement? head;
      [SameObject] readonly attribute HTMLCollection images;
      [SameObject] readonly attribute HTMLCollection embeds;
      [SameObject] readonly attribute HTMLCollection plugins;
      [SameObject] readonly attribute HTMLCollection links;
      [SameObject] readonly attribute HTMLCollection forms;
      [SameObject] readonly attribute HTMLCollection scripts;
      NodeList getElementsByName(DOMString elementName);
      readonly attribute HTMLOrSVGScriptElement? currentScript; // classic scripts in a document tree only

      // dynamic markup insertion
      Document open(optional DOMString type = "text/html", optional DOMString replace = "");
      WindowProxy open(DOMString url, DOMString name, DOMString features, optional boolean replace = false);
      [CEReactions] void close();
      [CEReactions] void write(DOMString... text);
      [CEReactions] void writeln(DOMString... text);

      // user interaction
      readonly attribute WindowProxy? defaultView;
      readonly attribute Element? activeElement;
      boolean hasFocus();
      [CEReactions] attribute DOMString designMode;
      [CEReactions] boolean execCommand(DOMString commandId, optional boolean showUI = false, optional DOMString value = "");
      boolean queryCommandEnabled(DOMString commandId);
      boolean queryCommandIndeterm(DOMString commandId);
      boolean queryCommandState(DOMString commandId);
      boolean queryCommandSupported(DOMString commandId);
      DOMString queryCommandValue(DOMString commandId);

      // special event handler IDL attributes that only apply to Document objects
      [LenientThis] attribute EventHandler onreadystatechange;
    };
    Document implements GlobalEventHandlers;
    Document implements DocumentAndElementEventHandlers;
  </pre>

  The {{Document}} has an <dfn for="document">HTTPS state</dfn> (an [=HTTPS state value=]),
  initially "<code>none</code>", which represents the security properties of the network channel
  used to deliver the {{Document}}'s data.

  The {{Document}} has a
  <dfn export id="concept-document-referrer-policy" local-lt="document referrer policy">referrer policy</dfn>
  (a [=referrer policy=]), initially the empty string, which represents the default
  [=referrer policy=] used by [=fetches=] initiated by the {{Document}}.

  The {{Document}} has a <dfn for="document">CSP list</dfn>, which is a <a>CSP list</a>
  containing all of the [=Content Security Policy=] objects active for the document. The
  list is empty unless otherwise specified.</p>

  The {{Document}} has a <dfn lt="document module map">module map</dfn>, which is a [=module map=],
  initially empty.

<h4 id="resource-metadata-management">Resource metadata management</h4>

  <dl class="domintro">
    : |document| . {{Document/referrer}}
    :: Returns the [=Document/URL=] of the {{Document}} from which the user
        navigated to this one, unless it was blocked or there was no such document, in which case it
        returns the empty string.

        The <{link/noreferrer}> link type can be used to block the referrer.
  </dl>

  The <dfn attribute for="Document"><code>referrer</code></dfn> attribute must return
  [=the document's referrer=].

  <hr />

  <dl class="domintro">
    : |document| . {{Document/cookie}} [ = |value| ]
    :: Returns the HTTP cookies that apply to the {{Document}}. If there are no cookies or cookies
        can't be applied to this resource, the empty string will be returned.

        Can be set, to add a new cookie to the element's set of HTTP cookies.

        If the contents are [=sandboxed into a unique origin=] (e.g., in an <{iframe}> with
        the <{iframe/sandbox}> attribute), a "{{SecurityError}}" {{DOMException}} will be thrown on
        getting and setting.
  </dl>

  The <dfn attribute for="Document"><code>cookie</code></dfn> attribute represents the cookies of
  the resource identified by the document's [=Document/URL=].

  A {{Document}} object that falls into one of the following conditions is a
  <dfn lt="cookie-averse|sandbox cookies">cookie-averse</dfn> {{Document}} object:

  * A {{Document}} that has no [=browsing context=].
  * A {{Document}} whose [=Document/URL=]'s [=url/scheme=] is not a [=network scheme=].

  On getting, if the document is a [=cookie-averse=] {{Document}} object, then the user agent must
  return the empty string. Otherwise, if the {{Document}}'s [=concept/origin=] is an
  [=opaque origin=], the user agent must throw a "{{SecurityError}}" {{DOMException}}. Otherwise,
  the user agent must return the [=cookie-string=] for the document's [=Document/URL=] for a
  "non-HTTP" API, decoded using [=UTF-8 decode without BOM=]. [[!COOKIES]]
  <a class="fingerprint" href="#fingerprinting-vector"><img height="21" src="images/fingerprint.png" width="15" alt="(This is a fingerprinting vector.)" /></a>

  On setting, if the document is a [=cookie-averse=] {{Document}} object, then the user agent must
  do nothing. Otherwise, if the {{Document}}'s [=concept/origin=] is an [=opaque origin=], the user
  agent must throw a "{{SecurityError}}" {{DOMException}}. Otherwise, the user agent must act as it
  would when [=receiving a set-cookie-string=] for the document's [=Document/URL=] via a "non-HTTP"
  API, consisting of the new value [=encoded as UTF-8=]. [[!COOKIES]] [[!ENCODING]]

  <p class="note">Since the {{Document/cookie}} attribute is accessible across frames, the path
  restrictions on cookies are only a tool to help manage which cookies are sent to which parts of
  the site, and are not in any way a security feature.</p>

  <p class="warning">The {{Document/cookie}} attribute's getter and setter synchronously access
  shared state. Since there is no locking mechanism, other browsing contexts in a multiprocess user
  agent can modify cookies while scripts are running. A site could, for instance, try to read a
  cookie, increment its value, then write it back out, using the new value of the cookie as a unique
  identifier for the session; if the site does this twice in two different browser windows at the
  same time, it might end up using the same "unique" identifier for both sessions, with potentially
  disastrous effects.</p>

  <hr />

  <dl class="domintro">
    : |document| . {{Document/lastModified}}
    :: Returns the date of the last modification to the document, as reported by the server, in the
        form "<code>MM/DD/YYYY&nbsp;hh:mm:ss</code>", in the user's local time zone.

        If the last modification date is not known, the current time is returned instead.
  </dl>

  The <dfn attribute for="Document"><code>lastModified</code></dfn> attribute, on getting, must
  return the date and time of the {{Document}}'s source file's last modification, in the user's
  local time zone, in the following format:

  1. The month component of the date.
  2. A U+002F SOLIDUS character (/).
  3. The day component of the date.
  4. A U+002F SOLIDUS character (/).
  5. The year component of the date.
  6. A U+0020 SPACE character.
  7. The hours component of the time.
  8. A U+003A COLON character (:).
  9. The minutes component of the time.
  10. A U+003A COLON character (:).
  11. The seconds component of the time.

  All the numeric components above, other than the year, must be given as two [=ASCII digits=]
  representing the number in base ten, zero-padded if necessary. The year must be given as the
  shortest possible string of four [=ASCII digits=] representing the number in base
  ten, zero-padded if necessary.

  The {{Document}}'s source file's last modification date and time must be derived from relevant
  features of the networking protocols used, e.g., from the value of the HTTP
  <a http-header><code>Last-Modified</code></a> header of the document, or from metadata in the
  file system for local files. If the last modification date and time are not known, the attribute
  must return the current date and time in the above format.

  <hr />

  <dl class="domintro">
    : |document| . {{Document/readyState}}
    :: Returns "{{DocumentReadyState/loading}}" while the {{Document}} is loading,
        "{{DocumentReadyState/interactive}}" once it is finished parsing but still loading
        sub-resources, and "{{DocumentReadyState/complete}}" once it has loaded.

        The {{global/readystatechange}} event fires on the {{Document}} object when this value
        changes.
  </dl>

  Each document has a <dfn>current document readiness</dfn>. When a {{Document}} object  is created,
  it must have its [=current document readiness=] set to the string "{{DocumentReadyState/loading}}"
  if the document is associated with an [=HTML parser=], an [=XML parser=], or an XSLT processor,
  and to the string "{{DocumentReadyState/complete}}" otherwise. Various algorithms during page
  loading affect this value. When the value is set, the user agent must [=fire an event=] named
  {{global/readystatechange}} at the {{Document}} object.

  A {{Document}} is said to have an <dfn>active parser</dfn> if it is associated with an
  [=HTML parser=] or an [=XML parser=] that has not yet been [=stop parsing|stopped=] or [=aborted=].

  The <dfn attribute for="Document"><code>readyState</code></dfn> IDL attribute must, on getting,
  return the [=current document readiness=].

<h4 id="dom-tree-accessors">DOM tree accessors</h4>

  The <{html}> element of a document is its [=document element=], if it's an <{html}> element,
  and null otherwise.

  <hr />

  <dl class="domintro">
    : |document| . {{Document/head}}
    :: Returns the <{head}> element.
  </dl>

  The <{head}> element of a document is the first <{head}> element that is a child of the <{html}>
  element, if there is one, or null otherwise.

  The <dfn attribute for="Document"><code>head</code></dfn> attribute, on getting, must return the
  <{head}> element of the document (a <{head}> element or null).

  <hr />

  <dl class="domintro">
    : |document| . {{Document/title}} [ = |value| ]
    :: Returns the document's title, as given by the <{title}> element for HTML and as given by the
        SVG <a element for="svg"><code>title</code></a> element for SVG.

        Can be set, to update the document's title. If there is no appropriate element to update,
        the new value is ignored.
  </dl>

  The <{title}> element of a document is the first <{title}> element in the document (in
  [=tree order=]), if there is one, or null otherwise.

  The <dfn attribute for="Document"><code>title</code></dfn> attribute must, on getting, run the
  following algorithm:

  1. If the [=document element=] is an SVG <{svg}> element, then let |value| be the
      [=child text content=] of the first SVG <a element for="svg"><code>title</code></a> element
      that is a child of the [=document element=]. [[!SVG11]]
  2. Otherwise, let |value| be the [=child text content=] of the <{title}> element, or the empty
      string if the <{title}> element is null.
  3. [=Strip and collapse white space=] in |value|.
  4. Return |value|.

  On setting, the steps corresponding to the first matching condition in the following list must be
  run:

  <dl class="switch">
    : If the [=document element=] is an SVG <{svg}> element
    :: 1. If there is an SVG <a element for="svg"><code>title</code></a> element that is a child of
            the [=document element=], let |element| be the first such element.
        2. Otherwise:
            1. Let |element| be the result of [=creating an element=] given the
                [=document element=]'s [=node document=], SVG
                <a element for="svg"><code>title</code></a>, and the [=SVG namespace=].
            2. Insert |element| as the first child of the [=document element=].
        3. Act as if the {{Node/textContent}} IDL attribute of |element| was set to the new value
            being assigned.

    : If the [=document element=] is in the [=HTML namespace=]
    :: 1. If the <{title}> element is null and the <{head}> element is null, then abort these steps.
        2. If the <{title}> element is non-null, let |element| be the <{title}> element.
        3. Otherwise:
            1. Let |element| be the result of [=creating an element=] given the
                [=document element=]'s [=node document=], <{title}>, and the [=HTML namespace=].
            2. [=Append=] |element| to the <{head}> element.
        4. Act as if the {{Node/textContent}} IDL attribute of |element| was set to the new value
            being assigned.

    : Otherwise
    :: Do nothing.
  </dl>

  <hr />

  <dl class="domintro">
    : |document| . {{Document/body}} [ = |value| ]
    :: Returns the <{body}> element.

        Can be set, to replace the <{body}> element.

        If the new value is not a <{body}> or <{frameset}> element, this will throw a
        "{{HierarchyRequestError}}" {{DOMException}}.
  </dl>

  The <{body}> element of a document is the first child of the <{html}> element that is either a
  <{body}> element or a <{frameset}> element. If there is no such element, it is null.

  The <dfn attribute for="Document"><code>body</code></dfn> attribute, on getting, must return the
  <{body}> element of the document (either a <{body}> element, a <{frameset}> element, or null). On
  setting, the following algorithm must be run:

  1. If the new value is not a <{body}> or <{frameset}> element, then throw a
      "{{HierarchyRequestError}}" {{DOMException}} and abort these steps.
  2. Otherwise, if the new value is the same as the <{body}> element, do nothing. Abort these steps.
  3. Otherwise, if the <{body}> element is not null, then [=replace=] the <{body}> element
      with the new value within the <{body}> element's parent and abort these steps.
  4. Otherwise, if there is no [=document element=], throw a "{{HierarchyRequestError}}"
      {{DOMException}} and abort these steps.
  5. Otherwise, the <{body}> element is null, but there's a [=document element=]. [=Append=]
      the new value to the [=document element=].

  <hr />

  <dl class="domintro">
    : |document| . {{Document/images}}
    :: Returns an {{HTMLCollection}} of the <{img}> elements in the {{Document}}.

    : |document| . {{Document/embeds}}
    : |document| . {{Document/plugins}}
    :: Return an {{HTMLCollection}} of the <{embed}> elements in the {{Document}}.

    : |document| . {{Document/links}}
    :: Returns an {{HTMLCollection}} of the <{a}> and <{area}> elements in the {{Document}} that
        have <{links/href}> attributes.

    : |document| . {{Document/forms}}
    :: Return an {{HTMLCollection}} of the <{form}> elements in the {{Document}}.

    : |document| . {{Document/scripts}}
    :: Return an {{HTMLCollection}} of the <{script}> elements in the {{Document}}.
  </dl>

  The <dfn attribute for="Document"><code>images</code></dfn> attribute must return an
  {{HTMLCollection}} rooted at the {{Document}} node, whose filter matches only <{img}> elements.

  The <dfn attribute for="Document"><code>embeds</code></dfn> attribute must return an
  {{HTMLCollection}} rooted at the {{Document}} node, whose filter matches only <{embed}> elements.

  The <dfn attribute for="Document"><code>plugins</code></dfn> attribute must return the same object
  as that returned by the {{Document/embeds}} attribute.

  The <dfn attribute for="Document"><code>links</code></dfn> attribute must return an
  {{HTMLCollection}} rooted at the {{Document}} node, whose filter matches only <{a}> elements with
  <{links/href}> attributes and <{area}> elements with <{links/href}> attributes.

  The <dfn attribute for="Document"><code>forms</code></dfn> attribute must return an
  {{HTMLCollection}} rooted at the {{Document}} node, whose filter matches only <{form}> elements.

  The <dfn attribute for="Document"><code>scripts</code></dfn> attribute must return an
  {{HTMLCollection}} rooted at the {{Document}} node, whose filter matches only <{script}> elements.

  <hr />

  <dl class="domintro">
    : |collection| = |document| . {{Document/getElementsByName()|getElementsByName}}(|name|)
    :: Returns a {{NodeList}} of elements in the {{Document}} that have a <code>name</code>
        attribute with the value |name|.
  </dl>

  The
  <dfn method for="Document" lt="getElementsByName()|getElementsByName(elementName)"><code>getElementsByName(|name|)</code></dfn>
  method takes a string |name|, and must return a [=live=] {{NodeList}} containing all the
  [=HTML elements=] in that document that have a <code>name</code> attribute whose value is equal to
  the |name| argument (in a [=case-sensitive=] manner), in [=tree order=]. When the method is
  invoked on a {{Document}} object again with the same argument, the user agent may return the same
  as the object returned by the earlier call. In other cases, a new {{NodeList}} object must be
  returned.

  <hr />

  <dl class="domintro">
    : |document| . {{Document/currentScript}}
    :: Returns the <{script}> element, or the SVG <a element for="svg"><code>script</code></a>
        element, that is currently executing, as long as the element represents a
        [=classic script=]. In the case of reentrant script execution, returns the one that most
        recently started executing amongst those that have not yet finished executing.

        Returns null if the {{Document}} is not currently executing a <{script}> element or
        SVG <a element for="svg"><code>script</code></a> element (e.g., because the running script
        is an event handler, or a timeout), or if the currently executing <{script}> or SVG
        <a element for="svg"><code>script</code></a> element represents a [=module script=].
  </dl>

  The <dfn attribute for="Document"><code>currentScript</code></dfn> attribute, on getting, must
  return the value to which it was most recently initialized. When the {{Document}} is created, the
  {{Document/currentScript}} must be initialized to null.

  <p class="note">This API has fallen out of favor in the implementor and standards community, as it
  globally exposes <{script}> or SVG <a element for="svg"><code>script</code></a> elements. As such,
  it is not available in newer contexts, such as when running [=module scripts=] or when running
  scripts in a shadow tree.</p>

  <hr />

  The {{Document}} interface [=support named properties|supports named properties=]. The
  [=supported property names=] of a {{Document}} object |document| at any moment consist of the
  following, in [=tree order=] according to the element that contributed them, ignoring later
  duplicates, and with values from <{global/id}> attributes coming before values from
  <code>name</code> attributes when the same element contributes both:

  * the value of the <code>name</code> content attribute for all <{applet}>, [=exposed=] <{embed}>,
      <{form}>, <{iframe}>, <{img}>, and [=exposed=] <{object}> elements that have a non-empty
      <code>name</code> content attribute and are [=in a document tree=] with |document| as their
      [=root=];
  * the value of the <{global/id}> content attribute for all <{applet}> and [=exposed=] <{object}>
      elements that have a non-empty <{global/id}> content attribute and are [=in a document tree=]
      with |document| as their [=root=];
  * the value of the <{global/id}> content attribute for all <{img}> elements that have both a
      non-empty <{global/id}> content attribute and a non-empty <code>name</code> content attribute,
      and are [=in a document tree=] with |document| as their [=root=].

  To <a spec="webidl">determine the value of a named property</a> |name| for a {{Document}}, the
  user agent must return the value obtained using the following steps:

  1. Let |elements| be the list of [=named elements=] with the name |name| that are
      [=in a document tree=] with the {{Document}} as their [=root=].

      <p class="note">There will be at least one such element, by definition.</p>
  2. If |elements| has only one element, and that element is an <{iframe}> element, and that
      <{iframe}> element's [=nested browsing context=] is not null, then return the {{WindowProxy}}
      object of the element's [=nested browsing context=].
  3. Otherwise, if |elements| has only one element, return that element.
  4. Otherwise return an {{HTMLCollection}} rooted at the {{Document}} node, whose filter matches
      only [=named elements=] with the name |name|.

  <dfn>Named elements</dfn> with the name |name|, for the purposes of the above algorithm, are those
  that are either:

  * <{applet}>, [=exposed=] <{embed}>, <{form}>, <{iframe}>, <{img}>, or [=exposed=] <{object}>
      elements that have a <code>name</code> content attribute whose value is |name|, or
  * <{applet}> or [=exposed=] <{object}> elements that have an <{global/id}> content
      attribute whose value is |name|, or
  * <{img}> elements that have an <{global/id}> content attribute whose value is |name|, and that
      have a non-empty <code>name</code> content attribute present also.

  An <{embed}> or <{object}> element is said to be <dfn>exposed</dfn> if it has no [=exposed=]
  <{object}> ancestor, and, for <{object}> elements, is additionally either not showing its
  [=fallback content=] or has no <{object}> or <{embed}> descendants.

  <hr />

  <p class="note">The {{Document/dir}} attribute on the {{Document}} interface is defined along with
  the <{global/dir}> content attribute.</p>

<h3 id="elements">Elements</h3>

<h4 id="elements-semantics">Semantics</h4>

  Elements, attributes, and attribute values in HTML are defined (by this specification) to have
  certain meanings (semantics). For example, the <{ol}> element represents an ordered list,
  and the <{global/lang}> attribute represents the language of the content.

  These definitions allow HTML processors, like web browsers and search engines, to present
  documents and applications consistently in different contexts.

  <div class="example">
    In this example the HTML headings may be presented as large text in a desktop browser, or
    standard size text in bold in a mobile browser. In both cases the semantic information remains
    the same - that the <{h1}> and <{h2}> elements represent headings.

    <pre highlight="html">
      &lt;!doctype html&gt;
      &lt;html lang="en"&gt;
        &lt;head&gt;
          &lt;title&gt;Favorite books&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
          &lt;header&gt;
            &lt;img src="logo.png" alt="Favorite books logo"&gt;
          &lt;/header&gt;
          &lt;main&gt;
            &lt;h1&gt;Favorite books&lt;/h1&gt;
            &lt;p&gt;These are a few of my favorite books.&lt;/p&gt;
            &lt;h2&gt;The Belgariad&lt;/h2&gt;
            &lt;p&gt;Five books by David and Leigh Eddings.&lt;/p&gt;
            &lt;h2&gt;The Hitchhiker's Guide to the Galaxy&lt;/h2&gt;
            &lt;p&gt;A trilogy of five books by Douglas Adams.&lt;/p&gt;
          &lt;/main&gt;
        &lt;/body&gt;
      &lt;/html&gt;
    </pre>
  </div>

  This semantic information is critical to assistive technologies. For example, a screen reader will
  query the browser for semantic information and use that information to present the document or
  application in synthetic speech.

  In some cases assistive technologies use semantic information to provide additional functionality.
  A speech recognition tool might provide a voice command for moving focus to the start of the
  <{main}> element for example.

  When the appropriate HTML element or attribute is not used, it deprives HTML processors of
  valuable semantic information.

  <div class="example">
    In this example styling may be used to create a visual representation of headings and other
    components, but because the appropriate HTML elements have not been used there is little
    semantic information available to web browsers, search engines and assistive technologies.

    <pre highlight="html">
      &lt;!doctype html&gt;
      &lt;html lang="en"&gt;
        &lt;head&gt;
          &lt;title&gt;Favorite books&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
          &lt;div class="header"&gt;
             &lt;img src="logo.png" alt="Favorite books logo"&gt;
          &lt;/div&gt;
          &lt;div class="main"&gt;
             &lt;span class="largeHeading"&gt;Favorite books&lt;/span&gt;
             &lt;p&gt;These are a few of my favorite books.&lt;/p&gt;
             &lt;span class="smallHeading"&gt;The Belgariad&lt;/span&gt;
             &lt;p&gt;Five books by David and Leigh Eddings.&lt;/p&gt;
             &lt;span class="smallHeading"&gt;The Hitchhiker's Guide to the Galaxy&lt;/span&gt;
             &lt;p&gt;A trilogy of five books by Douglas Adams.&lt;/p&gt;
          &lt;/div&gt;
        &lt;/body&gt;
      &lt;/html&gt;
    </pre>
  </div>

  A document can change dynamically while it is being processed. Scripting and other mechanisms can
  be used to change attribute values, text, or the entire document structure. The semantics of a
  document are therefore based on the document's state at a particular instance in time, but may
  also change in response to external events. User agents must update their presentation of the
  document to reflect these changes.

  <p id="no-browsing-context">DOM nodes whose [=node document=] does not have a [=browsing context=] are exempt from all document conformance requirements other than [=the HTML syntax=] requirements and [=the XML syntax=] requirements.</p>

  <div class="example">
    In this example the <{audio}> element is used to play a music track. The <{audio/controls}>
    attribute is used to show the user agent player, and as the music plays the controls are updated
    to indicate progress. The available semantic information is updated in response to these
    changes.

    <pre highlight="html">
      &lt;audio src="comfortablynumb.mp3" controls&gt;
    </pre>
  </div>

<h4 id="elements-in-the-dom">Elements in the DOM</h4>

  The nodes representing [=HTML elements=] in the DOM must implement, and expose to scripts, the
  interfaces listed for them in the relevant sections of this specification. This includes
  [=HTML elements=] in [=XML documents=], even when those documents are in another context (e.g.,
  inside an XSLT transform).

  Elements in the DOM <dfn>represent</dfn> things; that is, they have intrinsic <em>meaning</em>,
  also known as semantics.

  <p class="example">For example, an <{ol}> element represents an ordered list.</p>

  The basic interface, from which all the [=HTML elements=]' interfaces inherit, and which must be
  used by elements that have no additional requirements, is the {{HTMLElement}} interface.

  <pre class="idl" data-highlight="webidl">
    [HTMLConstructor]
    interface HTMLElement : Element {
      // metadata attributes
      [CEReactions] attribute DOMString title;
      [CEReactions] attribute DOMString lang;
      [CEReactions] attribute boolean translate;
      [CEReactions] attribute DOMString dir;
      [SameObject] readonly attribute DOMStringMap dataset;

      // user interaction
      [CEReactions] attribute boolean hidden;
      void click();
      [CEReactions] attribute long tabIndex;
      void focus();
      void blur();
      [CEReactions] attribute DOMString accessKey;
      [CEReactions] attribute boolean draggable;
      [CEReactions] attribute boolean spellcheck;
      void forceSpellCheck();
      [CEReactions, TreatNullAs=EmptyString] attribute DOMString innerText;
    };
    HTMLElement implements GlobalEventHandlers;
    HTMLElement implements DocumentAndElementEventHandlers;
    HTMLElement implements ElementContentEditable;
    HTMLElement implements NoncedElement;

    // Note: intentionally not [HTMLConstructor]
    interface HTMLUnknownElement : HTMLElement { };
  </pre>

  The {{HTMLElement}} interface holds methods and attributes related to a number of disparate
  features, and the members of this interface are therefore described in various different sections
  of this specification.

  The {{HTMLUnknownElement}} interface must be used for [=HTML elements=] that are not defined by
  this specification (or [=other applicable specifications=]).

  The [=element interface=] for an element with name |name| in the [=HTML namespace=] is determined
  as follows:

  1. If |name| is <{bgsound}>, <{blink}>, <{isindex}>, <{multicol}>, <{nextid}>, or <{spacer}>, then
      return {{HTMLUnknownElement}}.
  2. If |name| is <{acronym}>, <{basefont}>, <{big}>, <{center}>, <{nobr}>, <{noembed}>,
      <{noframes}>, <{plaintext}>, <{rb}>, <{rtc}>, <{strike}>, or <{tt}>, then return
      {{HTMLElement}}.
  3. If |name| is <{listing}> or <{xmp}>, then return {{HTMLPreElement}}.
  4. Otherwise, if this specification defines an interface appropriate for the [=element type=]
      corresponding to the local name |name|, then return that interface.
  5. If [=other applicable specifications=] define an appropriate interface for |name|, then
      return the interface they define.
  6. If |name| is a [=valid custom element name=], then return {{HTMLElement}}.
  7. Return {{HTMLUnknownElement}}.

  <p class="note">The use of {{HTMLElement}} instead of {{HTMLUnknownElement}} in the case of
  [=valid custom element names=] is done to ensure that any potential future [=upgrades=] only cause
  a linear transition of the element's prototype chain, from {{HTMLElement}} to a subclass, instead
  of a lateral one, from {{HTMLUnknownElement}} to an unrelated subclass.</p>

<h4 id="element-definitions">Element definitions</h4>

  Each element in this specification has a definition that includes the following information:

  : <dfn>Categories</dfn>
  :: A list of [=categories=] to which the element belongs. These are used when defining the
      [=content models=] for each element.

  : <dfn>Contexts in which this element can be used</dfn>
  :: A <em>non-normative</em> description of where the element can be used. This information is
      redundant with the content models of elements that allow this one as a child, and is provided
      only as a convenience.

      <p class="note">For simplicity, only the most specific expectations are listed. For example,
      an element that is both [=flow content=] and [=phrasing content=] can be used anywhere that
      either [=flow content=] or [=phrasing content=] is expected, but since anywhere that
      [=flow content=] is expected, [=phrasing content=] is also expected (since all
      [=phrasing content=] is [=flow content=]), only "where [=phrasing content=] is expected" will
      be listed.</p>

  : <dfn>Content model</dfn>
  :: A normative description of what content must be included as children and descendants of the
      element.

  : <dfn>Tag omission in text/html</dfn>
  :: A <em>non-normative</em> description of whether, in the <code>[[#text-html|text/html]]</code>
      syntax, the [=start tag|start=] and [=end tag|end=] tags can be omitted. This information is
      redundant with the normative requirements given in the [=omitted|optional tags=] section, and
      is provided in the element definitions only as a convenience.

  : <dfn>Content attributes</dfn>
  :: A normative list of attributes that may be specified on the element (except where otherwise
      disallowed), along with non-normative descriptions of those attributes. (The content to the
      left of the dash is normative, the content to the right of the dash is not.)

  : <dfn>Allowed ARIA role attribute values</dfn>
  :: A non normative list of [[#aria-role-attribute|ARIA role attribute]] values that may be
      specified on the element (except where otherwise disallowed). Each value is linked to a non
      normative description.

  : <dfn>Allowed ARIA state and property attributes</dfn>
  :: Links to the [=Global aria-* attributes=] list and the
      [[#allowed-aria-roles-states-and-properties|allowed roles, states and properties]] table as
      described in the [[#state-and-property-attributes|state and property attributes]] section.

  : <dfn>DOM interface</dfn>
  :: A normative definition of a DOM interface that such elements must implement.

  This is then followed by a description of what the element [=represents=], along with any
  additional normative conformance criteria that may apply to authors
  and implementations. Examples are sometimes also included.

<h5 id="element-definitions-attributes">Attributes</h5>

  An attribute value is a string. Except where otherwise specified, attribute values on
  [=HTML elements=] may be any string value, including the empty string, and there is no
  restriction on what text can be specified in such attribute values.

<h4 id="content-models">Content models</h4>

  Each element defined in this specification has a content model: a description of the element's
  expected <a lt="element content">contents</a>. An [=HTML element=] must have contents that match the requirements
  described in the element's content model. The <dfn lt="element contents">contents of an element</dfn> are its children
  in the DOM.

  <p class="note">When a <{template}> element is being parsed, its children are assigned to the
  [=template contents=] (a separate {{DocumentFragment}} assigned to the element when the element is
  created), rather than its children.</p>

  The [=space characters=] are always allowed between elements. User agents represent these
  characters between elements in the source markup as {{Text}} nodes in the DOM. Empty {{Text}}
  nodes and {{Text}} nodes consisting of just sequences of those characters are considered
  <dfn>inter-element white space</dfn>.

  [=Inter-element white space=], comment nodes, and processing instruction nodes must be ignored when
  establishing whether an element's contents match the element's content model or not, and must
  be ignored when following algorithms that define document and element semantics.

  <p class="note">Thus, an element |A| is said to be <i>preceded or followed</i> by a second element
  |B| if |A| and |B| have the same parent node and there are no other element nodes or {{Text}}
  nodes (other than [=inter-element white space=]) between them. Similarly, a node is the
  <i>only child</i> of an element if that element contains no other nodes other than
  [=inter-element white space=], comment nodes, and processing instruction nodes.</p>

  Authors must not use [=HTML elements=] anywhere except where they are explicitly allowed, as
  defined for each element, or as explicitly required by other specifications. For XML compound
  documents, these contexts could be inside elements from other namespaces, if those elements are
  defined as providing the relevant contexts.

  <div class="example">
    For example, the Atom specification defines a <a element for="atom"><code>content</code></a>
    element. When its <{atom/type}> attribute has the value <code>xhtml</code>, the Atom
    specification requires that it contain a single HTML <{div}> element. Thus, a <{div}> element is
    allowed in that context, even though this is not explicitly normatively stated by this
    specification. [[RFC4287]]
  </div>

  In addition, [=HTML elements=] may be orphan nodes (i.e., without a parent node).

  <div class="example">
    For example, creating a <{td}> element and storing it in a global variable in a script is
    conforming, even though <{td}> elements are otherwise only supposed to be used inside <{tr}>
    elements.

    <pre highlight="javascript">
      var data = {
        name: "Banana",
        cell: document.createElement('td'),
      };
    </pre>
  </div>

<h5 id="the-nothing-content-model">The "nothing" content model</h5>

  When an element's content model is <dfn>nothing</dfn>, the element must contain no {{Text}} nodes
  (other than [=inter-element white space=]) and no element nodes.

  <p class="note">Most HTML elements whose content model is "nothing" are also, for convenience,
  [=void elements=] (elements that have no [=end tag=] in the [[#syntax|HTML syntax]]). However,
  these are entirely separate concepts.</p>

<h5 id="kinds-of-content">Kinds of content</h5>

  Each element in HTML falls into zero or more
  <dfn lt="content categories|content category">categories</dfn> that group elements with similar
  characteristics together. The following broad categories are used in this specification:

  <ul class="brief">
    * [[#metadata-content|Metadata content]]
    * [[#flow-content|Flow content]]
    * [[#sectioning-content|Sectioning content]]
    * [[#heading-content|Heading content]]
    * [[#phrasing-content|Phrasing content]]
    * [[#embedded-content|Embedded content]]
    * [[#interactive-content|Interactive content]]
  </ul>

  <p class="note">Some elements also fall into other categories, which are defined in other parts of
  this specification.</p>

  These categories are related as follows:

  <p><object width="1000" height="288" data="images/content-venn.svg"><img src="images/content-venn.png" alt="" width="512" height="288" /></object></p>

  Sectioning content, heading content, phrasing content, embedded content, and interactive content
  are all types of flow content. Metadata is sometimes flow content. Metadata and interactive
  content are sometimes phrasing content. Embedded content is also a type of phrasing content, and
  sometimes is interactive content.

  Other categories are also used for specific purposes, e.g., form controls are specified using a
  number of categories to define common requirements. Some elements have unique requirements and do
  not fit into any particular category.

<h6 id="metadata-content">Metadata content</h6>

  <dfn id="metadata-content-2">Metadata content</dfn> is content that sets up the presentation or
  behavior of the rest of the content, or that sets up the relationship of the document with other
  documents, or that conveys other "out of band" information.

  <ul class="brief category-list">
    <li><{base}>
    <li><{link}>
    <li><{meta}>
    <li><{noscript}>
    <li><{script}>
    <li><{style}>
    <li><{template}>
    <li><{title}>
  </ul>

  Elements from other namespaces whose semantics are primarily metadata-related (e.g., RDF) are also
  [=metadata content=].

  <div class="example">
    Thus, in the XML serialization, one can use RDF, like this:

    <pre highlight="html">
      &lt;html xmlns="http://www.w3.org/1999/xhtml" xmlns:r="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
        &lt;head>
          &lt;title>Hedral's Home Page&lt;/title>
          &lt;r:RDF>
            &lt;Person xmlns="http://www.w3.org/2000/10/swap/pim/contact#"
                       r:about="https://hedral.example.com/#">
              &lt;fullName>Cat Hedral&lt;/fullName>
              &lt;mailbox r:resource="mailto:hedral@damowmow.com"/>
              &lt;personalTitle>Sir&lt;/personalTitle>
            &lt;/Person>
          &lt;/r:RDF>
        &lt;/head>
        &lt;body>
          &lt;h1>My home page&lt;/h1>
          &lt;p>I like playing with string, I guess. Sister says squirrels are fun
          too so sometimes I follow her to play with them.&lt;/p>
        &lt;/body>
      &lt;/html>
    </pre>

    This isn't possible in the HTML serialization, however.
  </div>

<h6 id="flow-content">Flow content</h6>

  Most elements that are used in the body of documents and applications are categorized as
  <dfn id="flow-content-2" lt="flow content|flow">flow content</dfn>.

  <ul class="brief category-list">
    <li><{a}>
    <li><{abbr}>
    <li><{address}>
    <li><{area}> (if it is a descendant of a <{map}> element)
    <li><{article}>
    <li><{aside}>
    <li><{audio}>
    <li><{b}>
    <li><{bdi}>
    <li><{bdo}>
    <li><{blockquote}>
    <li><{br}>
    <li><{button}>
    <li><{canvas}>
    <li><{cite}>
    <li><{code}>
    <li><{data}>
    <li><{datalist}>
    <li><{del}>
    <li><{details}>
    <li><{dfn}>
    <li><{dialog}>
    <li><{div}>
    <li><{dl}>
    <li><{em}>
    <li><{embed}>
    <li><{fieldset}>
    <li><{figure}>
    <li><{footer}>
    <li><{form}>
    <li><{h1}>
    <li><{h2}>
    <li><{h3}>
    <li><{h4}>
    <li><{h5}>
    <li><{h6}>
    <li><{header}>
    <li><{hr}>
    <li><{i}>
    <li><{iframe}>
    <li><{img}>
    <li><{input}>
    <li><{ins}>
    <li><{kbd}>
    <li><{label}>
    <li><{link}> (if it is [=allowed in the body=])
    <li><{main}>
    <li><{map}>
    <li><{mark}>
    <li>MathML <{math}>
    <li><{meter}>
    <li><{nav}>
    <li><{noscript}>
    <li><{object}>
    <li><{ol}>
    <li><{output}>
    <li><{p}>
    <li><{picture}>
    <li><{pre}>
    <li><{progress}>
    <li><{q}>
    <li><{ruby}>
    <li><{s}>
    <li><{samp}>
    <li><{script}>
    <li><{section}>
    <li><{select}>
    <li><{small}>
    <li><{span}>
    <li><{strong}>
    <li><{style}>
    <li><{sub}>
    <li><{sup}>
    <li>SVG <{svg}>
    <li><{table}>
    <li><{template}>
    <li><{textarea}>
    <li><{time}>
    <li><{u}>
    <li><{ul}>
    <li><{var}>
    <li><{video}>
    <li><{wbr}>
    <li>[=text=]
  </ul>

<h6 id="sectioning-content">Sectioning content</h6>

  <dfn id="sectioning-content-2" lt="sectioning content|sectioning">Sectioning content</dfn> is
  content that defines the scope of [=headings=] and [[#the-footer-element|footers]].

  <ul class="brief category-list">
    <li><{article}>
    <li><{aside}>
    <li><{nav}>
    <li><{section}>
  </ul>

  Each [=sectioning content=] element potentially has a heading and an [=outline=]. See the section
  on [[#headings-and-sections|headings and sections]] for further details.

  <p class="note">There are also certain elements that are [=sectioning roots=]. These are distinct
  from [=sectioning content=], but they can also have an [=outline=].</p>

<h6 id="heading-content">Heading content</h6>

  <dfn id="heading-content-2" lt="heading content|headings">Heading content</dfn> defines the header
  of a section (whether explicitly marked up using [=sectioning content=] elements, or implied by
  the heading content itself).

  <ul class="brief category-list">
    <li><{h1}>
    <li><{h2}>
    <li><{h3}>
    <li><{h4}>
    <li><{h5}>
    <li><{h6}>
  </ul>

<h6 id="phrasing-content">Phrasing content</h6>

  <dfn id="phrasing-content-2" lt="phrasing content|phrasing">Phrasing content</dfn> is the text of
  the document, as well as elements that mark up that text at the intra-paragraph level. Runs of
  [=phrasing content=] form [=paragraphs=].

  <ul class="brief category-list">
    <li><{a}>
    <li><{abbr}>
    <li><{area}> (if it is a descendant of a <{map}> element)
    <li><{audio}>
    <li><{b}>
    <li><{bdi}>
    <li><{bdo}>
    <li><{br}>
    <li><{button}>
    <li><{canvas}>
    <li><{cite}>
    <li><{code}>
    <li><{data}>
    <li><{datalist}>
    <li><{del}>
    <li><{dfn}>
    <li><{em}>
    <li><{embed}>
    <li><{i}>
    <li><{iframe}>
    <li><{img}>
    <li><{input}>
    <li><{ins}>
    <li><{kbd}>
    <li><{label}>
    <li><{link}> (if it is [=allowed in the body=])
    <li><{map}>
    <li><{mark}>
    <li>MathML <{math}>
    <li><{meter}>
    <li><{noscript}>
    <li><{object}>
    <li><{output}>
    <li><{picture}>
    <li><{progress}>
    <li><{q}>
    <li><{ruby}>
    <li><{s}>
    <li><{samp}>
    <li><{script}>
    <li><{select}>
    <li><{small}>
    <li><{span}>
    <li><{strong}>
    <li><{sub}>
    <li><{sup}>
    <li>SVG <{svg}>
    <li><{template}>
    <li><{textarea}>
    <li><{time}>
    <li><{u}>
    <li><{var}>
    <li><{video}>
    <li><{wbr}>
    <li>[=text=]
  </ul>

  <p class="note">Most elements that are categorized as phrasing content can only contain elements
  that are themselves categorized as phrasing content, not any flow content.</p>

  <dfn id="text-content" lt="text|text content">Text</dfn>, in the context of content models, means
  either nothing, or {{Text}} nodes. [=Text=] is sometimes used as a content model on its own, but
  is also [=phrasing content=], and can be [=inter-element white space=] (if the {{Text}} nodes are
  empty or contain just [=space characters=]).

  {{Text}} nodes and attribute values must consist of [=Unicode characters=], must not contain
  U+0000 characters, must not contain permanently undefined Unicode characters (noncharacters), and
  must not contain [=control characters=] other than [=space characters=]. This specification
  includes extra constraints on the exact value of {{Text}} nodes and attribute values depending on
  their precise context.

  For elements in HTML, the constraints of the [=Text=] [=content model=] also depends on the
  [=kind of element=]. For instance, an "<code>&lt;</code>" inside a <{textarea}> element does not
  need to be escaped in HTML because <{textarea}> is an [=escapable raw text=] element. (This does
  not apply to XHTML. In XHTML, the [=kind of element=] doesn't affect the constraints of the
  [=Text=] [=content model=].)

<h6 id="embedded-content">Embedded content</h6>

  <dfn id="embedded-content-2" lt="embedded content|embedded">Embedded content</dfn> is content that
  imports another resource into the document, or content from another vocabulary that is
  [=document/inserted into the document=].

  <ul class="brief category-list">
    <li><{audio}>
    <li><{canvas}>
    <li><{embed}>
    <li><{iframe}>
    <li><{img}>
    <li>MathML <{math}>
    <li><{object}>
    <li><{picture}>
    <li>SVG <{svg}>
    <li><{video}>
  </ul>

  Elements that are from namespaces other than the [=HTML namespace=] and that convey content but
  not metadata, are [=embedded content=] for the purposes of the content models defined in this
  specification. (For example, MathML, or SVG.)

  Some embedded content elements can have <dfn>fallback content</dfn>: content that is to be used
  when the external resource cannot be used (e.g., because it is of an unsupported format). The
  element definitions state what the fallback is, if any.

<h6 id="interactive-content">Interactive content</h6>

  <dfn id="interactive-content-2" lt="interactive content|interactive">Interactive content</dfn> is
  content that is specifically intended for user interaction.

  <ul class="brief category-list">
    <li><{a}> (if the <{a/href}> attribute is present)
    <li><{audio}> (if the <{audio/controls}> attribute is present)
    <li><{button}>
    <li><{details}>
    <li><{embed}>
    <li><{iframe}>
    <li><{img}> (if the <{img/usemap}> attribute is present)
    <li><{input}> (if the <{input/type}> attribute is <em>not</em> in the <{input/Hidden}> state)
    <li><{label}>
    <li><{select}>
    <li><{textarea}>
    <li><{video}> (if the <{video/controls}> attribute is present)
  </ul>

  The <{global/tabindex}> attribute can also make any element into [=interactive content=].

<h6 id="palpable-content">Palpable content</h6>

  As a general rule, elements whose content model allows any [=flow content=] or
  [=phrasing content=] should have at least one node in its <a lt="element content">contents</a> that is
  <dfn id="palpable-content-2">palpable content</dfn> and that does not have the <{global/hidden}>
  attribute specified.

  <p class="note">[=Palpable content=] makes an element non-empty by providing either some
  descendant non-empty [=text=], or else something users can hear (<{audio}> elements) or view
  (<{video}> or <{img}> or <{canvas}> elements) or otherwise interact with (for example, interactive
  form controls).</p>

  This requirement is not a hard requirement, however, as there are many cases where an element can
  be empty legitimately, for example when it is used as a placeholder which will later be filled in
  by a script, or when the element is part of a template and would on most pages be filled in but on
  some pages is not relevant.

  Conformance checkers are encouraged to provide a mechanism for authors to find elements that fail
  to fulfill this requirement, as an authoring aid.

  The following elements are palpable content:

  <ul class="brief category-list">
    <li><{a}>
    <li><{abbr}>
    <li><{address}>
    <li><{article}>
    <li><{aside}>
    <li><{audio}> (if the <{audio/controls}> attribute is present)
    <li><{b}>
    <li><{bdi}>
    <li><{bdo}>
    <li><{blockquote}>
    <li><{button}>
    <li><{canvas}>
    <li><{cite}>
    <li><{code}>
    <li><{data}>
    <li><{details}>
    <li><{dfn}>
    <li><{div}>
    <li><{dl}> (if the element's children include at least one name-value group)
    <li><{em}>
    <li><{embed}>
    <li><{fieldset}>
    <li><{figure}>
    <li><{footer}>
    <li><{form}>
    <li><{h1}>
    <li><{h2}>
    <li><{h3}>
    <li><{h4}>
    <li><{h5}>
    <li><{h6}>
    <li><{header}>
    <li><{i}>
    <li><{iframe}>
    <li><{img}>
    <li><{input}> (if the <{input/type}> attribute is <em>not</em> in the <{input/Hidden}> state)
    <li><{ins}>
    <li><{kbd}>
    <li><{label}>
    <li><{main}>
    <li><{map}>
    <li><{mark}>
    <li>MathML <{math}>
    <li><{meter}>
    <li><{nav}>
    <li><{object}>
    <li><{ol}> (if the element's children include at least one <{li}> element)
    <li><{output}>
    <li><{p}>
    <li><{pre}>
    <li><{progress}>
    <li><{q}>
    <li><{ruby}>
    <li><{s}>
    <li><{samp}>
    <li><{section}>
    <li><{select}>
    <li><{small}>
    <li><{span}>
    <li><{strong}>
    <li><{sub}>
    <li><{sup}>
    <li>SVG <{svg}>
    <li><{table}>
    <li><{textarea}>
    <li><{time}>
    <li><{u}>
    <li><{ul}> (if the element's children include at least one <{li}> element)
    <li><{var}>
    <li><{video}>
    <li>[=text=] that is not [=inter-element white space=]
  </ul>

<h6 id="script-supporting-elements">Script-supporting elements</h6>

  <dfn id="script-supporting-elements-2">Script-supporting elements</dfn> are those that do not
  [=represent=] anything themselves (i.e., they are not rendered), but are used to support scripts,
  e.g., to provide functionality for the user.

  The following elements are script-supporting elements:

  <ul class="brief category-list">
    <li><{script}>
    <li><{template}>
  </ul>

<h5 id="transparent-content-models">Transparent content models</h5>

  Some elements are described as <dfn>transparent</dfn>; they have "transparent" in the description
  of their content model. The content model of a [=transparent=] element is derived from the
  content model of its parent element: the elements required in the part of the content model that
  is "transparent" are the same elements as required in the part of the content model of the parent
  of the transparent element in which the transparent element finds itself.

  <div class="example">
    For instance, an <{ins}> element inside a <{ruby}> element cannot contain an <{rt}> element,
    because the part of the <{ruby}> element's content model that allows <{ins}> elements is the
    part that allows [=phrasing content=], and the <{rt}> element is not [=phrasing content=].
  </div>

  <p class="note">In some cases, where transparent elements are nested in each other, the process
  has to be applied iteratively.</p>

  <div class="example">
    Consider the following markup fragment:

    <pre highlight="html">&lt;p>&lt;object>&lt;param>&lt;ins>&lt;map>&lt;a href="/">Apples&lt;/a>&lt;/map>&lt;/ins>&lt;/object>&lt;/p></pre>

    To check whether "Apples" is allowed inside the <{a}> element, the content models are examined.
    The <{a}> element's content model is transparent, as is the <{map}> element's, as is the <{ins}>
    element's, as is the part of the <{object}> element's in which the <{ins}> element is found. The
    <{object}> element is found in the <{p}> element, whose content model is [=phrasing content=].
    Thus, "Apples" is allowed, as text is phrasing content.
  </div>

  When a transparent element has no parent, then the part of its content model that is "transparent"
  must instead be treated as accepting any [=flow content=].

<h5 id="paragraphs">Paragraphs</h5>

  <p class="note">The term [=paragraph=] as defined in this section is used for more than just the
  definition of the <{p}> element. The [=paragraph=] concept defined here is used to describe how to
  interpret documents. The <{p}> element is merely one of several ways of marking up a
  [=paragraph=].</p>

  A <dfn lt="paragraph|paragraphs|implied paragraph|paragraphing|implied|implied paragraphs">paragraph</dfn>
  is typically a run of [=phrasing content=] that forms a block of text with one or more sentences
  that discuss a particular topic, as in typography, but can also be used for more general thematic
  grouping. For instance, an address is also a paragraph, as is a a byline, or a
  stanza in a poem.

  <div class="example">
    In the following example, there are two paragraphs in a section. There is also a heading, which
    contains phrasing content that is not a paragraph. Note how the comments and
    [=inter-element white space=] do not form paragraphs.

    <pre highlight="html">
      &lt;section>
        &lt;h2>Example of paragraphs&lt;/h2>
        This is the &lt;em>first&lt;/em> paragraph in this example.
        &lt;p>This is the second.&lt;/p>
        &lt;!-- This is not a paragraph. -->
      &lt;/section>
    </pre>
  </div>

  Paragraphs in [=flow content=] are defined relative to what the document looks like without the
  <{a}>, <{ins}>, <{del}>, and <{map}> elements complicating matters, since those elements, with
  their hybrid content models, can straddle paragraph boundaries, as shown in the first two examples
  below.

  <p class="note">Generally, having elements straddle paragraph boundaries is best avoided.
  Maintaining such markup can be difficult.</p>

  <div class="example">
    The following example takes the markup from the earlier example and puts <{ins}> and <{del}>
    elements around some of the markup to show that the text was changed (though in this case, the
    changes admittedly don't make much sense). Notice how this example has exactly the same
    paragraphs as the previous one, despite the <{ins}> and <{del}> elements &mdash; the <{ins}>
    element straddles the heading and the first paragraph, and the <{del}> element straddles the
    boundary between the two paragraphs.

    <pre highlight="html">
      &lt;section>
        &lt;ins>&lt;h1>Example of paragraphs&lt;/h1>
        This is the &lt;em>first&lt;/em> paragraph in&lt;/ins> this example&lt;del>.
        &lt;p>This is the second.&lt;/p>&lt;/del>
        &lt;!-- This is not a paragraph. -->
      &lt;/section>
    </pre>
  </div>

  Let |view| be a view of the DOM that replaces all <{a}>, <{ins}>, <{del}>, and <{map}> elements in
  the document with their <a lt="element content">contents</a>. Then, in |view|, for each run of sibling
  [=phrasing content=] nodes uninterrupted by other types of content, in an element that accepts
  content other than [=phrasing content=] as well as [=phrasing content=], let |first| be the first
  node of the run, and let |last| be the last node of the run. For each such run that consists of at
  least one node that is neither [=embedded content=] nor [=inter-element white space=], a paragraph
  exists in the original DOM from immediately before |first| to immediately after |last|.
  (Paragraphs can thus span across <{a}>, <{ins}>, <{del}>, and <{map}> elements.)

  Conformance checkers may warn authors of cases where they have paragraphs that overlap each other
  (this can happen with <{object}>, <{video}>, <{audio}>, and <{canvas}> elements, and indirectly
  through elements in other namespaces that allow HTML to be further embedded therein, like SVG
  <{svg}> or MathML <{math}>).

  A [=paragraph=] is also formed explicitly by <{p}> elements.

  <p class="note">The <{p}> element can be used to wrap individual paragraphs when there would
  otherwise not be any content other than phrasing content to separate the paragraphs from each
  other.</p>

  <div class="example">
    In the following example, the link spans half of the first paragraph, all of the heading
    separating the two paragraphs, and half of the second paragraph. It straddles the paragraphs and
    the heading.

    <pre highlight="html">
      &lt;header>
        Welcome!
        &lt;a href="about.html">
          This is home of...
          &lt;h1>The Falcons!&lt;/h1>
          The Lockheed Martin multirole jet fighter aircraft!
        &lt;/a>
        This page discusses the F-16 Fighting Falcon's innermost secrets.
      &lt;/header>
    </pre>

    Here is another way of marking this up, this time showing the paragraphs explicitly, and
    splitting the one link element into three:

    <pre highlight="html">
      &lt;header>
        &lt;p>Welcome! &lt;a href="about.html">This is home of...&lt;/a>&lt;/p>
        &lt;h1>&lt;a href="about.html">The Falcons!&lt;/a>&lt;/h1>
        &lt;p>&lt;a href="about.html">The Lockheed Martin multirole jet
        fighter aircraft!&lt;/a> This page discusses the F-16 Fighting
        Falcon's innermost secrets.&lt;/p>
      &lt;/header>
    </pre>
  </div>

  <div class="example">
    It is possible for paragraphs to overlap when using certain elements that define fallback
    content. For example, in the following section:

    <pre highlight="html">
      &lt;section>
        &lt;h2>My Cats&lt;/h2>
        You can play with my cat simulator.
        &lt;object data="cats.sim">
          To see the cat simulator, use one of the following links:
          &lt;ul>
            &lt;li>&lt;a href="cats.sim">Download simulator file&lt;/a>
            &lt;li>&lt;a href="https://sims.example.com/watch?v=LYds5xY4INU">Use online simulator&lt;/a>
          &lt;/ul>
          Alternatively, upgrade to the Mellblom Browser.
        &lt;/object>
        I'm quite proud of it.
      &lt;/section>
    </pre>

    There are five paragraphs:

    <ol class="brief">
        1. The paragraph that says "You can play with my cat simulator. <i>object</i> I'm quite
             proud of it.", where <i>object</i> is the <{object}> element.
        2. The paragraph that says "To see the cat simulator, use one of the following links:".
        3. The paragraph that says "Download simulator file".
        4. The paragraph that says "Use online simulator".
        5. The paragraph that says "Alternatively, upgrade to the Mellblom Browser.".
    </ol>

    The first paragraph is overlapped by the other four. A user agent that supports the "cats.sim"
    resource will only show the first one, but a user agent that shows the fallback will confusingly
    show the first sentence of the first paragraph as if it was in the same paragraph as the second
    one, and will show the last paragraph as if it was at the start of the second sentence of the
    first paragraph.

    To avoid this confusion, explicit <{p}> elements can be used. For example:

    <pre highlight="html">
      &lt;section>
        &lt;h2>My Cats&lt;/h2>
        &lt;p>You can play with my cat simulator.&lt;/p>
        &lt;object data="cats.sim">
          &lt;p>To see the cat simulator, use one of the following links:&lt;/p>
          &lt;ul>
            &lt;li>&lt;a href="cats.sim">Download simulator file&lt;/a>
            &lt;li>&lt;a href="https://sims.example.com/watch?v=LYds5xY4INU">Use online simulator&lt;/a>
          &lt;/ul>
          &lt;p>Alternatively, upgrade to the Mellblom Browser.&lt;/p>
        &lt;/object>
        &lt;p>I'm quite proud of it.&lt;/p>
      &lt;/section>
    </pre>
  </div>

<h4 id="global-attributes"><dfn id="global-attributes-2" lt="global attributes|globals">Global attributes</dfn></h4>

  The following attributes are common to and may be specified on all [=HTML elements=] (even those
  not defined in this specification):

  <ul class="brief">
    * <{global/accesskey}>
    * <{global/class}>
    * <{global/contenteditable}>
    * <{global/dir}>
    * <{global/draggable}>
    * <{global/hidden}>
    * <{global/id}>
    * <{global/lang}>
    * <{global/nonce}>
    * <{global/spellcheck}>
    * <{global/style}>
    * <{global/tabindex}>
    * <{global/title}>
    * <{global/translate}>
  </ul>

  These attributes are only defined by this specification as attributes for [=HTML elements=]. When
  this specification refers to elements having these attributes, elements from namespaces that are
  not defined as having these attributes must not be considered as being elements with these
  attributes.

  <div class="example">
    For example, in the following XML fragment, the "<code>bogus</code>" element does not have a
    <{global/dir}> attribute as defined in this specification, despite having an attribute with the
    literal name "<{global/dir}>". Thus, [=the directionality=] of the inner-most <{span}> element
    is '<a attr-value for="global/dir"><code>rtl</code></a>', inherited from the <{div}> element
    indirectly through the "<code>bogus</code>" element.

    <pre highlight="html" class="bad">
      &lt;div xmlns="http://www.w3.org/1999/xhtml" dir="rtl">
        &lt;bogus xmlns="https://example.net/ns" dir="ltr">
          &lt;span xmlns="http://www.w3.org/1999/xhtml">
          &lt;/span>
        &lt;/bogus>
      &lt;/div>
    </pre>
  </div>

  <hr />

  The DOM specification defines additional user agent requirements for the
  <dfn element-attr for="global"><code>class</code></dfn>,
  <dfn element-attr for="global"><code>id</code></dfn>, and
  <dfn element-attr for="global"><code>slot</code></dfn> attributes for any element in any
  namespace. [[DOM]]

  The <{global/class}>, <{global/id}>, and <{global/slot}> attributes may be specified on all
  [=HTML elements=].

  When specified on [=HTML elements=], the <{global/class}> attribute must have a value that is a
  [=set of space-separated tokens=] representing the various classes that the element belongs to.

  <div class="note">
    Assigning classes to an element affects class matching in selectors in CSS, the
    {{Document/getElementsByClassName()}} method in the DOM, and other such features.

    There are no additional restrictions on the tokens authors can use in the <{global/class}>
    attribute, but authors are encouraged to use values that describe the nature of the content,
    rather than values that describe the desired presentation of the content.
  </div>

  When specified on [=HTML elements=], the <{global/id}> attribute value must be unique amongst all
  the [=IDs=] in the element's [=tree=] and must contain at least one character. The value must not
  contain any [=space characters=].

  <div class="note">
    The <{global/id}> attribute specifies its element's [=id|unique identifier (ID)=].

    There are no other restrictions on what form an ID can take; in particular, IDs can consist of
    just digits, start with a digit, start with an underscore, consist of just punctuation, etc.

    An element's [=unique identifier=] can be used for a variety of purposes, most notably as a way
    to link to specific parts of a document using <a for="url">fragment</a>, as a way to target an
    element when scripting, and as a way to style a specific element from CSS.
  </div>

  Identifiers are opaque strings. Particular meanings should not be derived from the value of the
  <{global/id}> attribute.

  There are no conformance requirements for the <{global/slot}> attribute specific to
  [=HTML elements=].

  <hr />

  To enable assistive technology products to expose a more fine-grained interface than is otherwise
  possible with HTML elements and attributes, a set of annotations for assistive technology products
  can be specified (the ARIA <{aria/role}> and [=global aria-* attributes|aria-*=] attributes).
  [[!wai-aria-1.1]]

  <hr />

  The following [=event handler content attributes=] may be specified on any [=HTML element=]:

  <ul class="brief">
    * {{GlobalEventHandlers/onabort}}
    * {{GlobalEventHandlers/onauxclick}}
    * {{GlobalEventHandlers/onblur}}*
    * {{GlobalEventHandlers/oncancel}}
    * {{GlobalEventHandlers/oncanplay}}
    * {{GlobalEventHandlers/oncanplaythrough}}
    * {{GlobalEventHandlers/onchange}}
    * {{GlobalEventHandlers/onclick}}
    * {{GlobalEventHandlers/onclose}}
    * {{GlobalEventHandlers/oncuechange}}
    * {{GlobalEventHandlers/ondblclick}}
    * {{GlobalEventHandlers/ondrag}}
    * {{GlobalEventHandlers/ondragend}}
    * {{GlobalEventHandlers/ondragenter}}
    * {{GlobalEventHandlers/ondragexit}}
    * {{GlobalEventHandlers/ondragleave}}
    * {{GlobalEventHandlers/ondragover}}
    * {{GlobalEventHandlers/ondragstart}}
    * {{GlobalEventHandlers/ondrop}}
    * {{GlobalEventHandlers/ondurationchange}}
    * {{GlobalEventHandlers/onemptied}}
    * {{GlobalEventHandlers/onended}}
    * {{GlobalEventHandlers/onerror}}*
    * {{GlobalEventHandlers/onfocus}}*
    * {{GlobalEventHandlers/oninput}}
    * {{GlobalEventHandlers/oninvalid}}
    * {{GlobalEventHandlers/onkeydown}}
    * {{GlobalEventHandlers/onkeypress}}
    * {{GlobalEventHandlers/onkeyup}}
    * {{GlobalEventHandlers/onload}}*
    * {{GlobalEventHandlers/onloadeddata}}
    * {{GlobalEventHandlers/onloadedmetadata}}
    * {{GlobalEventHandlers/onloadend}}
    * {{GlobalEventHandlers/onloadstart}}
    * {{GlobalEventHandlers/onmousedown}}
    * {{GlobalEventHandlers/onmouseenter}}
    * {{GlobalEventHandlers/onmouseleave}}
    * {{GlobalEventHandlers/onmousemove}}
    * {{GlobalEventHandlers/onmouseout}}
    * {{GlobalEventHandlers/onmouseover}}
    * {{GlobalEventHandlers/onmouseup}}
    * {{GlobalEventHandlers/onwheel}}
    * {{GlobalEventHandlers/onpause}}
    * {{GlobalEventHandlers/onplay}}
    * {{GlobalEventHandlers/onplaying}}
    * {{GlobalEventHandlers/onprogress}}
    * {{GlobalEventHandlers/onratechange}}
    * {{GlobalEventHandlers/onreset}}
    * {{GlobalEventHandlers/onresize}}*
    * {{GlobalEventHandlers/onscroll}}*
    * {{GlobalEventHandlers/onseeked}}
    * {{GlobalEventHandlers/onseeking}}
    * {{GlobalEventHandlers/onselect}}
    * {{GlobalEventHandlers/onshow}}
    * {{GlobalEventHandlers/onstalled}}
    * {{GlobalEventHandlers/onsubmit}}
    * {{GlobalEventHandlers/onsuspend}}
    * {{GlobalEventHandlers/ontimeupdate}}
    * {{GlobalEventHandlers/ontoggle}}
    * {{GlobalEventHandlers/onvolumechange}}
    * {{GlobalEventHandlers/onwaiting}}
  </ul>

  <p class="note">The attributes marked with an asterisk have a different meaning when specified on
  <{body}> elements as those elements expose [=event handlers=] of the {{Window}} object with the
  same names.</p>

  <p class="note">While these attributes apply to all elements, they are not useful on all elements.
  For example, only [=media elements=] will ever receive a {{media/volumechange}} event fired by the
  user agent.</p>

  <hr />

  [=Custom data attributes=] (e.g., <code>data-foldername</code> or <code>data-msgid</code>) can be
  specified on any [=HTML element=], to store custom data specific to the page.

  <hr />

  In [=HTML documents=], elements in the [=HTML namespace=] may have an <{xmlns/xmlns}> attribute
  specified, if, and only if, it has the exact value "<code>http://www.w3.org/1999/xhtml</code>".
  This does not apply to [=XML documents=].

  <p class="note">In HTML, the <{xmlns/xmlns}> attribute has absolutely no effect. It is
  basically a talisman. It is allowed merely to make migration to and from XML mildly easier. When
  parsed by an [=HTML parser=], the attribute ends up in no namespace, not the
  "<code>http://www.w3.org/2000/xmlns/</code>" namespace like namespace declaration attributes in
  XML do.</p>

  <p class="note">In XML, an <{xmlns/xmlns}> attribute is part of the namespace declaration
  mechanism, and an element cannot actually have an <{xmlns/xmlns}> attribute in no namespace
  specified.</p>

  <hr />

  The XML specification also allows the use of the <{xml/space|xml:space}> attribute in the
  [=XML namespace=] on any element in an [=XML document=]. This attribute has no effect on
  [=HTML elements=], as the default behavior in HTML is to preserve white space. [[!XML]]

  <p class="note">There is no way to serialize the <{xml/space|xml:space}> attribute on
  [=HTML elements=] in the <code>[[#text-html|text/html]]</code> syntax.</p>

<h5 id="the-title-attribute">The <{global/title}> attribute</h5>

  The <dfn element-attr for="global,figure,div,img,textarea,meter"><code>title</code></dfn>
  attribute [=represents=] advisory information for the element, such as would be appropriate for a
  tooltip. On a link, this could be the title or a description of the target resource; on an image,
  it could be the image credit or a description of the image; on a paragraph, it could be a footnote
  or commentary on the text; on a citation, it could be further information about the source; on
  [=interactive content=], it could be a label for, or instructions for, use of the element; and so
  forth. The value is text.

  <!-- W3C START - DO NOT OVERWRITE-->

  <p class="warning">Relying on the <{global/title}> attribute is currently discouraged as many user
  agents do not expose the attribute in an accessible manner as required by this specification
  (e.g., requiring a pointing device such as a mouse to cause a tooltip to appear, which excludes
  keyboard-only users and touch-only users, such as anyone with a modern phone or tablet).</p>

  <!-- W3C END -->

  If this attribute is omitted from an element, then it implies that the <{global/title}> attribute
  of the nearest ancestor [=HTML element=] with a <{global/title}> attribute set is also relevant to
  this element. Setting the attribute overrides this, explicitly stating that the advisory
  information of any ancestors is not relevant to this element. Setting the attribute to the empty
  string indicates that the element has no advisory information.

  If the <{global/title}> attribute's value contains U+000A LINE FEED (LF) characters, the content
  is split into multiple lines. Each U+000A LINE FEED (LF) character represents a line break.

  <div class="example">
    Caution is advised with respect to the use of newlines in <{global/title}> attributes.

    For instance, the following snippet actually defines an abbreviation's expansion
    <em>with a line break in it</em>:

    <pre class="bad" highlight="html">
      &lt;p>My logs show that there was some interest in &lt;abbr title="Hypertext
      Transport Protocol">HTTP&lt;/abbr> today.&lt;/p>
    </pre>
  </div>

  Some elements, such as <{link}>, <{abbr}>, and <{input}>, define additional semantics for the
  <{global/title}> attribute beyond the semantics described above.

  The <dfn>advisory information</dfn> of an element is the value that the following algorithm
  returns, with the algorithm being aborted once a value is returned. When the algorithm returns
  the empty string, then there is no advisory information.

  1. If the element is a <{link}>, <{style}>, <{dfn}>, or <{abbr}>, then: if
      the element has a <{global/title}> attribute, return the value of that attribute, otherwise,
      return the empty string.
  2. Otherwise, if the element has a <{global/title}> attribute, then return its value.
  3. Otherwise, if the element has a parent element, then return the parent element's
      [=advisory information=].
  4. Otherwise, return the empty string.

  User agents should inform the user when elements have [=advisory information=], otherwise the
  information would not be discoverable.

  <hr />

  The <dfn attribute for="HTMLElement"><code>title</code></dfn> IDL attribute must [=reflect=] the
  <{global/title}> content attribute.

<h5 id="the-lang-and-xmllang-attributes">The <{global/lang}> and <{xml/lang|xml:lang}> attributes</h5>

  The <dfn element-attr for="global"><code>lang</code></dfn> attribute (in no namespace) specifies
  the primary language for the element's contents and for any of the element's attributes that
  contain text. Its value must be a valid BCP 47 language tag, or the empty string. Setting the
  attribute to the empty string indicates that the primary language is unknown. [[!BCP47]]

  The <dfn element-attr for="xml"><code>lang</code></dfn> attribute in the [=XML namespace=] is
  defined in XML. [[!XML]]

  If these attributes are omitted from an element, then the language of this element is the same as
  the language of its parent element, if any.

  The <{global/lang}> attribute in no namespace may be used on any [=HTML element=].

  The <{global/lang}> attribute in the [=XML namespace=] may be used on [=HTML elements=] in
  [=XML documents=], as well as elements in other namespaces if the relevant specifications allow it
  (in particular, MathML and SVG allow <{global/lang}> attributes in the [=XML namespace=] to be
  specified on their elements). If both the <{global/lang}> attribute in no namespace and the
  <{global/lang}> attribute in the [=XML namespace=] are specified on the same element, they must
  have exactly the same value when compared in an [=ASCII case-insensitive=] manner.

  Authors must not use the <{global/lang}> attribute in the [=XML namespace=] on [=HTML elements=]
  in [=HTML documents=]. To ease migration to and from XHTML, authors may specify an attribute in no
  namespace with no prefix and with the literal localname "<{xml/lang|xml:lang}>" on
  [=HTML elements=] in [=HTML documents=], but such attributes must only be specified if a
  <{global/lang}> attribute in no namespace is also specified, and both attributes must have the
  same value when compared in an [=ASCII case-insensitive=] manner.

  <p class="note">The attribute in no namespace with no prefix and with the literal localname
  "<{xml/lang|xml:lang}>" has no effect on language processing.</p>

  <!-- W3C START - DO NOT OVERWRITE-->

  <div class="warning" id="lang-warning">
    The language of [=HTML documents=] is indicated using a <{global/lang}> attribute (on the
    <{html}> element itself, to indicate the primary language of the document, and on individual
    elements, to indicate a change in language). It provides an explicit indication to user agents
    about the language of content in order to enable language specific behavior. For example,
    use of an appropriate language dictionary; selection of an appropriate font or glyphs for
    characters shared between different languages; or in the case of screen readers and similar
    assistive technologies with voice output, pronunciation of content using the correct voice / language library.

    Incorrect or absent <{global/lang}> attributes can produce unexpected results in other
    circumstances, as they are also used to determine quotation marks for <{q}> elements, styling
    such as hyphenation, case conversion, line-breaking, and spell-checking in some editors, etc.

    <strong>Setting the <{global/lang}> attribute to a language which does not match the language of
    the document or document parts will result in some users being unable to understand the
    content.</strong>
  </div>

  <!-- W3C END -->

  <hr />

  To determine the <dfn>language</dfn> of a node, user agents must look at the nearest ancestor
  element (including the element itself if the node is an element) that has a <{global/lang}>
  attribute in the [=XML namespace=] set or is an [=HTML element=] and has a <{global/lang}> in no
  namespace attribute set. That attribute specifies the language of the node (regardless of its
  value).

  If both the <{global/lang}> attribute in no namespace and the <{global/lang}> attribute in the
  [=XML namespace=] are set on an element, user agents must use the <{global/lang}> attribute in the
  [=XML namespace=], and the <{global/lang}> attribute in no namespace must be [=ignored=] for the
  purposes of determining the element's language.

  If node's [=inclusive ancestors=] do not have either attribute set, but there is a
  [=pragma-set default language=] set, then that is the language of the node. If there is no
  [=pragma-set default language=] set, then language information from a higher-level protocol (such
  as HTTP), if any, must be used as the final fallback language instead. In the absence of any such
  language information, and in cases where the higher-level protocol reports multiple languages, the
  language of the node is unknown, and the corresponding language tag is the empty string.

  <p class="example">For example, if a document is delivered over HTTP and the
  <a http-header><code>Content-Language</code></a> HTTP header is specified with a value
  "<code>en</code>", then for any element in the document that does not itself have a
  <{global/lang}> attribute nor any ancestor of that element, the fallback language for the element
  will be English. If the value of the <a http-header><code>Content-Language</code></a> header was
  "<code>de, fr, it</code>" then the language of the node is unknown.
  <a href="https://www.w3.org/International/questions/qa-http-and-lang">This article</a> provides
  some additional guidance on the use of HTTP headers, and <{meta}> elements for providing language
  information.</p>

  If the resulting value is not a recognized language tag, then it must be treated as an unknown
  language having the given language tag, distinct from all other languages. For the purposes of
  round-tripping or communicating with other services that expect language tags, user agents should
  pass unknown language tags through unmodified, and tagged as being BCP 47 language tags, so that
  subsequent services do not interpret the data as another type of language description. [[!BCP47]]

  <p class="example">Thus, for instance, an element with <code>lang="xyzzy"</code> would be matched
  by the selector <code>:lang(xyzzy)</code> (e.g., in CSS), but it would not be matched by
  <code>:lang(abcde)</code>, even though both are equally invalid. Similarly, if a Web browser and
  screen reader working in unison communicated about the language of the element, the browser would
  tell the screen reader that the language was "xyzzy", even if it knew it was invalid, just in case
  the screen reader actually supported a language with that tag after all. Even if the screen reader
  supported both BCP 47 and another syntax for encoding language names, and in that other syntax the
  string "xyzzy" was a way to denote the Belarusian language, it would be *incorrect* for the screen
  reader to then start treating text as Belarusian, because "xyzzy" is not how Belarusian is
  described in BCP 47 codes (BCP 47 uses the code "be" for Belarusian).</p>

  If the resulting value is the empty string, then it must be interpreted as meaning that the
  language of the node is explicitly unknown.

  <hr />

  User agents may use the element's language to determine proper processing or rendering (e.g., in
  the selection of appropriate fonts or pronunciations, for dictionary selection, or for the user
  interfaces of form controls such as date pickers).

  <hr />

  The <dfn attribute for="HTMLElement"><code>lang</code></dfn> IDL attribute must [=reflect=] the
  <{global/lang}> content attribute in no namespace.

<h5 id="the-translate-attribute">The <{global/translate}> attribute</h5>

  The <dfn element-attr for="global"><code>translate</code></dfn> attribute is an
  [=enumerated attribute=] that is used to specify whether an element's attribute values and the
  values of its {{Text}} node children are to be translated when the page is localized, or whether
  to leave them unchanged.

  The attribute's keywords are the empty string, <code>yes</code>, and <code>no</code>. The empty
  string and the <code>yes</code> keyword map to the <i>yes</i> state. The <code>no</code> keyword
  maps to the <i>no</i> state. In addition, there is a third state, the <i>inherit</i> state, which
  is the [=missing value default=] (and the [=invalid value default=]).

  Each element (even non-HTML elements) has a <dfn>translation mode</dfn>, which is in either the
  [=translate-enabled=] state or the [=no-translate=] state. If an [=HTML element=]'s
  <{global/translate}> attribute is in the <i>yes</i> state, then the element's [=translation mode=]
  is in the [=translate-enabled=] state; otherwise, if the element's <{global/translate}> attribute
  is in the <i>no</i> state, then the element's [=translation mode=] is in the [=no-translate=]
  state. Otherwise, either the element's <{global/translate}> attribute is in the <i>inherit</i>
  state, or the element is not an [=HTML element=] and thus does not have a <{global/translate}>
  attribute; in either case, the element's [=translation mode=] is in the same state as its parent
  element's, if any, or in the [=translate-enabled=] state, if the element is a
  [=document element=].

  When an element is in the <dfn>translate-enabled</dfn> state, the element's
  [=translatable attributes=] and the values of its {{Text}} node children are to be translated when
  the page is localized.

  When an element is in the <dfn>no-translate</dfn> state, the element's attribute values and the
  values of its {{Text}} node children are to be left as-is when the page is localized, e.g.,
  because the element contains a person's name or a name of a computer program.

  The following attributes are <dfn>translatable attributes</dfn>:

  <ul class="brief">
    * <{th/abbr}> on <{th}> elements
    * <code>alt</code> on <{area/alt|area}>, <{img/alt|img}>, and <{input/alt|input}> elements
    * <{meta/content}> on <{meta}> elements, if the <{meta/name}> attribute specifies a metadata
        name whose value is known to be translatable
    * <{links/download}> on <{a}> and <{area}> elements
    * <code>label</code> on <{optgroup/label|optgroup}>, <{option/label|option}>, and <{track/label|track}> elements
    * <{global/lang}> on [=HTML elements=]; must be "translated" to match the language used in the
        translation
    * <code>placeholder</code> on <{input/placeholder|input}> and <{textarea/placeholder|textarea}>
        elements
    * <{iframe/srcdoc}> on <{iframe}> elements; must be parsed and recursively processed
    * <{global/style}> on [=HTML elements=]; must be parsed and recursively processed (e.g., for the
        values of 'content' properties)
    * <{global/title}> on all [=HTML elements=]
    * <{input/value}> on <{input}> elements with a <{input/type}> attribute in the <{input/Button}>
        state or the <{input/Reset|Reset Button}> state
  </ul>

  Other specifications may define other attributes that are also [=translatable attributes=]. For
  example, ARIA would define the <{aria/aria-label}> attribute as translatable.

  <hr />

  The <dfn attribute for="HTMLElement"><code>translate</code></dfn> IDL attribute must, on getting,
  return true if the element's [=translation mode=] is [=translate-enabled=], and false otherwise.
  On setting, it must set the content attribute's value to "<code>yes</code>" if the new value is
  true, and set the content attribute's value to "<code>no</code>" otherwise.

  <div class="example">
    In this example, everything in the document is to be translated when the page is localized,
    except the sample keyboard input and sample program output:

    <pre highlight="html">
      &lt;!DOCTYPE HTML>
      &lt;html> &lt;!-- default on the document element is translate=yes -->
        &lt;head>
          &lt;title>The Bee Game&lt;/title> &lt;!-- implied translate=yes inherited from ancestors -->
        &lt;/head>
        &lt;body>
          &lt;p>The Bee Game is a text adventure game in English.&lt;/p>
          &lt;p>When the game launches, the first thing you should do is type
            &lt;kbd translate=no>eat honey&lt;/kbd>. The game will respond with:&lt;/p>
        &lt;pre>&lt;samp translate=no>Yum yum! That was some good honey!&lt;/samp>&lt;/pre>
        &lt;/body>
      &lt;/html>
    </pre>
  </div>

<h5 id="the-xmlbase-attribute-xml-only">The <{xml/base|xml:base}> attribute (XML only)</h5>

  The <dfn element-attr for="xml" lt="base"><code>xml:base</code></dfn> attribute is defined in XML
  Base. [[!XMLBASE]]

  The <{xml/base|xml:base}> attribute may be used on [=HTML elements=] of [=XML documents=]. Authors
  must not use the <{xml/base|xml:base}> attribute on [=HTML elements=] in [=HTML documents=].

<h5 id="the-dir-attribute">The <{global/dir}> attribute</h5>

  The <dfn element-attr for="global"><code>dir</code></dfn> attribute specifies the element's text
  directionality. The attribute is an [=enumerated attribute=] with the following keywords and
  states:

  : The <dfn attr-value for="global/dir"><code>ltr</code></dfn> keyword, which maps to the
      <dfn state for="dir">ltr</dfn> state
  :: Indicates that the contents of the element are explicitly directionally isolated left-to-right
      text.

  : The <dfn attr-value for="global/dir"><code>rtl</code></dfn> keyword, which maps to the
      <dfn state for="dir">rtl</dfn> state
  :: Indicates that the contents of the element are explicitly directionally isolated right-to-left
      text.

  : The <dfn attr-value for="global/dir"><code>auto</code></dfn> keyword, which maps to the
      <dfn state for="dir">auto</dfn> state
  :: Indicates that the contents of the element are explicitly directionally isolated text, but that
      the direction is to be determined programmatically using the contents of the element (as
      described below).

      <p class="note">The heuristic used by this state is very crude (it just looks at the first
      character with a strong directionality, in a manner analogous to the Paragraph Level
      determination in the bidirectional algorithm). Authors are urged to only use this value as a
      last resort when the direction of the text is truly unknown and no better server-side
      heuristic can be applied. [[!BIDI]]</p>

      <p class="note">For <{textarea}> and <{pre}> elements, the heuristic is applied on a
      per-paragraph level.</p>

  The attribute has no [=invalid value default=] and no [=missing value default=].

  <hr />

  <dfn lt="directionality|the directionality|the element's directionality">The directionality</dfn>
  of an element (any element, not just an [=HTML element=]) is either
  '<a attr-value for="global/dir"><code>ltr</code></a>' or
  '<a attr-value for="global/dir"><code>rtl</code></a>', and is determined as per the first
  appropriate set of steps from the following list:

  <dl class="switch">
    : If the element's <{global/dir}> attribute is in the <a state for="dir">ltr</a> state
    : If the element is a [=document element=] and the <{global/dir}> attribute is not in a defined
        state (i.e., it is not present or has an invalid value)
    : If the element is an <{input}> element whose <{input/type}> attribute is in the
        <{input/Telephone}> state, and the <{global/dir}> attribute is not in a defined state (i.e.,
        it is not present or has an invalid value)
    :: [=The directionality=] of the element is '<a state for="dir">ltr</a>'.

    : If the element's <{global/dir}> attribute is in the
        <a attr-value for="global/dir"><code>rtl</code></a> state
    :: [=The directionality=] of the element is '<a state for="dir">rtl</a>'.

    : If the element is an <{input}> element whose <{input/type}> attribute is in the
        <{input/Text}>, <{input/Search}>, <{input/Telephone}>, <{input/URL}>, or <{input/E-mail}>
        state, and the <{global/dir}> attribute is in the <a state for="dir">auto</a> state
    : If the element is a <{textarea}> element and the <{global/dir}> attribute is in the
        <a state for="dir">auto</a> state
    :: If the element's [=attribute value|value=] contains a character of bidirectional character
        type AL or R, and there is no character of bidirectional character type L anywhere before it
        in the element's [=attribute value|value=], then [=the directionality=] of the element is
        '<a state for="dir">rtl</a>'. [[!BIDI]]

        Otherwise, if the element's [=attribute value|value=] is not the empty string, or if the
        element is a [=document element=], [=the directionality=] of the element is
        '<a state for="dir">ltr</a>'.

        Otherwise, [=the directionality=] of the element is the same as the element's parent
        element's [=directionality=].

    : If the element's <{global/dir}> attribute is in the <a state for="dir">auto</a> state
    : If the element is a <{bdi}> element and the <{global/dir}> attribute is not in a defined state
        (i.e., it is not present or has an invalid value)
    :: Find the first character in [=tree order=] that matches the following criteria:

        * The character is from a {{Text}} node that is a descendant of the element whose
            [=directionality=] is being determined.
        * The character is of bidirectional character type L, AL, or R. [[!BIDI]]
        * The character is not in a {{Text}} node that has an ancestor element that is a descendant
            of the element whose [=directionality=] is being determined and that is either:

            <ul class="brief">
                * A <{bdi}> element.
                * A <{script}> element.
                * A <{style}> element.
                * A <{textarea}> element.
                * An element with a <{global/dir}> attribute in a defined state.
            </ul>

        If such a character is found and it is of bidirectional character type AL or R,
        [=the directionality=] of the element is '<a state for="dir">rtl</a>'.

        If such a character is found and it is of bidirectional character type L,
        [=the directionality=] of the element is '<a state for="dir">ltr</a>'.

        Otherwise, if the element is a [=document element=], [=the directionality=] of the
        element is '<a state for="dir">ltr</a>'.

        Otherwise, [=the directionality=] of the element the same as the element's parent element's
        [=directionality=].

    : If the element has a parent element and the <{global/dir}> attribute is not in a defined
        state (i.e., it is not present or has an invalid value)
    :: [=The directionality=] of the element is the same as the element's parent element's
        [=directionality=].
  </dl>

  <p class="note">Since the <{global/dir}> attribute is only defined for [=HTML elements=], it
  cannot be present on elements from other namespaces. Thus, elements from other namespaces always
  just inherit their [=directionality=] from their parent element, or, if they don't have one,
  default to '<a attr-value for="global/dir"><code>ltr</code></a>'.</p>

  <p class="note">This attribute
  <a href="#bidireq">has rendering requirements involving the bidirectional algorithm</a>.</p>

  <hr />

  The
  <dfn lt="directionality of the attribute|directionality of an attribute">directionality of an attribute</dfn>
  of an [=HTML element=], which is used when the text of that attribute is to be included in the
  rendering in some manner, is determined as per the first appropriate set of steps from the
  following list:

  <dl class="switch">
    : If the attribute is a [=directionality-capable attribute=] and the element's <{global/dir}>
        attribute is in the <a state for="dir">auto</a> state
    :: Find the first character (in logical order) of the attribute's value that is of bidirectional
        character type L, AL, or R. [[!BIDI]]</a>

        If such a character is found and it is of bidirectional character type AL or R, the
        [=directionality of the attribute=] is '<a attr-value for="global/dir"><code>rtl</code></a>'.

        Otherwise, the [=directionality of the attribute=] is
        '<a attr-value for="global/dir"><code>ltr</code></a>'.

    : Otherwise
    :: The [=directionality of the attribute=] is the same as [=the element's directionality=].
  </dl>

  The following attributes are <dfn>directionality-capable attributes</dfn>:

  <ul class="brief">
    * <{th/abbr}> on <{th}> elements
    * <code>alt</code> on <{area/alt|area}>, <{img/alt|img}>, and <{input/alt|input}> elements
    * <{meta/content}> on <{meta}> elements, if the <{meta/name}> attribute specifies a metadata
        name whose value is primarily intended to be human-readable rather than machine-readable
    * <code>label</code> on <{optgroup/label|optgroup}>, <{option/label|option}>, and <{track/label|track}> elements
    * <code>placeholder</code> on <{input/placeholder|input}> and <{textarea/placeholder|textarea}>
        elements
    * <{global/title}> on all [=HTML elements=]
  </ul>

  <hr />

  <dl class="domintro">
    : |document| . {{Document/dir}} [ = |value| ]
    :: Returns the <{html}> element's <{global/dir}> attribute's value, if any.

        Can be set, to either '<a attr-value for="global/dir"><code>ltr</code></a>',
        '<a attr-value for="global/dir"><code>rtl</code></a>', or
        '<a attr-value for="global/dir"><code>auto</code></a>' to replace the <{html}> element's
        <{global/dir}> attribute's value.

        If there is no <{html}> element, returns the empty string and ignores new values.
  </dl>

  The <dfn attribute for="HTMLElement"><code>dir</code></dfn> IDL attribute on an element must
  [=reflect=] the <{global/dir}> content attribute of that element, [=limited to only known values=].

  The <dfn attribute for="Document"><code>dir</code></dfn> IDL attribute on {{Document}} objects
  must [=reflect=] the <{global/dir}> content attribute of the <{html}> element, if any,
  [=limited to only known values=]. If there is no such element, then the attribute must return the
  empty string and do nothing on setting.

  <p class="note">Authors are strongly encouraged to use the <{global/dir}> attribute to indicate
  text direction rather than using CSS, since that way their documents will continue to render
  correctly even in the absence of CSS (e.g., as interpreted by search engines).</p>

  <div class="example">
    This markup fragment is of an IM conversation.

    <pre highlight="html">
      &lt;p dir=auto class="u1">&lt;b>&lt;bdi>Student&lt;/bdi>:&lt;/b> How do you write "What's your name?" in Arabic?&lt;/p>
      &lt;p dir=auto class="u2">&lt;b>&lt;bdi>Teacher&lt;/bdi>:&lt;/b> &#x645;&#x627; &#x627;&#x633;&#x645;&#x643;&#x61f;&lt;/p>
      &lt;p dir=auto class="u1">&lt;b>&lt;bdi>Student&lt;/bdi>:&lt;/b> Thanks.&lt;/p>
      &lt;p dir=auto class="u2">&lt;b>&lt;bdi>Teacher&lt;/bdi>:&lt;/b> That's written "&#x634;&#x643;&#x631;&#x64b;&#x627;".&lt;/p>
      &lt;p dir=auto class="u2">&lt;b>&lt;bdi>Teacher&lt;/bdi>:&lt;/b> Do you know how to write "Please"?&lt;/p>
      &lt;p dir=auto class="u1">&lt;b>&lt;bdi>Student&lt;/bdi>:&lt;/b> "&#x645;&#x646; &#x641;&#x636;&#x644;&#x643;", right?&lt;/p>
    </pre>

    Given a suitable style sheet and the default alignment styles for the <{p}> element, namely to
    align the text to the <i>start edge</i> of the paragraph, the resulting rendering could be as
    follows:

    <img src="images/im.png" alt="Each paragraph rendered as a separate block, with the paragraphs left-aligned except the second paragraph and the last one, which would  be right aligned, with the usernames ('Student' and 'Teacher' in this example) flush right, with a colon to their left, and the text first to the left of that." width="366" height="157" />

    As noted earlier, the '<a attr-value for="global/dir"><code>auto</code></a>' value is not a
    panacea. The final paragraph in this example is misinterpreted as being right-to-left text,
    since it begins with an Arabic character, which causes the "right?" to be to the left of the
    Arabic text.
  </div>

<h5 id="the-style-attribute">The <dfn element-attr for="global"><code>style</code></dfn> attribute</h5>

  All [=HTML elements=] may have the <{global/style}> content attribute set. This is a
  [=style attribute=] as defined by the <cite>CSS Style Attributes</cite> specification.
  [[!CSS-STYLE-ATTR]]

  In user agents that support CSS, the attribute's value must be parsed when the attribute is added
  or has its value changed, according to the rules given for [=style attributes=].
  [[!CSS-STYLE-ATTR]]

  However, if the [=Should element's inline behavior be blocked by Content Security Policy?=]
  algorithm returns "<code>Blocked</code>" when executed upon the attribute's {{Element|element}}
  and "<code>style attribute</code>", and the attribute's value, then the style rules defined in the
  attribute's value must not be applied to the {{Element|element}}. [[!CSP3]]

  Documents that use <{global/style}> attributes on any of their elements must still be
  comprehensible and usable if those attributes were removed.

  <p class="note">In particular, using the <{global/style}> attribute to hide and show content, or
  to convey meaning that is otherwise not included in the document, is non-conforming. (To hide and
  show content, use the <{global/hidden}> attribute.)</p>

  <hr />

  <dl class="domintro">
    : |element| . {{ElementCSSInlineStyle/style}}
    :: Returns a {{CSSStyleDeclaration}} object for the element's <{global/style}> attribute.
  </dl>

  The {{ElementCSSInlineStyle/style}} IDL attribute is defined in the CSS Object Model (CSSOM)
  specification. [[!CSSOM]]

  <div class="example">
    In the following example, the words that refer to colors are marked up using the <{span}>
    element and the <{global/style}> attribute to make those words show up in the relevant colors in
    visual media.

    <pre highlight="html">
      &lt;p>My sweat suit is &lt;span style="color: green; background:
      transparent">green&lt;/span> and my eyes are &lt;span style="color: blue;
      background: transparent">blue&lt;/span>.&lt;/p>
    </pre>
  </div>

<h5 id="embedding-custom-non-visible-data-with-the-data-attributes"><dfn>Embedding custom non-visible data</dfn> with the <{global/data-*}> attributes</h5>

  A <dfn>custom data attribute</dfn> is an attribute in no namespace whose name starts with the
  string "<dfn element-attr for="global" lt="data-|data-*"><code>data-</code></dfn>", has at least
  one character after the hyphen, is [=XML-compatible=], and contains no
  [=uppercase ASCII letters=].

  <p class="note">All attribute names on [=HTML elements=] in [=HTML documents=] get
  ASCII-lowercased automatically, so the restriction on ASCII uppercase letters doesn't affect such
  documents.</p>

  [=Custom data attributes=] are intended to store custom data private to the page or application,
  for which there are no more appropriate attributes or elements.

  These attributes are not intended for use by software that is not known to the administrators of
  the site that uses the attributes. For generic extensions that are to be used by multiple
  independent tools, either this specification should be extended to provide the feature explicitly,
  or a technology like microdata should be used (with a standardized vocabulary).

  <div class="example">
    For instance, a site about music could annotate list items representing tracks in an album with
    custom data attributes containing the length of each track. This information could then be used
    by the site itself to allow the user to sort the list by track length, or to filter the list for
    tracks of certain lengths.

    <pre highlight="html">
      &lt;ol>
        &lt;li data-length="2m11s">Beyond The Sea&lt;/li>
        ...
      &lt;/ol>
    </pre>

    It would be inappropriate, however, for the user to use generic software not associated with
    that music site to search for tracks of a certain length by looking at this data.

    This is because these attributes are intended for use by the site's own scripts, and are not a
    generic extension mechanism for publicly-usable metadata.
  </div>

  <div class="example">
    Similarly, a page author could write markup that provides information for a translation tool
    that they are intending to use:

    <pre highlight="html">
      &lt;p>The third &lt;span data-mytrans-de="Anspruch">claim&lt;/span> covers the case of
      &lt;span translate="no">HTML&lt;/span> markup.&lt;/p>
    </pre>

    In this example, the "<code>data-mytrans-de</code>" attribute gives specific text for the
    MyTrans product to use when translating the phrase "claim" to German. However, the standard
    <{global/translate}> attribute is used to tell it that in all languages, "HTML" is to remain
    unchanged. When a standard attribute is available, there is no need for a
    [=custom data attribute=] to be used.
  </div>

  Every [=HTML element=] may have any number of [=custom data attributes=] specified, with any
  value.

  Authors should carefully design such extensions so that when the attributes are ignored and any
  associated CSS dropped, the page is still usable.

  User agents must not derive any implementation behavior from these attributes or values.
  Specifications intended for user agents must not define these attributes to have any meaningful
  values.

  JavaScript libraries may use the [=custom data attributes=], as they are considered to be part of
  the page on which they are used. Authors of libraries that are reused by many authors are
  encouraged to include their name in the attribute names, to reduce the risk of clashes. Where it
  makes sense, library authors are also encouraged to make the exact name used in the attribute
  names customizable, so that libraries whose authors unknowingly picked the same name can be used
  on the same page, and so that multiple versions of a particular library can be used on the same
  page even when those versions are not mutually compatible.

  <div class="example">
    For example, a library called "DoQuery" could use attribute names like
    <code>data-doquery-range</code>, and a library called "jJo" could use attributes names like
    <code>data-jjo-range</code>. The jJo library could also provide an API to set which prefix to
    use (e.g. <code>J.setDataPrefix("j2")</code>, making the attributes have names like
    <code>data-j2-range</code>).
  </div>

  <hr />

  <dl class="domintro">
    : |element| . {{HTMLElement/dataset}}
    :: Returns a {{DOMStringMap}} object for the element's <{global/data-*}> attributes.

        Hyphenated names are converted to dromedary-case (which is the same as camel-case except
        the initial letter is not uppercased). For example, <code>data-foo-bar=""</code> becomes
        <code>element.dataset.fooBar</code>.
  </dl>

  The <dfn attribute for="HTMLElement"><code>dataset</code></dfn> IDL attribute provides convenient
  accessors for all the <{global/data-*}> attributes on an element. On getting, the
  {{HTMLElement/dataset}} IDL attribute must return a {{DOMStringMap}} whose associated element is
  this element.

  The {{DOMStringMap}} interface is used for the {{HTMLElement/dataset}} attribute. Each
  {{DOMStringMap}} has an <dfn>associated element</dfn>.

  <pre class="idl" data-highlight="webidl">
    [OverrideBuiltins]
    interface DOMStringMap {
      getter DOMString (DOMString name);
      [CEReactions] setter void (DOMString name, DOMString value);
      [CEReactions] deleter void (DOMString name);
    };
  </pre>

  To
  <dfn for="DOMStringMap" lt="__getter__()|__getter__(name)">get a {{DOMStringMap}}'s name-value pairs</dfn>,
  run the following algorithm:

  1. Let |list| be an empty list of name-value pairs.
  2. For each content attribute on the {{DOMStringMap}}'s [=associated element=] whose first five
      characters are the string "<code>data-</code>" and whose remaining characters (if any) do not
      include any [=uppercase ASCII letters=], in the order that those attributes are listed in the
      element's [=element attribute|attribute list=], add a name-value pair to |list| whose name is
      the attribute's name with the first five characters removed and whose value is the attribute's
      value.
  3. For each name in |list|, for each U+002D HYPHEN-MINUS character (-) in the name that is
      followed by a [=lowercase ASCII letter=], remove the U+002D HYPHEN-MINUS character (-) and
      replace the character that followed it by the same character in [=ASCII uppercase=].
  4. Return |list|.

  The [=supported property names=] on a {{DOMStringMap}} object at any instant are the names of each
  pair returned from [=DOMStringMap/__getter__()|getting the DOMStringMap's name-value pairs=] at
  that instant, in the order returned.

  To [=determine the value of a named property=] |name| for a {{DOMStringMap}}, return the value
  component of the name-value pair whose name component is |name| in the list returned from
  [=DOMStringMap/__getter__()|getting the DOMStringMap's name-value pairs=].

  To
  <dfn for="DOMStringMap" lt="__setter__()|__setter__(name, value)">[=set the value of a new named property=] or [=set the value of an existing named property=] for a {{DOMStringMap}}</dfn>,
  given a property name |name| and a new value |value|, run the following steps:

  1. If |name| contains a U+002D HYPHEN-MINUS character (-) followed by a
      [=lowercase ASCII letter=], then throw a "{{SyntaxError}}" {{DOMException}} and abort these
      steps.
  2. For each [=uppercase ASCII letter=] in |name|, insert a U+002D HYPHEN-MINUS character (-)
      before the character and replace the character with the same character in [=ASCII lowercase=].
  3. Insert the string <code>data-</code> at the front of |name|.
  4. If |name| does not match the XML <code>[=xml/Name=]</code> production, throw an
      "{{InvalidCharacterError}}" {{DOMException}} and abort these steps.
  5. [=Set an attribute value=] for the {{DOMStringMap}}'s [=associated element=] using |name| and
      |value|.

  To
  <dfn for="DOMStringMap" lt="__deleter__()|__deleter__(name)">[=delete an existing named property=] |name| for a {{DOMStringMap}}</dfn>,
  run the following steps:

  1. For each [=uppercase ASCII letter=] in |name|, insert a U+002D HYPHEN-MINUS character (-)
      before the character and replace the character with the same character in [=ASCII lowercase=].
  2. Insert the string <code>data-</code> at the front of |name|.
  3. [=Remove an attribute by name=] given |name|, and the {{DOMStringMap}}'s
      [=associated element=].

  <p class="note">This algorithm will only get invoked by the Web IDL specification for names that
  are given by the earlier algorithm for
  [=DOMStringMap/__getter__()|getting the DOMStringMap's name-value pairs=]. [[!WEBIDL]]</p>

  <div class="example">
    If a Web page wanted an element to represent a space ship, e.g., as part of a game, it would
    have to use the <{global/class}> attribute along with <{global/data-*}> attributes:

    <pre highlight="html">
      &lt;div class="spaceship" data-ship-id="92432"
           data-weapons="laser 2" data-shields="50%"
           data-x="30" data-y="10" data-z="90">
        &lt;button class="fire"
                onclick="spaceships[this.parentNode.dataset.shipId].fire()">
          Fire
        &lt;/button>
      &lt;/div>
    </pre>

    Notice how the hyphenated attribute name becomes dromedary-cased in the API.
  </div>

  <div class="example">
    Given the following fragment and elements with similar constructions:

    <pre highlight="html">
      &lt;img class="tower" id="tower5" data-x="12" data-y="5"
           data-ai="robotarget" data-hp="46" data-ability="flames"
           src="towers/rocket.png" alt="Rocket Tower">
    </pre>

    ...one could imagine a function <code>splashDamage()</code> that takes some arguments, the first
    of which is the element to process:

    <pre highlight="javascript">
      function splashDamage(node, x, y, damage) {
        if (node.classList.contains('tower') && // checking the 'class' attribute
            node.dataset.x == x && // reading the 'data-x' attribute
            node.dataset.y == y) { // reading the 'data-y' attribute
          var hp = parseInt(node.dataset.hp); // reading the 'data-hp' attribute
          hp = hp - damage;
          if (hp &lt; 0) {
            hp = 0;
            node.dataset.ai = 'dead'; // setting the 'data-ai' attribute
            delete node.dataset.ability; // removing the 'data-ability' attribute
          }
          node.dataset.hp = hp; // setting the 'data-hp' attribute
        }
      }
    </pre>
  </div>

<h4 id="the-innertext-idl-attribute">The {{HTMLElement/innerText}} IDL attribute</h4>

  <dl class="domintro">
    : |element| . {{HTMLElement/innerText}} [ = value ]
    :: Returns the element's text content "as rendered".

        Can be set, to replace the element's children with the given value, but with line breaks
        converted to <{br}> elements.
  </dl>

  On getting, the <dfn attribute for="HTMLElement"><code>innerText</code></dfn> attribute must
  follow these steps:

  1. If this element is not [=being rendered=], or if the user agent is a non-CSS user agent, then
      return the same value as the {{Node/textContent}} IDL attribute on this element.
  2. Compute a list of items each of which is a string or a positive integer (a
      |required line break count|), by applying the following recursive procedure to each child node
      |node| of this element in [=tree order=], and then concatenating the results to a single list
      of items.

      <p class="note">Intuitively, a |required line break count| item means that a certain number of
      line breaks appear at that point, but they can be collapsed with the line breaks induced by
      adjacent |required line break count| items, reminiscent to CSS margin-collapsing.</p>

      1. Let |items| be the result of recursively applying this procedure to each child of |node| in
          [=tree order=], and then concatenating the results to a single list of items.
      2. If |node|'s [=computed value=] of 'visibility' is not "visible", then let the result of
          these substeps be |items| and abort these substeps.
      3. If |node| has no associated CSS box, then let the result of these substeps be |items| and
          abort these substeps. For the purpose of this step, the following elements must act as
          described if the [=computed value=] of the 'display' property is not "none":

          <ul class="brief">
            * <{select}> elements have an associated non-replaced inline CSS box whose child boxes
                include only those of <{optgroup}> and <{option}> element child nodes;
            * <{optgroup}> elements have an associated non-replaced block-level CSS box whose child
                boxes include only those of <{option}> element child nodes; and
            * <{option}> element have an associated non-replaced block-level CSS box whose child
                boxes are as normal for non-replaced block-level CSS boxes.
          </ul>

          <p class="note">items can be non-empty due to "display:contents".</p>
      4. If |node| is a {{Text}} node, then for each CSS text box produced by |node|, in content
          order, compute the text of the box after application of the CSS 'white-space' processing
          rules and 'text-transform' rules, let the result of these substeps be a list of the
          resulting strings, and abort these substeps. The CSS 'white-space' processing rules are
          slightly modified: collapsible spaces at the end of lines are always collapsed, but they
          are only removed if the line is the last line of the block, or it ends with a <{br}>
          element. Soft hyphens should be preserved. [[CSS-TEXT-3]]
      5. If |node| is a <{br}> element, then append a string containing a single U+000A LINE FEED
          (LF) character to |items|.
      6. If |node|'s [=computed value=] of 'display' is ''display/table-cell'', and |node|'s CSS box
          is not the last ''table-cell'' box of its enclosing ''table-row'' box, then append a
          string containing a single U+0009 CHARACTER TABULATION (tab) character to |items|.
      7. If |node|'s [=computed value=] of 'display' is ''display/table-cell'', and |node|'s CSS box
          is not the last ''table-cell'' box of the nearest ancestor ''display/table'' box, then
          append a string containing a single U+000A LINE FEED (LF) character to |items|.
      8. If |node| is a <{p}> element, then add 2 (a |required line break count|) at the beginning
          and end of |items|.
      9. If |node|'s [=used value=] of 'display' is block-level or ''display/table-caption'', then
          add 1 (a |required line break count|) at the beginning and end of |items|.
          [[CSS-DISPLAY-3]]

          <p class="note">Floats and absolutely-positioned elements fall into this category.</p>
      10. Let the result of these substeps be |items|.</p>
  3. Delete any string items whose strings are empty.</p>
  4. Delete any runs of consecutive |required line break count| items at the start or end of the
      list.
  5. Replace each remaining run of consecutive |required line break count| items with a string
      consisting of as many U+000A LINE FEED (LF) characters as the maximum of the values in the
      |required line break count| items.</p>
  6. Return the concatenation of the string |items|.</p>

  <p class="note">Note that descendant nodes of most replaced elements (e.g., <{textarea}>,
  <{input}>, and <{video}> — but not <{button}>) are not rendered by CSS, strictly speaking, and
  therefore have no CSS boxes for the purposes of this algorithm.</p>

  On setting, the {{HTMLElement/innerText}} attribute must follow these steps:

  1. Let |document| be this element's [=node document=].
  2. Let |fragment| be a new {{DocumentFragment}} object whose [=node document=] is |document|.
  3. Let |input| be the given value.
  4. Let |pointer| be a pointer into |input|, initially pointing at the start of the string.
  5. Let |text| be the empty string.
  6. While |pointer| is not past the end of |input|:
      1. [=Collect a sequence of characters=] that are not U+000A LINE FEED (LF) or U+000D CARRIAGE
          RETURN (CR) characters. Set |text| to the collected characters.
      2. If |text| is not the empty string, then [=append=] a new {{Text}} node whose
          {{CharacterData/data}} is |text| and [=node document=] is |document| to |fragment|.
      3. While |pointer| is not past the end of |input|, and the character at |position| is either a
          U+000A LINE FEED (LF) or U+000D CARRIAGE RETURN (CR) character:
          1. If the character at |position| is a U+000D CARRIAGE RETURN (CR) character and the next
              character is a U+000A LINE FEED (LF) character, then advance |position| to the next
              character in |input|.
          2. Advance |position| to the next character in |input|.
          3. [=Append=] the result of [=creating an element=] given |document|, <{br}>, and the
              [=HTML namespace=] to |fragment|.
  7. [=Replace all=] with |fragment| within this element.

<h4 id="requirements-relating-to-the-bidirectional-algorithm">Requirements relating to the bidirectional algorithm</h4>

<h5 id="authoring-conformance-criteria-for-bidirectional-algorithm-formatting-characters">Authoring conformance criteria for bidirectional-algorithm formatting characters</h5>

  [=Text content=] in [=HTML elements=] with {{Text}} nodes in their <a lt="element content">contents</a>,
  and text in attributes of [=HTML elements=] that allow free-form text, may contain characters
  in the ranges U+202A to U+202E and U+2066 to U+2069 (the bidirectional-algorithm formatting
  characters). [[!BIDI]]

  <p class="note">Authors are encouraged to use the <{global/dir}> attribute, the <{bdo}> element,
  and the <{bdi}> element, rather than maintaining the bidirectional-algorithm formatting characters
  manually. The bidirectional-algorithm formatting characters interact poorly with CSS.</p>

<h5 id="user-agent-conformance-criteria">User agent conformance criteria</h5>

  User agents must implement the Unicode bidirectional algorithm to determine the proper ordering
  of characters when rendering documents and parts of documents. [[!BIDI]]

  The mapping of HTML to the Unicode bidirectional algorithm must be done in one of three ways.
  Either the user agent must implement CSS, including in particular the CSS 'unicode-bidi',
  'direction', and 'content' properties, and must have, in its user agent style sheet, the rules
  using those properties given in this specification's [[#rendering|rendering]] section, or,
  alternatively, the user agent must act as if it implemented just the aforementioned properties
  and had a user agent style sheet that included all the aforementioned rules, but without letting
  style sheets specified in documents override them, or, alternatively, the user agent must
  implement another styling language with equivalent semantics. [[CSS-WRITING-MODES-3]]
  [[CSS3-CONTENT]]

  <p id="bidireq">The following elements and attributes have requirements defined by the
  [[#rendering|rendering]] section that, due to the requirements in this section, are requirements
  on all user agents (not just those that [=support the suggested default rendering=]):</p>

  <ul class="brief">
    * <{global/dir}> attribute
    * <{bdi}> element
    * <{bdo}> element
    * <{br}> element
    * <{pre}> element
    * <{textarea}> element
    * <{wbr}> element
  </ul>

<h4 id="wai-aria">WAI-ARIA and HTML Accessibility API Mappings</h4>

<h5 id="aria-authoring-requirements">ARIA Authoring Requirements</h5>

  Authors may use the ARIA <{aria/role}> and <{aria/aria-*}> attributes on [=HTML elements=], in
  accordance with the requirements described in the ARIA specifications, except where these conflict
  with the requirements specified in ARIA in HTML [[!html-aria]]. These exceptions are intended to
  prevent authors from making assistive technology products report nonsensical states that do not
  represent the actual state of the document. [[!wai-aria-1.1]]

  <p class="note" id="aria-usage-note">In the majority of cases setting an ARIA <{aria/role}> and/or
  <{aria/aria-*}> attribute that matches the default implicit ARIA semantics
  <dfn lt="do not set">is unnecessary and not recommended</dfn> as these properties are already set
  by the browser.</p>

  <div class="note">
    Authors are encouraged to make use of the following documents for guidance on using ARIA in HTML
    beyond that which is provided in this section:

    * [=Using ARIA=] - A practical guide for developers on how to to add
        accessibility information to HTML elements using the Accessible Rich Internet Applications
        specification [[!wai-aria-1.1]].
    * [=WAI-ARIA Authoring Practices 1.1=] - An author's guide to understanding and implementing
        Accessible Rich Internet Applications.
  </div>

<h5 id='aria-conformance-requirements'>Conformance Checker Implementation Requirements</h5>

  Conformance checkers are required to implement document conformance requirements for use of the
  ARIA <{aria/role}> and <{aria/aria-*}> attributes on [=HTML elements=], as defined in ARIA in
  HTML. [[!html-aria]]

<h5 id='user-agent-requirements'>User Agent Implementation Requirements</h5>

  User agents must implement ARIA semantics on all [=HTML elements=], as defined in the ARIA
  specifications [[!wai-aria-1.1]] and [[!core-aam-1.1]].

  User agents must implement Accessibility API semantics on all [=HTML elements=], as defined in the
  HTML Accessibility API Mappings specification [[!html-aam-1.0]].

  The ARIA attributes defined in the ARIA specifications do not have any effect on CSS
  [=pseudo-class=] matching, user interface modalities that don't use assistive technologies, or the
  default actions of user interaction events as described in this specification.

<h6 id="aria-role-attribute">ARIA Role Attribute</h6>

  Every [=HTML element=] may have an ARIA <{aria/role}> attribute specified. This is an ARIA Role
  attribute as defined by [[!wai-aria-1.1]].

  The attribute, if specified, must have a value that is a [=set of space-separated tokens=]; each
  token must be a non-abstract role defined in the WAI-ARIA specification [[!wai-aria-1.1]].

  The WAI-ARIA role that an [=HTML element=] has assigned to it is the first non-abstract role found
  in the list of values generated when the <{aria/role}> attribute is split on spaces.

<h6 id="state-and-property-attributes">State and Property Attributes</h6>

  Every [=HTML element=] may have ARIA state and property attributes specified. These attributes are
  defined by [[!wai-aria-1.1]].

  A subset of the ARIA State and Property attributes are defined as
  "<dfn lt="global aria-* attributes">Global States and Properties</dfn>" in the [[!wai-aria-1.1]]
  specification.

  These attributes, if specified, must have a value that is the ARIA value type in the "Value" field
  of the definition for the state or property, mapped to the appropriate HTML value type according
  to [[!wai-aria-1.1]].

  ARIA State and Property attributes can be used on any element. They are not always meaningful,
  however, and in such cases user agents might not perform any processing aside from including them
  in the DOM. State and property attributes are processed according to the requirements of the
  HTML Accessibility API Mappings specification [[!html-aam-1.0]], as well as [[!wai-aria-1.1]] and,
  as defined in the ARIA specifications [[!WAI-ARIA]] and [[!core-aam-1.1]].

<!-- W3C START - DO NOT OVERWRITE-->

<h5 id="allowed-aria-roles-states-and-properties">Allowed ARIA roles, states and properties</h5>

  <em>This section is non-normative.</em>

  <p class="note">The following table provides an informative reference to the ARIA roles, states
  and properties permitted for use in HTML. Links to ARIA roles, states and properties in the table
  reference the normative definitions in the [[!wai-aria-1.1]] specification.</p>

  <table>
    <caption>
      <abbr title="Accessible Rich Internet Applications">ARIA</abbr> Roles, States and Properties
    </caption>
    <thead>
      <tr>
        <th>Role</th>
        <th>Description</th>
        <th>Required Properties</th>
        <th>Supported Properties</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td>any</td>
        <td>[=global aria-* attributes=] can be used on any HTML element.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-atomic}>
            * <{aria/aria-busy}> (state)
            * <{aria/aria-controls}>
            * <{aria/aria-current}> (state)
            * <{aria/aria-describedby}>
            * <{aria/aria-details}>
            * <{aria/aria-disabled}> (state)
            * <{aria/aria-dropeffect}>
            * <{aria/aria-errormessage}>
            * <{aria/aria-flowto}>
            * <{aria/aria-grabbed}> (state)
            * <{aria/aria-haspopup}>
            * <{aria/aria-hidden}> (state)
            * <{aria/aria-invalid}> (state)
            * <{aria/aria-keyshortcuts}>
            * <{aria/aria-label}>
            * <{aria/aria-labelledby}>
            * <{aria/aria-live}>
            * <{aria/aria-owns}>
            * <{aria/aria-relevant}>
            * <{aria/aria-roledescription}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>alert</code></a></td>
        <td>
          A message with important, and usually time-sensitive, information. See related
          <a attr-value for="aria/role"><code>alertdialog</code></a> and
          <a attr-value for="aria/role"><code>status</code></a>.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>alertdialog</code></a></td>
        <td>
          A type of dialog that contains an alert message, where initial focus goes to an element
          within the dialog. See related <a attr-value for="aria/role"><code>alert</code></a> and
          <a attr-value for="aria/role"><code>dialog</code></a>.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
            * <{aria/aria-dialog}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>application</code></a></td>
        <td>A structure containing one or more focusable elements requiring user input, such as
          keyboard or gesture events, that do not follow a standard interaction pattern supported by
          a widget role.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>article</code></a></td>
        <td>
          A section of a page that consists of a composition that forms an independent part of a
          document, page, or site.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>banner</code></a></td>
        <td>
          A region that contains mostly site-oriented content, rather than page-specific content.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>button</code></a></td>
        <td>
          An input that allows for user-triggered actions when clicked or pressed. See related
          <a attr-value for="aria/role"><code>link</code></a>.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
            * <{aria/aria-pressed}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>checkbox</code></a></td>
        <td>A checkable input that has three possible values: true, false, or mixed.</td>
        <td>
          <ul class="brief">
            * <{aria/aria-checked}> (state)
          </ul>
        </td>
        <td>none</td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>cell</code></a></td>
        <td>A cell in a tabular container.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-colspan}>
            * <{aria/aria-rowindex}>
            * <{aria/aria-rowspan}>
          </ul>
        </td>
      </tr>

      <tr>
        <td><a attr-value for="aria/role"><code>columnheader</code></a></td>
        <td>A cell containing header information for a column.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-sort}>
            * <{aria/aria-readonly}>
            * <{aria/aria-required}>
            * <{aria/aria-selected}> (state)
            * <{aria/aria-expanded}> (state)
            * <{aria/aria-colspan}>
            * <{aria/aria-rowindex}>
            * <{aria/aria-rowspan}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>combobox</code></a></td>
        <td>
          A presentation of a select; usually similar to a textbox where users can type ahead to
          select an option, or type to enter arbitrary text as a new item in the list. See related
          <a attr-value for="aria/role"><code>listbox</code></a>.
        </td>
        <td>
          <ul class="brief">
            * <{aria/aria-controls}>
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
        <td>
          <ul class="brief">
            * <{aria/aria-autocomplete}>
            * <{aria/aria-required}>
            * <{aria/aria-activedescendant}>
            * <{aria/aria-orientation}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>complementary</code></a></td>
        <td>
          A supporting section of the document, designed to be complementary to the main content at
          a similar level in the DOM hierarchy, but remains meaningful when separated from the main
          content.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>contentinfo</code></a></td>
        <td>A large perceivable region that contains information about the parent document.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>definition</code></a></td>
        <td>A definition of a term or concept.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>dialog</code></a></td>
        <td>
          A dialog is an application window that is designed to interrupt the current processing of
          an application in order to prompt the user to enter information or require a response. See
          related <a attr-value for="aria/role"><code>alertdialog</code></a>.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
            * <{aria/aria-dialog}>
          </ul>
         </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>directory</code></a></td>
        <td>A list of references to members of a group, such as a static table of contents.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>document</code></a></td>
        <td>
          A region containing related information that is declared as document content, as opposed
          to a web application.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>feed</code></a></td>
        <td>
          A scrollable list of articles where scrolling may cause articles to be added to or removed
          from either end of the list.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>figure</code></a></td>
        <td>
          A perceivable section of content that typically contains a graphical document, images,
          code snippets, or example text.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>form</code></a></td>
        <td>
          A landmark region that contains a collection of items and objects that, as a whole,
          combine to create a form. See related
          <a attr-value for="aria/role"><code>search</code></a>.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>grid</code></a></td>
        <td>
          A grid is an interactive control which contains cells of tabular data arranged in rows and
          columns, like a table.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-level}>
            * <{aria/aria-multiselectable}>
            * <{aria/aria-readonly}>
            * <{aria/aria-activedescendant}>
            * <{aria/aria-expanded}> (state)
            * <{aria/aria-colcount}>
            * <{aria/aria-rowcount}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>gridcell</code></a></td>
        <td>A cell in a grid or treegrid.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-readonly}>
            * <{aria/aria-required}>
            * <{aria/aria-selected}> (state)
            * <{aria/aria-expanded}> (state)
            * <{aria/aria-colspan}>
            * <{aria/aria-rowindex}>
            * <{aria/aria-rowspan}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>group</code></a></td>
        <td>
          A set of user interface objects which are not intended to be included in a page summary or
          table of contents by assistive technologies.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-activedescendant}>
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>heading</code></a></td>
        <td>A heading for a section of the page.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-level}>
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>img</code></a></td>
        <td>A container for a collection of elements that form an image.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>link</code></a></td>
        <td>
          An interactive reference to an internal or external resource that, when activated, causes
          the user agent to navigate to that resource. See related
          <a attr-value for="aria/role"><code>button</code></a>.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>list</code></a></td>
        <td>
          A group of non-interactive list items. See related
          <a attr-value for="aria/role"><code>listbox</code></a>.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
          </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>listbox</code></a></td>
        <td>
          A widget that allows the user to select one or more items from a list of choices. See
          related <a attr-value for="aria/role"><code>combobox</code></a> and
          <a attr-value for="aria/role"><code>list</code></a>.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-multiselectable}>
            * <{aria/aria-required}>
            * <{aria/aria-expanded}> (state)
            * <{aria/aria-activedescendant}>
            * <{aria/aria-expanded}> (state)
            * <{aria/aria-orientation}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>listitem</code></a></td>
        <td>A single item in a <a attr-value for="aria/role"><code>list</code></a> or
        <a attr-value for="aria/role"><code>directory</code></a>.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-level}>
            * <{aria/aria-posinset}>
            * <{aria/aria-setsize}>
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>log</code></a></td>
        <td>
          A type of live region where new information is added in meaningful order and old
          information may disappear. See related
          <a attr-value for="aria/role"><code>marquee</code></a>.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>main</code></a></td>
        <td>The main content of a document.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>marquee</code></a></td>
        <td>
          A type of live region where non-essential information changes frequently. See related
          <a attr-value for="aria/role"><code>log</code></a>.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td>MathML <a attr-value for="aria/role"><code>math</code></a></td>
        <td>Content that represents a mathematical expression. </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>menubar</code></a></td>
        <td>
          A presentation of menu that usually remains visible and is usually presented horizontally.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
            * <{aria/aria-activedescendant}>
            * <{aria/aria-expanded}> (state)
            * <{aria/aria-orientation}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>navigation</code></a></td>
        <td>
          A collection of navigational elements (usually links) for navigating the document or
          related documents.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
          </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>none</code></a></td>
        <td>
          An element whose implicit native role semantics will not be mapped to the accessibility
          API. See synonym <a attr-value for="aria/role"><code>presentation</code></a>.
        </td>
        <td>none</td>
        <td>none</td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>note</code></a></td>
        <td>
          A section whose content is parenthetic or ancillary to the main content of the resource.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>option</code></a></td>
        <td>A selectable item in a select list.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-checked}> (state)
            * <{aria/aria-posinset}>
            * <{aria/aria-selected}> (state)
            * <{aria/aria-setsize}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>presentation</code></a></td>
        <td>
          An element whose implicit native role semantics will not be mapped to the accessibility
          API.
        </td>
        <td>none</td>
        <td>none</td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>progressbar</code></a></td>
        <td>An element that displays the progress status for tasks that take a long time.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-valuemax}>
            * <{aria/aria-valuemin}>
            * <{aria/aria-valuenow}>
            * <{aria/aria-valuetext}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>radio</code></a></td>
        <td>
          A checkable input in a group of radio roles, only one of which can be checked at a time.
        </td>
        <td>
          <ul class="brief">
            * <{aria/aria-checked}> (state)
          </ul>
        </td>
        <td>
          <ul class="brief">
            * <{aria/aria-posinset}>
            * <{aria/aria-selected}> (state)
            * <{aria/aria-setsize}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>radiogroup</code></a></td>
        <td>A group of radio buttons.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-required}>
            * <{aria/aria-activedescendant}>
            * <{aria/aria-expanded}> (state)
            * <{aria/aria-orientation}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>region</code></a></td>
        <td>
          A large perceivable section of a web page or document, that the author feels is important
          enough to be included in a page summary or table of contents, for example, an area of the
          page containing live sporting event statistics.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>row</code></a></td>
        <td>A row of cells in a grid.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-level}>
            * <{aria/aria-selected}> (state)
            * <{aria/aria-activedescendant}>
            * <{aria/aria-expanded}> (state)
            * <{aria/aria-colindex}>
            * <{aria/aria-rowindex}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>rowgroup</code></a></td>
        <td>A group containing one or more row elements in a grid.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-activedescendant}>
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>rowheader</code></a></td>
        <td>A cell containing header information for a row in a grid.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-sort}>
            * <{aria/aria-readonly}>
            * <{aria/aria-required}>
            * <{aria/aria-selected}> (state)
            * <{aria/aria-expanded}> (state)
            * <{aria/aria-colspan}>
            * <{aria/aria-rowspan}>
            * <{aria/aria-rowindex}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>scrollbar</code></a></td>
        <td>
          A graphical object that controls the scrolling of content within a viewing area,
          regardless of whether the content is fully displayed within the viewing area.
        </td>
        <td>
          <ul class="brief">
            * <{aria/aria-controls}>
            * <{aria/aria-orientation}>
            * <{aria/aria-valuemax}>
            * <{aria/aria-valuemin}>
            * <{aria/aria-valuenow}>
          </ul>
        </td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>search</code></a></td>
        <td>
          A landmark region that contains a collection of items and objects that, as a whole,
          combine to create a search facility. See related
          <a attr-value for="aria/role"><code>form</code></a>.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
            * <{aria/aria-orientation}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>searchbox</code></a></td>
        <td>
          A type of textbox intended for specifying search criteria..
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-activedescendant}>
            * <{aria/aria-autocomplete}>
            * <{aria/aria-multiline}>
            * <{aria/aria-placeholder}>
            * <{aria/aria-readonly}>
            * <{aria/aria-required}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>separator</code></a></td>
        <td>
          A divider that separates and distinguishes sections of content.
        </td>
        <td>
          <ul class="brief">
            * <{aria/aria-valuemax}> (if focusable)
            * <{aria/aria-valuemin}> (if focusable)
            * <{aria/aria-valuenow}> (if focusable)
          </ul>
         </td>
        <td>
          <ul class="brief">
            * <{aria/aria-valuetext}> (if focusable)
            * <{aria/aria-orientation}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>slider</code></a></td>
        <td>A user input where the user selects a value from within a given range.</td>
        <td>
          <ul class="brief">
            * <{aria/aria-valuemax}>
            * <{aria/aria-valuemin}>
            * <{aria/aria-valuenow}>
          </ul>
        </td>
        <td>
          <ul class="brief">
            * <{aria/aria-orientation}>
            * <{aria/aria-valuetext}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>spinbutton</code></a></td>
        <td>A form of range that expects the user to select from among discrete choices.</td>
        <td>
          <ul class="brief">
            * <{aria/aria-valuemax}>
            * <{aria/aria-valuemin}>
            * <{aria/aria-valuenow}>
          </ul>
        </td>
        <td>
          <ul class="brief">
            * <{aria/aria-required}>
            * <{aria/aria-valuetext}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>status</code></a></td>
        <td>
          A container whose content is advisory information for the user but is not important enough
          to justify an alert, often but not necessarily presented as a status bar. See related
          <a attr-value for="aria/role"><code>alert</code></a>.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>switch</code></a></td>
        <td>
         A type of checkbox that represents on/off values, as opposed to checked/unchecked values.
        </td>
        <td>
          <ul class="brief">
            * <{aria/aria-checked}> (state)
          </ul>
        </td>
        <td>none</td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>tab</code></a></td>
        <td>
          A grouping label providing a mechanism for selecting the tab content that is to be
          rendered to the user.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-selected}> (state)
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>table</code></a></td>
        <td>
        A section containing data arranged in rows and columns. The table role is intended for
        tabular containers which are not interactive.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-colcount}>
            * <{aria/aria-rowcount}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>tablist</code></a></td>
        <td>A list of tab elements, which are references to tabpanel elements.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-level}>
            * <{aria/aria-activedescendant}>
            * <{aria/aria-expanded}> (state)
            * <{aria/aria-orientation}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>tabpanel</code></a></td>
        <td>
          A container for the resources associated with a
          <a attr-value for="aria/role"><code>tab</code></a>, where each
          <a attr-value for="aria/role"><code>tab</code></a> is contained in a
          <a attr-value for="aria/role"><code>tablist</code></a>.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>term</code></a></td>
        <td>
          A word or phrase with a corresponding definition. See related
          <a attr-value for="aria/role"><code>definition</code></a>.
        </td>
        <td>none</td>
        <td>none</td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>textbox</code></a></td>
        <td>Input that allows free-form text as its value.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-activedescendant}>
            * <{aria/aria-autocomplete}>
            * <{aria/aria-multiline}>
            * <{aria/aria-placeholder}>
            * <{aria/aria-readonly}>
            * <{aria/aria-required}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>timer</code></a></td>
        <td>
          A type of live region containing a numerical counter which indicates an amount of elapsed
          time from a start point, or the time remaining until an end point.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>toolbar</code></a></td>
        <td>A collection of commonly used function buttons represented in compact visual form.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-activedescendant}>
            * <{aria/aria-expanded}> (state)
            * <{aria/aria-orientation}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>tooltip</code></a></td>
        <td>A contextual popup that displays a description for an element.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-expanded}> (state)
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>tree</code></a></td>
        <td>
          A type of list that may contain sub-level nested groups that can be collapsed and
          expanded.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-multiselectable}>
            * <{aria/aria-required}>
            * <{aria/aria-activedescendant}>
            * <{aria/aria-expanded}> (state)
            * <{aria/aria-orientation}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>treegrid</code></a></td>
        <td>A grid whose rows can be expanded and collapsed in the same manner as for a tree.</td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-level}>
            * <{aria/aria-multiselectable}>
            * <{aria/aria-readonly}>
            * <{aria/aria-activedescendant}>
            * <{aria/aria-expanded}> (state)
            * <{aria/aria-required}>
            * <{aria/aria-orientation}>
            * <{aria/aria-colcount}>
            * <{aria/aria-rowcount}>
          </ul>
        </td>
      </tr>
      <tr>
        <td><a attr-value for="aria/role"><code>treeitem</code></a></td>
        <td>
          An option item of a tree. This is an element within a tree that may be expanded or
          collapsed if it contains a sub-level group of treeitems.
        </td>
        <td>none</td>
        <td>
          <ul class="brief">
            * <{aria/aria-level}>
            * <{aria/aria-posinset}>
            * <{aria/aria-setsize}>
            * <{aria/aria-expanded}> (state)
            * <{aria/aria-checked}> (state)
            * <{aria/aria-selected}> (state)
          </ul>
        </td>
      </tr>
    </tbody>
  </table>

</section>
<!-- W3C END -->
