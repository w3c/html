<section>
<!--
██      ██ ████████ ████████           ███    ████████  ████████           ███    ████████  ████  ██████
██  ██  ██ ██       ██     ██         ██ ██   ██     ██ ██     ██         ██ ██   ██     ██  ██  ██    ██
██  ██  ██ ██       ██     ██        ██   ██  ██     ██ ██     ██        ██   ██  ██     ██  ██  ██
██  ██  ██ ██████   ████████        ██     ██ ████████  ████████        ██     ██ ████████   ██   ██████
██  ██  ██ ██       ██     ██       █████████ ██        ██              █████████ ██         ██        ██
██  ██  ██ ██       ██     ██       ██     ██ ██        ██              ██     ██ ██         ██  ██    ██
 ███  ███  ████████ ████████        ██     ██ ██        ██              ██     ██ ██        ████  ██████
-->

<h2 id="webappapis">Web application APIs</h2>

<h3 id="webappapis-scripting">Scripting</h3>

<h4 id="scripting-introduction">Introduction</h4>

  Various mechanisms can cause author-provided executable code to run in the context of a
  document. These mechanisms include, but are probably not limited to:

  <ul>

    <li>Processing of <{script}> elements.</li>

    <li>Navigating to <a><code>javascript:</code> URLs</a>.</li>

    <li>Event handlers, whether registered through the DOM using <code>addEventListener()</code>, by explicit <a>event handler content attributes</a>, by
    <a>event handler IDL attributes</a>, or otherwise.</li>

    <li>Processing of technologies like SVG that have their own scripting features.</li>

  </ul>

  <div class="impl">

<h4 id="enabling-and-disabling-scripting">Enabling and disabling scripting</h4>

  <dfn lt="scripting was enabled|scripting is enabled">Scripting is enabled</dfn> in a <em><a>browsing
  context</a></em> when all of the following conditions are true:

  <ul>

    <li>The user agent supports scripting.</li>

    <li>The user has not disabled scripting for this <a>browsing context</a> at this time.
    (User agents may provide users with the option to disable scripting globally, or in a
    finer-grained manner, e.g., on a per-origin basis.)

    </li>

    <li>The <a>browsing context</a>'s <a>active document</a>'s
    <a>active sandboxing flag set</a> does not have its <a>sandboxed scripts browsing
    context flag</a> set.</li>

  </ul>

  <dfn>Scripting is disabled</dfn> in a <a>browsing context</a>
  when any of the above conditions are false (i.e., when scripting is not enabled).

  <hr />

  Scripting is enabled for a <em>node</em> if the
  <code>Document</code> object of the node (the node itself, if it is itself a <code>Document</code>
  object) has an associated <a>browsing context</a>, and <a>scripting is enabled</a> in that <a>browsing context</a>.

  Scripting is disabled for a node if there is no such
  <a>browsing context</a>, or if <a>scripting is
  disabled</a> in that <a>browsing context</a>.

  </div>

  <div class="impl">

<h4 id="scripting-processing-model">Processing model</h4>

<h5 id="processing-model-definitions">Definitions</h5>

  This specification describes three kinds of <a>JavaScript global environments</a>: the <dfn>document environment</dfn>, the
  <dfn>dedicated worker environment</dfn>, and the <dfn>shared worker environment</dfn>. The
  <a>dedicated worker environment</a> and the <a>shared worker environment</a> are both
  types of <dfn>worker environments</dfn>.

  Except where otherwise specified, a <a>JavaScript global environment</a> is a
  <a>document environment</a>.

  <hr />

  A <dfn>script</dfn> has:

  <dl>

    <dt>A <dfn>code entry-point</dfn></dt>

    <dd>

    A code entry-point represents a block of executable code that the script exposes to other
    scripts and to the user agent. Typically, the code corresponding to the code entry-point is
    executed immediately after the script is parsed, but for event handlers, it is called each time
    the handler is invoked.

    <p class="example">
  In JavaScript <code>script</code> blocks, this corresponds to the execution
    context of the global code.
  </p>

    </dd>

    <dt>Optionally, a <dfn>muted errors</dfn> flag</dt>

    <dd>

    A flag which, if set, means that error information will not be provided for errors in this
    script (used to mute errors for cross-origin scripts, since that can leak private
    information).

    </dd>

    <dt>A <dfn>settings object</dfn></dt>

    <dd>

    An <a>environment settings object</a>, various settings that are shared with other scripts in
    the same context.

    </dd>

  </dl>

  <hr />

  An <dfn>environment settings object</dfn> specifies algorithms for obtaining the following:

  <dl>

    <dt>A <dfn>script execution environment</dfn> for each language supported by the user agent</dt>

    <dd>

    The characteristics of the script execution environment depend on the language, and are not
    defined by this specification.

    <p class="example">
  In JavaScript, the script execution environment consists of the interpreter,
    the stack of <i>execution contexts</i>, the <i>global code</i> and <i>function code</i> and the
    <code>Function</code> objects resulting, and so forth.
  </p>

    </dd>

    <dt>A <dfn>global object</dfn></dt>
    <dd>

    An object that provides the APIs that can be called by the code in scripts that use this
    <a>settings object</a>.

    <p class="note">
  This is typically a <code>Window</code> object or a
    <code>WorkerGlobalScope</code> object. When a <a>global object</a> is an empty object, it
    can't do anything that interacts with the environment.
  </p>

    If the <a>global object</a> is a <code>Window</code> object, then, in JavaScript, the
    ThisBinding of the global execution context for this script must be the <code>Window</code>
    object's <code>WindowProxy</code> object, rather than the global object. [[!ECMA-262]]

    <p class="note">
  This is a <a>willful violation</a> of the JavaScript specification current
    at the time of writing (ECMAScript edition 6, as defined in section 10.4.1.1 Initial Global
    Execution Context, step 3). The JavaScript specification requires that the <code>this</code> keyword in the global scope return the global object, but this is not
    compatible with the security design prevalent in implementations as specified herein. [[!ECMA-262]]
  </p>

    </dd>

    <dt>A <dfn>responsible browsing context</dfn></dt>

    <dd>

    A <a>browsing context</a> that is assigned responsibility for actions taken by the
    scripts that use this <a>environment settings object</a>.

    <p class="example">
  When a script creates and <a>navigates</a> a new
    <a>top-level browsing context</a>, the <code>opener</code> attribute
    of the new <a>browsing context</a>'s <code>Window</code> object will be set to the
    <a>responsible browsing context</a>'s <code>WindowProxy</code> object.
  </p>

    </dd>

    <dt>A <dfn>responsible event loop</dfn></dt>

    <dd>

    An <a>event loop</a> that is used when it would not be immediately clear what event
    loop to use.

    </dd>

    <dt>A <dfn>responsible document</dfn></dt>

    <dd>

    A <code>Document</code> that is assigned responsibility for actions taken by the scripts that
    use this <a>environment settings object</a>.

    <p class="example">
  For example, the <a>address</a> of the
    <a>responsible document</a> is used to set the <a>address</a> of the {{Document}} after it has been reset using <code>document.open()</code>.
  </p>

    If the <a>responsible event loop</a> is not a <a>browsing context</a> <a>event loop</a>,
    then the <a>environment settings object</a> has no <a>responsible document</a>.

    </dd>

    <dt>An <dfn>API URL character encoding</dfn></dt>

    <dd>

    A character encoding used to encode URLs by APIs called by scripts that use this <a>environment
    settings object</a>.

    </dd>

    <dt>An <dfn>API base URL</dfn></dt>

    <dd>

    An <a>absolute URL</a> used by APIs called by scripts that use this <a>environment
    settings object</a> to resolve <a>relative URLs</a>.

    </dd>

    <dt>An <a>origin</a> and an <a>effective script origin</a></dt>

    <dd>

    An instrument used in security checks.

    </dd>

    <dt>A <dfn>creation URL</dfn></dt>

    <dd>
    An <a>absolute URL</a> representing the location of the resource with which the
    <a>environment settings object</a> is associated. Note that this URL might be distinct
    from the <a>responsible document</a>'s <a>address</a>, due to mechanisms such as <code>history.pushState()</code>.
    </dd>

    <dt>An <a>HTTPS state</a></dt>

    <dd>
    A value representing the security properties of the network channel used to deliver the
    resource with which the <a>environment settings object</a> is associated. The value will
    be one of "<code>modern</code>", "<code>deprecated</code>", or
    "<code>none</code>".

    <p class="note">
  Resources delivered over HTTPS will generally have an <a>HTTPS state</a>
    of "<code>modern</code>". A user agent can use "<code>deprecated</code>"
    during transitional periods where rejecting the response entirely would be inappropriate (e.g.,
    while removing support for a hash function or cypher suite).
  </p>
    </dd>

  </dl>

  An <a>environment settings object</a> also has an
  <dfn>outstanding rejected promises weak set</dfn> and an
  <dfn>about-to-be-notified rejected promises list</dfn>, used to track
  <a>unhandled promise rejections</a>. The <a>outstanding rejected promises weak set</a> must not
  create strong references to any of its members, and implementations are free to limit its size,
  e.g., by removing old entries from it when new ones are added.

  The <dfn>relevant settings object for a global object</dfn> <var>o</var> is the
  <a>environment settings object</a> whose <a>global object</a> is <var>o</var>.
  (There is always a 1:1 mapping of global objects to environment settings objects.)

  The <dfn>relevant settings object for a script</dfn> <var>s</var> is the
  <a>settings object</a> of <var>s</var>.

<h5 id="script-settings-for-browsing-contexts">Script settings for browsing contexts</h5>

  Whenever a new <code>Window</code> object is created, the user agent must:

  <ol>
    <li>Let <var>url</var> be a copy of the <a>address</a>
    of the <code>Document</code> with which the <code>Window</code> is associated.</li>

    <li>
    Create an <a>environment settings object</a> whose algorithms are defined as
    follows:

    <dl>

      <dt>The <a>script execution environments</a></dt>
      <dd>

      When the <a>environment settings object</a> is created, for each language supported by the
      user agent, create an appropriate execution environment as defined by the relevant
      specification.

      When a <a>script execution environment</a> is needed, return the appropriate one from
      those created when the <a>environment settings object</a> was created.

      </dd>

      <dt>The <a>global object</a></dt>
      <dd>

      Return the <code>Window</code> object itself.

      </dd>

      <dt>The <a>responsible browsing context</a></dt>
      <dd>

      Return the <a>browsing context</a> with which the <code>Window</code> object is
      associated.

      </dd>

      <dt>The <a>responsible event loop</a></dt>
      <dd>

      Return the <a>event loop</a> that is associated with the <a>unit of related
      similar-origin browsing contexts</a> to which the <code>Window</code> object's <a>browsing
      context</a> belongs.

      </dd>

      <dt>The <a>responsible document</a></dt>
      <dd>

      Return the <code>Document</code> with which the <code>Window</code> is currently
      associated.

      </dd>

      <dt>The <a>API URL character encoding</a></dt>
      <dd>

      Return the current <a>character encoding</a> of
      the <code>Document</code> with which the <code>Window</code> is currently associated.

      </dd>

      <dt>The <a>API base URL</a></dt>
      <dd>

      Return the current <a>base URL</a> of the
      <code>Document</code> with which the <code>Window</code> is currently associated.

      </dd>

      <dt>The <a>origin</a></dt>
      <dd>

      Return the <a>origin</a> of the <code>Document</code> with which the
      <code>Window</code> is currently associated.

      </dd>

      <dt>The <a>effective script origin</a></dt>
      <dd>

      Return the <a>effective script origin</a> of the <code>Document</code> with which the
      <code>Window</code> is currently associated.

      </dd>

      <dt>The <a>creation URL</a></dt>
      <dd>

      Return <var>url</var>.

      </dd>

      <dt>The <a>HTTPS state</a></dt>
      <dd>

      Return the <a>HTTPS state</a> of the
      <code>Window</code> object.

      </dd>

    </dl>
    </li>
  </ol>

<h5 id="calling-scripts">Calling scripts</h5>

  Each <a>unit of related similar-origin browsing contexts</a> has a <dfn>stack of script
  settings objects</dfn>, which must be initially empty. When a new <a>environment settings
  object</a> is <i>pushed</i> onto this stack, the specified <a>environment settings object</a>
  is to be added to the stack; when the <a>environment settings object</a> on this stack that was
  most recently pushed onto it is to be <i>popped</i> from the stack, it must be removed. Entries on
  this stack can be labeled as <dfn>candidate entry
  settings objects</dfn>.

  When a user agent is to <dfn>jump to a code entry-point</dfn> for a <a>script</a> <var>s</var>, given an optional <var>rethrow errors</var>
  flag, the user agent must run the following steps:

  <ol>

    <li>Let <var>context</var> be the <a>settings object</a> of <var>s</var>.</li>

    <li><a>Prepare to run a callback</a> with <var>context</var> as the
    <a>environment settings object</a>. If this returns "do not run" then abort these
    steps.</li>

    <li>Make the appropriate <a>script execution environment</a> specified by <var>context</var> execute the <var>s</var>'s <a>code
    entry-point</a>.</li>

    <li><a>Clean up after running a callback</a>.</li>

  </ol>

  The steps to <dfn>prepare to run a callback</dfn> with an <a>environment settings object</a>
  <var>o</var> are as follows. They return either "run" or "do not run".

  <ol>

    <li>If the <a>global object</a> specified by <var>o</var> is a
    <code>Window</code> object whose <code>Document</code> object is not <a>fully active</a>,
    then return "do not run" and abort these steps.

    <li>If <a>scripting is disabled</a> for the
    <a>responsible browsing context</a> specified by <var>o</var>, then return "do
    not run" and abort these steps.

    <li>Push <var>o</var> onto the <a>stack of script settings objects</a>, and
    label it as a <a>candidate entry settings object</a>.</li>

    <li>Return "run".</li>

  </ol>

  The steps to <dfn>clean up after running a callback</dfn> are as follows:

  <ol>

    <li>Pop the current <a>incumbent settings object</a> from the <a>stack of script
    settings objects</a>.</li>

    <li>If the <a>stack of script settings objects</a> is now empty, <a>run the global
    script clean-up jobs</a>. (These cannot run scripts.)</li>

    <li>If the <a>stack of script settings objects</a> is now empty, <a>perform a
    microtask checkpoint</a>. (If this runs scripts, these algorithms will be invoked
    reentrantly.)</li>

  </ol>

  <p class="note">
  These algorithms are not invoked by one script directly calling another, but they
  can be invoked reentrantly in an indirect manner, e.g., if a script dispatches an event which has
  event listeners registered.
  </p>

  When a JavaScript <i>SourceElements</i> production is to be evaluated, the <a>settings
  object</a> of the <a>script</a> corresponding to that
  <i>SourceElements</i> must be pushed onto the <a>stack of script settings objects</a> before
  the evaluation begins, and popped when the evaluation ends (regardless of whether it's an abrupt
  completion or not).

  The <dfn>entry settings object</dfn> is the most-recently added <a>environment settings
  object</a> in the <a>stack of script settings objects</a> that is labeled as a
  <a>candidate entry settings object</a>. If the stack is empty, or has no entries labeled as
  such, then there is no <a>entry settings object</a>. It is used to obtain, amongst other
  things, the <a>API base URL</a> to <a>resolve</a> relative
  <a for="url">URLs</a> used in scripts running in that <a>unit of related
  similar-origin browsing contexts</a>.

  The <dfn>incumbent settings object</dfn> is the <a>environment settings object</a> in the
  <a>stack of script settings objects</a> that was most-recently added (i.e., the last one on
  the stack). If the stack is empty, then there is no <a>incumbent settings object</a>. It is
  used in some security checks.

  <p class="note">
  The Web IDL specification also uses these algorithms. [[!WEBIDL]]
  </p>

  <div class="example">
    Consider the following two pages, with the first being loaded in a browser window and the
    second being loaded in the <code>iframe</code> of the first:

    <pre highlight="html">
  &lt;!-- a/a.html -->
  &lt;!DOCTYPE HTML>
  &lt;title>Outer page&lt;/title>
  &lt;iframe src="../b/b.html">&lt;/iframe>
  &lt;input type=button onclick="frames[0].hello()" value="Hello">
  </pre>

    <pre highlight="html">
  &lt;!-- b/b.html -->
  &lt;!DOCTYPE HTML>
  &lt;title>Inner page&lt;/title>
  &lt;script>
  function hello() {
    location.assign('c.html');
  }
  &lt;/script>
  </pre>

    When the button is pressed in the inner frame, the outer page runs script in the inner page.
    While the <code>hello()</code> function is running, the <a>entry settings
    object</a> is that of the outer file (<code>a/a.html</code>), and the
    <a>incumbent settings object</a> is that of the inner file (<code>b/b.html</code>). The <code>assign()</code> method uses
    the <a>entry settings object</a> to resolve the URL, so we end up loading <code>a/c.html</code>, but it uses the <a>incumbent settings object</a> to establish
    the <a>source browsing context</a>, from which the referrer is established, so the <code>Referer</code> header sent with the request for <code>a/c.html</code> specifies the inner file's URL (the one ending with <code>b/b.html</code>).
  </div>

  <hr />

  Each <a>unit of related similar-origin browsing contexts</a> has a <dfn>global script
  clean-up jobs list</dfn>, which must initially be empty. A global script clean-up job cannot run
  scripts, and cannot be sensitive to the order in which other clean-up jobs are executed. The File
  API uses this to release <a scheme><code>blob:</code></a> URLs. [[!FILEAPI]]

  When the user agent is to <dfn>run the global script clean-up jobs</dfn>, the user agent must
  perform each of the jobs in the <a>global script clean-up jobs list</a> and then empty the
  list.

  </div>

  <div class="impl">

<h5 id="sec-creating-scripts"><dfn lt="create a script|creating scripts">Creating scripts</dfn></h5>

  When the specification says that a <a>script</a> is to be <i>created</i>, given some script source, a script source URL, its
  scripting language, an <a>environment settings object</a>, and optionally a <var>muted
  errors</var> flag, the user agent must run the following steps:

  <ol>

    <li>Let <var>script</var> be a new <a>script</a> that
    this algorithm will subsequently initialize.</li>

    <li>If <a>scripting is disabled</a> for <a>browsing
    context</a> passed to this algorithm, then abort these steps, as if the script source
    described a program that did nothing but return void.

    <li>Obtain the appropriate <a>script execution environment</a> for the given scripting
    language from the <a>environment settings object</a> provided.</li>

    <li>Parse/compile/initialize the source of the script using the <a>script execution
    environment</a>, as appropriate for the scripting language, and thus obtain <var>script</var>'s <a>code entry-point</a>.</li>

    <li>Let <var>script</var>'s <a>settings object</a> be the <a>environment
    settings object</a> provided.</li>

    <li>If the <var>muted errors</var> flag was set, then set <var>script</var>'s <a>muted errors</a> flag.</li>

    <li>

    If all the steps above succeeded (in particular, if the script was compiled successfully),
    Jump to <var>script</var>'s <a>code
    entry-point</a>.

    Otherwise, report the error for <var>script</var>, with the
    problematic position (line number and column number), using the <a>global object</a>
    specified by the <a>environment settings object</a> as the target. If the error is still <i>not handled</i> after this, then the error may be reported to
    a developer console.

    </li>

  </ol>

  </div>

  <div class="impl">

<h5 id="killing-scripts">Killing scripts</h5>

  User agents may impose resource limitations on scripts, for example CPU quotas, memory limits,
  total execution time limits, or bandwidth limitations. When a script exceeds a limit, the user
  agent may either throw a <code>QuotaExceededError</code> exception, abort the script without an
  exception, prompt the user, or throttle script execution.

  <div class="example">
    For example, the following script never terminates. A user agent could, after waiting for a
    few seconds, prompt the user to either terminate the script or let it continue.

    <pre highlight="html">
  &lt;script>
  while (true) { /* loop */ }
  &lt;/script>
  </pre>
  </div>

  User agents are encouraged to allow users to disable scripting whenever the user is prompted
  either by a script (e.g., using the <code>window.alert()</code> API) or because
  of a script's actions (e.g., because it has exceeded a time limit).

  If scripting is disabled while a script is executing, the script should be terminated
  immediately.

  User agents may allow users to specifically disable scripts just for the purposes of closing a
  <a>browsing context</a>.

  <p class="example">
  For example, the prompt mentioned in the example above could also offer the
  user with a mechanism to just close the page entirely, without running any <code>unload</code> event handlers.
  </p>

<h5 id="integration-with-the-javascript-job-queue">Integration with the JavaScript job queue</h5>

  The JavaScript specification defines the JavaScript job and job queue abstractions in order to
  specify certain invariants about how promise operations execute with a clean <a>JavaScript
  execution context stack</a> and in a certain order. However, as of the time of this writing
  the definitions of <a>EnqueueJob</a> and <a>NextJob</a> in that specification are not sufficiently flexible to
  integrate with HTML as a host environment. [[!ECMA-262]]

  <p class="note">
    This is not strictly true. It is in fact possible, by taking liberal advantage of
    the many "implementation defined" sections of those algorithms, to contort them to our purposes.
    However, the end result is a mass of messy indirection and workarounds that essentially bypasses
    the job queue infrastructure entirely, albeit in a way that is technically sanctioned within the
    bounds of implementation-defined behavior. We do not take this path, and instead introduce the
    following <a>willful violations</a>.
  </p>

  As such, user agents must instead use the following definitions in place of those in the
  JavaScript specification. These ensure that the promise jobs enqueued by the JavaScript
  specification are properly integrated into the user agent's <a>event
  loops</a>.

<h6 id="enqueusjob"><dfn>EnqueueJob</dfn>(<var>queueName</var>, <var>job</var>, <var>arguments</var>)</h6>

  When the JavaScript specification says to call the EnqueueJob abstract operation, the
  following algorithm must be used in place of JavaScript's <a>EnqueueJob</a>:

  <ol>
   <li>Assert: <var>queueName</var> is <code>"PromiseJobs"</code>. (<code>"ScriptJobs"</code> must not be used by user agents.)</li>
   <li>Let <var>settings</var> be the <a>settings object</a> of the script corresponding to the running execution context.</li>
   <li>
    <a>Queue a microtask</a>, on <var>settings</var>'s <a>responsible event
    loop</a>, to perform the following steps:</p>

    <ol>
     <li><a>Prepare to run a callback</a> with <var>settings</var>. If this returns "do
     not run" then abort these steps.</li>
     <li>Performing the abstract operation specified by <var>job</var>, using the elements of
     <var>arguments</var> as its arguments.</li>
     <li><a>Clean up after running a callback</a> with <var>settings</var>.</li>
    </ol>
   </li>
  </ol>

<h6 id="nextjob-result"><dfn>NextJob</dfn> <var>result</var></h6>

  When the JavaScript specification uses the algorithm step NextJob, the following steps must be
  used in place of those specified by JavaScript's <a>NextJob</a>:

  <ol>
   <li>If <var>result</var> is an abrupt completion, <a>report the exception</a> given by
   <var>result</var>.\[[value]].</li>
  </ol>

  <p class="note">A more accurate name for our overridden version of NextJob would be along the
  lines of "yield to host environment" or "allow host environment to react to job results". The
  process of actually initiating the next job will be taken care of by the <a>event
  loop</a>.</p>

  </div>

<h5 id="sec-runtime-script-errors"><dfn>Runtime script errors</dfn></h5>

  <div class="impl">

  When the user agent is required to <dfn>report an error</dfn> for a
  particular <a>script</a> <var>script</var> with a particular
  position <var>line</var>:<var>col</var>, using a particular target <var>target</var>, it must run these steps, after which the error is either <dfn><i>handled</i></dfn> or <dfn><i>not
  handled</i></dfn>:

  <ol>

    <li>If <var>target</var> is <a>in error reporting mode</a>, then abort these
    steps; the error is <i>not handled</i>.</li>

    <li>Let <var>target</var> be <dfn>in error reporting mode</dfn>.</li>

    <li>Let <var>message</var> be a user-agent-defined string describing the error in a
    helpful manner.

    </li>

    <li>Let <var>error object</var> be the object that represents the error: in the case of an
    uncaught exception, that would be the object that was thrown; in the case of a JavaScript error
    that would be an <code>Error</code> object. If there is no corresponding
    object, then the null value must be used instead.</li>

    <li>

    Let <var>location</var> be an <a>absolute URL</a> that corresponds to the
    resource from which <var>script</var> was obtained.

    <p class="note">
  The resource containing the script will typically be the file from which the
    <code>Document</code> was parsed, e.g., for inline <{script}> elements or <a>event
    handler content attributes</a>; or the JavaScript file that the script was in, for external
    scripts. Even for dynamically-generated scripts, user agents are strongly encouraged to attempt
    to keep track of the original source of a script. For example, if an external script uses the
    <a method lt="write()"><code>document.write()</code></a> API to insert an inline
    <{script}> element during parsing, the URL of the resource containing the script would
    ideally be reported as being the external script, and the line number might ideally be reported
    as the line with the <a method lt="write()"><code>document.write()</code></a> call or where the
    string passed to that call was first constructed. Naturally, implementing this can be somewhat
    non-trivial.
  </p>

    <p class="note">
  User agents are similarly encouraged to keep careful track of the original line
    numbers, even in the face of <a method lt="write()"><code>document.write()</code></a> calls
    mutating the document as it is parsed, or <a>event handler content attributes</a> spanning
    multiple lines.
  </p>

    </li>

    <li>If <var>script</var> has <a>muted errors</a>, then set <var>message</var> to "<code>Script error.</code>", set <var>location</var>
    to the empty string, set <var>line</var> and <var>col</var> to 0, and set <var>error object</var> to null.</li>

    <li>Let <var>event</var> be a new <a>trusted</a>
    <code>ErrorEvent</code> object that does not bubble but is cancelable, and which has the event
    name <code>error</code>.</li>

    <li>Initialize <var>event</var>'s <code>message</code>
    attribute to <var>message</var>.</li>

    <li>Initialize <var>event</var>'s <code>filename</code> attribute to <var>location</var>.</li>

    <li>Initialize <var>event</var>'s <code>lineno</code>
    attribute to <var>line</var>.</li>

    <li>Initialize <var>event</var>'s <code>colno</code>
    attribute to <var>col</var>.</li>

    <li>Initialize <var>event</var>'s <code>error</code>
    attribute to <var>error object</var>.</li>

    <li><a>Dispatch</a> <var>event</var> at <var>target</var>.</li>

    <li>Let <var>target</var> no longer be <a>in error reporting mode</a>.</li>

    <li>If <var>event</var> was canceled, then the error is <i>handled</i>. Otherwise, the error is <i>not handled</i>.

  </ol>

<h6 id="runtime-script-errors-in-documents">Runtime script errors in documents</h6>

  When the user agent is to <dfn lt="report the exception|report an exception">report an exception</dfn>
  <var>E</var>, the user agent must report the error for the relevant <a>script</a>, with the problematic position (line number and column
  number) in the resource containing the script, using the <a>global object</a> specified by
  the script's <a>settings object</a> as the target. If the error is still <i>not handled</i> after this, then the error may be reported to
  the user.

  When an exception is thrown during the execution of one of the scripts associated with a
  {{Document}}, and the exception is not caught, the user agent must <a>report the
  exception</a>.

<h6 id="the-errorevent-interface">The <code>ErrorEvent</code> interface</h6>

  </div>

  <pre class="idl" data-highlight="webidl" dfn-for="ErrorEvent">
    [Constructor(DOMString type, optional ErrorEventInit eventInitDict), Exposed=(Window, Worker)]
    interface ErrorEvent : Event {
      readonly attribute DOMString message;
      readonly attribute DOMString filename;
      readonly attribute unsigned long lineno;
      readonly attribute unsigned long colno;
      readonly attribute any error;
    };
  </pre>

  <pre class="idl" data-highlight="webidl" dfn-for="ErrorEventInit">
    dictionary ErrorEventInit : EventInit {
      DOMString message;
      DOMString filename;
      unsigned long lineno;
      unsigned long colno;
      any error;
    };
  </pre>

  The <dfn attribute for="ErrorEvent"><code>message</code></dfn> attribute must return the
  value it was initialized to. When the object is created, this attribute must be initialized to the
  empty string. It represents the error message.

  The <dfn attribute for="ErrorEvent"><code>filename</code></dfn> attribute must return the
  value it was initialized to. When the object is created, this attribute must be initialized to the
  empty string. It represents the <a>absolute URL</a> of the script in which the error
  originally occurred.

  The <dfn attribute for="ErrorEvent"><code>lineno</code></dfn> attribute must return the
  value it was initialized to. When the object is created, this attribute must be initialized to
  zero. It represents the line number where the error occurred in the script.

  The <dfn attribute for="ErrorEvent"><code>colno</code></dfn> attribute must return the value
  it was initialized to. When the object is created, this attribute must be initialized to zero. It
  represents the column number where the error occurred in the script.

  The <dfn attribute for="ErrorEvent"><code>error</code></dfn> attribute must return the value
  it was initialized to. When the object is created, this attribute must be initialized to null.
  Where appropriate, it is set to the object representing the error (e.g., the exception object in
  the case of an uncaught DOM exception).

<h5 id="sec-unhandled-promise-rejections"><dfn>Unhandled promise rejections</dfn></h5>

  In addition to synchronous <a>runtime script errors</a>, scripts
  may experience asynchronous promise rejections, tracked via the <code>unhandledrejection</code> and <code>rejectionhandled</code> events.

  When the user agent is to <dfn>notify about rejected promises</dfn> on a given
  <a>environment settings object</a> <var>settings object</var>, it must run these steps:

  <ol>

    <li>Let <var>list</var> be a copy of <var>settings object</var>'s <a>about-to-be-notified
    rejected promises list</a>.</li>

    <li>If <var>list</var> is empty, abort these steps.</li>

    <li>Clear <var>settings object</var>'s <a>about-to-be-notified rejected promises
    list</a>.</li>

    <li>

    <p><a>Queue a task</a> to run the following substep:</p>

    <ol>

      <li>For each promise <var>p</var> in <var>list</var>:

      <ol>

        <li>If <var>p</var>'s \[[PromiseIsHandled]] internal slot is true, continue to the next
        iteration of the loop.</li>

        <li>Let <var>event</var> be a new <a>trusted</a>
        <code>PromiseRejectionEvent</code> object that does not bubble but is cancelable, and which
        has the event name <code>unhandledrejection</code>.</li>

        <li>Initialise <var>event</var>'s <code>promise</code> attribute to <var>p</var>.</li>

        <li>Initialise <var>event</var>'s <code>reason</code> attribute to the value of
        <var>p</var>'s \[[PromiseResult]] internal slot.</li>

        <li><a>Dispatch</a> <var>event</var> at <var>settings object</var>'s <a>global
        object</a>.</li>

        <li>If the event was canceled, then the promise rejection is <i>handled</i>. Otherwise, the promise rejection is
        <i>not handled</i>.</li>

        <li>If <var>p</var>'s \[[PromiseIsHandled]] internal slot is false, add <var>p</var> to
        <var>settings object</var>'s <a>outstanding rejected promises weak set</a>.

      </ol>
      </li>
    </ol>
    </li>

  </ol>

  <p>This algorithm results in promise rejections being marked as <a><i>handled</i></a> or <a><i>not handled</i></a>. These concepts parallel
  <i>handled</i> and <i>not
  handled</i> script errors. If a rejection is still <i>not handled</i> after this, then the rejection may
  be reported to a developer console.</p>

<h6 id="the-hostpromiserejectiontracker-implementation">The HostPromiseRejectionTracker implementation</h6>

  <p>ECMAScript contains an implementation-defined HostPromiseRejectionTracker(<var>promise</var>,
  <var>operation</var>) abstract operation. User agents must use the following implementation:
  [[!ECMA-262]]</p>

  <ol>

   <li>
    Let <var>script</var> be the <a>script</a> corresponding
    to the running execution context.

    <div class="note">The exact mechanism for correlating ECMAScript's notion of execution contexts
    and HTML's notion of <a>scripts</a> is not yet well-defined.</div>
   </li>

   <li>If <var>script</var> has <a>muted errors</a>, terminate these steps.</li>

   <li>Let <var>settings object</var> be <var>script</var>'s <a>settings object</a>.
   </li>

   <li>
    <p>If <var>operation</var> is <code>"reject"</code>,

    <ol>
     <li>Add <var>promise</var> to <var>settings object</var>'s <a>about-to-be-notified
     rejected promises list</a>.</li>
    </ol>
   </li>

   <li>
    <p>If <var>operation</var> is <code>"handle"</code>,

    <ol>

     <li>If <var>settings object</var>'s <a>about-to-be-notified rejected promises
     list</a> contains <var>promise</var>, remove <var>promise</var> from that list and abort
     these steps.</li>

     <li>If <var>settings object</var>'s <a>outstanding rejected promises weak set</a>
     does not contain <var>promise</var>, abort these steps.</li>

     <li>Remove <var>promise</var> from <var>settings object</var>'s <a>outstanding rejected
     promises weak set</a>.</li>

     <li>
      <p><a>Queue a task</a> to run the following steps:</p>

      <ol>

       <li>Let <var>event</var> be a new <a>trusted</a>
       <code>PromiseRejectionEvent</code> object that does not bubble and is not cancelable, and
       which has the event name <code>rejectionhandled</code>.</li>

       <li>Initialise <var>event</var>'s <code>promise</code> attribute to
       <var>promise</var>.</li>

       <li>Initialise <var>event</var>'s <code>reason</code> attribute to the value of
       <var>promise</var>'s \[[PromiseResult]] internal slot.</li>

       <li><a>Dispatch</a> <var>event</var> at <var>settings object</var>'s <a>global
       object</a>.</li>

      </ol>
     </li>
    </ol>
   </li>
  </ol>

<h6 id="the-promiserejectionevent-interface">The <code>PromiseRejectionEvent</code> interface</h6>

  <pre class="idl" data-highlight="webidl" data-for="PromiseRejectionEvent">
    [Constructor(DOMString type, PromiseRejectionEventInit eventInitDict), Exposed=(Window,Worker)]
    interface PromiseRejectionEvent : Event {
      readonly attribute Promise&lt;any&gt; promise;
      readonly attribute any reason;
    };
  </pre>

  <pre class="idl" data-highlight="webidl" data-for="PromiseRejectionEventInit">
    dictionary PromiseRejectionEventInit : EventInit {
      required Promise&lt;any&gt; promise;
      any reason;
    };
  </pre>

  <p>The <dfn attribute for="PromiseRejectionEvent"><code>promise</code></dfn> attribute must
  return the value it was initialized to. It represents the promise which this notification is about.</p>

  <p>The <dfn attribute for="PromiseRejectionEvent"><code>reason</code></dfn> attribute must
  return the value it was initialized to. It represents the rejection reason for the promise.</p>

  <div class="impl">

<h4 id="event-loops">Event loops</h4>

<h5 id="event-loops-definitions">Definitions</h5>

  To coordinate events, user interaction, scripts, rendering, networking, and so forth, user
  agents must use <dfn lt="event loop|event loops">event loops</dfn> as described in this section. There are
  two kinds of event loops: those for <a>browsing contexts</a>, and
  those for {{worker|workers}}.

  There must be at least one <a>browsing context</a> <a>event loop</a> per user
  agent, and at most one per <a>unit of related similar-origin browsing contexts</a>.

  <p class="note">
  When there is more than one <a>event loop</a> for a <a>unit of related
  browsing contexts</a>, complications arise when a <a>browsing context</a> in that group
  is <a>navigated</a> such that it switches from one <a>unit of related
  similar-origin browsing contexts</a> to another. This specification does not currently describe
  how to handle these complications.
  </p>

  A <a>browsing context</a> <a>event loop</a> always has at least one <a>browsing
  context</a>. If such an <a>event loop</a>'s <a>browsing
  contexts</a> all go away, then the <a>event loop</a> goes away as well. A <a>browsing
  context</a> always has an <a>event loop</a> coordinating its activities.

  <a>Worker event loops</a> are simpler: each worker has one
  <a>event loop</a>, and the <a>worker processing model</a>
  manages the <a>event loop</a>'s lifetime.

  <hr />

  An <a>event loop</a> has one or more <dfn>task queues</dfn>. A
  <a>task queue</a> is an ordered list of <dfn>tasks</dfn>, which are
  algorithms that are responsible for such work as:

  <dl>

    <dt>Events</dt>

    <dd>

    Dispatching an <code>Event</code> object at a particular
    <code>EventTarget</code> object is often done by a dedicated task.

    <p class="note">
  Not all events are dispatched using the <a>task queue</a>, many are
    dispatched during other tasks.
  </p>

    </dd>

    <dt>Parsing</dt>

    <dd>The <a>HTML parser</a> tokenizing one or more bytes, and then processing any
    resulting tokens, is typically a task.</dd>

    <dt>Callbacks</dt>

    <dd>Calling a callback is often done by a dedicated task.</dd>

    <dt>Using a resource</dt>

    <dd>When an algorithm <a>fetches</a> a resource, if the fetching
    occurs in a non-blocking fashion then the processing of the resource once some or all of the
    resource is available is performed by a task.</dd>

    <dt>Reacting to DOM manipulation</dt>

    <dd>Some elements have tasks that trigger in response to DOM manipulation, e.g., when that
    element is <a for="document">inserted into the document</a>.

  </dl>

  Each <a>task</a> in a <a>browsing context</a> <a>event loop</a> is associated with a <code>Document</code>; if the task was queued in the context of
  an element, then it is the element's <a>node document</a>; if the task was queued in the context
  of a <a>browsing context</a>, then it is the <a>browsing context</a>'s <a>active
  document</a> at the time the task was queued; if the task was queued by or for a <a>script</a> then the document is the <a>responsible document</a>
  specified by the script's <a>settings object</a>.

  A <a>task</a> is intended for a specific <a>event loop</a>:
  the <a>event loop</a> that is handling <a>tasks</a> for the
  <a>task</a>'s associated <code>Document</code> or {{worker}}.

  When a user agent is to <dfn lt="queuing|queue a task|queues a task">queue a task</dfn>, it must add the given task to one of the <a>task queues</a> of the relevant <a>event loop</a>.

  Each <a>task</a> is defined as coming from a specific <dfn>task
  source</dfn>. All the tasks from one particular <a>task source</a> and destined to a
  particular <a>event loop</a> (e.g., the callbacks generated by timers of a
  {{Document}}, the events fired for mouse movements over that {{Document}}, the
  tasks queued for the parser of that <code>Document</code>) must always be added to the same
  <a>task queue</a>, but <a>tasks</a> from different <a>task sources</a> may be placed in different <a>task
  queues</a>.

  <p class="example">
  For example, a user agent could have one <a>task queue</a> for mouse and
  key events (the <a>user interaction task source</a>), and another for everything else. The
  user agent could then give keyboard and mouse events preference over other tasks three quarters of
  the time, keeping the interface responsive but not starving other task queues, and never
  processing events from any one <a>task source</a> out of order.
  </p>

  Each <a>event loop</a> has a <dfn>currently running task</dfn>. Initially, this is null.
  It is used to handle reentrancy. Each <a>event loop</a> also has a <dfn>performing a
  microtask checkpoint</dfn> flag, which must initially be false. It is used to prevent reentrant
  invocation of the <a>perform a microtask checkpoint</a> algorithm.

<h5 id="event-loops-processing-model">Processing model</h5>

  An <a>event loop</a> must continually run through the following steps for as long as it
  exists:

  <ol>

    <li>

    Select the oldest <a>task</a> on one of the <a>event loop</a>'s <a>task queues</a>, if any, ignoring, in the case of a
    <a>browsing context</a> <a>event loop</a>, tasks whose associated
    <code>Document</code>s are not <a>fully active</a>. The user agent may pick any <a>task
    queue</a>. If there is no task to select, then jump to the <i>microtasks</i> step below.

    </li>

    <li>Set the <a>event loop</a>'s <a>currently running task</a> to the <a>task</a> selected in the previous step.</li>

    <li><i>Run</i>: Run the selected <a>task</a>.</li>

    <li>Set the <a>event loop</a>'s <a>currently running task</a> back to
    null.</li>

    <li>Remove the task that was run in the <i>run</i> step above from its <a>task
    queue</a>.</li>

    <li><i>Microtasks</i>: <a>Perform a microtask checkpoint</a>.</li>

    <li>

    <i>Update the rendering</i>: If this <a>event loop</a> is a <a>browsing
    context</a> <a>event loop</a> (as opposed to a {{worker}}
    <a>event loop</a>), then run the following substeps.

    <ol>

      <li>Let <var>now</var> be the value that would be returned by the <code>Performance</code>
      object's {{Performance/now|now()}} method. [[!HR-TIME-2]]

      <li>

      Let <var>docs</var> be the list of <code>Document</code> objects associated with the
      <a>event loop</a> in question, sorted arbitrarily except that the following conditions
      must be met:

      <ul>

        <li>Any <code>Document</code> <var>B</var> that is <a>nested through</a> a
        <code>Document</code> <var>A</var> must be listed after <var>A</var> in the list.</li>

        <li>If there are two documents <var>A</var> and <var>B</var> whose <a>browsing contexts</a> are both <a>nested
        browsing contexts</a> and their <a>browsing context
        containers</a> are both elements in the same <code>Document</code> <var>C</var>, then the
        order of <var>A</var> and <var>B</var> in the list must match the relative <a>tree
        order</a> of their respective <a>browsing context
        containers</a> in <var>C</var>.</li>

      </ul>

      In the steps below that iterate over <var>docs</var>, each <code>Document</code> must be
      processed in the order it is found in the list.

      </li>

      <li>

      If there is a <a>top-level browsing context</a> <var>B</var> that the user agent
      believes would not benefit from having its rendering updated at this time, then remove from
      <var>docs</var> all <code>Document</code> objects whose <a>browsing context</a>'s
      <a>top-level browsing context</a> is <var>B</var>.

      <p class="note">
  Whether a <a>top-level browsing context</a> would benefit from having
      its rendering updated depends on various factors, such as the update frequency. For example,
      if the browser is attempting to achieve a 60 Hz refresh rate, then these steps are only
      necessary every 60th of a second (about 16.7ms). If the browser finds that a <a>top-level
      browsing context</a> is not able to sustain this rate, it might drop to a more sustainable
      30Hz for that set of <code>Document</code>s, rather than occasionally dropping frames. (This
      specification does not mandate any particular model for when to update the rendering.)
      Similarly, if a <a>top-level browsing context</a> is in the background, the user agent
      might decide to drop that page to a much slower 4Hz, or even less.
  </p>

      </li>

      <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <dfn>run the resize steps</dfn> for
      that {{Document}}, passing in <var>now</var> as the timestamp. [[!CSSOM-VIEW]]</li>

      <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <dfn>run the scroll steps</dfn> for
      that {{Document}}, passing in <var>now</var> as the timestamp. [[!CSSOM-VIEW]]</li>

      <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <dfn>evaluate media queries and
      report changes</dfn> for that {{Document}}, passing in <var>now</var> as the
      timestamp. [[!CSSOM-VIEW]]</li>

      <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <dfn>run CSS animations and send
      events</dfn> for that {{Document}}, passing in <var>now</var> as the timestamp. [[CSS3-ANIMATIONS]]</li>

      <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <dfn>run the fullscreen rendering
      steps</dfn> for that {{Document}}, passing in <var>now</var> as the timestamp. [[!FULLSCREEN]]</li>

      <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, <a>run the animation frame callbacks</a> for that {{Document}}, passing in <var>now</var> as the
      timestamp.</li>

      <li>For each <a>fully active</a> <code>Document</code> in <var>docs</var>, update the rendering or user
      interface of that <code>Document</code> and its <a>browsing context</a> to reflect the
      current state.</li>

    </ol>

    </li>

    <li>If this is a {{worker}} <a>event loop</a> (i.e., one running for a
    <code>WorkerGlobalScope</code>), but there are no <a>tasks</a> in the
    <a>event loop</a>'s <a>task queues</a> and the
    <code>WorkerGlobalScope</code> object's closing flag is true, then destroy the <a>event loop</a>, aborting these steps, resuming the <a>run a worker</a> steps.</li>

    <li>Return to the first step of the <a>event loop</a>.</li>

  </ol>

  <hr />

  Each <a>event loop</a> has a <dfn>microtask queue</dfn>. A <dfn>microtask</dfn> is a
  <a>task</a> that is originally to be queued on the <a>microtask
  queue</a> rather than a <a>task queue</a>. There are two kinds of <a>microtasks</a>: <dfn>solitary callback microtasks</dfn>, and <dfn>compound microtasks</dfn>.

  <p class="note">
  This specification only has <a>solitary callback microtasks</a>. Specifications that use <a>compound
  microtasks</a> have to take extra care to <a>wrap callbacks</a> to handle <a>spinning the event
  loop</a>.
  </p>

  When an algorithm requires a <a>microtask</a> to be <dfn lt="queue a microtask|queued">queued</dfn>, it must be appended to the relevant <a>event loop</a>'s
  <a>microtask queue</a>; the <a>task source</a> of such a <a>microtask</a> is the
  <dfn>microtask task source</dfn>.

  <p class="note">
  It is possible for a <a>microtask</a> to be moved to a regular <a>task queue</a>, if, during its
  initial execution, it <a>spins the event loop</a>. In that case, the <a>microtask task source</a>
  is the <a>task source</a> used. Normally, the <a>task source</a> of a <a>microtask</a> is
  irrelevant.
  </p>

  When a user agent is to <dfn lt="performs a microtask checkpoint|perform a microtask checkpoint">perform a microtask checkpoint</dfn>, if the <a>performing a
  microtask checkpoint</a> flag is false, then the user agent must run the following steps:

  <ol>

    <li>Let the <a>performing a microtask checkpoint</a> flag be true.</li>

    <li><i>Microtask queue handling</i>: If the <a>event loop</a>'s <a>microtask
    queue</a> is empty, jump to the <i>done</i> step below.</li>

    <li>Select the oldest <a>microtask</a> on the <a>event loop</a>'s <a>microtask
    queue</a>.</li>

    <li>Set the <a>event loop</a>'s <a>currently running task</a> to the <a>task</a> selected in the previous step.</li>

    <li>

    <i>Run</i>: Run the selected <a>task</a>.

    <p class="note">
  This might involve invoking scripted callbacks, which eventually calls the
    <a>clean up after running a callback</a> steps, which call this <a>perform a microtask
    checkpoint</a> algorithm again, which is why we use the <a>performing a microtask
    checkpoint</a> flag to avoid reentrancy.
  </p>

    </li>

    <li>Set the <a>event loop</a>'s <a>currently running task</a> back to
    null.</li>

    <li>Remove the <a>microtask</a> run in the step above from the <a>microtask
    queue</a>, and return to the <i>microtask queue handling</i> step.</li>

    <li><i>Done</i>: For each <a>environment settings object</a> whose <a>responsible
    event loop</a> is this <a>event loop</a>, <a>notify about rejected promises</a>
    on that <a>environment settings object</a>.</li>

    <li>Let the <a>performing a microtask checkpoint</a> flag be false.</li>

  </ol>

  If, while a <a>compound microtask</a> is running, the user agent is required to
  <dfn lt="wrap callbacks|execute a compound microtask subtask">execute a compound microtask subtask</dfn> to run a series of steps, the user agent must run
  the following steps:

  <ol>

    <li>Let <var>parent</var> be the <a>event loop</a>'s <a>currently running
    task</a> (the currently running <a>compound microtask</a>).</li>

    <li>Let <var>subtask</var> be a new <a>task</a> that
    consists of running the given series of steps. The <a>task source</a> of such a
    <a>microtask</a> is the <a>microtask task source</a>. This is a <dfn>compound
    microtask subtask</dfn>.</li>

    <li>Set the <a>event loop</a>'s <a>currently running task</a> to <var>subtask</var>.</li>

    <li>Run <var>subtask</var>.</li>

    <li>Set the <a>event loop</a>'s <a>currently running task</a> back to <var>parent</var>.</li>

  </ol>

  <hr />

  When an algorithm running <a>in parallel</a> is to <dfn lt="provides a stable state|await a stable state">await a stable state</dfn>, the
  user agent must <a>queue a microtask</a> that runs the following steps, and must then stop
  executing (execution of the algorithm resumes when the microtask is run, as described in the
  following steps):

  <ol>

    <li>Run the algorithm's <dfn lt="synchronous section|synchronous sections">synchronous section</dfn>.</li>

    <li>Resumes execution of the algorithm <a>in parallel</a>, if appropriate, as described
    in the algorithm's steps.</li>

  </ol>

  <p class="note">
  Steps in <a>synchronous sections</a> are marked
  with &#x231B;.
  </p>

  <hr />

  When an algorithm says to <dfn lt="spinning the event loop|spin the event loop|spins the event loop">spin the event loop</dfn> until a condition <var>goal</var> is met, the user agent must run the following steps:

  <ol>

    <li>

    Let <var>task</var> be the <a>event loop</a>'s <a>currently running
    task</a>.

    <p class="note">
  This might be a <a>microtask</a>, in which case it is a <a>solitary
    callback microtask</a>. It could also be a <a>compound microtask subtask</a>, or a
    regular <a>task</a> that is not a <a>microtask</a>. It will
    <em>not</em> be a <a>compound microtask</a>.
  </p>

    </li>

    <li>Let <var>task source</var> be <var>task</var>'s <a>task
    source</a>.</li>

    <li>Let <var>old stack of script settings objects</var> be a copy of the <a>stack
    of script settings objects</a>.</li>

    <li>Empty the <a>stack of script settings objects</a>.</li>

    <li><a>Run the global script clean-up jobs</a>.</li>

    <li><a>Perform a microtask checkpoint</a>.</li>

    <li>

    Stop <var>task</var>, allowing whatever algorithm that invoked it to resume, but
    continue these steps <a>in parallel</a>.

    <p class="note">
  This causes one of the following algorithms to continue: the <a>event loop</a>'s main set of steps, the <a>perform a microtask checkpoint</a> algorithm, or
    the <a>execute a compound microtask subtask</a> algorithm to continue.
  </p>

    </li>

    <li>Wait until the condition <var>goal</var> is met.</li>

    <li><a>Queue a task</a> to continue running these steps, using the <a>task
    source</a> <var>task source</var>. Wait until this new task runs before continuing
    these steps.</li>

    <li>Replace the <a>stack of script settings objects</a> with the <var>old
    stack of script settings objects</var>.</li>

    <li>Return to the caller.</li>

  </ol>

  <hr />

  Some of the algorithms in this specification, for historical reasons, require the user agent to
  <dfn state for="useragent" lt="Pause|pause">pause</dfn> while running a <a>task</a> until a condition <var>goal</var> is met. This means running the following steps:

  <ol>

    <li>If necessary, update the rendering or user interface of any <code>Document</code> or
    <a>browsing context</a> to reflect the current state.</li>

    <li>Wait until the condition <var>goal</var> is met. While a user agent has a paused
    <a>task</a>, the corresponding <a>event loop</a> must not run
    further <a>tasks</a>, and any script in the currently running <a>task</a> must block. User agents should remain responsive to user input
    while paused, however, albeit in a reduced capacity since the <a>event loop</a> will not be
    doing anything.</li>

  </ol>

<h5 id="generic-task-sources">Generic task sources</h5>

  The following <a>task sources</a> are used by a number of mostly
  unrelated features in this and other specifications.

  <dl>

    <dt>The <dfn>DOM manipulation task source</dfn></dt>

    <dd>

    This <a>task source</a> is used for features that react to DOM manipulations, such as
    things that happen in a non-blocking fashion when an element is <a for="document">inserted into the document</a>.

    </dd>

    <dt>The <dfn>user interaction task source</dfn></dt>

    <dd>

    This <a>task source</a> is used for features that react to user interaction, for
    example keyboard or mouse input.

    Events sent in response to user input (e.g., <code>click</code> events) must be fired using <a>tasks</a> <a>queued</a> with the <a>user
    interaction task source</a>. [[!UIEVENTS]]

    </dd>

    <dt>The <dfn>networking task source</dfn></dt>

    <dd>

    This <a>task source</a> is used for features that trigger in response to network
    activity.

    </dd>

    <dt>The <dfn>history traversal task source</dfn></dt>

    <dd>

    This <a>task source</a> is used to queue calls to <code>history.back()</code> and similar APIs.

    </dd>

  </dl>

  </div>

<h4 id="events">Events</h4>

<h5 id="events-event-handlers">Event handlers</h5>

  Many objects can have <dfn lt="event handler|event handlers">event handlers</dfn> specified. These act as non-capture event
  listeners for the object on which they are specified. [[!DOM]]

  An <a>event handler</a> has a name, which always starts with
  "<code>on</code>" and is followed by the name of the event for which it is intended.

  An <a>event handler</a> has a value, which is either null, or is a callback
  object<span class="impl">, or is an <a>internal raw uncompiled handler</a></span>. The
  <code>EventHandler</code> callback function type describes how this is exposed to scripts.
  <span class="impl">Initially, an <a>event handler</a>'s value must be set to null.</span>

  Event handlers are exposed in one of two ways.

  The first way, common to all event handlers, is as an <a>event handler IDL attribute</a>.

  The second way is as an <a>event handler content
  attribute</a>. Event handlers on <a>html elements</a> and some of the event handlers on
  <code>Window</code> objects are exposed in this way.

  <div class="impl">

  <hr />

  An <dfn for="event handler idl" lt="event handler IDL attribute|event handler IDL attributes">event handler IDL attribute</dfn> is an IDL
  attribute for a specific <a>event handler</a>. The name of the IDL
  attribute is the same as the name of the <a>event handler</a>.

  <a>Event handler IDL attributes</a>, on setting, must set the corresponding <a>event handler</a> to their new value, and on getting, must return the
  result of <a>getting the current value of the event handler</a> in question (this can throw
  an exception, in which case the getting propagates it to the caller, it does not catch it).

  If an <a>event handler IDL attribute</a> exposes an
  <a>event handler</a> of an object that doesn't exist, it must always
  return null on getting and must do nothing on setting.

  <p class="note">
  This can happen in particular for <a>event
  handler IDL attribute</a> on <{body}> elements that do not have corresponding
  <code>Window</code> objects.
  </p>

  <p class="note">
  Certain event handler IDL attributes have additional requirements, in particular
  the <code>onmessage</code> attribute of
  <code>MessagePort</code> objects.
  </p>

  <hr />

  </div>

  An <dfn for="event handler content" lt="event handler content attribute|event handler content attributes">event handler content attribute</dfn> is a
  content attribute for a specific <a>event handler</a>. The name of
  the content attribute is the same as the name of the <a>event
  handler</a>.

  <a>Event handler content attributes</a>, when specified, must contain valid JavaScript
  code which, when parsed, would match the <code>FunctionBody</code> production after
  automatic semicolon insertion. [[!ECMA-262]]

  <div class="impl">

  When an <a>event handler content attribute</a>
  is set, execute the following steps:</p>

  1. If the Should element's inline behavior be blocked by Content Security Policy? algorithm
      returns "<code>Blocked</code>" when executed upon the attribute's element and
      "<code>script attribute</code>", then abort these steps. [[CSP]]
  2. Set the corresponding <a>event handler</a> to an <a>internal raw uncompiled handler</a>
      consisting of the attribute's new value and the script location where the attribute was set to
      this value

  When an <a>event handler content attribute</a> is removed, the user agent must set the corresponding
  <a>event handler</a> to null.

  <hr />

  When an <a>event handler</a> <var>H</var> of an element
  or object <var>T</var> implementing the <code>EventTarget</code> interface is first set
  to a non-null value, the user agent must append an <a>event
  listener</a> to the list of <a>event listeners</a>
  associated with <var>T</var> with <i>type</i> set to the <dfn>event handler event
  type</dfn> corresponding to <var>H</var>, <i>capture</i> set to false, and
  <i>callback</i> set to <a>the event handler processing algorithm</a> defined below. [[!DOM]]

  <p class="note">
  The <i>callback</i> is emphatically <em>not</em> the <a>event handler</a> itself. Every event handler ends up registering the same
  <i>callback</i>, the algorithm defined below, which takes care of invoking the right callback, and
  processing the callback's return value.
  </p>

  <p class="note">
  This only happens the first time the <a>event
  handler</a>'s value is set. Since listeners are called in the order they were registered, the
  order of event listeners for a particular event type will always be first the event listeners
  registered with <code>addEventListener()</code> before
  the first time the <a>event handler</a> was set to a non-null value,
  then the callback to which it is currently set, if any, and finally the event listeners registered
  with <code>addEventListener()</code> <em>after</em> the
  first time the <a>event handler</a> was set to a non-null value.
  </p>

  </div>

  <div class="example">
    This example demonstrates the order in which event listeners are invoked. If the button in
    this example is clicked by the user, the page will show four alerts, with the text "ONE", "TWO",
    "THREE", and "FOUR" respectively.

    <pre highlight="html">
  &lt;button>Start Demo&lt;/button>
  &lt;script>
  var button = document.getElementById('test');
  button.addEventListener('click', function () { alert('ONE') }, false);
  button.setAttribute('onclick', "alert('NOT CALLED')"); // event handler listener is registered here
  button.addEventListener('click', function () { alert('THREE') }, false);
  button.onclick = function () { alert('TWO'); };
  button.addEventListener('click', function () { alert('FOUR') }, false);
  &lt;/script>
  </pre>
  </div>

  <div class="impl">

  <p class="note">
  The interfaces implemented by the event object do not influence whether an <a>event handler</a> is triggered or not.
  </p>

  <dfn>The event handler processing algorithm</dfn> for an <a>event
  handler</a> <var>H</var> and an <code>Event</code> object <var>E</var> is as
  follows:

  <ol>

    <li>

    Let <var>callback</var> be the result of <a>getting the current value of the
    event handler</a> <var>H</var>.

    </li>

    <li>If <var>callback</var> is null, then abort these steps.</li>

    <li>

    Process the <code>Event</code> object <var>E</var> as follows:

    <dl class="switch">

      <dt>If <var>E</var> is an <code>ErrorEvent</code> object and the <a>event handler IDL attribute</a>'s type is
      <code>OnErrorEventHandler</code></dt>

      <dd>

      <a>Invoke</a> <var>callback</var> with five
      arguments, the first one having the value of <var>E</var>'s <code>message</code> attribute, the second having the value of
      <var>E</var>'s <code>filename</code> attribute, the third
      having the value of <var>E</var>'s <code>lineno</code>
      attribute, the fourth having the value of <var>E</var>'s <code>colno</code> attribute, the fifth having the value of
      <var>E</var>'s <code>error</code> attribute, and with the <a spec="webidl">Callback this value</a> set to <var>E</var>'s <code>currentTarget</code>. Let <var>return value</var> be the
      callback's return value. [[!WEBIDL]]

      </dd>

      <dt>Otherwise</dt>

      <dd>

      <a>Invoke</a> <var>callback</var>
      with one argument, the value of which is the <code>Event</code> object <var>E</var>,
      with the <a spec="webidl">Callback this value</a> set to <var>E</var>'s <code>currentTarget</code>. Let <var>return value</var> be the callback's return value. [[!WEBIDL]]

      </dd>

    </dl>

    In this step, <dfn>invoke</dfn> means to <a>invoke the Web IDL callback function</a>.

    If an exception gets thrown by the callback, end these steps and allow the exception to
    propagate. (It will propagate to the <a>DOM event dispatch
    logic</a>, which will then <a>report the exception</a>.)

    </li>

    <li>

    Process <var>return value</var> as follows:

    <dl class="switch">

      <dt>If the event type is <code>mouseover</code></dt>
      <dt>If the event type is <code>error</code> and <var>E</var> is an <code>ErrorEvent</code> object</dt>

      <dd>If <var>return value</var> is a Web IDL boolean true value, then cancel the event.</dd>

      <dt>If the event type is <code>beforeunload</code></dt>

      <dd>

      <p class="note">
  The <a>event handler IDL
      attribute</a>'s type is <code>OnBeforeUnloadEventHandler</code>, and the <var>return value</var> will therefore have been coerced into either the value null or a
      DOMString.
  </p>

      If the <var>return value</var> is null, then cancel the event.

      Otherwise, If the <code>Event</code> object <var>E</var> is a
      <code>BeforeUnloadEvent</code> object, and the <code>Event</code> object <var>E</var>'s <code>returnValue</code>
      attribute's value is the empty string, then set the <code>returnValue</code> attribute's value to <var>return value</var>.

      </dd>

      <dt>Otherwise</dt>

      <dd>If <var>return value</var> is a Web IDL boolean false value, then cancel the
      event.</dd>

    </dl>

    </li>

  </ol>

  </div>

  <hr />

  The <code>EventHandler</code> callback function type represents a callback used for event
  handlers. It is represented in Web IDL as follows:

  <pre class="idl" data-highlight="webidl" dfn-for="EventHandlerNonNull">
    [TreatNonObjectAsNull]
    callback EventHandlerNonNull = any (Event event);
    typedef EventHandlerNonNull? EventHandler;
  </pre>

  <p class="note">
  In JavaScript, any <code>Function</code> object implements this interface.
  </p>

  <div class="example">
    For example, the following document fragment:

    <pre highlight="javascript">&lt;body onload="alert(this)" onclick="alert(this)"></pre>

    ...leads to an alert saying "<code>[object&nbsp;Window]</code>" when the document is
    loaded, and an alert saying "<code>[object&nbsp;HTMLBodyElement]</code>" whenever the
    user clicks something in the page.
  </div>

  <p class="note">
  The return value of the function affects whether the event is canceled or not:
  <span class="impl">as described above,</span> if the return value is false, the event is canceled
  (except for <code>mouseover</code> events, where the return value has to
  be true to cancel the event). With <code>beforeunload</code> events,
  the value is instead used to determine the message to show the user.
  </p>

  For historical reasons, the <code>onerror</code> handler has different
  arguments:

  <pre class="idl" data-highlight="webidl" dfn-for="OnErrorEventHandlerNonNull">
    [TreatNonObjectAsNull]
    callback OnErrorEventHandlerNonNull = any ((Event or DOMString) event, optional DOMString source, optional unsigned long lineno, optional unsigned long column, optional any error);
    typedef OnErrorEventHandlerNonNull? OnErrorEventHandler;
  </pre>

  Similarly, the <code>onbeforeunload</code> handler has a
  different return value:

  <pre class="idl" data-highlight="webidl" dfn-for="OnBeforeUnloadEventHandlerNonNull">
    [TreatNonObjectAsNull]
    callback OnBeforeUnloadEventHandlerNonNull = DOMString? (Event event);
    typedef OnBeforeUnloadEventHandlerNonNull? OnBeforeUnloadEventHandler;
  </pre>

  <div class="impl">

  <hr />

  An <dfn>internal raw uncompiled handler</dfn> is a tuple with the following information:

  <ul class="brief">

    <li>An uncompiled script body

    <li>A location where the script body originated, in case an error needs to be reported

  </ul>

  When the user agent is to <dfn lt="getting the current value of the event handler|get the current value of the event handler">get the current value of the event handler</dfn> <var>H</var>, it must run these steps:

  <ol>

    <li>

    If <var>H</var>'s value is an <a>internal raw uncompiled handler</a>, run these
    substeps:

    <ol>

      <li>

      If <var>H</var> is an element's <a>event
      handler</a>, then let <var>element</var> be the element, and <var>document</var> be the element's <a>node document</a>.

      Otherwise, <var>H</var> is a <code>Window</code> object's <a>event handler</a>: let <var>element</var> be null, and let <var>document</var> be the <code>Document</code> most recently associated with that
      <code>Window</code> object.

      </li>

      <li>If  <var>document</var> is
      not in a <a>browsing context</a>, or if <a>scripting is
      enabled</a> for <var>document</var>'s <a>browsing context</a>, then return
      null.</li>

      <li>Let <var>body</var> be the uncompiled script body in the <a>internal raw
      uncompiled handler</a>.</li>

      <li>Let <var>location</var> be the location where the script body originated, as
      given by the <a>internal raw uncompiled handler</a>.</li>

      <li>If <var>element</var> is not null and <var>element</var> has a
      <a>form owner</a>, let <var>form owner</var> be that <a>form owner</a>.
      Otherwise, let <var>form owner</var> be null.</li>

      <li>Let <var>script settings</var> be the <a>environment settings object</a>
      created for the <code>Window</code> object with which <var>document</var> is
      currently associated.</li>

      <li>Obtain the <a>script execution environment</a> for JavaScript from <var>script settings</var>.</li>

      <li>

      If <var>body</var> is not parsable as <i>FunctionBody</i> or if parsing detects
      an <i>early error</i>, then follow these substeps:

      <ol>

        <li>Set <var>H</var>'s value to null.</li>

        <li>Report the error for the appropriate <a>script</a> and with the appropriate position (line number and
        column number) given by <var>location</var>, using the <a>global object</a>
        specified by <var>script settings</var> as the target. If the error is still <i>not handled</i> after this, then the error may be reported
        to a developer console.</li>

        <li>Return null.</li>

      </ol>

      </li>

      <li>
        If <var>body</var> begins with a <a>Directive Prologue</a> that contains a Use Strict Directive then let <var>strict</var> be true, otherwise let <var>strict</var>
        be false.
      </li>

      <li>

      Using the <a>script execution environment</a> obtained above, let <var>function</var> be the
      result of calling <a>FunctionCreate</a>, with arguments:

      <dl>

        <dt><var>kind</var></dt>
        <dd>Normal</dd>

        <dt><var>ParameterList</var></dt>

        <dd>

        <dl class="switch">

          <dt>If <var>H</var> is an <code>onerror</code> <a>event handler</a> of a <code>Window</code> object</dt>

          <dd>Let the function have five arguments, named <code>event</code>, <code>source</code>, <code>lineno</code>, <code>colno</code>, and
          <code>error</code>.</dd>

          <dt>Otherwise</dt>

          <dd>Let the function have a single argument called <code>event</code>.</dd>

        </dl>

        </dd>

        <dt><var>Body</var></dt>

        <dd>The result of parsing <var>body</var> above.</dd>

        <dt><var>Scope</var></dt>

        <dd>

        <ol>

          <li>

          If <var>H</var> is an element's <a>event
          handler</a>, then let <var>Scope</var> be the result of
          NewObjectEnvironment(<var>document</var>, the <var>global
          environment</var>).

          Otherwise, <var>H</var> is a <code>Window</code> object's <a>event handler</a>: let <var>Scope</var> be the <var>global environment</var>.

          </li>

          <li>If <var>form owner</var> is not null, let <var>Scope</var> be
          the result of NewObjectEnvironment(<var>form owner</var>, <var>Scope</var>).</li>

          <li>If <var>element</var> is not null, let <var>Scope</var> be the
          result of NewObjectEnvironment(<var>element</var>, <var>Scope</var>).</li>

        </ol>

        <p class="note">
  NewObjectEnvironment() is defined in ECMAScript edition 5 section 10.2.2.3
        NewObjectEnvironment (O, E). [[!ECMA-262]]
  </p>

        </dd>

        <dt><var>Strict</var></dt>

        <dd>The value of <var>strict</var>.</dd>

      </dl>

      </li>

      <li>Let <var>script</var> be a new <a>script</a>.</li>

      <li>Let <var>script</var>'s <a>code entry-point</a> be <var>function</var>.</li>

      <li>Let <var>script</var>'s <a>settings object</a> be <var>script
      settings</var>.</li>

      <li>Set <var>H</var>'s value to <var>function</var>.</li>

    </ol>

    </li>

    <li>Return <var>H</var>'s value.</li>

  </ol>

  </div>

<h5 id="event-handlers-on-elements-document-objects-and-window-objects">Event handlers on elements, <code>Document</code> objects, and <code>Window</code> objects</h5>

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) <span class="impl">that must be</span>
  supported by all <a>html elements</a>, as both <a>event handler content attributes</a>
  and <a>event handler IDL attributes</a>; and <span class="impl">that must be</span>
  supported by all <code>Document</code> and <code>Window</code> objects, as <a>event handler IDL
  attributes</a>:

  <table>
    <thead>
    <tr><th><a>Event handler</a> <th><a>Event handler event type</a>
    <tbody>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onabort</code></dfn> <td> <code>abort</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onautocomplete</code></dfn> <td> <code>autocomplete</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onautocompleteerror</code></dfn> <td> <code>autocompleteerror</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>oncancel</code></dfn> <td> <code>cancel</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>oncanplay</code></dfn> <td> <code>canplay</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>oncanplaythrough</code></dfn> <td> <code>canplaythrough</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onchange</code></dfn> <td> <code>change</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onclick</code></dfn> <td> <code>click</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onclose</code></dfn> <td> <code>close</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>oncontextmenu</code></dfn> <td> <code>contextmenu</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>oncuechange</code></dfn> <td> <code>cuechange</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>ondblclick</code></dfn> <td> <code>dblclick</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>ondrag</code></dfn> <td> <code>drag</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>ondragend</code></dfn> <td> <code>dragend</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>ondragenter</code></dfn> <td> <code>dragenter</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>ondragexit</code></dfn> <td> <code>dragexit</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>ondragleave</code></dfn> <td> <code>dragleave</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>ondragover</code></dfn> <td> <code>dragover</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>ondragstart</code></dfn> <td> <code>dragstart</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>ondrop</code></dfn> <td> <code>drop</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>ondurationchange</code></dfn> <td> <code>durationchange</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onemptied</code></dfn> <td> <code>emptied</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onended</code></dfn> <td> <code>ended</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>oninput</code></dfn> <td> <code>input</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>oninvalid</code></dfn> <td> <code>invalid</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onkeydown</code></dfn> <td> <code>keydown</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onkeypress</code></dfn> <td> <code>keypress</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onkeyup</code></dfn> <td> <code>keyup</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onloadeddata</code></dfn> <td> <code>loadeddata</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onloadedmetadata</code></dfn> <td> <code>loadedmetadata</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onloadstart</code></dfn> <td> <code>loadstart</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onmousedown</code></dfn> <td> <code>mousedown</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onmouseenter</code></dfn> <td> <code>mouseenter</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onmouseleave</code></dfn> <td> <code>mouseleave</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onmousemove</code></dfn> <td> <code>mousemove</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onmouseout</code></dfn> <td> <code>mouseout</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onmouseover</code></dfn> <td> <code>mouseover</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onmouseup</code></dfn> <td> <code>mouseup</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onmousewheel</code></dfn> <td> <code>mousewheel</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onpause</code></dfn> <td> <code>pause</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onplay</code></dfn> <td> <code>play</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onplaying</code></dfn> <td> <code>playing</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onprogress</code></dfn> <td> <code>progress</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onratechange</code></dfn> <td> <code>ratechange</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onreset</code></dfn> <td> <code>reset</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onseeked</code></dfn> <td> <code>seeked</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onseeking</code></dfn> <td> <code>seeking</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onselect</code></dfn> <td> <code>select</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onshow</code></dfn> <td> <code>show</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onstalled</code></dfn> <td> <code>stalled</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onsubmit</code></dfn> <td> <code>submit</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onsuspend</code></dfn> <td> <code>suspend</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>ontimeupdate</code></dfn> <td> <code>timeupdate</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>ontoggle</code></dfn> <td> <code>toggle</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onvolumechange</code></dfn> <td> <code>volumechange</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onwaiting</code></dfn> <td> <code>waiting</code>

  </table>

  <hr />

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) <span class="impl">that must be</span>
  supported by all <a>html elements</a> other than <{body}> and <{frameset}>
  elements, as both <a>event handler content attributes</a> and <a>event handler IDL
  attributes</a>; <span class="impl">that must be</span> supported by all <code>Document</code>
  objects, as <a>event handler IDL attributes</a>; and <span class="impl">that must be</span>
  supported by all <code>Window</code> objects, as <a>event handler IDL attributes</a> on the
  <code>Window</code> objects themselves, and with corresponding <a>event handler content
  attributes</a> and <a>event handler IDL attributes</a> exposed on all <code>body</code>
  and <{frameset}> elements that are owned by that <code>Window</code> object's <code>Document</code>s:

  <table>
    <thead>
    <tr><th><a>Event handler</a> <th><a>Event handler event type</a>
    <tbody>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onblur</code></dfn> <td> <code>blur</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onerror</code></dfn> <td> <code>error</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onfocus</code></dfn> <td> <code>focus</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onload</code></dfn> <td> <code>load</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onresize</code></dfn> <td> <code>resize</code>
    <tr><td><dfn attribute for="GlobalEventHandlers"><code>onscroll</code></dfn> <td> <code>scroll</code>
  </table>

  <hr />

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) <span class="impl">that must be</span>
  supported by <code>Window</code> objects, as <a>event handler IDL attributes</a> on the
  <code>Window</code> objects themselves, and with corresponding <a>event handler content
  attributes</a> and <a>event handler IDL attributes</a> exposed on all <code>body</code>
  and <{frameset}> elements that are owned by that <code>Window</code> object's <code>Document</code>s:

  <table>
    <thead>
    <tr><th><a>Event handler</a> <th><a>Event handler event type</a>
    <tbody>
    <tr><td><dfn attribute for="WindowEventHandlers"><code>onafterprint</code></dfn> <td> <code>afterprint</code>
    <tr><td><dfn attribute for="WindowEventHandlers"><code>onbeforeprint</code></dfn> <td> <code>beforeprint</code>
    <tr><td><dfn attribute for="OnBeforeUnloadEventHandler"><code>onbeforeunload</code></dfn> <td> <code>beforeunload</code>
    <tr><td><dfn attribute for="WindowEventHandlers"><code>onhashchange</code></dfn> <td> <code>hashchange</code>
    <tr><td><dfn attribute for="WindowEventHandlers"><code>onlanguagechange</code></dfn> <td> <code>languagechange</code>
    <tr><td><dfn attribute for="WindowEventHandlers"><code>onmessage</code></dfn> <td> <code>message</code>
    <tr><td><dfn attribute for="WindowEventHandlers"><code>onoffline</code></dfn> <td> <code>offline</code>
    <tr><td><dfn attribute for="WindowEventHandlers"><code>ononline</code></dfn> <td> <code>online</code>
    <tr><td><dfn attribute for="WindowEventHandlers"><code>onpagehide</code></dfn> <td> <code>pagehide</code>
    <tr><td><dfn attribute for="WindowEventHandlers"><code>onpageshow</code></dfn> <td> <code>pageshow</code>
    <tr><td><dfn attribute for="WindowEventHandlers"><code>onrejectionhandled</code></dfn> <td> <code>rejectionhandled</code>
    <tr><td><dfn attribute for="WindowEventHandlers"><code>onpopstate</code></dfn> <td> <code>popstate</code>
    <tr><td><dfn attribute for="WindowEventHandlers"><code>onstorage</code></dfn> <td> <code>storage</code>
    <tr><td><dfn attribute for="WindowEventHandlers"><code>onunhandledrejection</code></dfn> <td> <code>unhandledrejection</code>
    <tr><td><dfn attribute for="WindowEventHandlers"><code>onunload</code></dfn> <td> <code>unload</code>
  </table>

  <hr />

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) <span class="impl">that must be</span>
  supported on <code>Document</code> objects as <a>event handler IDL attributes</a>:

  <table>
    <thead>
    <tr><th><a>Event handler</a> <th><a>Event handler event type</a>
    <tbody>
    <tr><td><dfn><code>onreadystatechange</code></dfn> <td> <code>readystatechange</code>
  </table>

<h6 id="idl-definitions">IDL definitions</h6>

  <pre class="idl" data-highlight="webidl" dfn-for="GlobalEventHandlers">
    [NoInterfaceObject]
    interface GlobalEventHandlers {
      attribute EventHandler onabort;
      attribute EventHandler onautocomplete;
      attribute EventHandler onautocompleteerror;
      attribute EventHandler onblur;
      attribute EventHandler oncancel;
      attribute EventHandler oncanplay;
      attribute EventHandler oncanplaythrough;
      attribute EventHandler onchange;
      attribute EventHandler onclick;
      attribute EventHandler onclose;
      attribute EventHandler oncontextmenu;
      attribute EventHandler oncuechange;
      attribute EventHandler ondblclick;
      attribute EventHandler ondrag;
      attribute EventHandler ondragend;
      attribute EventHandler ondragenter;
      attribute EventHandler ondragexit;
      attribute EventHandler ondragleave;
      attribute EventHandler ondragover;
      attribute EventHandler ondragstart;
      attribute EventHandler ondrop;
      attribute EventHandler ondurationchange;
      attribute EventHandler onemptied;
      attribute EventHandler onended;
      attribute OnErrorEventHandler onerror;
      attribute EventHandler onfocus;
      attribute EventHandler oninput;
      attribute EventHandler oninvalid;
      attribute EventHandler onkeydown;
      attribute EventHandler onkeypress;
      attribute EventHandler onkeyup;
      attribute EventHandler onload;
      attribute EventHandler onloadeddata;
      attribute EventHandler onloadedmetadata;
      attribute EventHandler onloadstart;
      attribute EventHandler onmousedown;
      [LenientThis] attribute EventHandler onmouseenter;
      [LenientThis] attribute EventHandler onmouseleave;
      attribute EventHandler onmousemove;
      attribute EventHandler onmouseout;
      attribute EventHandler onmouseover;
      attribute EventHandler onmouseup;
      attribute EventHandler onmousewheel;
      attribute EventHandler onpause;
      attribute EventHandler onplay;
      attribute EventHandler onplaying;
      attribute EventHandler onprogress;
      attribute EventHandler onratechange;
      attribute EventHandler onreset;
      attribute EventHandler onresize;
      attribute EventHandler onscroll;
      attribute EventHandler onseeked;
      attribute EventHandler onseeking;
      attribute EventHandler onselect;
      attribute EventHandler onshow;
      attribute EventHandler onstalled;
      attribute EventHandler onsubmit;
      attribute EventHandler onsuspend;
      attribute EventHandler ontimeupdate;
      attribute EventHandler ontoggle;
      attribute EventHandler onvolumechange;
      attribute EventHandler onwaiting;
    };
  </pre>

  <pre class="idl" data-highlight="webidl" dfn-for="WindowEventHandlers">
    [NoInterfaceObject]
    interface WindowEventHandlers {
      attribute EventHandler onafterprint;
      attribute EventHandler onbeforeprint;
      attribute OnBeforeUnloadEventHandler onbeforeunload;
      attribute EventHandler onhashchange;
      attribute EventHandler onlanguagechange;
      attribute EventHandler onmessage;
      attribute EventHandler onoffline;
      attribute EventHandler ononline;
      attribute EventHandler onpagehide;
      attribute EventHandler onpageshow;
      attribute EventHandler onrejectionhandled;
      attribute EventHandler onpopstate;
      attribute EventHandler onstorage;
      attribute EventHandler onunhandledrejection;
      attribute EventHandler onunload;
    };
  </pre>

  <div class="impl">

<h5 id="event-firing">Event firing</h5>

  Certain operations and methods are defined as firing events on elements. For example, the <code>click()</code> method on the <code>HTMLElement</code> interface is defined as
  firing a <code>click</code> event on the element. [[!UIEVENTS]]

  <dfn lt="firing a simple event named e|firing a simple event">Firing a simple event named <var>e</var></dfn>
  means that a <a>trusted</a> event with the name <var>e</var>, which does not bubble (except where otherwise stated) and is not cancelable
  (except where otherwise stated), and which uses the <code>Event</code> interface, must be created
  and <a>dispatched</a> at the given target.

  <dfn lt="fire a synthetic mouse event named contextmenu|Firing a synthetic mouse event named e|firing a synthetic mouse event named click">Firing a synthetic mouse event named <var>e</var></dfn> means that an event with the name <var>e</var>, which is <a>trusted</a> (except where otherwise stated), does not bubble
  (except where otherwise stated), is not cancelable (except where otherwise stated), and which uses
  the <code>MouseEvent</code> interface, must be created and dispatched at the given target. The
  event object must have its <code>screenX</code>, <code>screenY</code>, <code>clientX</code>, <code>clientY</code>, and <code>button</code>
  attributes initialized to 0, its <code>ctrlKey</code>, <code>shiftKey</code>,
  <code>altKey</code>, and <code>metaKey</code> attributes initialized according
  to the current state of the key input device, if any (false for any keys that are not available),
  its <code>detail</code> attribute initialized to 1, its <code>relatedTarget</code> attribute initialized to null (except
  where otherwise stated), and its <code>view</code> attribute initialized to the <code>Window</code> object of the <code>Document</code> object of the given target node, if any, or else null. The <code>getModifierState()</code> method on the object must
  return values appropriately describing the state of the key input device at the time the event is
  created.

  <dfn lt="fire a click event|firing a click event">Firing a <code>click</code> event</dfn>
  means <a>firing a synthetic mouse event named <code>click</code></a>, which bubbles and is cancelable.

  The default action of these events is to do nothing except where otherwise stated.

  </div>

  <div class="impl">

<h5 id="events-and-the-window-object">Events and the <code>Window</code> object</h5>

  When an event is dispatched at a DOM node in a <code>Document</code> in a <a>browsing
  context</a>, if the event is not a <code>load</code> event, the user agent
  must act as if, for the purposes of <a>event dispatching</a>,
  the <code>Window</code> object is the parent of the <code>Document</code> object. [[!DOM]]

  </div>

<h3 id="base64-utility-methods">Base64 utility methods</h3>

  The <code>atob()</code> and <code>btoa()</code> methods allow authors to transform content to and from
  the base64 encoding.

  <pre class="idl" data-highlight="webidl" dfn-for="WindowBase64">
    [NoInterfaceObject, Exposed=(Window, Worker)]
    interface WindowBase64 {
      DOMString btoa(DOMString btoa);
      DOMString atob(DOMString atob);
    };
    Window implements WindowBase64;
    WorkerGlobalScope implements WindowBase64;
  </pre>

  <p class="note">
  In these APIs, for mnemonic purposes, the "b" can be considered to stand for
  "binary", and the "a" for "ASCII". In practice, though, for primarily historical reasons, both the
  input and output of these functions are Unicode strings.
  </p>

  <dl class="domintro">

    <dt><var>result</var> = <var>window</var> . <code>btoa</code>( <var>data</var> )</dt>

    <dd>

    Takes the input data, in the form of a Unicode string containing only characters in the range
    U+0000 to U+00FF, each representing a binary byte with values 0x00 to 0xFF respectively, and
    converts it to its base64 representation, which it returns.

    Throws an <code>InvalidCharacterError</code> exception if the input string contains any
    out-of-range characters.

    </dd>

    <dt><var>result</var> = <var>window</var> . <code>atob</code>( <var>data</var> )</dt>

    <dd>

    Takes the input data, in the form of a Unicode string containing base64-encoded binary data,
    decodes it, and returns a string consisting of characters in the range U+0000 to U+00FF, each
    representing a binary byte with values 0x00 to 0xFF respectively, corresponding to that binary
    data.

    Throws an <code>InvalidCharacterError</code> exception if the input string is not valid
    base64 data.

    </dd>

  </dl>

  <div class="impl">

  The <dfn method for="WindowBase64"><code>btoa()</code></dfn> method must throw an
  <code>InvalidCharacterError</code> exception if the method's first argument contains any character
  whose code point is greater than U+00FF. Otherwise, the user agent must convert that argument to a
  sequence of octets whose <var>n</var>th octet is the eight-bit representation of the code
  point of the <var>n</var>th character of the argument, and then must apply the base64
  algorithm to that sequence of octets, and return the result. [[!RFC4648]]

  The <dfn method for="WindowBase64"><code>atob()</code></dfn> method must run the following
  steps to parse the string passed in the method's first argument:

  <ol>

    <li>Let <var>input</var> be the string being parsed.</li>

    <li>Let <var>position</var> be a pointer into <var>input</var>, initially
    pointing at the start of the string.</li>

    <li>Remove all <a>space characters</a> from <var>input</var>.</li>

    <li>If the length of <var>input</var> divides by 4 leaving no remainder, then: if
    <var>input</var> ends with one or two U+003D EQUALS SIGN (=) characters, remove them
    from <var>input</var>.</li>

    <li>If the length of <var>input</var> divides by 4 leaving a remainder of 1, throw an
    <code>InvalidCharacterError</code> exception and abort these steps.

    <li>

    If <var>input</var> contains a character that is not in the following list of
    characters and character ranges, throw an <code>InvalidCharacterError</code> exception and abort
    these steps:

    <ul class="brief">
      <li>U+002B PLUS SIGN (+)
      <li>U+002F SOLIDUS (/)
      <li><a>Alphanumeric ASCII characters</a>
    </ul>

    </li>

    <li>Let <var>output</var> be a string, initially empty.</li>

    <li>Let <var>buffer</var> be a buffer that can have bits appended to it, initially
    empty.</li>

    <li>

    While <var>position</var> does not point past the end of <var>input</var>,
    run these substeps:

    <ol>

      <li>

      Find the character pointed to by <var>position</var> in the first column of the
      following table. Let <var>n</var> be the number given in the second cell of the same
      row.

      <div>
        <table>
        <thead>
          <tr>
          <th>Character
          <th>Number
        <tbody>
          <tr><td>A<td>0
          <tr><td>B<td>1
          <tr><td>C<td>2
          <tr><td>D<td>3
          <tr><td>E<td>4
          <tr><td>F<td>5
          <tr><td>G<td>6
          <tr><td>H<td>7
          <tr><td>I<td>8
          <tr><td>J<td>9
          <tr><td>K<td>10
          <tr><td>L<td>11
          <tr><td>M<td>12
          <tr><td>N<td>13
          <tr><td>O<td>14
          <tr><td>P<td>15
          <tr><td>Q<td>16
          <tr><td>R<td>17
          <tr><td>S<td>18
          <tr><td>T<td>19
          <tr><td>U<td>20
          <tr><td>V<td>21
          <tr><td>W<td>22
          <tr><td>X<td>23
          <tr><td>Y<td>24
          <tr><td>Z<td>25
          <tr><td>a<td>26
          <tr><td>b<td>27
          <tr><td>c<td>28
          <tr><td>d<td>29
          <tr><td>e<td>30
          <tr><td>f<td>31
          <tr><td>g<td>32
          <tr><td>h<td>33
          <tr><td>i<td>34
          <tr><td>j<td>35
          <tr><td>k<td>36
          <tr><td>l<td>37
          <tr><td>m<td>38
          <tr><td>n<td>39
          <tr><td>o<td>40
          <tr><td>p<td>41
          <tr><td>q<td>42
          <tr><td>r<td>43
          <tr><td>s<td>44
          <tr><td>t<td>45
          <tr><td>u<td>46
          <tr><td>v<td>47
          <tr><td>w<td>48
          <tr><td>x<td>49
          <tr><td>y<td>50
          <tr><td>z<td>51
          <tr><td>0<td>52
          <tr><td>1<td>53
          <tr><td>2<td>54
          <tr><td>3<td>55
          <tr><td>4<td>56
          <tr><td>5<td>57
          <tr><td>6<td>58
          <tr><td>7<td>59
          <tr><td>8<td>60
          <tr><td>9<td>61
          <tr><td>+<td>62
          <tr><td>/<td>63
        </table>
      </div>

      </li>

      <li>Append to <var>buffer</var> the six bits corresponding to <var>number</var>, most significant bit first.</li>

      <li>If <var>buffer</var> has accumulated 24 bits, interpret them as three 8-bit
      big-endian numbers. Append the three characters with code points equal to those numbers to <var>output</var>, in the same order, and then empty <var>buffer</var>.</li>

      <li>Advance <var>position</var> by one character.</li>

    </ol>

    </li>

    <li>

    If <var>buffer</var> is not empty, it contains either 12 or 18 bits. If it contains
    12 bits, discard the last four and interpret the remaining eight as an 8-bit big-endian number.
    If it contains 18 bits, discard the last two and interpret the remaining 16 as two 8-bit
    big-endian numbers. Append the one or two characters with code points equal to those one or two
    numbers to <var>output</var>, in the same order.

    <p class="note">
  The discarded bits mean that, for instance, <code>atob("YQ")</code> and
    <code>atob("YR")</code> both return "<{a}>".
  </p>

    </li>

    <li>Return <var>output</var>.</li>

  </ol>

  </div>

<h3 id="dynamic-markup-insertion"><dfn lt="it can also come from script|dynamic markup insertion">Dynamic markup insertion</dfn></h3>

  <p class="note">
  APIs for dynamically inserting markup into the document interact with the parser,
  and thus their behavior varies depending on whether they are used with <a>HTML documents</a>
  (and the <a>HTML parser</a>) or XHTML in <a>XML documents</a> (and the <a>XML
  parser</a>).
  </p>

<h4 id="opening-the-input-stream">Opening the input stream</h4>

  The <dfn method for="document" id="dom-document-_open"><code>open()</code></dfn> method comes in several variants
  with different numbers of arguments.

  <dl class="domintro">

    <dt><var>document</var> = <var>document</var> . <code>open</code>( [ <var>type</var> [, <var>replace</var> ] ] )</dt>

    <dd>

    Causes the <code>Document</code> to be replaced in-place, as if it was a new
    <code>Document</code> object, but reusing the previous object, which is then returned.

    If the <var>type</var> argument is omitted or has the value
    "<a href="#text-html"><code>text/html</code></a>", then the resulting <code>Document</code> has an HTML parser associated
    with it, which can be given data to parse using <a method lt="write()"><code>document.write()</code></a>. Otherwise, all content passed to <a method lt="write()"><code>document.write()</code></a> will be parsed as plain text.

    If the <var>replace</var> argument is present and has the value "<code>replace</code>", the existing entries in the session history for the
    <code>Document</code> object are removed.

    The method has no effect if the <code>Document</code> is still being parsed.

    Throws an <code>InvalidStateError</code> exception if the <code>Document</code> is an <a>XML document</a>.

    </dd>

    <dt><var>window</var> = <var>document</var> . <code>open</code>( <var>url</var>, <var>name</var>, <var>features</var> [, <var>replace</var> ] )</dt>

    <dd>

    Works like the <code>window.open()</code> method.

    </dd>

  </dl>

  <div class="impl">

  <code>Document</code> objects have an <dfn>ignore-opens-during-unload counter</dfn>, which is
  used to prevent scripts from invoking the <code>document.open()</code>
  method (directly or indirectly) while the document is <a>being unloaded</a>. Initially, the counter must be set to zero.

  When called with two arguments (or fewer), the <code>document.open()</code>
  method must act as follows:

  <ol>

    <li>If the <code>Document</code> object is not flagged as an <a>HTML
    document</a>, throw an <code>InvalidStateError</code> exception and abort these steps.</li>

    <li>If the <code>Document</code> object is not an <a>active document</a>, then abort
    these steps.</li>

    <li>Let <var>type</var> be the value of the first argument.</li>

    <li>

    If the second argument is an <a>ASCII case-insensitive</a> match for the value
    "replace", then let <var>replace</var> be true.

    Otherwise, if the <a>browsing context</a>'s <a>session history</a> contains only
    one {{Document}}, and that was the <code>about:blank</code> <code>Document</code>
    created when the <a>browsing context</a> was created, and that <code>Document</code> has
    never had the <a>unload a document</a> algorithm invoked on it (e.g., by a previous call to
    <code>document.open()</code>), then let <var>replace</var> be
    true.

    Otherwise, let <var>replace</var> be false.

    </li>

    <li>

    If the <code>Document</code> has an <a>active parser</a> whose <a>script nesting
    level</a> is greater than zero, then the method does nothing. Abort these steps and return
    the <code>Document</code> object on which the method was invoked.

    <p class="note">
  This basically causes <code>document.open()</code> to
    be ignored when it's called in an inline script found during parsing, while still letting it
    have an effect when called from a non-parser task such as a timer callback or event handler.
  </p>

    </li>

    <li>

    Similarly, if the <code>Document</code>'s <a>ignore-opens-during-unload counter</a> is
    greater than zero, then the method does nothing. Abort these steps and return the
    <code>Document</code> object on which the method was invoked.

    <p class="note">
  This basically causes <code>document.open()</code> to
    be ignored when it's called from a <code>beforeunload</code> <code>pagehide</code>, or <code>unload</code> event
    handler while the <code>Document</code> is being unloaded.
  </p>

    </li>

    <li>Set the <code>Document</code>'s <i>salvageable</i> state to false.</li>

    <li><a>Prompt to unload</a> the
    <code>Document</code> object. If the user <a>refused to allow the document to be unloaded</a>, then abort these steps and return the <code>Document</code> object on which the
    method was invoked.</li>

    <li><a>Unload</a> the <code>Document</code> object, with the
    <var>recycle</var> parameter set to true.</li>

    <li><a>Abort</a> the {{Document}}.</li>

    <li>Unregister all event listeners registered on the <code>Document</code> node and its
    descendants.

    <li>Remove any <a>tasks</a> associated with the
    <code>Document</code> in any <a>task source</a>.</li>

    <li>Remove all child nodes of the document, without firing any mutation events.</li>

    <li>

    Replace the <code>Document</code>'s singleton objects with new instances of those objects.
    (This includes in particular the {{Window}}, <code>Location</code>,
    <code>History</code>, <code>ApplicationCache</code>, and <code>Navigator</code>, objects, the
    various <code>BarProp</code> objects, the two <code>Storage</code> objects, the various
    <code>HTMLCollection</code> objects, and objects defined by other specifications, like
    <code>Selection</code>. It also includes all the Web
    IDL prototypes in the JavaScript binding, including the <code>Document</code> object's
    prototype.)

    <p class="note">
  The new <code>Window</code> object has a new <a>environment settings
    object</a>.
  </p>

    </li>

    <li>Set the new <code>Window</code> object's <a>HTTPS
    state</a> to the <a>HTTPS state</a> of the
    <code>Window</code> object of the <a>responsible document</a> specified by the <a>entry
    settings object</a>.</li>

    <li>Change the <a>document's character encoding</a> to UTF-8.</li>

    <li>If the <code>Document</code> is <a>ready for post-load tasks</a>, then set the
    <code>Document</code> object's <a>reload override flag</a> and set the
    <code>Document</code>'s <a>reload override buffer</a> to the empty string.</li>

    <li>Set the <code>Document</code>'s <i>salvageable</i> state back to true.</li>

    <li>Change <a>the document's address</a> to the <a>address</a> of the <a>responsible document</a> specified by the <a>entry
    settings object</a>.</li>

    <li>If the <code>Document</code>'s <a>iframe load in progress</a> flag is set, set the
    <code>Document</code>'s <a>mute iframe load</a> flag.</li>

    <li>Create a new <a>HTML parser</a> and associate it with the document. This is a
    <dfn>script-created parser</dfn> (meaning that it can be closed by the <code>document.open()</code> and <code>document.close()</code> methods, and that the tokenizer will wait for
    an explicit call to <code>document.close()</code> before emitting an
    end-of-file token). The encoding <a>confidence</a> is
    <i>irrelevant</i>.</li>

    <li>Set the <a>current document readiness</a> of the document to "<code>loading</code>".</li>

    <li>

    If <var>type</var> is an <a>ASCII case-insensitive</a> match for the string
    "<code>replace</code>", then, for historical reasons, set it to the string "<a href="#text-html"><code>text/html</code></a>".

    Otherwise:

    If the <var>type</var> string contains a U+003B SEMICOLON character (;), remove the
    first such character and all characters from it up to the end of the string.

    <a>Strip leading and trailing whitespace</a> from <var>type</var>.

    </li>

    <li>

    If <var>type</var> is <em>not</em> now an <a>ASCII case-insensitive</a> match
    for the string "<a href="#text-html"><code>text/html</code></a>", then act as if the tokenizer had emitted a start tag
    token with the tag name "pre" followed by a single U+000A LINE FEED (LF) character, then switch the
    <a>HTML parser</a>'s tokenizer to the [[#plaintext-state]].

    </li>

    <li>

    Remove all the entries in the <a>browsing context</a>'s <a>session history</a>
    after the <a>current entry</a>. If the <a>current entry</a> is the last entry in the
    session history, then no entries are removed.

    <p class="note">
  This <a>doesn't necessarily have to affect</a> the user
    agent's user interface.
  </p>

    </li>

    <li>Remove any <a>tasks</a> queued by the <a>history traversal
    task source</a> that are associated with any <code>Document</code> objects in the
    <a>top-level browsing context</a>'s <a>document family</a>.</li>

    <li>Remove any earlier entries that share the same {{Document}}.</li>

    <li>If <var>replace</var> is false, then add a new entry, just before the last entry,
    and associate with the new entry the text that was parsed by the previous parser associated with
    the <code>Document</code> object, as well as the state of the document at the start of these
    steps. This allows the user to step backwards in the session history to see the page before it
    was blown away by the <code>document.open()</code> call. This new entry
    does not have a <code>Document</code> object, so a new one will be created if the session history
    is traversed to that entry.</li>

    <li>Finally, set the <a>insertion point</a> to point at just before the end of the
    <a>input stream</a> (which at this point will be empty).</li>

    <li>Return the <code>Document</code> on which the method was invoked.</li>

  </ol>

  <p class="note">
  The <code>document.open()</code> method does not affect
  whether a <code>Document</code> is <a>ready for post-load tasks</a> or <a>completely
  loaded</a>.
  </p>

  When called with four arguments, the <code>open()</code> method on
  the <code>Document</code> object must call the <code>open()</code> method on the
  <code>Window</code> object of the <code>Document</code> object, with the same arguments as the
  original call to the <code>open()</code> method, and return whatever
  that method returned. If the <code>Document</code> object has no <code>Window</code> object, then
  the method must throw an <code>InvalidAccessError</code> exception.

  </div>

<h4 id="closing-the-input-stream">Closing the input stream</h4>

  <dl class="domintro">

    <dt><var>document</var> . <code>close</code>()</dt>

    <dd>

    Closes the input stream that was opened by the <code>document.open()</code> method.

    Throws an <code>InvalidStateError</code> exception if the
    <code>Document</code> is an <a>XML
    document</a>.

    </dd>

  </dl>

  <div class="impl">

  The <dfn method for ="document" id="dom-document-_close"><code>close()</code></dfn> method must run the following
  steps:

  <ol>

    <li>If the <code>Document</code> object is not flagged as an <a>HTML
    document</a>, throw an <code>InvalidStateError</code> exception and abort these
    steps.</li>

    <li>If there is no <a>script-created parser</a> associated with the document, then abort
    these steps.</li>

    <li>Insert an <a>explicit "EOF" character</a> at the end of the parser's <a>input
    stream</a>.</li>

    <li>If there is a <a>pending parsing-blocking script</a>, then abort these
    steps.</li>

    <li>Run the tokenizer, processing resulting tokens as they are emitted, and stopping when the
    tokenizer reaches the <a>explicit "EOF" character</a> or <a>spins the event loop</a>.</li>

  </ol>

  </div>

<h4 id="documentwrite"><a method lt="write()"><code>document.write()</code></a></h4>

  <dl class="domintro">

    <dt><var>document</var> . <code>write</code>(<var>text</var>...)</dt>

    <dd>

    In general, adds the given string(s) to the <code>Document</code>'s input stream.

    <p class="warning">This method has very idiosyncratic behavior. In some cases, this method can
    affect the state of the <a>HTML parser</a> while the parser is running, resulting in a DOM
    that does not correspond to the source of the document (e.g., if the string written is the string
    "<code>&lt;plaintext&gt;</code>" or "<code>&lt;!--</code>"). In other cases,
    the call can clear the current page first, as if <code>document.open()</code> had been called. In yet more cases, the method
    is simply ignored, or throws an exception. To make matters worse, the exact behavior of this
    method can in some cases be dependent on network latency, which can lead to failures that are very hard to debug. <strong>For all these reasons, use
    of this method is strongly discouraged.</strong></p>

    This method throws an <code>InvalidStateError</code> exception when invoked on <a>XML
    documents</a>.

    </dd>

  </dl>

  <div class="impl">

  <code>Document</code> objects have an <dfn>ignore-destructive-writes counter</dfn>, which is
  used in conjunction with the processing of <{script}> elements to prevent external
  scripts from being able to use <a method lt="write()"><code>document.write()</code></a> to blow
  away the document by implicitly calling <code>document.open()</code>.
  Initially, the counter must be set to zero.

  The <code>document.write(...)</code> method must act as
  follows:

  <ol>

    <li>

    If the method was invoked on an <a>XML document</a>, throw an
    <code>InvalidStateError</code> exception and abort these steps.

    </li>

    <li>If the <code>Document</code> object is not an <a>active document</a>, then abort
    these steps.</li>

    <li>

    If the <a>insertion point</a> is undefined and either the <code>Document</code>'s
    <a>ignore-opens-during-unload counter</a> is greater than zero or the
    <code>Document</code>'s <a>ignore-destructive-writes counter</a> is greater than zero,
    abort these steps.

    </li>

    <li>

    If the <a>insertion point</a> is undefined, call the <code>open()</code> method on the <code>document</code>
    object (with no arguments). If the user <a>refused to allow the document to be unloaded</a>, then abort these steps. Otherwise, the <a>insertion point</a> will point
    at just before the end of the (empty) <a>input stream</a>.

    </li>

    <li>

    Insert the string consisting of the concatenation of all the arguments to the method into the
    <a>input stream</a> just before the <a>insertion point</a>.

    </li>

    <li>

    If the <code>Document</code> object's <a>reload override flag</a> is set, then append
    the string consisting of the concatenation of all the arguments to the method to the
    <code>Document</code>'s <a>reload override buffer</a>.

    </li>

    <li>

    If there is no <a>pending parsing-blocking script</a>, have the <a>HTML
    parser</a> process the characters that were inserted, one at a time, processing resulting
    tokens as they are emitted, and stopping when the tokenizer reaches the insertion point or when
    the processing of the tokenizer is aborted by the tree construction stage (this can happen if a
    <code>script</code> end tag token is emitted by the tokenizer).

    <p class="note">
  If the <a method lt="write()"><code>document.write()</code></a> method was
    called from script executing inline (i.e., executing because the parser parsed a set of
    <code>script</code> tags), then this is a <a lt="reentrant">reentrant invocation of the
    parser</a>.

    </li>

    <li>

    Finally, return from the method.

    </li>

  </ol>

  </div>

<h4 id="documentwriteln"><code>document.writeln()</code></h4>

  <dl class="domintro">

    <dt><var>document</var> . <code>writeln</code>(<var>text</var>...)</dt>

    <dd>

    Adds the given string(s) to the <code>Document</code>'s input stream, followed by a newline
    character. If necessary, calls the <code>open()</code> method
    implicitly first.

    This method throws an <code>InvalidStateError</code> exception when invoked on <a>XML
    documents</a>.

    </dd>

  </dl>

  <div class="impl">

  The <code>document.writeln(...)</code> method, when
  invoked, must act as if the <a method lt="write()"><code>document.write()</code></a> method had
  been invoked with the same argument(s), plus an extra argument consisting of a string containing a
  single line feed character (U+000A).

  </div>

<h3 id="timers">Timers</h3>

  The <code>setTimeout()</code>
  and <code>setInterval()</code>
  methods allow authors to schedule timer-based callbacks.

  <pre class="idl" data-highlight="webidl" dfn-for="WindowTimers">
    [NoInterfaceObject, Exposed=(Window,Worker)]
    interface WindowTimers {
      long setTimeout((Function or DOMString) handler, optional long timeout = 0, any... arguments);
      void clearTimeout(optional long handle = 0);
      long setInterval((Function or DOMString) handler, optional long timeout = 0, any... arguments);
      void clearInterval(optional long handle = 0);
    };
    Window implements WindowTimers;
    WorkerGlobalScope implements WindowTimers;
  </pre>

  <dl class="domintro">

    <dt><var>handle</var> = <var>window</var> . <code>setTimeout</code>( <var>handler</var> [, <var>timeout</var> [, <var>arguments</var>... ] ] )</dt>

    <dd>

    Schedules a timeout to run <var>handler</var> after <var>timeout</var>
    milliseconds. Any <var>arguments</var> are passed straight through to the <var>handler</var>.

    </dd>

    <dt><var>handle</var> = <var>window</var> . <code>setTimeout</code>( <var>code</var> [, <var>timeout</var> ] )</dt>

    <dd>

    Schedules a timeout to compile and run <var>code</var> after <var>timeout</var> milliseconds.

    </dd>

    <dt><var>window</var> . <code>clearTimeout</code>( <var>handle</var> )</dt>

    <dd>

    Cancels the timeout set with <code>setTimeout()</code>
    or <code>setInterval()</code> identified by
    <var>handle</var>.

    </dd>

    <dt><var>handle</var> = <var>window</var> . <code>setInterval</code>( <var>handler</var> [, <var>timeout</var> [, <var>arguments</var>... ] ] )</dt>

    <dd>

    Schedules a timeout to run <var>handler</var> every <var>timeout</var>
    milliseconds. Any <var>arguments</var> are passed straight through to the <var>handler</var>.

    </dd>

    <dt><var>handle</var> = <var>window</var> . <code>setInterval</code>( <var>code</var> [, <var>timeout</var> ] )</dt>

    <dd>

    Schedules a timeout to compile and run <var>code</var> every <var>timeout</var> milliseconds.

    </dd>

    <dt><var>window</var> . <code>clearInterval</code>( <var>handle</var> )</dt>

    <dd>

    Cancels the timeout set with <code>setInterval()
    </code> or <code>setTimeout()</code> identified by <var>handle</var>.

    </dd>

  </dl>

  <p class="note">Timers can be nested; after five such nested timers, however, the interval is
  forced to be at least four milliseconds.
  </p>

  <p class="note">
  This API does not guarantee that timers will run exactly on schedule. Delays due
  to CPU load, other tasks, etc, are to be expected.
  </p>

  <div class="impl">

  Objects that implement the <code>WindowTimers</code> interface have a <dfn>list of active
  timers</dfn>. Each entry in this lists is identified by a number, which must be unique within the
  list for the lifetime of the object that implements the <code>WindowTimers</code> interface.

  <hr />

  The <dfn method for="WindowTimers"><code>setTimeout()</code></dfn> method must return
  the value returned by the <a>timer initialization steps</a>, passing them the method's
  arguments, the object on which the method for which the algorithm is running is implemented (a
  <code>Window</code> or <code>WorkerGlobalScope</code> object) as the <var>method
  context</var>, and the <var>repeat</var> flag set to false.

  The <dfn method for="WindowTimers"><code>setInterval()</code></dfn> method must
  return the value returned by the <a>timer initialization steps</a>, passing them the
  method's arguments, the object on which the method for which the algorithm is running is
  implemented (a <code>Window</code> or <code>WorkerGlobalScope</code> object) as the <var>method context</var>, and the <var>repeat</var> flag set to true.

  The <dfn method for="WindowTimers"><code>clearTimeout()</code></dfn> and <dfn method for="WindowTimers"><code>clearInterval()</code></dfn> methods must clear the
  entry identified as <var>handle</var> from the <a>list of active timers</a> of the
  <code>WindowTimers</code> object on which the method was invoked, if any, where <var>handle</var> is the argument passed to the method. (If <var>handle</var> does
  not identify an entry in the <a>list of active timers</a> of the <code>WindowTimers</code>
  object on which the method was invoked, the method does nothing.)

  <p class="note">
  Because <code>clearTimeout()</code> and
  <code>clearInterval()</code> clear entries from the same
  list, either method can be used to clear timers created by
  <code>setTimeout()</code> or
  <code>setInterval()</code>.
  </p>

  <hr />

  The <dfn>timer initialization steps</dfn>, which are invoked with some method arguments, a <var>method context</var>, a <var>repeat</var> flag which can be true or false, and
  optionally (and only if the <var>repeat</var> flag is true) a <var>previous handle</var>, are as follows:

  <ol>

    <li>Let <var>method context proxy</var> be <var>method context</var> if that
    is a <code>WorkerGlobalScope</code> object, or else the <code>WindowProxy</code> that corresponds
    to <var>method context</var>.</li>

    <li>If <var>previous handle</var> was provided, let <var>handle</var> be
    <var>previous handle</var>; otherwise, let <var>handle</var> be a
    user-agent-defined integer that is greater than zero that will identify the timeout to be set by
    this call in the <a>list of active timers</a>.</li>

    <li>If <var>previous handle</var> was not provided, add an entry to the <a>list of
    active timers</a> for <var>handle</var>.</li>

    <li>

    Let <var>task</var> be a <a>task</a> that runs the
    following substeps:

    <ol>

      <li>If the entry for <var>handle</var> in the <a>list of active timers</a>
      has been cleared, then abort this <a>task</a>'s substeps.</li>

      <li>

      Run the appropriate set of steps from the following list:

      <dl class="switch">

        <dt>If the first method argument is a <code>Function</code></dt>

        <dd>

        <a>Invoke</a> the <code>Function</code>. Use the third and subsequent method
        arguments (if any) as the arguments for invoking the <code>Function</code>. Use <var>method context proxy</var> as the
        <a spec="webidl">Callback this value</a>. [[!ECMA-262]]

        </dd>

        <dt>Otherwise</dt>

        <dd>

        <ol>

          <li>Let <var>script source</var> be the first method argument.</li>

          <li>Let <var>script language</var> be JavaScript.</li>

          <li>Let <var>settings object</var> be <var>method context</var>'s <a>environment settings
          object</a>.</li>

          <li><a>Create a script</a> using <var>script source</var> as the script source,
          the <a for="url">URL</a> where <var>script source</var> can be found, <var>scripting
          language</var> as the scripting language, and <var>settings object</var> as the
          <a>environment settings object</a>.</li>

        </ol>

        </dd>

      </dl>

      </li>

      <li>If the <var>repeat</var> flag is true, then call <a>timer initialization
      steps</a> again, passing them the same method arguments, the same <var>method
      context</var>, with the <var>repeat</var> flag still set to true, and with the <var>previous handle</var> set to <var>handler</var>.</li>

    </ol>

    </li>

    <li>Let <var>timeout</var> be the second method argument.</li>

    <li>If the currently running <a>task</a> is a task that was created
    by this algorithm, then let <var>nesting level</var> be the <a>task</a>'s <a>timer nesting level</a>. Otherwise, let <var>nesting level</var> be zero.</li>

    <li>If <var>nesting level</var> is greater than 5, and <var>timeout</var> is
    less than 4, then increase <var>timeout</var> to 4.</li>

    <li>Increment <var>nesting level</var> by one.</li>

    <li>Let <var>task</var>'s <dfn>timer nesting level</dfn> be <var>nesting
    level</var>.</li>

    <li>Return <var>handle</var>, and then continue running this algorithm
    <a>in parallel</a>.</li>

    <li>

    If <var>method context</var> is a <code>Window</code> object, wait until the
    <code>Document</code> associated with <var>method context</var> has been <a>fully
    active</a> for a further <var>timeout</var> milliseconds (not necessarily
    consecutively).

    Otherwise, <var>method context</var> is a <code>WorkerGlobalScope</code> object;
    wait until <var>timeout</var> milliseconds have passed with the worker not suspended
    (not necessarily consecutively).

    </li>

    <li>

    Wait until any invocations of this algorithm that had the same <var>method
    context</var>, that started before this one, and whose <var>timeout</var> is equal to
    or less than this one's, have completed.

    <p class="note">
  Argument conversion as defined by Web IDL (for example, invoking <code>toString()</code> methods on objects passed as the first argument) happens in the
    algorithms defined in Web IDL, before this algorithm is invoked.
  </p>

    <div class="example">
      So for example, the following rather silly code will result in the log containing "<code>ONE&nbsp;TWO&nbsp;</code>":

      <pre highlight="javascript">var log = '';
  function logger(s) { log += s + ' '; }

  setTimeout({ toString: function () {
  setTimeout("logger('ONE')", 100);
  return "logger('TWO')";
  } }, 100);</pre>
    </div>

    </li>

    <li>

    Optionally, wait a further user-agent defined length of time.

    <p class="note">
  This is intended to allow user agents to pad timeouts as needed to optimize the
    power usage of the device. For example, some processors have a low-power mode where the
    granularity of timers is reduced; on such platforms, user agents can slow timers down to fit
    this schedule instead of requiring the processor to use the more accurate mode with its
    associated higher power usage.
  </p>

    </li>

    <li>

    <a lt="queue a task">Queue</a> the <a>task</a> <var>task</var>.

    <p class="note">
  Once the task has been processed, if the <var>repeat</var> flag is
    false, it is safe to remove the entry for <var>handle</var> from the <a>list of
    active timers</a> (there is no way for the entry's existence to be detected past this point,
    so it does not technically matter one way or the other).
  </p>

    </li>

  </ol>

  The <a>task source</a> for these <a>tasks</a> is the
  <dfn>timer task source</dfn>.

  </div>

  <div class="example">
    To run tasks of several milliseconds back to back without any delay, while still yielding back
    to the browser to avoid starving the user interface (and to avoid the browser killing the script
    for hogging the CPU), simply queue the next timer before performing work:

    <pre highlight="javascript">function doExpensiveWork() {
  var done = false;
  // ...
  // this part of the function takes up to five milliseconds
  // set done to true if we're done
  // ...
  return done;
  }

  function rescheduleWork() {
  var handle = setTimeout(rescheduleWork, 0); // preschedule next iteration
  if (doExpensiveWork())
    clearTimeout(handle); // clear the timeout if we don't need it
  }

  function scheduleWork() {
  setTimeout(rescheduleWork, 0);
  }

  scheduleWork(); // queues a task to do lots of work</pre>
  </div>

<h3 id="user-prompts">User prompts</h3>

<h4 id="simple-dialogs">Simple dialogs</h4>

  <dl class="domintro">

    <dt><var>window</var> . <code>alert</code>(<var>message</var>)</dt>
    <dd>

    Displays a modal alert with the given message, and waits for the user to dismiss it.

    </dd>

    <dt><var>result</var> = <var>window</var> . <code>confirm</code>(<var>message</var>)</dt>
    <dd>

    Displays a modal OK/Cancel prompt with the given message, waits for the user to dismiss it,
    and returns true if the user clicks OK and false if the user clicks Cancel.

    </dd>

    <dt><var>result</var> = <var>window</var> . <code>prompt</code>(<var>message</var> [, <var>default</var>] )</dt>
    <dd>

    Displays a modal text field prompt with the given message, waits for the user to dismiss it,
    and returns the value that the user entered. If the user cancels the prompt, then returns null
    instead. If the second argument is present, then the given value is used as a default.

    </dd>

  </dl>

  <p class="note">
  Logic that depends on <a>tasks</a> or <a>microtasks</a>, such as <a href="#media-elements">media elements</a>
  loading their <a>media data</a>, are stalled when these methods are invoked.
  </p>

  <div class="impl">

  The <dfn><code>alert(<var>message</var>)</code></dfn> method, when
  invoked, must run the following steps:

  <ol>

    <li>If the <a>event loop</a>'s <a>termination nesting level</a> is non-zero,
    optionally abort these steps.</li>

    <li>If the <a>active sandboxing flag set</a> of the <a>active document</a> of
    the <a>responsible browsing context</a> specified by the <a>incumbent settings
    object</a> has the <a>sandboxed modals flag</a> set, then abort these
    steps.</li>

    <li>Optionally, abort these steps. (For example, the user agent might give the user the option
    to ignore all alerts, and would thus abort at this step whenever the method was
    invoked.)</li>

    <li>If the method was invoked with no arguments, then let <var>message</var> be the
    empty string; otherwise, let <var>message</var> be the method's first
    argument.</li>

    <li>Show the given <var>message</var> to the user.</li>

    <li>Optionally, <a state for="useragent">pause</a> while waiting for the user to acknowledge the
    message.</li>

  </ol>

  The <dfn><code>confirm(<var>message</var>)</code></dfn> method,
  when invoked, must run the following steps:

  <ol>

    <li>If the <a>event loop</a>'s <a>termination nesting level</a> is non-zero,
    optionally abort these steps, returning false.</li>

    <li>If the <a>active sandboxing flag set</a> of the <a>active document</a> of
    the <a>responsible browsing context</a> specified by the <a>incumbent settings
    object</a> has the <a>sandboxed modals flag</a> set, then return false and abort these
    steps.</li>

    <li>Optionally, return false and abort these steps. (For example, the user agent might give
    the user the option to ignore all prompts, and would thus abort at this step whenever the method
    was invoked.)</li>

    <li>Show the given <var>message</var> to the user, and ask the user to respond with a
    positive or negative response.</li>

    <li><a state for="useragent">Pause</a> until the user responds either positively or negatively.</li>

    <li>If the user responded positively, return true; otherwise, the user responded negatively:
    return false.</li>

  </ol>

  The <dfn><code>prompt(<var>message</var>, <var>default</var>)</code></dfn> method, when invoked, must run the following steps:

  <ol>

    <li>If the <a>event loop</a>'s <a>termination nesting level</a> is non-zero,
    optionally abort these steps, returning null.</li>

    <li>If the <a>active sandboxing flag set</a> of the <a>active document</a> of
    the <a>responsible browsing context</a> specified by the <a>incumbent settings
    object</a> has the <a>sandboxed modals flag</a> set, then return null and abort these
    steps.</li>

    <li>Optionally, return null and abort these steps. (For example, the user agent might give the
    user the option to ignore all prompts, and would thus abort at this step whenever the method was
    invoked.)</li>

    <li>Show the given <var>message</var> to the user, and ask the user to either respond
    with a string value or abort. The response must be defaulted to the value given by
    <var>default</var>.</li>

    <li><a state for="useragent">Pause</a> while waiting for the user's response.</li>

    <li>If the user aborts, then return null; otherwise, return the string that the user responded
    with.</li>

  </ol>

  </div>

<h4 id="printing">Printing</h4>

  <dl class="domintro">

    <dt><var>window</var> . <code>print</code>()</dt>

    <dd>

    Prompts the user to print the page.

    </dd>

  </dl>

  <div class="impl">

  When the <dfn><code>print()</code></dfn> method is invoked, if the
  <code>Document</code> is <a>ready for post-load tasks</a>, then the user agent must
  run the <a>printing steps</a> <a>in parallel</a>. Otherwise, the user agent must only set the
  <dfn>print when loaded</dfn> flag on the {{Document}}.

  User agents should also run the <a>printing steps</a> whenever the user asks for the
  opportunity to <a>obtain a physical form</a> (e.g., printed copy), or the representation of a
  physical form (e.g., PDF copy), of a document.

  The <dfn>printing steps</dfn> are as follows:

  <ol>

    <li>

    The user agent may display a message to the user or abort these steps (or both).

    <p class="example">
  For instance, a kiosk browser could silently ignore any invocations of the
    <code>print()</code> method.
  </p>

    <p class="example">
  For instance, a browser on a mobile device could detect that there are no
    printers in the vicinity and display a message saying so before continuing to offer a "save to
    PDF" option.
  </p>

    </li>

    <li>

      If the <a>active sandboxing flag set</a> of the <a>active document</a> of
      the <a>responsible browsing context</a> specified by the <a>incumbent settings
      object</a> has the <a>sandboxed modals flag</a> set, then abort these
      steps.

      <p class="note">
  If the printing dialog is blocked by a <code>Document</code>'s sandbox,
      then neither the <code>beforeprint</code> nor <code>afterprint</code> events will be fired.
  </p>

    </li>

    <li>

    The user agent must <a>fire a simple event</a> named <code>beforeprint</code> at the <code>Window</code> object of the
    <code>Document</code> that is being printed, as well as any <a>nested browsing contexts</a> in it.

    <p class="example">
  The <code>beforeprint</code> event can be used to
    annotate the printed copy, for instance adding the time at which the document was printed.
  </p>

    </li>

    <li>

    The user agent should offer the user the opportunity to <a>obtain a physical form</a>
    (or the representation of a physical form) of the document. The user agent may wait for the user
    to either accept or decline before returning; if so, the user agent must <a state for="useragent">pause</a>
    while the method is waiting. Even if the user agent doesn't wait at this point, the user agent
    must use the state of the relevant documents as they are at this point in the algorithm if and
    when it eventually creates the alternate form.

    </li>

    <li>

    The user agent must <a>fire a simple event</a> named <code>afterprint</code> at the <code>Window</code> object of the
    <code>Document</code> that is being printed, as well as any <a>nested browsing contexts</a> in it.

    <p class="example">
  The <code>afterprint</code> event can be used to
    revert annotations added in the earlier event, as well as showing post-printing UI. For
    instance, if a page is walking the user through the steps of applying for a home loan, the
    script could automatically advance to the next step after having printed a form or other.
  </p>

    </li>

  </ol>

  </div>

<h4 id="dialogs-implemented-using-separate-documents-with-showmodaldialog">Dialogs implemented using separate documents with <code>showModalDialog()</code></h4>

  <p class="critical">This feature is in the process of being removed from the Web platform. (This
  is a long process that takes many years.) Using the <code>showModalDialog()</code> API at this time is highly discouraged.

  <div class="impl">

  The <dfn><code>showModalDialog(<var>url</var>, <var>argument</var>)</code></dfn> method, when invoked,
  must cause the user agent to run the following steps:

  <ol>

    <li>

    <a>Resolve</a> <var>url</var> relative to the
    <a>API base URL</a> specified by the <a>entry settings object</a>.

    If this fails, then throw a <code>SyntaxError</code> exception and abort these steps.

    </li>

    <li>If the <a>event loop</a>'s <a>termination nesting level</a> is non-zero,
    optionally abort these steps, returning the empty string.</li>


    <li>

    If the user agent is configured such that this invocation of <code>showModalDialog()</code> is somehow disabled, then return the empty
    string and abort these steps.

    <p class="note">
  User agents are expected to disable this method in certain cases to avoid user
    annoyance (e.g., as part of their popup blocker feature). For instance, a user agent could
    require that a site be safelisted before enabling this method, or the user agent could be
    configured to only allow one modal dialog at a time.
  </p>

    </li>

    <li>

    If the <a>active sandboxing flag set</a> of the <a>active document</a> of the
    <a>responsible browsing context</a> specified by the <a>incumbent settings
    object</a> has either the <a>sandboxed auxiliary navigation browsing context flag</a>
    or <a>sandboxed modals flag</a> set, then return the empty string and abort these
    steps.

    </li>

    <li>

    Let <var>incumbent origin</var> be the <a>effective script origin</a>
    specified by the <a>incumbent settings object</a> at the time the <code>showModalDialog()</code> method was called.

    </li>

    <li>

    Let <var>the list of background browsing contexts</var> be a list of all the
    browsing contexts that:

    <ul>

      <li>are part of the same <a>unit of related browsing contexts</a> as the browsing context
      of the <code>Window</code> object on which the <code>showModalDialog()</code> method was called, and that</li>

      <li>have an <a>active document</a> whose <a>origin</a> is the same as <var>incumbent origin</var>,</li>

    </ul>

    ...as well as any browsing contexts that are nested inside any of the browsing contexts
    matching those conditions.

    </li>

    <li>

    Disable the user interface for all the browsing contexts in <var>the list of
    background browsing contexts</var>. This should prevent the user from navigating those browsing
    contexts, causing events to be sent to those browsing context, or editing any content in those
    browsing contexts. However, it does not prevent those browsing contexts from receiving events
    from sources other than the user, from running scripts, from running animations, and so
    forth.

    </li>

    <li>

    Create a new <a>auxiliary browsing context</a>, with the <a>opener browsing context</a> being the browsing context of the <code>Window</code> object on which the <code>showModalDialog()</code> method was called. The new auxiliary
    browsing context has no name.

    <p class="note">
  This <a>browsing context</a>'s <code>Document</code>s' <code>Window</code>
    objects all implement the <code>WindowModal</code> interface.
  </p>

    </li>

    <li>

    Set all the flags in the new browsing context's <a>popup sandboxing flag set</a> that
    are set in the <a>active sandboxing flag set</a> of the <a>active document</a> of
    the <a>responsible browsing context</a> specified by the <a>incumbent settings
    object</a>. The <a>responsible browsing context</a> specified by the <a>incumbent
    settings object</a> must be set as the new browsing context's <a>one permitted sandboxed
    navigator</a>.

    </li>

    <li>

    Let the <a>dialog arguments</a> of the new browsing context be set to the value of <var>argument</var>, or the <i>undefined</i> value if the argument was omitted.

    </li>

    <li>

    Let the <a>dialog arguments' origin</a> be <var>incumbent origin</var>.

    </li>

    <li>

    Let the <a>return value</a> of the new browsing context be the <i>undefined</i> value.

    </li>

    <li>

    Let the <a>return value origin</a> be <var>incumbent origin</var>.

    </li>

    <li>

    <a>Navigate</a> the new <a>browsing context</a> to
    the <a>absolute URL</a> that resulted from <a>resolving</a>
    <var>url</var> earlier, with <a>replacement enabled</a>, and with the
    <a>responsible browsing context</a> specified by the <a>incumbent settings
    object</a> as the <a>source browsing context</a>.

    </li>

    <li>

    <a>Spin the event loop</a> until the new <a>browsing context</a> is closed. The user agent must allow the user to indicate
    that the <a>browsing context</a> is to be closed.

    </li>

    <li>

    Reenable the user interface for all the browsing contexts in <var>the list of
    background browsing contexts</var>.

    </li>

    <li>

    If the <a>auxiliary browsing context</a>'s <a>return value origin</a> at the time
    the browsing context was closed was the same as <var>incumbent origin</var>, then let <var>return value</var> be the <a>auxiliary browsing context</a>'s <a>return
    value</a> as it stood when the browsing context was closed.

    Otherwise, let <var>return value</var> be undefined.

    </li>

    <li>

    Return <var>return value</var>.

    </li>

  </ol>

  The <code>Window</code> objects of <code>Document</code>s hosted by <a>browsing contexts</a> created by the above algorithm must also implement the
  <code>WindowModal</code> interface.

  <p class="note">
  When this happens, the members of the <code>WindowModal</code> interface, in
  JavaScript environments, appear to actually be part of the <code>Window</code> interface (e.g.,
  they are on the same prototype chain as the <code>window.alert()</code>
  method).
  </p>

  </div>

  <pre class="idl" data-highlight="webidl" dfn-for="WindowModal">
    [NoInterfaceObject]
    interface WindowModal {
      readonly attribute any dialogArguments;
      attribute any returnValue;
    };
  </pre>

  <dl class="domintro">

    <dt><var>window</var> . <code>dialogArguments</code></dt>

    <dd>

    Returns the <var>argument</var> argument that was passed to the <code>showModalDialog()</code> method.

    </dd>

    <dt><var>window</var> . <code>returnValue</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the current return value for the window.

    Can be set, to change the value that will be returned by the <code>showModalDialog()</code> method.

    </dd>

  </dl>

  <div class="impl">

  Such browsing contexts have associated <dfn>dialog arguments</dfn>, which are stored along with
  the <dfn>dialog arguments' origin</dfn>. These values are set by the <code>showModalDialog()</code> method in the algorithm above, when the
  browsing context is created, based on the arguments provided to the method.

  The <dfn attribute for="WindowModal"><code>dialogArguments</code></dfn> IDL
  attribute, on getting, must check whether its browsing context's <a>active document</a>'s
  <a>effective script origin</a> is the same as the <a>dialog arguments'
  origin</a>. If it is, then the browsing context's <a>dialog arguments</a> must be
  returned unchanged. Otherwise, the IDL attribute must return <i>undefined</i>.

  These browsing contexts also have an associated <dfn>return value</dfn> and <dfn>return value
  origin</dfn>. As with the previous two values, these values are set by the <code>showModalDialog()</code> method in the algorithm above, when the
  browsing context is created.

  The <dfn attribute for="WindowModal"><code>returnValue</code></dfn> IDL attribute, on
  getting, must check whether its browsing context's <a>active document</a>'s <a>effective
  script origin</a> is the same as the current <a>return
  value origin</a>. If it is, then the browsing context's <a>return value</a> must be
  returned unchanged. Otherwise, the IDL attribute must return <i>undefined</i>. On setting, the
  attribute must set the <a>return value</a> to the given new value, and the <a>return
  value origin</a> to the browsing context's <a>active document</a>'s <a>effective
  script origin</a>.

  </div>

  <p class="note">
  The <code>window.close()</code> method can be used to
  close the browsing context.
  </p>

<h3 id="system-state-and-capabilities">System state and capabilities</h3>

<h4 id="the-navigator-object">The <code>Navigator</code> object</h4>

  <div class="impl">

  The <dfn attribute for="Window"><code>navigator</code></dfn> attribute of the
  {{Window}} interface must return an instance of the <code>Navigator</code> interface,
  which represents the identity and state of the user agent (the client), and allows Web pages to
  register themselves as potential protocol and content handlers:

  </div>

  <pre class="idl" data-highlight="webidl" dfn-for="Navigator">
    interface Navigator {
      // objects implementing this interface also implement the interfaces given below
    };
    Navigator implements NavigatorID;
    Navigator implements NavigatorLanguage;
    Navigator implements NavigatorOnLine;
    Navigator implements NavigatorContentUtils;
    Navigator implements NavigatorCookies;
    Navigator implements NavigatorPlugins;
  </pre>

  <div class="impl">

  These interfaces are defined separately so that other specifications can re-use parts of the
  <code>Navigator</code> interface.

  </div>

<h5 id="client-identification">Client identification</h5>

  <pre class="idl" data-highlight="webidl" dfn-for="NavigatorID">
    [NoInterfaceObject, Exposed=(Window, Worker)]
    interface NavigatorID {
      [Exposed=Window] readonly attribute DOMString appCodeName; // constant "Mozilla"
      readonly attribute DOMString appName; // constant "Netscape"
      readonly attribute DOMString appVersion;
      readonly attribute DOMString platform;
      [Exposed=Window]readonly attribute DOMString product; // constant "Gecko"
      readonly attribute DOMString userAgent;
    };
  </pre>

  In certain cases, despite the best efforts of the entire industry, Web browsers have bugs and
  limitations that Web authors are forced to work around.

  This section defines a collection of attributes that can be used to determine, from script, the
  kind of user agent in use, in order to work around these issues.

  Client detection should always be limited to detecting known current versions; future versions
  and unknown versions should always be assumed to be fully compliant.

  <dl class="domintro">

    <dt><var>window</var> . <code>navigator</code> . <code>appCodeName</code></dt>
    <dd>
    Returns the string "<code>Mozilla</code>".
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>appName</code></dt>
    <dd>
    Returns the string "<code>Netscape</code>".
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>appVersion</code></dt>
    <dd>
    Returns the version of the browser.
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>platform</code></dt>
    <dd>
    Returns the name of the platform.
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>product</code></dt>
    <dd>
    Returns the string "<code>Gecko</code>".
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>taintEnabled</code>()</dt>
    <dd>
    Returns either the string "<code>20030107</code>", or the string "<code>20100101</code>".
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>userAgent</code></dt>
    <dd>
    Returns the complete User-Agent header.
    </dd>

  </dl>

  <div class="impl">

  <dl>

    <dt><dfn attribute for="NavigatorID"><code>appCodeName</code></dfn></dt>
    <dd>Must return the string "<code>Mozilla</code>".</dd>

    <dt><dfn attribute for="NavigatorID"><code>appName</code></dfn></dt>
    <dd>Must return the string "<code>Netscape</code>".</dd>

    <dt><dfn attribute for="NavigatorID"><code>appVersion</code></dfn></dt>
    <dd>Must return either the string "<code>4.0</code>" or a string representing the
    version of the browser in detail, e.g., "<code>1.0 (VMS; en-US)
    Mellblomenator/9000</code>".</dd>

    <dt><dfn attribute for="NavigatorID"><code>platform</code></dfn></dt>
    <dd>Must return either the empty string or a string representing the platform on which the
    browser is executing, e.g., "<code>MacIntel</code>", "<code>Win32</code>",
    "<code>FreeBSD i386</code>", "<code>WebTV OS</code>".</dd>

    <dt><dfn attribute for="NavigatorID"><code>product</code></dfn></dt>
    <dd>Must return the string "<code>Gecko</code>".</dd>

    <dt><dfn method for="NavigatorID"><code>taintEnabled()</code></dfn></dt>
    <dd>Must return false.</dd>

    <dt><dfn attribute for="NavigatorID"><code>userAgent</code></dfn></dt>
    <dd>Must return the string used for the value of the "<code>User-Agent</code>" header
    in HTTP requests, or the empty string if no such header is ever sent.</dd>

    </dl>

  <p class="warning">Any information in this API that varies from user to user can be used to
  profile the user. In fact, if enough such information is available, a user can actually be
  uniquely identified. For this reason, user agent implementors are strongly urged to include as
  little information in this API as possible.
  </p>


  </div>

<h5 id="language-preferences">Language preferences</h5>

  <pre class="idl" data-highlight="webidl" dfn-for="NavigatorLanguage">
    [NoInterfaceObject, Exposed=(Window, Worker)]
    interface NavigatorLanguage {
      readonly attribute DOMString? language;
      readonly attribute DOMString[] languages;
    };
  </pre>

  <dl class="domintro">

    <dt><var>window</var> . <code>navigator</code> . <code>language</code></dt>
    <dd>
    Returns a language tag representing the user's preferred language.
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>languages</code></dt>
    <dd>
    Returns an array of language tags representing the user's preferred languages, with the most preferred language first.
    The most preferred language is the one returned by <code>navigator.language</code>.
    </dd>

  </dl>

  <p class="note">
  A <code>languagechange</code> event is fired at the
  <code>Window</code> or <code>WorkerGlobalScope</code> object when the user agent's understanding
  of what the user's preferred languages are changes.
  </p>

  <div class="impl">

  <dl>

    <dt><dfn attribute for="NavigatorLanguage"><code>language</code></dfn></dt>
    <dd>Must return a valid BCP 47 language tag representing either <a>a plausible
    language</a> or the user's most preferred language. [[!BCP47]]</dd>

    <dt><dfn attribute for="NavigatorLanguage"><code>languages</code></dfn></dt>
    <dd>

    Must return a <a>read only</a> array of valid BCP 47
    language tags representing either one or more <a>plausible
    languages</a>, or the user's preferred languages, ordered by preference with the most
    preferred language first. The same object must be returned until the user agent needs to return
    different values, or values in a different order. [[!BCP47]]

    Whenever the user agent needs to make the <code>navigator.languages</code> attribute of a <code>Window</code>
    or <code>WorkerGlobalScope</code> object return a new set of language tags, the user agent must
    <a>queue a task</a> to <a>fire a simple event</a> named <code>languagechange</code> at the <code>Window</code> or
    <code>WorkerGlobalScope</code> object and wait until that task begins to be executed before
    actually returning a new value.

    The <a>task source</a> for this <a>task</a> is the
    <a>DOM manipulation task source</a>.

    </dd>

  </dl>

  To determine <dfn lt="plausible languages|a plausible language">a plausible language</dfn>, the user agent should bear in mind the following:

  <ul>

    <li>Any information in this API that varies from user to user can be used to profile or identify
    the user.

    </li>

    <li>If the user is not using a service that obfuscates the user's point of origin (e.g., the Tor
    anonymity network), then the value that is least likely to distinguish the user from other users
    with similar origins (e.g., from the same IP address block) is the language used by the majority
    of such users. [[TOR]]</li>

    <li>If the user is using an anonymizing service, then the value "<code>en-US</code>" is
    suggested; if all users of the service use that same value, that reduces the possibility of
    distinguishing the users from each other.</li>

  </ul>

  To avoid introducing any more fingerprinting vectors, user agents should use the same list for
  the APIs defined in this function as for the HTTP <code>Accept-Language</code> header.

  </div>

<h5 id="custom-scheme-and-content-handlers-the-registerprotocolhandler-and-registercontenthandler-methods">Custom scheme and content handlers: the <code>registerProtocolHandler()</code> and <code>registerContentHandler()</code> methods</h5>

  <pre class="idl" data-highlight="webidl" dfn-for="NavigatorContentUtils">
    [NoInterfaceObject]
    interface NavigatorContentUtils {
      // content handler registration
      void registerProtocolHandler(DOMString scheme, DOMString url, DOMString title);
      void registerContentHandler(DOMString mimeType, DOMString url, DOMString title);
      DOMString isProtocolHandlerRegistered(DOMString scheme, DOMString url);
      DOMString isContentHandlerRegistered(DOMString mimeType, DOMString url);
      void unregisterProtocolHandler(DOMString scheme, DOMString url);
      void unregisterContentHandler(DOMString mimeType, DOMString url);
    };
  </pre>

  The <dfn lt="a registered handler"></dfn><dfn method for="NavigatorContentUtils"><code>registerProtocolHandler()</code></dfn> method
  allows Web sites to register themselves as possible handlers for particular schemes. For example,
  an online telephone messaging service could register itself as a handler of the <code>sms:</code> scheme, so that if the user clicks on such a link, he is given the
  opportunity to use that Web site. Analogously, the <dfn method for="NavigatorContentUtils"><code>registerContentHandler()</code></dfn> method allows
  Web sites to register themselves as possible handlers for content in a particular <a>MIME
  type</a>. For example, the same online telephone messaging service could register itself as a
  handler for <code>text/vcard</code> files, so that if the user has no native application capable
  of handling vCards, his Web browser can instead suggest he use that site to view contact
  information stored on vCards that he opens. [[!RFC5724]] [[!RFC6350]]

  <dl class="domintro">

    <dt><var>window</var> . <code>navigator</code> . <code>registerProtocolHandler</code>(<var>scheme</var>, <var>url</var>, <var>title</var>)</dt>
    <dt><var>window</var> . <code>navigator</code> . <code>registerContentHandler</code>(<var>mimeType</var>, <var>url</var>, <var>title</var>)</dt>

    <dd>

    Registers a handler for the given scheme or content type, at the given URL, with the given
    title.

    The string "<code>%s</code>" in the URL is used as a placeholder for where to put
    the URL of the content to be handled.

    Throws a <code>SecurityError</code> exception if the user agent blocks the registration (this
    might happen if trying to register as a handler for "http", for instance).

    Throws a <code>SyntaxError</code> exception if the "<code>%s</code>" string is
    missing in the URL.

    </dd>

  </dl>

  <div class="impl">

  User agents may, within the constraints described in this section, do whatever they like when
  the methods are called. A user agent could, for instance, prompt the user and offer the user the
  opportunity to add the site to a shortlist of handlers, or make the handlers his default, or
  cancel the request. user agents could provide such a UI through modal UI or through a non-modal transient
  notification interface. user agents could also simply silently collect the information, providing it only
  when relevant to the user.

  User agents should keep track of which sites have registered handlers (even if the user has
  declined such registrations) so that the user is not repeatedly prompted with the same
  request.

  The arguments to the methods have the following meanings and corresponding implementation
  requirements. The requirements that involve throwing exceptions must be processed in the order
  given below, stopping at the first exception thrown. (So the exceptions for the first argument
  take precedence over the exceptions for the second argument.)

  <dl>

    <dt><var>scheme</var> (<code>registerProtocolHandler()</code> only)</dt>

    <dd>

    A scheme, such as "<code>mailto</code>" or "<code>web+auth</code>". The
    scheme must be compared in an <a>ASCII case-insensitive</a> manner by user agents for the
    purposes of comparing with the scheme part of URLs that they consider against the list of
    registered handlers.

    The <var>scheme</var> value, if it contains a colon (as in "<code>mailto:</code>"),
    will never match anything, since schemes don't contain colons.

    If the <code>registerProtocolHandler()</code>
    method is invoked with a scheme that is neither a <a>safelisted scheme</a> nor a scheme
    whose value starts with the substring "<code>web+</code>" and otherwise contains only
    <a>lowercase ASCII letters</a>, and whose length is at least five characters (including
    the "<code>web+</code>" prefix), the user agent must throw a <code>SecurityError</code>
    exception.

    The following schemes are the <dfn>safelisted schemes</dfn>:

    <ul class="brief">
      <li><code>bitcoin</code></li>
      <li><code>geo</code></li>
      <li><code>im</code></li>
      <li><code>irc</code></li>
      <li><code>ircs</code></li>
      <li><code>magnet</code></li>
      <li><code>mailto</code></li>
      <li><code>mms</code></li>
      <li><code>news</code></li>
      <li><code>nntp</code></li>
      <li><code>openpgp4fpr</code></li>
      <li><code>sip</code></li>
      <li><code>sms</code></li>
      <li><code>smsto</code></li>
      <li><code>ssh</code></li>
      <li><code>tel</code></li>
      <li><code>urn</code></li>
      <li><code>webcal</code></li>
      <li><code>wtai</code></li>
      <li><code>xmpp</code></li>
    </ul>

    <p class="note">
      This list can be changed. If there are schemes that should be added, please send feedback.
    </p>

    <p class="note">
  This list excludes any schemes that could reasonably be expected to be supported
    inline, e.g., in an <{iframe}>, such as <code>http</code> or (more
    theoretically) <code>gopher</code>. If those were supported, they could potentially be
    used in man-in-the-middle attacks, by replacing pages that have frames with such content with
    content under the control of the protocol handler. If the user agent has native support for the
    schemes, this could further be used for cookie-theft attacks.
  </p>

    </dd>

    <dt><var>mimeType</var> (<code>registerContentHandler()</code> only)</dt>

    <dd>

    A <a>MIME type</a>, such as <code>model/vnd.flatland.3dml</code> or <code>application/vnd.google-earth.kml+xml</code>. The <a>MIME type</a> must be
    compared in an <a>ASCII case-insensitive</a> manner by user agents for the purposes of
    comparing with MIME types of documents that they consider against the list of registered
    handlers.

    User agents must compare the given values only to the MIME type/subtype parts of content
    types, not to the complete type including parameters. Thus, if <var>mimeType</var>
    values passed to this method include characters such as commas or whitespace, or include MIME
    parameters, then the handler being registered will never be used.

    <p class="note">
  The type is compared to the <a>MIME type</a> used by the user agent
    <em>after</em> the sniffing algorithms have been applied.
  </p>

    If the <code>registerContentHandler()</code>
    method is invoked with a <a>MIME type</a> that is in the <a>type blocklist</a> or
    that the user agent has deemed a privileged type, the user agent must throw a
    <code>SecurityError</code> exception.

    The following <a>MIME types</a> are in the <dfn>type
    blocklist</dfn>:

    <ul class="brief">

      <li><code>application/x-www-form-urlencoded</code></li>
      <li><code>application/xhtml+xml</code></li>
      <li><code>application/xml</code></li>
      <li><code>image/gif</code></li>
      <li><code>image/jpeg</code></li>
      <li><code>image/png</code></li>
      <li><code>image/svg+xml</code></li>
      <li><code>multipart/x-mixed-replace</code></li>
      <li><code>text/cache-manifest</code></li>
      <li><code>text/css</code></li>
      <li><a href="#text-html"><code>text/html</code></a></li>
      <li><code>text/ping</code></li>
      <li><code>text/plain</code></li>
      <li><code>text/vtt</code></li>
      <li><code>text/xml</code></li>
      <li>All types that the user agent supports displaying natively in a <a>browsing context</a> during <a>navigation</a>, except for <code>application/rss+xml</code> and <code>application/atom+xml</code></li>

    </ul>

    <p class="note">
  This list can be changed. If there are MIME types that should be added, please
    send feedback.
  </p>

    </dd>

    <dt><var>url</var></dt>

    <dd>

    A string used to build the <a for="url">URL</a> of the page that will handle the requests.

    User agents must throw a <code>SyntaxError</code> exception if the <var>url</var>
    argument passed to one of these methods does not contain the exact literal string
    "<code>%s</code>".

    User agents must throw a <code>SyntaxError</code> exception if <a>resolving</a> the <var>url</var> argument relative to the <a>API base
    URL</a> specified by the <a>entry settings object</a> is not successful.

    <p class="note">
  The <a>resulting absolute URL</a> would by definition not be a <a>valid
    URL</a> as it would include the string "<code>%s</code>" which is not a valid
    component in a URL.
  </p>

    User agents must throw a <code>SecurityError</code> exception if the resulting <a>absolute
    URL</a> has an <a>origin</a> that differs from the <a>origin</a> specified by the
    <a>entry settings object</a>.

    <p class="note">
  This is forcibly the case if the <code>%s</code> placeholder is in the
    scheme, host, or port parts of the URL.
  </p>

    The <a>resulting absolute URL</a> is the <dfn>proto-URL</dfn>. It identifies the
    handler for the purposes of the methods described below.

    When the user agent uses this handler, it must replace the first occurrence of the exact
    literal string "<code>%s</code>" in the <var>url</var> argument with an
    escaped version of the <a>absolute URL</a> of the content in question (as defined below),
    then <a>resolve</a> the resulting URL, relative to the <a>API
    base URL</a> specified by the <a>entry settings object</a> at the time the <code>registerContentHandler()</code> or <code>registerProtocolHandler()</code> methods were
    invoked, and then <a>navigate</a> an appropriate <a>browsing
    context</a> to the resulting URL.

    To get the escaped version of the <a>absolute URL</a> of the content in question, the
    user agent must replace every character in that <a>absolute URL</a> that is not a
    character in the URL <a>default encode set</a> with the result of <a lt="utf-8 percent encode">UTF-8 percent encoding</a> that character.

    <div class="example">
      If the user had visited a site at <code>http://example.com/</code> that made the
      following call:

      <pre highlight="javascript">navigator.registerContentHandler('application/x-soup', 'soup?url=%s', 'SoupWeb&trade;')</pre>

      ...and then, much later, while visiting <code>http://www.example.net/</code>,
      clicked on a link such as:

      <pre highlight="html">
  &lt;a href="chickenk&#xEF;wi.soup">Download our Chicken K&#xEF;wi soup!&lt;/a>
  </pre>

      ...then, assuming this <code>chickenk&#xEF;wi.soup</code> file was served with the
      <a>MIME type</a> <code>application/x-soup</code>, the user agent might navigate to the
      following URL:

      <pre>http://example.com/soup?url=http://www.example.net/chickenk%C3%AFwi.soup</pre>

      This site could then fetch the <code>chickenk&#xEF;wi.soup</code> file and do
      whatever it is that it does with soup (synthesize it and ship it to the user, or whatever).
    </div>

    </dd>

    <dt><var>title</var></dt>

    <dd>

    A descriptive title of the handler, which the user agent might use to remind the user what the site
    in question is.

    </dd>

  </dl>

  This section does not define how the pages registered by these methods are used, beyond the
  requirements on how to process the <var>url</var> value (see above). To some extent, the
  <a>processing model for navigating across documents</a> defines some cases
  where these methods are relevant, but in general user agents may use this information wherever they would
  otherwise consider handing content to native plugins or helper applications.

  user agents must not use registered content handlers to handle content that was returned as part of a
  non-GET transaction (or rather, as part of any non-idempotent transaction), as the remote site
  would not be able to fetch the same data.

  <hr />

  </div>

  In addition to the registration methods, there are also methods for determining if particular
  handlers have been registered, and for unregistering handlers.

  <dl class="domintro">

    <dt><var>state</var> = <var>window</var> . <code>navigator</code> . <code>isProtocolHandlerRegistered</code>(<var>scheme</var>, <var>url</var>)</dt>
    <dt><var>state</var> = <var>window</var> . <code>navigator</code> . <code>isContentHandlerRegistered</code>(<var>mimeType</var>, <var>url</var>)</dt>

    <dd>

    Returns one of the following strings describing the state of the handler given by the
    arguments:

    <dl>

      <dt><code>new</code>

      <dd>Indicates that no attempt has been made to register the given handler (or that the handler
      has been unregistered). It would be appropriate to promote the availability of the handler or
      to just automatically register the handler.

      <dt><code>registered</code>

      <dd>Indicates that the given handler has been registered or that the site is blocked from
      registering the handler. Trying to register the handler again would have no effect.

      <dt><code>declined</code>

      <dd>Indicates that the given handler has been offered but was rejected. Trying to register the
      handler again may prompt the user again.

    </dl>

    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>unregisterProtocolHandler</code>(<var>scheme</var>, <var>url</var>)</dt>
    <dt><var>window</var> . <code>navigator</code> . <code>unregisterContentHandler</code>(<var>mimeType</var>, <var>url</var>)</dt>

    <dd>

    Unregisters the handler given by the arguments.

    </dd>

  </dl>

  <div class="impl">

  The <dfn method for="NavigatorContentUtils"><code>isProtocolHandlerRegistered()</code></dfn>
  method must return the <a>handler state string</a> that most closely describes the current
  state of the handler described by the two arguments to the method, where the first argument gives
  the scheme and the second gives the string used to build the <a for="url">URL</a> of the page that
  will handle the requests.

  The first argument must be compared to the schemes for which custom protocol handlers are
  registered in an <a>ASCII case-insensitive</a> manner to find the relevant handlers.

  The second argument must be preprocessed as described below, and if that is successful, must
  then be matched against the <a>proto-URLs</a> of the relevant handlers to
  find the described handler.

  <hr />

  The <dfn method for="NavigatorContentUtils"><code>isContentHandlerRegistered()</code></dfn>
  method must return the <a>handler state string</a> that most closely describes the current
  state of the handler described by the two arguments to the method, where the first argument gives
  the <a>MIME type</a> and the second gives the string used to build the <a for="url">URL</a> of
  the page that will handle the requests.

  The first argument must be compared to the <a>MIME types</a> for which
  custom content handlers are registered in an <a>ASCII case-insensitive</a> manner to find
  the relevant handlers.

  The second argument must be preprocessed as described below, and if that is successful, must
  then be matched against the <a>proto-URLs</a> of the relevant handlers to
  find the described handler.

  <hr />

  The <dfn>handler state strings</dfn> are the following strings.
  Each string describes several situations, as given by the following list.

  <dl>

    <dt><code>new</code>

    <dd>The described handler has never been registered for the given scheme or type.

    <dd>The described handler was once registered for the given scheme or type, but the site has
    since unregistered it. If the handler were to be reregistered, the user would be notified
    accordingly.

    <dd>The described handler was once registered for the given scheme or type, but the site has
    since unregistered it, but the user has indicated that the site is to be blocked from registering
    the type again, so the user agent would ignore further registration attempts.

    <dt><code>registered</code>

    <dd>An attempt was made to register the described handler for the given scheme or type, but the
    user has not yet been notified, and the user agent would ignore further registration attempts.
    (Maybe the user agent batches registration requests to display them when the user requests to be
    notified about them, and the user has not yet requested that the user agent notify it of the
    previous registration attempt.)

    <dd>The described handler is registered for the given scheme or type (maybe, or maybe not, as the
    default handler).

    <dd>The described handler is permanently blocked from being (re)registered. (Maybe the user
    marked the registration attempt as spam, or blocked the site for other reasons.)

    <dt><code>declined</code>

    <dd>An attempt was made to register the described handler for the given scheme or type, but the
    user has not yet been notified; however, the user might be notified if another registration
    attempt were to be made. (Maybe the last registration attempt was made while the page was in the
    background and the user closed the page without looking at it, and the user agent requires
    confirmation for this registration attempt.)

    <dd>An attempt was made to register the described handler for the given scheme or type, but the
    user has not yet responded.

    <dd>An attempt was made to register the described handler for the given scheme or type, but the
    user declined the offer. The user has not indicated that the handler is to be permanently
    blocked, however, so another attempt to register the described handler might result in the user
    being prompted again.

    <dd>The described handler was once registered for the given scheme or type, but the user has
    since removed it. The user has not indicated that the handler is to be permanently blocked,
    however, so another attempt to register the described handler might result in the user being
    prompted again.

  </dl>

  <hr />

  The <dfn method for="NavigatorContentUtils"><code>unregisterProtocolHandler()</code></dfn>
  method must unregister the handler described by the two arguments to the method, where the first
  argument gives the scheme and the second gives the string used to build the <a for="url">URL</a> of
  the page that will handle the requests.

  The first argument must be compared to the schemes for which custom protocol handlers are
  registered in an <a>ASCII case-insensitive</a> manner to find the relevant handlers.

  The second argument must be preprocessed as described below, and if that is successful, must
  then be matched against the <a>proto-URLs</a> of the relevant handlers to
  find the described handler.

  <hr />

  The <dfn method for="NavigatorContentUtils"><code>unregisterContentHandler()</code></dfn>
  method must unregister the handler described by the two arguments to the method, where the first
  argument gives the <a>MIME type</a> and the second gives the string used to build the
  <a for="url">URL</a> of the page that will handle the requests.

  The first argument must be compared to the <a>MIME types</a> for which
  custom content handlers are registered in an <a>ASCII case-insensitive</a> manner to find
  the relevant handlers.

  The second argument must be preprocessed as described below, and if that is successful, must
  then be matched against the <a>proto-URLs</a> of the relevant handlers to
  find the described handler.

  <hr />

  The second argument of the four methods described above must be preprocessed as follows:

  <ol>

    <li>If the string does not contain the substring "<code>%s</code>", abort these
    steps. There's no matching handler.</li>

    <li><a>Resolve</a> the string relative to the <a>API base
    URL</a> specified by the <a>entry settings object</a>.</li>

    <li>If this fails, then throw a <code>SyntaxError</code> exception, aborting the
    method.</li>

    <li>If the <a>resulting absolute URL</a>'s <a>origin</a> is not the <a>same
    origin</a> as the <a>origin</a> specified by the <a>entry settings object</a>,
    throw a <code>SecurityError</code> exception, aborting the method.</li>

    <li>Return the <a>resulting absolute URL</a> as the result of preprocessing the
    argument.</li>

  </ol>

  </div>

  <div class="impl">
    <h6 id="security-and-privacy">Security and privacy</h6>

      These mechanisms can introduce a number of concerns, in particular privacy concerns.

      <strong>Hijacking all Web usage.</strong> User agents should not allow schemes that are key to
      its normal operation, such as <code>http</code> or <code>https</code>, to be
      rerouted through third-party sites. This would allow a user's activities to be trivially tracked,
      and would allow user information, even in secure connections, to be collected.

      <strong>Hijacking defaults.</strong> User agents are strongly urged to not automatically change
      any defaults, as this could lead the user to send data to remote hosts that the user is not
      expecting. New handlers registering themselves should never automatically cause those sites to be
      used.

      <strong>Registration spamming.</strong> User agents should consider the possibility that a site
      will attempt to register a large number of handlers, possibly from multiple domains (e.g., by
      redirecting through a series of pages each on a different domain, and each registering a handler
      for <code>video/mpeg</code> &mdash; analogous practices abusing other Web browser features have
      been used by pornography Web sites for many years). User agents should gracefully handle such
      hostile attempts, protecting the user.

      <strong>Misleading titles.</strong> User agents should not rely wholly on the <var>title</var>
      argument to the methods when presenting the registered handlers to the user, since sites could
      easily lie. For example, a site <code>hostile.example.net</code> could claim that it was
      registering the "Cuddly Bear Happy Content Handler". User agents should therefore use the
      handler's domain in any UI along with any title.

      <strong>Hostile handler metadata.</strong> User agents should protect against typical attacks
      against strings embedded in their interface, for example ensuring that markup or escape characters
      in such strings are not executed, that null bytes are properly handled, that over-long strings do
      not cause crashes or buffer overruns, and so forth.

      <strong>Leaking Intranet URLs.</strong> The mechanism described in this section can result in
      secret Intranet URLs being leaked, in the following manner:

      <ol>

        <li>The user registers a third-party content handler as the default handler for a content
        type.</li>

        <li>The user then browses his corporate Intranet site and accesses a document that uses that
        content type.</li>

        <li>The user agent contacts the third party and hands the third party the URL to the Intranet
        content.</li>

      </ol>

      No actual confidential file data is leaked in this manner, but the URLs themselves could
      contain confidential information. For example, the URL could be <code>http://www.corp.example.com/upcoming-aquisitions/the-sample-company.egf</code>, which
      might tell the third party that Example Corporation is intending to merge with The Sample Company.
      Implementors might wish to consider allowing administrators to disable this feature for certain
      subdomains, content types, or schemes.

      <strong>Leaking secure URLs.</strong> User agents should not send HTTPS URLs to third-party
      sites registered as content handlers without the user's informed consent, for the same reason that
      user agents sometimes avoid sending <code>Referer</code> (sic) HTTP
      headers from secure sites to third-party sites.

      <strong>Leaking credentials.</strong> User agents must never send username or password
      information in the URLs that are escaped and included sent to the handler sites. User agents may
      even avoid attempting to pass to Web-based handlers the URLs of resources that are known to
      require authentication to access, as such sites would be unable to access the resources in
      question without prompting the user for credentials themselves (a practice that would require the
      user to know whether to trust the third-party handler, a decision many users are unable to make or
      even understand).

      <strong>Interface interference.</strong> User agents should be prepared to handle intentionally
      long arguments to the methods. For example, if the user interface exposed consists of an "accept"
      button and a "deny" button, with the "accept" binding containing the name of the handler, it's
      important that a long name not cause the "deny" button to be pushed off the screen.

      <strong>Fingerprinting users.</strong> Since a site can detect if it has attempted to register
      a particular handler or not, whether or not the user responds, the mechanism can be used to store
      data. User agents are therefore strongly urged to treat registrations in the same manner as
      cookies: clearing cookies for a site should also clear all registrations for that site, and
      disabling cookies for a site should also disable registrations.
  </div>

  <div class="impl">

<h6 id="sample-user-interface">Sample user interface</h6>

  <em>This section is non-normative.</em>

  A simple implementation of this feature for a desktop Web browser might work as follows.

  The <code>registerContentHandler()</code> method
  could display a modal dialog box:

  <img src="images/sample-content-handler-registration.png" width="534" height="374" alt="The modal dialog box could have the title 'Content Handler Registration', and could say 'This Web page: Kittens at work http://kittens.example.org/ ...would like permission to handle files of type: application/x-meowmeow using the following Web-based application: Kittens-at-work displayer http://kittens.example.org/?show=%s Do you trust the administrators of the &quot;kittens.example.org&quot; domain?' with two buttons, 'Trust kittens.example.org' and 'Cancel'." />

  In this dialog box, "Kittens at work" is the title of the page that invoked the method,
  "http://kittens.example.org/" is the URL of that page, "application/x-meowmeow" is the string that
  was passed to the <code>registerContentHandler()</code> method as its first
  argument (<var>mimeType</var>), "http://kittens.example.org/?show=%s" was the second
  argument (<var>url</var>), and "Kittens-at-work displayer" was the third argument (<var>title</var>).

  If the user clicks the Cancel button, then nothing further happens. If the user clicks the
  "Trust" button, then the handler is remembered.

  When the user then attempts to fetch a URL that uses the "application/x-meowmeow" <a>MIME
  type</a>, then it might display a dialog as follows:

  <img src="images/sample-content-handler.png" width="577" height="428" alt="The dialog box could have the title 'Unknown File Type' and could say 'You have attempted to access:' followed by a URL, followed by a prompt such as 'How would you like FerretBrowser to handle this resource?' with three radio buttons, one saying 'Contact the FerretBrowser plugin registry to see if there is an official way to handle this resource.', one saying 'Pass this URL to a local application' with an application selector, and one saying 'Pass this URL to the &quot;Kittens-at-work displayer&quot; application at &quot;kittens.example.org&quot;', with a checkbox labeled 'Always do this for resources using the &quot;application/x-meowmeow&quot; type in future.', and with two buttons, 'Ok' and 'Cancel'." />

  In this dialog, the third option is the one that was primed by the site registering itself
  earlier.

  If the user does select that option, then the browser, in accordance with the requirements
  described in the previous two sections, will redirect the user to
  "http://kittens.example.org/?show=data%3Aapplication/x-meowmeow;base64,S2l0dGVucyBhcmUgdGhlIGN1dGVzdCE%253D".

  The <code>registerProtocolHandler()</code> method
  would work equivalently, but for schemes instead of unknown content types.

  </div>

<h5 id="cookies">Cookies</h5>

  <pre class="idl" data-highlight="webidl" dfn-for="NavigatorCookies">
    [NoInterfaceObject]
    interface NavigatorCookies {
      readonly attribute boolean cookieEnabled;
    };
  </pre>

  <dl class="domintro">
    <dt><var>window</var> . <code>navigator</code> . <code>cookieEnabled</code></dt>
    <dd>Returns false if setting a cookie will be ignored, and true otherwise.</dd>
  </dl>

  <div class="impl">

    The <dfn attribute for="NavigatorCookies"><code>cookieEnabled</code></dfn> attribute must
    return true if the user agent attempts to handle cookies according to the cookie specification,
    and false if it ignores cookie change requests. [[!COOKIES]]

  </div>

<h5 id="plugins">Plugins</h5>

  <pre class="idl" data-highlight="webidl" dfn-for="NavigatorPlugins">
    [NoInterfaceObject]
      interface NavigatorPlugins {
      [SameObject] readonly attribute PluginArray plugins;
      [SameObject] readonly attribute MimeTypeArray mimeTypes;
      boolean javaEnabled();
    };
  </pre>

  <pre class="idl" data-highlight="webidl" dfn-for="PluginArray">
    interface PluginArray {
      void refresh(optional boolean reload = false);
      readonly attribute unsigned long length;
      getter Plugin? item(unsigned long index);
      getter Plugin? namedItem(DOMString name);
    };
  </pre>

  <pre class="idl" data-highlight="webidl" dfn-for="MimeTypeArray">
    interface MimeTypeArray {
      readonly attribute unsigned long length;
      getter MimeType? item(unsigned long index);
      getter MimeType? namedItem(DOMString name);
    };
  </pre>

  <pre class="idl" data-highlight="webidl" dfn-for="Plugin">
    interface Plugin {
      readonly attribute DOMString name;
      readonly attribute DOMString description;
      readonly attribute DOMString filename;
      readonly attribute unsigned long length;
      getter MimeType? item(unsigned long index);
      getter MimeType? namedItem(DOMString name);
    };
  </pre>

  <pre class="idl" data-highlight="webidl" dfn-for="MimeType">
    interface MimeType {
      readonly attribute DOMString type;
      readonly attribute DOMString description;
      readonly attribute DOMString suffixes; // comma-separated
      readonly attribute Plugin enabledPlugin;
    };
  </pre>

  <dl class="domintro">

    <dt><var>window</var> . <code>navigator</code> . <code>plugins</code> . <code>refresh</code>( [ <var>refresh</var> ] )</dt>
    <dd>
    Updates the lists of supported plugins and MIME types for this page, and reloads the page if the lists have changed.

    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>plugins</code> . <code>length</code></dt>
    <dd>
    Returns the number of plugins, represented by <code>Plugin</code> objects, that the user agent reports.
    </dd>

    <dt><var>plugin</var> = <var>window</var> . <code>navigator</code> . <code>plugins</code> . <code>item</code>(<var>index</var>)</dt>
    <dt><var>window</var> . <code>navigator</code> . <code>plugins</code>[<var>index</var>]</dt>
    <dd>
    Returns the specified <code>Plugin</code> object.
    </dd>

    <dt><var>plugin</var> = <var>window</var> . <code>navigator</code> . <code>plugins</code> . <code>item</code>(<var>name</var>)</dt>
    <dt><var>window</var> . <code>navigator</code> . <code>plugins</code>[<var>name</var>]</dt>
    <dd>
    Returns the <code>Plugin</code> object for the plugin with the given name.
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>mimeTypes</code> . <code>length</code></dt>
    <dd>
    Returns the number of MIME types, represented by <code>MimeType</code> objects, supported by the plugins that the user agent reports.
    </dd>

    <dt><var>mimeType</var> = <var>window</var> . <code>navigator</code> . <code>mimeTypes</code> . <code>item</code>(<var>index</var>)</dt>
    <dt><var>window</var> . <code>navigator</code> . <code>mimeTypes</code>[<var>index</var>]</dt>
    <dd>
    Returns the specified <code>MimeType</code> object.
    </dd>

    <dt><var>mimeType</var> = <var>window</var> . <code>navigator</code> . <code>mimeTypes</code> . <code>item</code>(<var>name</var>)</dt>
    <dt><var>window</var> . <code>navigator</code> . <code>mimeTypes</code>[<var>name</var>]</dt>
    <dd>
    Returns the <code>MimeType</code> object for the given MIME type.
    </dd>

    <dt><var>plugin</var> . <code>name</code>
    <dd>
    Returns the plugin's name.
    </dd>

    <dt><var>plugin</var> . <code>description</code>
    <dd>
    Returns the plugin's description.
    </dd>

    <dt><var>plugin</var> . <code>filename</code>
    <dd>
    Returns the plugin library's filename, if applicable on the current platform.
    </dd>

    <dt><var>plugin</var> . <code>length</code></dt>
    <dd>
    Returns the number of MIME types, represented by <code>MimeType</code> objects, supported by the plugin.
    </dd>

    <dt><var>mimeType</var> = <var>plugin</var> . <code>item</code>(<var>index</var>)</dt>
    <dt><var>plugin</var>[<var>index</var>]</dt>
    <dd>
    Returns the specified <code>MimeType</code> object.
    </dd>

    <dt><var>mimeType</var> = <var>plugin</var> . <code>item</code>(<var>name</var>)</dt>
    <dt><var>plugin</var>[<var>name</var>]</dt>
    <dd>
    Returns the <code>MimeType</code> object for the given MIME type.
    </dd>

    <dt><var>mimeType</var> . <code>type</code>
    <dd>
    Returns the MIME type.
    </dd>

    <dt><var>mimeType</var> . <code>description</code>
    <dd>
    Returns the MIME type's description.
    </dd>

    <dt><var>mimeType</var> . <code>suffixes</code>
    <dd>
    Returns the MIME type's typical file extensions, in a comma-separated list.
    </dd>

    <dt><var>mimeType</var> . <code>enabledPlugin</code>
    <dd>
    Returns the <code>Plugin</code> object that implements this MIME type.
    </dd>

    <dt><var>window</var> . <code>navigator</code> . <code>javaEnabled()</code></dt>
    <dd>
    Returns true if there's a plugin that supports the MIME type "<code>application/x-java-vm</code>".
    </dd>

  </dl>

  <div class="impl">

  The <dfn attribute for="NavigatorPlugins"><code>plugins</code></dfn> attribute must
  return a <code>PluginArray</code> object.

  The <dfn attribute for="NavigatorPlugins"><code>mimeTypes</code></dfn> attribute must
  return a <code>MimeTypeArray</code> object.

  <hr />

  A <code>PluginArray</code> object represents none, some, or all of the <a>plugins</a> supported by the user agent, each of which is represented by a <code>Plugin</code> object. Each of these <code>Plugin</code>
  objects may be <dfn>hidden plugins</dfn>. A <a>hidden plugin</a> can't
  be enumerated, but can still be inspected by using its name.

  <p class="note">
  The fewer <a>plugins</a> are represented by the
  <code>PluginArray</code> object, and of those, the more that are <a>hidden</a>, the more the user's privacy will be protected. Each exposed plugin
  increases the number of bits that can be derived for fingerprinting. Hiding a plugin helps, but
  unless it is an extremely rare plugin, it is likely that a site attempting to derive the list of
  plugins can still determine whether the plugin is supported or not by probing for it by name (the
  names of popular plugins are widely known). Therefore not exposing a plugin at all is preferred.
  Unfortunately, many legacy sites use this feature to determine, for example, which plugin to use
  to play video. Not exposing any plugins at all might therefore not be entirely plausible.
  </p>

  The <code>PluginArray</code> objects created by a user agent must not be <a>live</a>. The
  set of plugins represented by the objects must not change once an object is created, except when
  it is updated by the <code>refresh()</code> method.

  Each <a>plugin</a> represented by a <code>PluginArray</code> can support a number of
  <a>MIME types</a>. For each such <a>plugin</a>, the user agent must
  pick one or more of these <a>MIME types</a> to be those that are
  <dfn lt="explicitly supports|explicitly supported">explicitly supported</dfn>.

  <p class="note">
  The <a>explicitly supported</a> <a>MIME types</a> of
  a <a>plugin</a> are those that are exposed through the <code>Plugin</code> and <code>MimeTypeArray</code> interfaces. As with <a>plugins</a> themselves, any variation between users regarding what is exposed
  allows sites to fingerprint users. User agents are therefore encouraged to expose the same <a>MIME types</a> for all users of a <a>plugin</a>, regardless of the
  actual types supported... at least, within the constraints imposed by compatibility with legacy
  content.
  </p>

  The <a>supported property indices</a> of a <code>PluginArray</code> object are the
  numbers from zero to the number of non-<a>hidden</a> <a>plugins</a> represented by the object, if any.

  The <dfn attribute for="PluginArray"><code>length</code></dfn> attribute must return the
  number of non-<a>hidden</a> <a>plugins</a>
  represented by the object.

  The <dfn method for="PluginArray"><code>item()</code></dfn> method of a
  <code>PluginArray</code> object must return null if the argument is not one of the object's
  <a>supported property indices</a>, and otherwise must return the result of running the
  following steps, using the method's argument as <var>index</var>:

  <ol>

    <li>Let <var>list</var> be the <code>Plugin</code> objects
    representing the non-<a>hidden</a> <a>plugins</a> represented by the <code>PluginArray</code> object.</li>

    <li>Sort <var>list</var> alphabetically by the <code>name</code> of each <code>Plugin</code>.</li>

    <li>Return the <var>index</var>th entry in <var>list</var>.</li>

  </ol>

  <p class="note">
  It is important for
  privacy that the order of plugins not leak additional information, e.g., the order in which
  plugins were installed.
  </p>

  The <a spec="webidl">supported property names</a> of a <code>PluginArray</code> object are the values
  of the <code>name</code> attributes of all the <code>Plugin</code> objects represented by the <code>PluginArray</code> object. The
  properties exposed in this way must be <a>unenumerable</a>.

  The <dfn method for="PluginArray"><code>namedItem()</code></dfn> method of a
  <code>PluginArray</code> object must return null if the argument is not one of the object's
  <a spec="webidl">supported property names</a>, and otherwise must return the <code>Plugin</code> object, of those represented by the <code>PluginArray</code>
  object, that has a <code>name</code> equal to the method's argument.

  The <dfn method for="PluginArray"><code>refresh()</code></dfn> method of the
  <code>PluginArray</code> object of a <code>Navigator</code> object, when invoked, must check to
  see if any <a>plugins</a> have been installed or reconfigured since the user
  agent created the <code>PluginArray</code> object. If so, and the method's argument is true, then
  the user agent must act as if the <code>location.reload()</code>
  method was called instead. Otherwise, the user agent must update the <code>PluginArray</code>
  object and <code>MimeTypeArray</code> object created for attributes of that <code>Navigator</code>
  object, and the <code>Plugin</code> and <code>MimeType</code> objects created
  for those <code>PluginArray</code> and <code>MimeTypeArray</code> objects, using the same <code>Plugin</code> objects for cases where the <code>name</code> is the same, and the same <code>MimeType</code> objects for
  cases where the <code>type</code> is the same, and creating new objects
  for cases where there were no matching objects immediately prior to the <code>refresh()</code> call. Old <code>Plugin</code>
  and <code>MimeType</code> objects must continue to return the same values that they had prior to
  the update, though naturally now the data is stale and may appear inconsistent (for example, an
  old <code>MimeType</code> entry might list as its <code>enabledPlugin</code> a <code>Plugin</code>
  object that no longer lists that <code>MimeType</code> as a supported <code>MimeType</code>).

  <hr />

  A <code>MimeTypeArray</code> object represents the <a>MIME types</a>
  <a>explicitly supported</a> by <a>plugins</a> supported by the user
  agent, each of which is represented by a <code>MimeType</code> object.

  The <code>MimeTypeArray</code> objects created by a user agent must not be <a>live</a>.
  The set of MIME types represented by the objects must not change once an object is created, except
  when it is updated by the <code>PluginArray</code> object's <code>refresh()</code> method.

  The <a>supported property indices</a> of a <code>MimeTypeArray</code> object are the
  numbers from zero to the number of <a>MIME types</a> <a>explicitly
  supported</a> by non-<a>hidden</a> <a>plugins</a> represented by the corresponding <code>PluginArray</code> object, if
  any.

  The <dfn attribute for="MimeTypeArray"><code>length</code></dfn> attribute must return the
  number of <a>MIME types</a> <a>explicitly supported</a> by non-<a>hidden</a> <a>plugins</a> represented by the
  corresponding <code>PluginArray</code> object, if any.

  The <dfn method for="MimeTypeArray"><code>item()</code></dfn> method of a
  <code>MimeTypeArray</code> object must return null if the argument is not one of the object's
  <a>supported property indices</a>, and otherwise must return the result of running the
  following steps, using the method's argument as <var>index</var>:

  <ol>

    <li>Let <var>list</var> be the <code>MimeType</code> objects representing the <a>MIME types</a> <a>explicitly supported</a> by non-<a>hidden</a> <a>plugins</a> represented by the corresponding
    <code>PluginArray</code> object, if any.</li>

    <li>Sort <var>list</var> alphabetically by the <code>type</code> of each <code>MimeType</code>.</li>

    <li>Return the <var>index</var>th entry in <var>list</var>.</li>

  </ol>

  <p class="note">
  It is important <a>for
  privacy</a> that the order of MIME types not leak additional information, e.g., the order in
  which plugins were installed.
  </p>

  The <a spec="webidl">supported property names</a> of a <code>MimeTypeArray</code> object are the values
  of the <code>type</code> attributes of all the <code>MimeType</code>
  objects represented by the <code>MimeTypeArray</code> object. The properties exposed in this way
  must be <a>unenumerable</a>.

  The <dfn method for="MimeTypeArray"><code>namedItem()</code></dfn> method of a
  <code>MimeTypeArray</code> object must return null if the argument is not one of the object's
  <a spec="webidl">supported property names</a>, and otherwise must return the <code>MimeType</code> object
  that has a <code>type</code> equal to the method's argument.

  <hr />

  A <code>Plugin</code> object represents a <a>plugin</a>. It has
  several attributes to provide details about the plugin, and can be enumerated to obtain the list
  of <a>MIME types</a> that it <a>explicitly
  supports</a>.

  The <code>Plugin</code> objects created by a user agent must not be
  <a>live</a>. The set of MIME types represented by the objects, and the values of the
  objects' attributes, must not change once an object is created, except when updated by the
  <code>PluginArray</code> object's <code>refresh()</code>
  method.

  The <dfn>reported MIME types</dfn> for a <code>Plugin</code> object are the
  <a>MIME types</a> <a>explicitly supported</a> by the corresponding
  <a>plugin</a> when this object was last created or updated by <code>PluginArray.refresh()</code>, whichever happened most
  recently.

  The <a>supported property indices</a> of a <code>Plugin</code> object
  are the numbers from zero to the number of <a>reported MIME types</a>.

  The <dfn attribute for="Plugin"><code>length</code></dfn> attribute must return the number
  of <a>reported MIME types</a>.

  The <dfn method for="Plugin"><code>item()</code></dfn> method of a <code>Plugin</code> object must return null if the argument is not one of the
  object's <a>supported property indices</a>, and otherwise must return the result of running
  the following steps, using the method's argument as <var>index</var>:

  <ol>

    <li>Let <var>list</var> be the <code>MimeType</code> objects representing the
    <a>reported MIME types</a>.</li>

    <li>Sort <var>list</var> alphabetically by the <code>type</code> of each <code>MimeType</code>.</li>

    <li>Return the <var>index</var>th entry in <var>list</var>.</li>

  </ol>

  <p class="note">
  It is important <a>for
  privacy</a> that the order of MIME types not leak additional information, e.g., the order in
  which plugins were installed.
  </p>

  The <a spec="webidl">supported property names</a> of a <code>Plugin</code> object
  are the values of the <code>type</code> attributes of the
  <code>MimeType</code> objects representing the <a>reported MIME types</a>. The properties
  exposed in this way must be <a>unenumerable</a>.

  The <dfn method for="Plugin"><code>namedItem()</code></dfn> method of a <code>Plugin</code> object must return null if the argument is not one of the
  object's <a spec="webidl">supported property names</a>, and otherwise must return the
  <code>MimeType</code> object that has a <code>type</code> equal to the
  method's argument.

  The <dfn attribute for="Plugin"><code>name</code></dfn> attribute must return the
  <a>plugin</a>'s name.

  The <dfn attribute for="Plugin"><code>description</code></dfn> and <dfn attribute for="Plugin"><code>filename</code></dfn> attributes must return user-agent-defined
  (or, in all likelihood, <a>plugin</a>-defined) strings. In each case, the same string must
  be returned each time, except that the strings returned may change when the <code>PluginArray.refresh()</code> method updates the object.

  <p class="warning">If the values returned by the <code>description</code> or <code>filename</code> attributes vary between versions of a
  <a>plugin</a>, they can be used both as a fingerprinting vector and, even more importantly,
  as a trivial way to determine what security vulnerabilities a <a>plugin</a> (and thus a
  browser) may have. It is thus highly recommended that the <code>description</code> attribute just return the same value as the
  <code>name</code> attribute, and that the <code>filename</code> attribute return the empty string.
  </p>


  <hr />

  A <code>MimeType</code> object represents a <a>MIME type</a> that is, or was,
  <a>explicitly supported</a> by a <a>plugin</a>.

  The <code>MimeType</code> objects created by a user agent must not be <a>live</a>. The
  values of the objects' attributes must not change once an object is created, except when updated
  by the <code>PluginArray</code> object's <code>refresh()</code>
  method.

  The <dfn attribute for="MimeType"><code>type</code></dfn> attribute must return the
  <a>valid MIME type with no parameters</a> describing the <a>MIME type</a>.

  The <dfn attribute for="MimeType"><code>description</code></dfn> and <dfn><code>suffixes</code></dfn> attributes must return
  user-agent-defined (or, in all likelihood, <a>plugin</a>-defined) strings. In each case, the
  same string must be returned each time, except that the strings returned may change when the <code>PluginArray.refresh()</code> method updates the object.

  <p class="warning">If the values returned by the <code>description</code> or <code>suffixes</code> attributes vary between versions of a
  <a>plugin</a>, they can be used both as a fingerprinting vector and, even more importantly,
  as a trivial way to determine what security vulnerabilities a <a>plugin</a> (and thus a
  browser) may have. It is thus highly recommended that the <code>description</code> attribute just return the same value as the
  <code>type</code> attribute, and that the <code>suffixes</code> attribute return the empty string.
  </p>


  <p class="note">
  Commas in the <code>suffixes</code> attribute are
  interpreted as separating subsequent filename extensions, as in "<code>htm,html</code>".
  </p>

  The <dfn attribute for="NavigatorPlugins"><code>enabledPlugin</code></dfn> attribute must
  return the <code>Plugin</code> object that represents the <a>plugin</a>
  that <a>explicitly supported</a> the <a>MIME type</a> that this <code>MimeType</code>
  object represents when this object was last created or updated by <code>PluginArray.refresh()</code>, whichever happened most
  recently.

  <hr />

  The <dfn method for="NavigatorPlugins"><code>javaEnabled()</code></dfn> attribute
  must return true if the user agent supports a <a>plugin</a> that supports the <a>MIME
  type</a> "<code>application/x-java-vm</code>"; otherwise it must return false.

  </div>

<h4 id="the-external-interface">The <code>External</code> interface</h4>

  <div class="impl">

  The <dfn attribute for="Window"><code>external</code></dfn> attribute of the <code>Window</code>
  interface must return an instance of the <code>External</code> interface.

  </div>

  <pre class="idl" data-highlight="webidl" dfn-for="External">
    interface External {
      void AddSearchProvider(DOMString engineURL);
      unsigned long IsSearchProviderInstalled(DOMString engineURL);
    };
  </pre>

  <p class="note">
  For historical reasons, members on this interface are capitalized.
  </p>

  <dl class="domintro">

    <dt><var>window</var> . <code>external</code> . <code>AddSearchProvider</code>( <var>url</var> )</dt>
    <dd>

    Adds the search engine described by the OpenSearch description document at <var>url</var>. [[!OPENSEARCH]]

    The OpenSearch description document has to be on the same server as the script that calls
    this method.

    </dd>

    <dt><var>installed</var> = <var>window</var> . <code>external</code> . <code>IsSearchProviderInstalled</code>( <var>url</var> )</dt>
    <dd>

    Returns a value based on comparing <var>url</var> to the URLs of the results pages
    of the installed search engines.

    <dl>
      <dt>0 <dd>None of the installed search engines match <var>url</var>.
      <dt>1 <dd>One or more installed search engines match <var>url</var>, but none are the user's default search engine.
      <dt>2 <dd>The user's default search engine matches <var>url</var>.
    </dl>

    The <var>url</var> is compared to the URLs of the results pages of the installed
    search engines using a prefix match. Only results pages on the same domain as the script that
    calls this method are checked.

    </dd>

  </dl>

  <p class="note">
  Another way of exposing search engines using OpenSearch description documents is
  using a <{link}> element with the <code>search</code> link type.
  </p>

  <div class="impl">

    The <dfn method for="External"><code>AddSearchProvider()</code></dfn> method,
    when invoked, must run the following steps:

    <ol>

    <li>Optionally, abort these steps. User agents may implement the method as a stub method that
    never does anything, or may arbitrarily ignore invocations with particular arguments for
    security, privacy, or usability reasons.</li>

    <li><a>Resolve</a> the value of the method's first argument
    relative to the <a>API base URL</a> specified by the <a>entry settings
    object</a>.</li>

    <li>If this fails, abort these steps.</li>

    <li>Process the <a>resulting absolute URL</a> as the <a for="url">URL</a> to an OpenSearch
    description document. [[!OPENSEARCH]]</li>

    </ol>

    The <dfn method for="External"><code>IsSearchProviderInstalled()</code></dfn>
    method, when invoked, must run the following steps:

    <ol>

    <li>Optionally, return 0 and abort these steps. User agents may implement the method as a
    stub method that never returns a non-zero value, or may arbitrarily ignore invocations with
    particular arguments for security, privacy, or usability reasons.</li>

    <li>If the <a>origin</a> specified by the <a>entry settings object</a> is an
    opaque identifier (i.e., it has no host component), then return 0 and abort these steps.</li>

    <li>Let <var>host1</var> be the host component of the <a>origin</a> specified
    by the <a>entry settings object</a>.</li>

    <li><a>Resolve</a> the <var>scriptURL</var> argument
    relative to the <a>API base URL</a> specified by the <a>entry settings
    object</a>.</li>

    <li>If this fails, return 0 and abort these steps.</li>

    <li>Let <var>host2</var> be the <a for="hostsyntax">host</a> component
    of the <a>resulting parsed URL</a>.</li>

    <li>

      If the longest suffix in the Public Suffix List that matches the end of <var>host1</var> is different than the longest suffix in the Public Suffix List that
      matches the end of <var>host2</var>, then return 0 and abort these steps. [[!PSL]]

      If the next domain component of <var>host1</var> and <var>host2</var>
      after their common suffix are not the same, then return 0 and abort these steps.

    </li>

    <li>Let <var>search engines</var> be the list of search engines known by the user
    agent and made available to the user by the user agent for which the resulting <a>absolute
    URL</a> is a <a>prefix match</a> of the search engine's <a for="url">URL</a>, if any. For
    search engines registered using OpenSearch description documents, the <a for="url">URL</a> of the
    search engine corresponds to the URL given in a <code>Url</code> element whose <{links/rel}> attribute is "<code>results</code>" (the default). [[!OPENSEARCH]]</li>

    <li>If <var>search engines</var> is empty, return 0 and abort these steps.</li>

    <li>If the user's default search engine (as determined by the user agent) is one of the
    search engines in <var>search engines</var>, then return 2 and abort these
    steps.</li>

    <li>Return 1.</li>

    </ol>

  </div>

<h3 id="webappapis-images">Images</h3>

  <pre class="idl" data-highlight="webidl" dfn-for="ImageBitmap">
    [Exposed=(Window, Worker)]
    interface ImageBitmap {
      readonly attribute unsigned long width;
      readonly attribute unsigned long height;
    };

    typedef (HTMLImageElement or
            HTMLVideoElement or
            HTMLCanvasElement or
            Blob or
            ImageData or
            CanvasRenderingContext2D or
            ImageBitmap) ImageBitmapSource;
  </pre>

  <pre class="idl" data-highlight="webidl" dfn-for="ImageBitmapFactories">
    [NoInterfaceObject, Exposed=(Window, Worker)]
    interface ImageBitmapFactories {
      Promise&lt;ImageBitmap&gt; createImageBitmap(ImageBitmapSource image);
      Promise&lt;ImageBitmap&gt; createImageBitmap(ImageBitmapSource image, long sx, long sy, long sw, long sh);
    };
    Window implements ImageBitmapFactories;
    WorkerGlobalScope implements ImageBitmapFactories;
  </pre>

  An <code>ImageBitmap</code> object represents a bitmap image that can be painted to a canvas
  without undue latency.

  <p class="note">
  The exact judgement of what is undue latency of this is left up to the
  implementer, but in general if making use of the bitmap requires network I/O, or even local disk
  I/O, then the latency is probably undue; whereas if it only requires a blocking read from a GPU or
  system RAM, the latency is probably acceptable.
  </p>

  <dl class="domintro">

    <dt><var>promise</var> = <var>Window</var> . <code>createImageBitmap</code>(<var>image</var> [, <var>sx</var>, <var>sy</var>, <var>sw</var>, <var>sh</var> ] )</dt>

    <dd>

    Takes <var>image</var>, which can be an <{img}> element,
    <{video}>, or <{canvas}> element, a <code>Blob</code> object, an
    <code>ImageData</code> object, a <code>CanvasRenderingContext2D</code> object, or another
    <code>ImageBitmap</code> object, and returns a promise that is resolved when a new
    <code>ImageBitmap</code> is created.

    If no <code>ImageBitmap</code> object can be constructed, for example because the provided
    <var>image</var> data is not actually an image, then the promise is rejected instead.

    If <var>sx</var>, <var>sy</var>, <var>sw</var>, and <var>sh</var> arguments are provided, the source image is cropped to the given pixels, with
    any pixels missing in the original replaced by transparent black. These coordinates are in the
    source image's pixel coordinate space, <em>not</em> in CSS pixels.

    Rejects the promise with an <code>InvalidStateError</code> exception if the source image is not in a valid
    state (e.g., an <{img}> element that hasn't finished loading, or a
    <code>CanvasRenderingContext2D</code> object whose bitmap data has zero length along one or both
    dimensions, or an <code>ImageData</code> object whose data is <code>data</code> attribute has been <a>neutered</a>). Rejects the promise with a <code>SecurityError</code>
    exception if the script is not allowed to access the image data of the source image (e.g., a
    <code>video</code> that is <a>CORS-cross-origin</a>, or a <code>canvas</code> being drawn
    on by a script in a worker from another <a>origin</a>).

    </dd>

    <dt><var>imageBitmap</var> . <code>width</code></dt>

    <dd>

    Returns the <a>intrinsic width</a> of the image, in CSS pixels.

    </dd>

    <dt><var>imageBitmap</var> . <code>height</code></dt>

    <dd>

    Returns the <a>intrinsic height</a> of the image, in CSS pixels.

    </dd>

  </dl>

  <div class="impl">
    An <code>ImageBitmap</code> object always has associated bitmap data, with a width and a height.
    However, it is possible for this data to be corrupted. If an <code>ImageBitmap</code> object's
    media data can be decoded without errors, it is said to be <a>fully decodable</a>.


    An <code>ImageBitmap</code> object's bitmap has an <a>origin-clean</a> flag, which indicates whether the
    bitmap is tainted by content from a different <a>origin</a>. The flag is initially set to
    true and may be changed to false by the steps of <code>createImageBitmap()</code>.

    An <code>ImageBitmap</code> object can be obtained from a variety of different objects, using
    the <dfn method for="ImageBitmapFactories"><code>createImageBitmap()</code></dfn> method. When invoked, the method must act as
    follows:

    <dl>
    <dt>If <var>image</var> is an <{img}> element
    <dd>
    <ol>

      <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
      but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

      <li>If the <{img}> element is not <a state for="img">completely available</a>, then return a promise rejected with an <code>InvalidStateError</code> exception and abort these
      steps.</li>

      <li>If the <{img}> element's media data is not a bitmap (e.g., it's a vector
      graphic), then return a promise rejected with an <code>InvalidStateError</code> exception and abort these
      steps.</li>

      <li>Create a new <code>ImageBitmap</code> object.</li>

      <li>Let the <code>ImageBitmap</code> object's bitmap data be a copy of the <code>img</code>
      element's media data, <a>cropped to the source rectangle</a>. If this is an animated
      image, the <code>ImageBitmap</code> object's bitmap data must only be taken from the default
      image of the animation (the one that the format defines is to be used when animation is not
      supported or is disabled), or, if there is no such image, the first frame of the
      animation.</li>

      <li>If the <a>origin</a> of the <{img}> element's image is not the <a>same
      origin</a> as the <a>origin</a> specified by the <a>entry settings object</a>,
      then set the <a>origin-clean</a> flag of the <code>ImageBitmap</code> object's bitmap to false.</li>

      <li>Return a new promise, but continue running these steps
      <a>in parallel</a>.</li>

      <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>
    </ol>
    </dd>
    <dt>If <var>image</var> is a <{video}> element
    <dd>
    <ol>
      <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
      but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

      <li>If the <{video}> element's <code>networkState</code> attribute is <code>NETWORK_EMPTY</code>, then return a promise rejected with an
      <code>InvalidStateError</code> exception and abort these steps.</li>

      <li>If the <{video}> element's <code>readyState</code> attribute is either <code>HAVE_NOTHING</code> or <code>HAVE_METADATA</code>, then return a promise rejected with an
      <code>InvalidStateError</code> exception and abort these steps.</li>

      <li>Create a new <code>ImageBitmap</code> object.</li>

      <li>Let the <code>ImageBitmap</code> object's bitmap data be a copy of the frame at the
      <a>current playback position</a>, at the <a>media resource</a>'s <a>intrinsic width</a> and <a>intrinsic height</a> (i.e., after any aspect-ratio
      correction has been applied), <a>cropped to the source rectangle</a>.

      <li>If the <a>origin</a> of the <{video}> element's image is not the <a>same
      origin</a> as the <a>origin</a> specified by the <a>entry settings object</a>,
      then set the <a>origin-clean</a> flag of the <code>ImageBitmap</code> object's bitmap to false.</li>

      <li>Return a new promise, but continue running these steps
      <a>in parallel</a>.</li>

      <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>
    </ol>
    </dd>
    <dt>If <var>image</var> is a <{canvas}> element
    <dd>
    <ol>
      <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
      but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

      <li>If the <{canvas}> element's bitmap has either a horizontal dimension or a
      vertical dimension equal to zero, then return a promise rejected with an <code>InvalidStateError</code> exception and
      abort these steps.</li>

      <li>Create a new <code>ImageBitmap</code> object.</li>

      <li>Let the <code>ImageBitmap</code> object's bitmap data be a copy of the
      <{canvas}> element's bitmap data, <a>cropped to the source
      rectangle</a>.</li>

      <li>Set the <a>origin</a> of the <code>ImageBitmap</code> object's bitmap to the same value as the <a>origin-clean</a> flag of the <{canvas}> element's bitmap.</li>

      <li>Return a new promise, but continue running these steps
      <a>in parallel</a>.</li>

      <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>
    </ol>
    </dd>
    <dt>If <var>image</var> is a <code>Blob</code> object
    <dd>
    <ol>
      <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
      but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

      <li>If the <code>Blob</code> object has been disabled through the <code>close()</code> method, then return a promise rejected with an <code>InvalidStateError</code>
      exception and abort these steps.</li>

      <li>Return a new promise, but continue running these steps
      <a>in parallel</a>.</li>

      <li>Read the <code>Blob</code> object's data. If an <a>error
      occurs during reading of the object</a>, then reject the promise with null, and abort these
      steps.</li>

      <li>Apply the <a>image sniffing rules</a> to
      determine the file format of the image data, with MIME type of the <code>Blob</code> (as given
      by the <code>Blob</code> object's <code>type</code> attribute) giving the
      official type.</li>

      <li>If the image data is not in a supported file format (e.g., it's not actually an image at
      all), or if the image data is corrupted in some fatal way such that the image dimensions cannot
      be obtained, then reject the promise with null, and abort these steps.</li>

      <li>Create a new <code>ImageBitmap</code> object.</li>

      <li>Let the <code>ImageBitmap</code> object's bitmap data be the image data read from the
      <code>Blob</code> object, <a>cropped to the source rectangle</a>. If this is an animated
      image, the <code>ImageBitmap</code> object's bitmap data must only be taken from the default
      image of the animation (the one that the format defines is to be used when animation is not
      supported or is disabled), or, if there is no such image, the first frame of the
      animation.</li>

      <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>
    </ol>
    </dd>
    <dt>If <var>image</var> is an <code>ImageData</code> object
    <dd>
    <ol>
      <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
      but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

      <li>If the <var>image</var> object's <code>data</code>
      attribute has been <a>neutered</a>, return a promise rejected with an
      <code>InvalidStateError</code> exception and abort these steps.</li>

      <li>Create a new <code>ImageBitmap</code> object.</li>

      <li>Let the <code>ImageBitmap</code> object's bitmap data be the image data given by the
      <code>ImageData</code> object, <a>cropped to the source rectangle</a>.</li>

      <li>Return a new promise, but continue running these steps
      <a>in parallel</a>.</li>

      <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>
    </ol>
    </dd>
    <dt>If <var>image</var> is a <code>CanvasRenderingContext2D</code> object
    <dd>
    <ol>
      <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
      but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

      <li>If the <code>CanvasRenderingContext2D</code> object's scratch bitmap has
      either a horizontal dimension or a vertical dimension equal to zero, then return a promise rejected with an
      <code>InvalidStateError</code> exception and abort these steps.</li>

      <li>Create a new <code>ImageBitmap</code> object.</li>

      <li>Let the <code>ImageBitmap</code> object's bitmap data be a copy of the
      <code>CanvasRenderingContext2D</code> object's scratch bitmap, <a>cropped to
      the source rectangle</a>.</li>

      <li>Set the <a>origin-clean</a> flag of the
      <code>ImageBitmap</code> object's bitmap to the same value as the <a>origin-clean</a> flag of the
      <code>CanvasRenderingContext2D</code> object's scratch bitmap</li>

      <li>Return a new promise, but continue running these steps
      <a>in parallel</a>.</li>

      <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>
    </ol>
    </dd>
    <dt>If <var>image</var> is an <code>ImageBitmap</code> object
    <dd>
    <ol>
      <li>If either the <var>sw</var> or <var>sh</var> arguments are specified
      but zero, return a promise rejected with an <code>IndexSizeError</code> exception and abort these steps.</li>

      <li>Create a new <code>ImageBitmap</code> object.</li>

      <li>Let the <code>ImageBitmap</code> object's bitmap data be a copy of the <var>image</var>
      argument's bitmap data, <a>cropped to the source rectangle</a>.</li>

      <li>Set the <a>origin-clean</a> flag of the
      <code>ImageBitmap</code> object's bitmap to the same value as the <a>origin-clean</a> flag of the bitmap of the
      <var>image</var> argument.</li>

      <li>Return a new promise, but continue running these steps
      <a>in parallel</a>.</li>

      <li>Resolve the promise with the new <code>ImageBitmap</code> object as the value.</li>
    </ol>
    </dd>
    </dl>
    When the steps above require that the user agent <dfn lt="cropped to the source rectangle|crop bitmap data to the source rectangle">crop bitmap data to the source rectangle</dfn>, the user agent must run the following
    steps:
    <ol>
      <li>Let <var>input</var> be the image data being cropped.</li>
      <li>If the <var>sx</var>, <var>sy</var>, <var>sw</var>, and <var>sh</var> arguments are omitted, return <var>input</var>.</li>
      <li>Place <var>input</var> on an infinite transparent black grid plane, positioned so
      that it's top left corner is at the origin of the plane, with the <var>x</var>-coordinate increasing to the right, and the <var>y</var>-coordinate
      increasing down, and with each pixel in the <var>input</var> image data occupying a cell
      on the plane's grid.</li>
      <li>
      Let <var>output</var> be the rectangle on the plane denoted by the rectangle whose
      corners are the four points (<var>sx</var>, <var>sy</var>), (<var>sx</var>+<var>sw</var>, <var>sy</var>), (<var>sx</var>+<var>sw</var>, <var>sy</var>+<var>sh</var>), (<var>sx</var>, <var>sy</var>+<var>sh</var>).

      <p class="note">
    If either <var>sw</var> or <var>sh</var> are negative, then
      the top-left corner of this rectangle will be to the left or above the (<var>sx</var>,
      <var>sy</var>) point. If any of the pixels on this rectangle are outside the area where
      the <var>input</var> bitmap was placed, then they will be transparent black in <var>output</var>.
    </p>
      </li>
      <li>Return <var>output</var>.</li>
    </ol>

    The <dfn attribute for="ImageBitmap"><code>width</code></dfn> attribute must return the <code>ImageBitmap</code> object's
    width, in CSS pixels.

    The <dfn attribute for="ImageBitmap"><code>height</code></dfn> attribute must return the <code>ImageBitmap</code> object's
    height, in CSS pixels.
  </div>

  <div class="example">
    Using this API, a sprite sheet can be precut and prepared:

    <pre highlight="javascript">
      var sprites = {};
      function loadMySprites() {
      var image = new Image();
      image.src = 'mysprites.png';
      var resolver;
      var promise = new Promise(function (arg) { resolver = arg });
      image.onload = function () {
        resolver(Promise.all(
          createImageBitmap(image,  0,  0, 40, 40).then(function (image) { sprites.woman = image }),
          createImageBitmap(image, 40,  0, 40, 40).then(function (image) { sprites.man   = image }),
          createImageBitmap(image, 80,  0, 40, 40).then(function (image) { sprites.tree  = image }),
          createImageBitmap(image,  0, 40, 40, 40).then(function (image) { sprites.hut   = image }),
          createImageBitmap(image, 40, 40, 40, 40).then(function (image) { sprites.apple = image }),
          createImageBitmap(image, 80, 40, 40, 40).then(function (image) { sprites.snake = image }),
        ));
      };
      return promise;
      }

      function runDemo() {
      var canvas = document.querySelector('canvas#demo');
      var context = canvas.getContext('2d');
      context.drawImage(sprites.tree, 30, 10);
      context.drawImage(sprites.snake, 70, 10);
      }

      loadMySprites().then(runDemo);
    </pre>
  </div>

</section>
