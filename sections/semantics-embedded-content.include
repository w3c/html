<section>

<h3 id="semantics-embedded-content">Embedded content</h3>

<h4 id="embedded-content-introduction">Introduction</h4>

  <em>This section is non-normative.</em>

  To embed an image in HTML, when there is only a single image resource,
  use the <{img}> element and its <{img/src}> attribute.

  <div class="example">
    <pre highlight="html">
      &lt;h2&gt;From today's featured article&lt;/h2&gt;
      &lt;img src="/uploads/100-marie-lloyd.jpg" alt="" width="100" height="150"&gt;
      &lt;p&gt;&lt;b&gt;&lt;a href="/wiki/Marie_Lloyd"&gt;Marie Lloyd&lt;/a&gt;&lt;/b&gt; (1870–1922)
      was an English &lt;a href="/wiki/Music_hall"&gt;music hall&lt;/a&gt; singer, ...
    </pre>
  </div>

  However, there are a number of situations for which the author might wish to use multiple image
  resources that the user agent can choose from:

  <ul>

    <li>

    Different users might have different environmental characteristics:

    <ul>

      <li>

      The users' physical screen size might be different from one another.

      <div class="example">
        A mobile phone's screen might be 4 inches diagonally, while a laptop's screen might be 14
        inches diagonally.

        <img alt="The phone's screen is much smaller compared to the laptop's screen." src="images/twodevices.svg" />


      </div>

      <p class="note">
        This is only relevant when an image's rendered size depends on the <a>viewport</a> size.
      </p>

      </li>

      <li>

      The users' screen pixel density might be different from one another.

      <div class="example">
        A mobile phone's screen might have three times as many physical pixels per inch compared to
        another mobile phone's screen, regardless of their physical screen size.

        <img alt="One phone has big pixels, the other has small pixels." src="images/magnify-pixels.svg" />

      </div>

      </li>

      <li>

      The users' zoom level might be different from one another, or might change for a single user
      over time.

      <p class="example">
        A user might zoom in to a particular image to be able to get a more detailed look.
      </p>

      The zoom level and the screen pixel density (the previous point) can both affect the number of
      physical screen pixels per CSS pixel. This ratio is usually referred to as
      <dfn>device-pixel-ratio</dfn>.

      </li>

      <li>

        The users' screen orientation might be different from one another, or might change for a
        single user over time.

      <div class="example">
        A tablet can be held upright or rotated 90 degrees, so that the screen is either "portrait"
        or "landscape".

        <img alt="The tablet has two orientations." src="images/orientations.svg" />
      </div>

      </li>

      <li>

      The users' network speed, network latency and bandwidth cost might be different from one
      another, or might change for a single user over time.

      <p class="example">
        A user might be on a fast, low-latency and constant-cost connection while at work, on a
        slow, low-latency and constant-cost connection while at home, and on a variable-speed,
        high-latency and variable-cost connection anywhere else.
      </p>

      </li>

    </ul>

    </li>

    <li>

    Authors might want to show the same image content but with different rendered size depending
    on, usually, the width of the <a>viewport</a>. This is usually referred to as
    <dfn><a>viewport</a>-based selection</dfn>.

    <div class="example">
      A Web page might have a banner at the top that always spans the entire <a>viewport</a>
      width. In this case, the rendered size of the image depends on the physical size of the screen
      (assuming a maximised browser window).

      <img alt="The upright-held phone shows a small wolf at the top, and the tablet shows the same image but it is bigger" src="images/viewport-based.svg" />

    </div>

    <div class="example">
     Another Web page might have images in columns, with a single column for screens with a small
     physical size, two columns for screens with medium physical size, and three columns for screens
     with big physical size, with the images varying in rendered size in each case to fill up the
     <a>viewport</a>. In this case, the rendered size of an image might be <em>bigger</em> in
     the one-column layout compared to the two-column layout, despite the screen being smaller.

      <img alt="The rotated phone shows a top part of an image of a kettlebell swing; the upright-held tablet shows a bit smaller images in two columns; the laptop shows images in three columns." src="images/flexible-layout.svg" />
    </div>

    </li>

    <li>

    Authors might want to show different image content depending on the rendered size of the image.
    This is usually referred to as <dfn for="image" lt="art directed|art direction">art direction</dfn>.

    <div class="example">
     When a Web page is viewed on a screen with a large physical size (assuming a maximised
     browser window), the author might wish to include some less relevant parts surrounding the
     critical part of the image. When the same Web page is viewed on a screen with a small physical
     size, the author might wish to show only the critical part of the image.

      <img alt="The upright-held phone shows a cropped image of a wolf; the rotated tablet shows the uncropped image." src="images/device-crop.svg" />
    </div>

    </li>

    <li>

    Authors might want to show the same image content but using different image formats, depending
    on which image formats the user agent supports. This is usually referred to as
    <dfn>image format-based selection</dfn>.

    <p class="example">A Web page might have some images in the JPEG, WebP and JPEG XR image
    formats, with the latter two having better compression abilities compared to JPEG. Since
    different user agents can support different image formats, with some formats offering better
    compression ratios, the author would like to serve the better formats to user agents that
    support them, while providing JPEG fallback for user agents that don't.</p>

    </li>

  </ul>

  The above situations are not mutually exclusive. For example, it is reasonable to combine
  different resources for different <a>device-pixel-ratio</a> with different resources for
    <a for="image">art direction</a>.

  While it is possible to solve these problems using scripting, doing so introduces some other
  problems:

  <ul>

    <li>Some user agents aggressively download images specified in the HTML markup, before scripts
    have had a chance to run, so that Web pages complete loading sooner. If a script changes which
    image to download, the user agent will potentially start two separate downloads, which can
    instead cause worse page loading performance.</li>

    <li>If the author avoids specifying any image in the HTML markup and instead instantiates a
    single download from script, that avoids the double download problem above but instead it makes
    no image be downloaded at all for users with scripting disabled and it disables the agressive
    image downloading optimization.</li>

  </ul>

  With this in mind, this specification introduces a number of features to address the above
  problems in a declarative manner.

  <dl>

    <dt><a>Device-pixel-ratio</a>-based selection when the rendered size of the image is fixed</dt>

    <dd>

    The <{img/src}> and <{img/srcset}> attributes on the <{img}> element can be used, using the
    <code>x</code> descriptor, to provide multiple images that only vary in their size (the smaller
    image is a scaled-down version of the bigger image).

    <p class="note">
    The <code>x</code> descriptor is not appropriate when the
    rendered size of the image depends on the <a>viewport</a> width (<a>viewport-based selection</a>),
    but can be used together with <a for="image">art direction</a>.
  </p>

    <div class="example">
      <pre highlight="html">
        &lt;h2&gt;From today's featured article&lt;/h2&gt;
        &lt;img src="/uploads/100-marie-lloyd.jpg"
              srcset="/uploads/150-marie-lloyd.jpg 1.5x, /uploads/200-marie-lloyd.jpg 2x"
              alt="" width="100" height="150"&gt;
        &lt;p&gt;&lt;b&gt;&lt;a href="/wiki/Marie_Lloyd"&gt;Marie Lloyd&lt;/a&gt;&lt;/b&gt; (1870–1922)
        was an English &lt;a href="/wiki/Music_hall"&gt;music hall&lt;/a&gt; singer, ...
      </pre>

      The user agent can choose any of the given resources depending on
      the user's screen's pixel density, zoom level, and possibly other factors such as the user's network conditions.

      For backwards compatibility with older user agents that
      don't yet understand the <{img/srcset}> attribute,
      one of the URLs is specified in the <{img}> element's <code>src</code> attribute.
      This will result in something useful (though perhaps lower-resolution than the user would like)
      being displayed even in older user agents.
      For new user agents, the <code>src</code> attribute participates in the resource selection,
      as if it was specified in <{img/srcset}> with a <code>1x</code> descriptor.

      The image's rendered size is given in the
      <code>width</code> and <code>height</code> attributes,
      which allows the user agent to allocate space for the image before it is downloaded.

    </div>

    </dd>

    <dt><a>Viewport-based selection</a></dt>

    <dd>

    The <{img/srcset}> and <code>sizes</code> attributes can be used,
    using the <code>w</code> descriptor,
    to provide multiple images that only vary in their size
    (the smaller image is a scaled-down version of the bigger image).

    <div class="example">
      In this example, a banner image takes up the entire <a>viewport</a> width
      (using appropriate CSS).

    <pre highlight="html">
      &lt;h1&gt;&lt;img sizes="100vw" srcset="wolf-400.jpg 400w, wolf-800.jpg 800w, wolf-1600.jpg 1600w"
          src="wolf-400.jpg" alt="The rad wolf"&gt;&lt;/h1&gt;
    </pre>

      The user agent will calculate the effective pixel density of each image
      from the specified <code>w</code> descriptors and the specified rendered size in the <code>sizes</code> attribute.
      It can then choose any of the given resources depending on
      the user's screen's pixel density, zoom level, and possibly other factors such as the user's network conditions.

      If the user's screen is 320 CSS pixels wide, this is equivalent to specifying
      <code>wolf-400.jpg 1.25x, wolf-800.jpg 2.5x, wolf-1600.jpg 5x</code>.
      On the other hand, if the user's screen is 1200 CSS pixels wide,
      this is equivalent to specifying
      <code>wolf-400.jpg 0.33x, wolf-800.jpg 0.67x, wolf-1600.jpg 1.33x</code>.
      By using the <code>w</code> descriptors and the <code>sizes</code> attribute,
      the user agent can choose the correct image source to download regardless of how large the user's device is.

      For backwards compatibility,
      one of the URLs is specified in the <{img}> element's <code>src</code> attribute.
      In new user agents, the <code>src</code> attribute is ignored
      when the <{img/srcset}> attribute uses <code>w</code> descriptors.

      In this example, the <code>sizes</code> attribute could be omitted
      because the default value is <code>100vw</code>.

    </div>

    <div class="example">
      In this example, the Web page has three layouts depending on the width of the <a>viewport</a>.
      The narrow layout has one column of images (the width of each image is about 100%),
      the middle layout has two columns of images (the width of each image is about 50%),
      and the widest layout has three columns of images, and some page margin (the width of each image is about 33%).
      It breaks between these layouts when the <a>viewport</a> is <code>30em</code> wide and <code>50em</code> wide, respectively.

    <pre highlight="html">
      &lt;img sizes="(max-width: 30em) 100vw, (max-width: 50em) 50vw, calc(33vw - 100px)"
      srcset="swing-200.jpg 200w, swing-400.jpg 400w, swing-800.jpg 800w, swing-1600.jpg 1600w"
      src="swing-400.jpg" alt="Kettlebell Swing"&gt;
    </pre>

      The <code>sizes</code> attribute sets up the
      layout breakpoints at <code>30em</code> and <code>50em</code>,
      and declares the image sizes between these breakpoints to be
      <code>100vw</code>, <code>50vw</code>, or <code>calc(33vw - 100px)</code>.
      These sizes do not necessarily have to match up exactly with the actual image width as specified in the CSS.

      The user agent will pick a width from the <code>sizes</code> attribute,
      using the first item with a <a>&lt;media-condition&gt;</a> (the part in parentheses) that evaluates to true,
      or using the last item (<code>calc(33vw - 100px)</code>) if they all evaluate to false.

      For example, if the <a>viewport</a> width is <code>29em</code>,
      then <code>(max-width: 30em)</code> evaluates to true and <code>100vw</code> is used,
      so the image size, for the purpose of resource selection, is <code>29em</code>.
      If the <a>viewport</a> width is instead <code>32em</code>,
      then <code>(max-width: 30em)</code> evaluates to false,
      but <code>(max-width: 50em)</code> evaluates to true and <code>50vw</code> is used,
      so the image size, for the purpose of resource selection, is <code>16em</code> (half the <a>viewport</a> width).
      Notice that the slightly wider <a>viewport</a> results in a smaller image because of the different layout.

      The user agent can then calculate the effective pixel density and choose an appropriate resource
      similarly to the previous example.

    </div>

    </dd>

    <dt><a for="image">Art direction</a>-based selection</dt>

    <dd>

    The <{picture}> element and the <{source}> element,
    together with the <code>media</code> attribute,
    can be used, to provide multiple images that vary the image content
    (for intance the smaller image might be a cropped version of the bigger image).

    <div class="example">
      <pre highlight="html">
        &lt;picture&gt;
          &lt;source media="(min-width: 45em)" srcset="large.jpg"&gt;
          &lt;source media="(min-width: 32em)" srcset="med.jpg"&gt;
          &lt;img src="small.jpg" alt="The wolf runs through the snow."&gt;
        &lt;/picture&gt;
      </pre>

      The user agent will choose the first <{source}> element
      for which the media query in the <code>media</code> attribute matches,
      and then choose an appropriate URL from its <code>srcset</code> attribute.

      The rendered size of the image varies depending on which resource is chosen.
      To specify dimensions that the user agent can use before having downloaded the image,
      CSS can be used.

      <pre highlight="css">
        img { width: 300px; height: 300px }
        @media (min-width: 32em) { img { width: 500px; height:300px } }
        @media (min-width: 45em) { img { width: 700px; height:400px } }
      </pre>

    </div>

    <div class="example">
      This example combines <a for="image">art direction</a>- and <a>device-pixel-ratio</a>-based selection.
      A banner that takes half the <a>viewport</a> is provided in two versions,
      one for wide screens and one for narrow screens.

    <pre highlight="html">
      &lt;h1&gt;
        &lt;picture&gt;
        &lt;source media="(max-width: 500px)" srcset="banner-phone.jpeg, banner-phone-HD.jpeg 2x"&gt;
        &lt;img src="banner.jpeg" srcset="banner-HD.jpeg 2x" alt="The Breakfast Combo"&gt;
        &lt;/picture&gt;
      &lt;/h1&gt;
    </pre>

    </div>

    </dd>

    <dt><a>Image format-based selection</a></dt>

    <dd>

    The <code>type</code> attribute
    on the <{source}> element can be used,
    to provide multiple images in different formats.

    <div class="example">
      <pre highlight="html">
        &lt;h2&gt;From today's featured article&lt;/h2&gt;
        &lt;picture&gt;
          &lt;source srcset="/uploads/100-marie-lloyd.webp" type="image/webp"&gt;
          &lt;source srcset="/uploads/100-marie-lloyd.jxr" type="image/vnd.ms-photo"&gt;
          &lt;img src="/uploads/100-marie-lloyd.jpg" alt="" width="100" height="150"&gt;
        &lt;/picture&gt;
        &lt;p&gt;&lt;b&gt;&lt;a href="/wiki/Marie_Lloyd"&gt;Marie Lloyd&lt;/a&gt;&lt;/b&gt; (1870–1922)
        was an English &lt;a href="/wiki/Music_hall"&gt;music hall&lt;/a&gt; singer, ...
      </pre>

      In this example, the user agent will choose the first <{source}> that has a <{source/type}>
      attribute with a supported MIME type. If the user agent supports WebP images, the first
      <{source}> element will be chosen. If not, but the user agent does support JPEG XR images, the
      second <{source}> element will be chosen. If neither of those formats are supported, the <{img}> element will be chosen.

    </div>

    </dd>

  </dl>

<h4 id="embedded-content-dependencies">Dependencies</h4>

  : Media Queries [[!MEDIAQ]]
  :: <<media-condition>>
  : CSS Values and Units [[!CSS-VALUES]]
  :: <<length>>
  : CSS Syntax [[!CSS-SYNTAX-3]]
  :: <a>Parse a comma-separated list of component values</a>
  :: <a>component value</a>
  :: <<whitespace-token>>

<h4 id="the-picture-element">The <dfn element><code>picture</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Embedded content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>embedded content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Zero or more <a element lt="picture source"><code>source</code></a> elements, followed by one <{img}> element, optionally intermixed with <a>script-supporting elements</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl" dfn-for="HTMLPictureElement">
        interface HTMLPictureElement : HTMLElement {};
      </pre>
    </dd>
  </dl>

  The <{picture}> element is a container
  which provides multiples sources to its contained <{img}> element
  to allow authors to declaratively control or give hints to the user agent about which image resource to use,
  based on the screen pixel density, <a>viewport</a> size, image format, and other factors. It <a>represents</a> its children.

  <p class="note">
    The <{picture}> element is somewhat different
    from the similar-looking <code>video</code> and <{audio}> elements.
    While all of them contain <a element lt="picture source"><code>source</code></a> elements,
    the <a element lt="picture source"><code>source</code></a> element's <code>src</code> attribute has no meaning
    when the element is nested within a <{picture}> element,
    and the resource selection algorithm is different.
    As well, the <{picture}> element itself does not display anything;
    it merely provides a context for its contained <{img}> element
    that enables it to choose from multiple <a for="url">URLs</a>.
  </p>

<h4 id="the-source-element-when-used-with-the-picture-element">The <dfn element for="picture" lt="picture source"><code>source</code></dfn> element when used with the <{picture}> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>Same as for the <{source}> element.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <{picture}> element, before the <{img}> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Same as for the <{source}> element.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a></dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>srcset</code> - Images to use in different situations
    (e.g., high-resolution displays, small monitors, etc)</dd>
    <dd><code>sizes</code> - Image sizes between breakpoints</dd>
    <dd><code>media</code> - Applicable media</dd>
    <dd><code>type</code> - Type of embedded resource</dd>
    <dt>Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl" dfn-for="HTMLSourceElement" id='Picture-HTMLSourceElement'>
        partial interface HTMLSourceElement {
          attribute DOMString srcset;
          attribute DOMString sizes;
          attribute DOMString media;
        };
      </pre>
    </dd>
  </dl>

  The authoring requirements in this section only apply if the <a element lt="picture source"><code>source</code></a> element has
  a parent that is a <{picture}> element.

  The <a element lt="picture source"><code>source</code></a> element allows authors to specify multiple alternative
  <a>source sets</a> for <{img}> elements.
  It does not <a>represent</a> anything on its own.

  The <dfn element-attr for="source"><code>srcset</code></dfn> content attribute must be present,
  and must consist of one or more <a>image candidate strings</a>,
  each separated from the next by a U+002C COMMA character (,).
  If an <a>image candidate string</a> contains no descriptors
  and no <a>space characters</a> after the URL,
  the following <a>image candidate string</a>, if there is one,
  must begin with one or more <a>space characters</a>.

  If the <code>srcset</code> attribute has any
  <a>image candidate strings</a> using a <a>width descriptor</a>,
  the <dfn element-attr for="source"><code>sizes</code></dfn> content attribute must also be present,
  and the value must be a <a>valid source size list</a>.

  The <dfn element-attr for="source"><code>media</code></dfn> content attribute may also be present.
  If present, the value must contain a <a>valid media query list</a>.

  The <dfn element-attr for="source" lt='picture source type'><code>type</code></dfn> content attribute may also be present.
  If present, the value must be a <a>valid mime type</a>.
  It gives the type of the images in the <a>source set</a>,
  to allow the user agent to skip to the next <{source}> element
  if it does not support the given type.

  <p class="note">
    If the <code>type</code> attribute
  is <em>not</em> specified, the user agent will not select a different
  <{source}> element if it finds that it does not support
  the image format after fetching it.
  </p>

  When a <a element lt="picture source"><code>source</code></a> element has a following sibling
  <a element lt="picture source"><code>source</code></a> element or <{img}> element with a
  <code>srcset</code> attribute specified, it must have
  at least one of the following:

  <ul>

    <li>A <code>media</code> attribute specified with a value that,
    after <a>stripping leading and trailing whitespace</a>,
    is not the empty string and is not an <a>ASCII case-insensitive</a> match for the string "<code>all</code>".</li>

    <li>A <code>type</code> attribute specified.</li>

  </ul>

  The <code>src</code> attribute must not be present.

  <div class="impl">

  The IDL attributes {{HTMLSourceElement/srcset}},
  {{HTMLSourceElement/sizes}} and
  {{HTMLSourceElement/media}} must <a>reflect</a> the
  respective content attributes of the same name.

  </div>

<h4 id="the-img-element">The <dfn element><code>img</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Embedded content</a>.</dd>
    <dd><a>Form-associated element</a>.</dd>
    <dd>If the element has a <code>usemap</code> attribute: <a>interactive content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>embedded content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Nothing</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>alt</code> - Replacement text for use when images are not available </dd>
    <dd><code>src</code> - Address of the resource</dd>
    <dd><code>srcset</code> - Images to use in different situations
    (e.g., high-resolution displays, small monitors, etc) </dd>
    <dd><code>sizes</code> - Image sizes between breakpoints</dd>
    <dd><code>crossorigin</code> - How the element handles crossorigin requests</dd>
    <dd><code>usemap</code> - Name of <a>image map</a> to use </dd>
    <dd><code>ismap</code> - Whether the image is a server-side image map</dd>
    <dd><code>width</code> - Horizontal dimension</dd>
    <dd><code>height</code> - Vertical dimension</dd>
    <dt>Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values:</dt>
    <dd><a value for="role"><code>presentation</code></a> role only, for an
    <{img}> element whose <code>alt</code> attribute's value is empty (<code>alt=""</code>), otherwise
    <a href="#allowed-aria-roles-states-and-properties">Any role value</a>.</dd>
    <dt>Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl" dfn-for="HTMLImageElement">
        [NamedConstructor=Image(optional unsigned long width, optional unsigned long height)]
        interface HTMLImageElement : HTMLElement {
          attribute DOMString alt;
          attribute DOMString src;
          attribute DOMString srcset;
          attribute DOMString sizes;
          attribute DOMString? crossOrigin;
          attribute DOMString useMap;
          attribute boolean isMap;
          attribute unsigned long width;
          attribute unsigned long height;
          readonly attribute unsigned long naturalWidth;
          readonly attribute unsigned long naturalHeight;
          readonly attribute boolean complete;
          readonly attribute DOMString currentSrc;
        };
      </pre>
    </dd>
  </dl>

  An <{img}> element represents an image.

  The image given by the <dfn element-attr for="img"><code>src</code></dfn> and <dfn element-attr for="img"><code>srcset</code></dfn> attributes,
  and any previous sibling <{source}> elements'
  <code>srcset</code> attributes if the parent is a <{picture}> element,
  is the embedded content; the value of
  the <dfn element-attr for="img"><code>alt</code></dfn> attribute provides equivalent content for
  those who cannot process images or who have image loading disabled (i.e., it is the
  <{img}> element's <a>fallback content</a>).

  The requirements on the <code>alt</code> attribute's value are described
  <a href="#alt-text">in the next section</a>.

  The <code>src</code> attribute must be present, and must contain a
  <a>valid non-empty URL potentially surrounded by spaces</a> referencing a non-interactive,
  optionally animated, image resource that is neither paged nor scripted.

  The <code>srcset</code> attribute may also be present.
  If present, its value must consist of one or more
  <a>image candidate strings</a>,
  each separated from the next by a U+002C COMMA character (,).
  If an <a>image candidate string</a> contains no descriptors
  and no <a>space characters</a> after the URL,
  the following <a>image candidate string</a>, if there is one,
  must begin with one or more <a>space characters</a>.

  An <dfn>image candidate string</dfn> consists of the following components, in order, with the
  further restrictions described below this list:

  <ol>

    <li>Zero or more <a>space characters</a>.</li>

    <li>A <a>valid non-empty URL</a> that does not start or end with a U+002C COMMA character (,),
    referencing a non-interactive, optionally animated, image resource
    that is neither paged nor scripted.</li>

    <li>Zero or more <a>space characters</a>.</li>

    <li>

    Zero or one of the following:

    <ul>

      <li>A <dfn>width descriptor</dfn>, consisting of:
      a <a>space character</a>,
      a <a>valid non-negative integer</a> giving a number greater than zero
      representing the <dfn>width descriptor value</dfn>,
      and a U+0077 LATIN SMALL LETTER W character.</li>

      <li>A <i>pixel density descriptor</i>, consisting of:
      a <a>space character</a>,
      a <a>valid floating-point number</a> giving a number greater than zero
      representing the <i>pixel density descriptor</i> value,
      and a U+0078 LATIN SMALL LETTER X character.</li>

    </ul>

    </li>

    <li>Zero or more <a>space characters</a>.</li>

  </ol>

  There must not be an <a>image candidate string</a> for an element that
  has the same <a>width descriptor value</a> as another
  <a>image candidate string</a>'s <a>width descriptor value</a> for the same element.

  There must not be an <a>image candidate string</a> for an element that
  has the same <i>pixel density descriptor</i> value as another
  <a>image candidate string</a>'s <i>pixel density descriptor</i> value for the same element.
  For the purpose of this requirement,
  an <a>image candidate string</a> with no descriptors is equivalent to
  an <a>image candidate string</a> with a <code>1x</code> descriptor.

  If a <{source}> element has a <code>sizes</code> attribute present
  or an <{img}> element has a <code>sizes</code> attribute present,
  all <a>image candidate strings</a> for that
  element must have the <a>width descriptor</a> specified.

  If an <a>image candidate string</a> for a <code>source</code> or
  <{img}> element has the <a>width descriptor</a> specified, all other
  <a>image candidate strings</a> for that element must also
  have the <a>width descriptor</a> specified.

  The specified width in an <a>image candidate string</a>'s <a>width descriptor</a>
  must match the <a for="css">intrinsic width</a> in the resource given by the
  <a>image candidate string</a>'s URL, if it has an <a for="css">intrinsic width</a>.

  <p class="note">
    The requirements above imply that images can be static bitmaps (e.g., PNGs, GIFs, JPEGs),
    single-page vector documents (single-page PDFs, XML files with an SVG root element), animated
    bitmaps (APNGs, animated GIFs), animated vector graphics (XML files with an SVG root element
    that use declarative SMIL animation), and so forth. However, these definitions preclude SVG
    files with script, multipage PDF files, interactive MNG files, HTML documents, plain text
    documents, and so forth. [[!PNG]] [[!GIF]] [[!JPEG]] [[!PDF]] [[!XML]] [[!APNG]] [[!SVG]] [[!MNG]]
  </p>

  If the <code>srcset</code> attribute is present,
  the <dfn element-attr for="img"><code>sizes</code></dfn> attribute may also be present.
  If present, its value must be a <a>valid source size list</a>.

  A <dfn>valid source size list</dfn> is a string that matches the following grammar:
  [[!CSS-VALUES]] [[!MEDIAQ]]

  <pre highlight="html">
    &lt;source-size-list&gt; = &lt;source-size&gt;# [ , &lt;source-size-value&gt; ]? | &lt;source-size-value&gt;
    &lt;source-size&gt; = &lt;media-condition&gt; &lt;source-size-value&gt;
    &lt;source-size-value&gt; = &lt;length&gt;
  </pre>

  A <code>&lt;source-size-value&gt;</code> must not be negative.

  <p class="note">
    Percentages are not allowed in a <code>&lt;source-size-value&gt;</code>,
  to avoid confusion about what it would be relative to.
  The <code>vw</code> unit can be used for sizes relative to the <a>viewport</a> width.
  </p>

  The <{img}> element must not be used as a layout tool. In particular, <code>img</code>
  elements should not be used to display transparent images, as such images rarely convey meaning and
  rarely add anything useful to the document.

  <hr />

  The <dfn element-attr for="img"><code>crossorigin</code></dfn> attribute is a <a>CORS
  settings attribute</a>. Its purpose is to allow images from third-party sites that allow
  cross-origin access to be used with <{canvas}>.

  <div class="impl">

  <hr />

  An <{img}> element has a <dfn>current request</dfn> and a <dfn>pending request</dfn>.
  The <a>current request</a> is initially set to a new <a>image request</a>.
  The <a>pending request</a> is initially set to null.
  The <a>current request</a> is usually referred to as the <{img}> element itself.

  An <dfn>image request</dfn> has a <dfn for="image">state</dfn>, <dfn>current URL</dfn> and <dfn>image data</dfn>.

  An <a>image request</a>'s <a for="image">state</a> is one of the following:

  <dl>

    <dt><dfn state for="img" lt="Unavailable|unavailable">Unavailable</dfn></dt>
    <dd>The user agent hasn't obtained any image data,
    or has obtained some or all of the image data but
    hasn't yet decoded enough of the image to get the image dimensions.</dd>

    <dt><dfn state for="img" lt="Partially available|partially available">Partially available</dfn></dt>
    <dd>The user agent has obtained some of the image data and at least the image dimensions are
    available.</dd>

    <dt><dfn state for="img" lt="Completely available|completely available">Completely available</dfn></dt>
    <dd>The user agent has obtained all of the image data and at least the image dimensions are
    available.</dd>

    <dt><dfn state for="img" lt="Broken|broken">Broken</dfn></dt>
    <dd>The user agent has obtained all of the image data that it can, but it cannot even decode the
    image enough to get the image dimensions (e.g., the image is corrupted, or the format is not
    supported, or no data could be obtained).</dd>

  </dl>

  An <a>image request</a>'s <a>current URL</a> is initially the empty string.

  An <a>image request</a>'s <a>image data</a> is the decoded image data.

  When an <a>image request</a> is either in the <a state for="img">partially available</a> state or in the <a state for="img">completely available</a> state, it is
  said to be <dfn state for="img" lt="Available|available">available</dfn>.

  An <a>image request</a> is initially <a state for="img">unavailable</a>.

  When an <{img}> element is <a state for="img">available</a>,
  it <a>provides a paint source</a>
  whose width is the image's <a lt="density-corrected intrinsic width and height">
  density-corrected intrinsic width</a> (if any),
  whose height is the image's <a lt="density-corrected intrinsic width and height">
  density-corrected intrinsic height</a> (if any),
  and whose appearance is the intrinsic appearance of the image.

  In a <a>browsing context</a> where <a>scripting is
  disabled</a>, user agents may obtain images immediately or on demand. In a <a>browsing
  context</a> where <a>scripting is enabled</a>, user agents
  must obtain images immediately.

  A user agent that obtains images immediately must immediately
  <a>update the image data</a> of an <{img}> element,
  with the <i>restart animation</i> flag set if so stated,
  whenever that element is created or has experienced <a>relevant mutations</a>.

  A user agent that obtains images on demand must <a>update the image data</a> of an
  <{img}> element whenever it needs the image data (i.e., on demand),
  but only if the <{img}> element is in the
  <a state for="img">unavailable</a> state. When an <{img}> element
  has experienced <a>relevant mutations</a>, if the user
  agent only obtains images on demand, the <{img}> element must return to the <a state for="img">unavailable</a> state.

  The <dfn>relevant mutations</dfn> for an <{img}> element are as follows:

  <ul>

    <li>The element's <code>src</code>, <code>srcset</code>, <code>width</code>, or <code>sizes</code> attributes are set, changed, or removed.</li>

    <li>The element's <code>src</code> attribute is set to the same value as the previous value.
    This must set the <i>restart animation</i> flag for the <a>update the image data</a> algorithm.</li>

    <li>The element's <code>crossorigin</code> attribute's state is changed.</li>

    <li>The element is <a for="document">inserted into</a> or <a for="document">removed from</a> a <code>picture</code> parent element.</li>

    <li>The element's parent is a <{picture}> element and a
    <code>source</code> element is inserted as a previous sibling.</li>

    <li>The element's parent is a <{picture}> element and a
    <{source}> element that was a previous sibling is <a>removed</a>.</li>

    <li>The element's parent is a <{picture}> element and a
    <{source}> element that is a previous sibling has its
    <code>srcset</code>,
    <code>sizes</code>,
    <code>media</code>
    or <code>type</code> attributes set, changed, or removed.</li>

    <li>The element's <a>adopting steps</a> are run.</li>

  </ul>

  Each <{img}> element has a <dfn>last selected source</dfn>, which must initially be
  null.

  Each <a>image request</a> has a <dfn>current pixel density</dfn>, which must initially be undefined.

  When an <{img}> element has a <a>current pixel density</a> that is not 1.0, the
  element's image data must be treated as if its resolution, in device pixels per CSS pixels, was
  the <a>current pixel density</a>.
  The image's <dfn>density-corrected intrinsic width and height</dfn> are the <a>intrinsic width and height</a>
  after taking into account the <a>current pixel density</a>.

  <p class="example">For example, given a screen with 96 CSS pixels per CSS inch, if the
  <a>current pixel density</a> is 3.125, that means that there are 96 &times; 3.125 = 300 device
  pixels per CSS inch, and thus if the image data is 300x600, it has <a>intrinsic dimensions</a> of
  300 ÷ 3.125 = 96 CSS pixels by 600 ÷ 3.125 = 192 CSS pixels. With a <a>current pixel density</a>
  of 2.0 (192 device pixels per CSS inch) and the same image data (300x600), the <a>intrinsic
  dimensions</a> would be 150x300.</p>

  Each {{Document}} object must have a <dfn>list of available images</dfn>. Each image
  in this list is identified by a tuple consisting of an <a>absolute URL</a>, a <a>CORS
  settings attribute</a> mode, and, if the mode is not <a state for="cors">No CORS</a>, an
  <a for="concept">origin</a>.
  Each image furthermore has an <dfn>ignore higher-layer caching</dfn> flag.
  User agents may copy entries from one {{Document}}
  object's <a>list of available images</a> to another at any time (e.g., when the
  {{Document}} is created, user agents can add to it all the images that are loaded in
  other {{Document}}s), but must not change the keys of entries copied in this way when
  doing so, and must unset the <a>ignore higher-layer caching</a> flag for the copied entry.
  User agents may also remove images from such lists at any time (e.g., to save
  memory).
  User agents must remove entries in the <a>list of available images</a> as appropriate
  given higher-layer caching semantics for the resource (e.g., the HTTP <code>Cache-Control</code>
  response header) when the <a>ignore higher-layer caching</a> flag is unset.

  <p class="note">
    The <a>list of available images</a> is intended to enable synchronous
  switching when changing the <code>src</code> attribute to a URL that has
  previously been loaded, and to avoid re-downloading images in the same document even when they
  don't allow caching per HTTP. It is not used to avoid re-downloading the same image while the
  previous image is still loading.
  </p>

  <p class="example">For example, if a resource has the HTTP response header <code>Cache-Control: must-revalidate</code>,
  the user agent would remove it from the <a>list of available images</a> but could keep the image data separately,
  and use that if the server responds with a <code>204 No Content</code> status.</p>

  When the user agent is to <dfn>update the image data</dfn> of an <{img}> element,
  optionally with the <i>restart animations</i> flag set,
  it must run the following steps:

  <ol>

    <li>

    If the element's <a>node document</a> is not the <a>active document</a>,
    then run these substeps:

    <ol>

      <li>Continue running this algorithm <a>in parallel</a>.</li>

      <li>Wait until the element's <a>node document</a> is the <a>active document</a>.</li>

      <li>If another instance of this algorithm for this <{img}> element was started after this instance
      (even if it aborted and is no longer running), then abort these steps.</li>

      <li><a>Queue a microtask</a> to continue this algorithm.</li>

    </ol>

    </li>

    <li>If the user agent cannot support images, or its support for images has been disabled, then
    <a>abort the image request</a> for the <a>current request</a> and the <a>pending request</a>,
    set <a>current request</a> to the <a state for="img">unavailable</a> state,
    let <a>pending request</a> be null,
    and abort these steps.</li>

    <li>

    If the element does not use <code>srcset</code> or <code>picture</code> and
    it does not have a parent or it has a parent but it is not a <{picture}> element,
    and it has a <code>src</code> attribute specified and
    its value is not the empty string, let <var>selected source</var> be the value of the
    element's <code>src</code> attribute, and <var>selected pixel
    density</var> be 1.0. Otherwise, let <var>selected source</var> be null and <var>selected pixel density</var> be undefined.

    </li>

    <li>Let the <{img}> element's <a>last selected source</a> be <var>selected source</var>.</li>

    <li>

    If <var>selected source</var> is not null, run these substeps:

    <ol>

      <li><a>Parse</a> <var>selected source</var>, relative
      to the element, and let the result be <var>absolute URL</var>. If that is not successful, then
      abort these inner set of steps.</li>

      <li>Let <var>key</var> be a tuple consisting of the resulting <a>absolute URL</a>, the
      <{img}> element's <code>crossorigin</code>
      attribute's mode, and, if that mode is not <a state for="cors">No CORS</a>,
      the <a>node document</a>'s <a for="concept">origin</a>.</li>

      <li>

        If the <a>list of available images</a> contains an entry for <var>key</var>, run
        these subsubsteps:

        <ol>

          <li>Set the <a>ignore higher-layer caching</a> flag for that entry.</li>

          <li><a>Abort the image request</a> for the <a>current request</a> and the
          <a>pending request</a>.</li>

          <li>Let <a>pending request</a> be null.</li>

          <li>Let <a>current request</a> be a new <a>image request</a> whose <a>image data</a> is that of the entry and whose state is set to the
          <a state for="img">completely available</a> state.</li>

          <li>Update the presentation of the image appropriately.</li>

          <li>Let the <a>current request</a>'s <a>current pixel density</a> be
          <var>selected pixel density</var>.</li>

          <li><a>Queue a task</a> to <a>restart the animation</a> if <i>restart
          animation</i> is set, change <a>current request</a>'s <a>current URL</a> to <var>absolute URL</var>, and then <a>fire a simple event</a> named <code>load</code> at the <{img}>
          element.</li>

          <li>Abort the <a>update the image data</a> algorithm.</li>

        </ol>

       </li>

    </ol>

    </li>

    <li><a>in parallel</a> <a>await a stable state</a>, allowing the <a>task</a> that invoked this algorithm to continue.
    The <a>synchronous
    section</a> consists of all the remaining steps of this algorithm until the algorithm says the
    <a>synchronous section</a> has ended. (Steps in <a>synchronous sections</a> are marked with &#x231B;.)</li>

    <li>

    &#x231B; If another instance of this algorithm for this <{img}> element was started
    after this instance (even if it aborted and is no longer running), then abort these steps.

    <p class="note">
    Only the last instance takes effect, to avoid multiple requests when, for
    example, the <code>src</code>, <code>srcset</code>,
    and <code>crossorigin</code> attributes are all set in
    succession.
  </p>

    </li>

    <li>

    &#x231B; Let <var>selected source</var> and <var>selected pixel density</var> be the
    URL and pixel density that results from <a>selecting an image source</a>,
    respectively.

    </li>

    <li>

    &#x231B; If <var>selected source</var> is null, run these substeps:

    <ol>

      <li>&#x231B; Set the <a>current request</a> to the <a state for="img">broken</a> state,
      <a>abort the image request</a> for the <a>current request</a> and the <a>pending request</a>,
      and let <a>pending request</a> be null.</li>

      <li>&#x231B; <a>Queue a task</a> to change the <a>current request</a>'s <a>current URL</a> to
      the empty string, and then, if the element has a
      <code>src</code> attribute or it uses <code>srcset</code> or <code>picture</code><, <a>fire a simple
      event</a> named <code>error</code> at the <{img}>
      element.</li>

      <li>&#x231B; Abort this algorithm.</li>

    </ol>

    </li>

    <li>

    &#x231B; <a>Queue a task</a> to <a>fire a progress event</a> named <code>loadstart</code> at
    the <{img}> element.

    </li>

    &#x231B; <a>Parse</a> <var>selected source</var>, relative
    to the element's <a>node document</a>, and let <var>absolute URL</var> be the
    <a>resulting URL string</a>. If
    that is not successful, run these substeps:

    <ol>

      <li>&#x231B; <a>Abort the image request</a> for the <a>current request</a> and
      the <a>pending request</a>.</li>

      <li>&#x231B; Set the <a>current request</a> to the <a state for="img">broken</a> state.</li>

      <li>&#x231B; Let <a>pending request</a> be null.</li>

      <li>&#x231B; <a>Queue a task</a> to change the <a>current request</a>'s <a>current URL</a> to <var>selected source</var>, <a>fire a simple event</a> named <code>error</code> at the <{img}> element and
      then <a>fire a simple event</a> named <code>loadend</code> at the
      <{img}> element.</li>

      <li>&#x231B; Abort the <span>update the image data</span> algorithm.</li>

     </ol>

    <li>

    &#x231B; If the <a>pending request</a> is not null,
    and <var>absolute URL</var> is the same as the <a>pending request</a>'s <a>current URL</a>,
    then abort these steps.

    &#x231B; If <var>absolute URL</var> is the same as the <a>current request</a>'s <a>current URL</a>,
    and <a>current request</a> is in the <a state for="img">partially available</a> state,
    then <a>abort the image request</a> for the <a>pending request</a>,
    <a>queue a task</a> to <a>restart the animation</a> if <i>restart animation</i> is set,
    and abort these steps.

    &#x231B; If the <a>pending request</a> is not null,
    <a>abort the image request</a> for the <a>pending request</a>.

    &#x231B; Let <var>image request</var> be a new <a>image request</a>
    whose <a>current URL</a> is <var>absolute URL</var>.

    &#x231B; If <a>current request</a> is in the <a state for="img">unavailable</a> state
    or the <a state for="img">broken</a> state,
    let the <a>current request</a> be <var>image request</var>.
    Otherwise, let the <a>pending request</a> be <var>image request</var>.

    &#x231B; Let <var>request</var> be the result of <a>creating a potential-CORS request</a> given
    <var>absolute URL</var> and the current state of the element's <code>crossorigin</code> content attribute.

    &#x231B; Set <var>request</var>'s <a>client</a> to the
    element's <a>node document</a>'s <code>Window</code> object's <a>environment settings
    object</a> and <a for="request">type</a> to "<code>image</code>".

    &#x231B; If the element uses <code>srcset</code> or <code>picture</code>, set
    <var>request</var>'s <a>initiator</a> to "<code>imageset</code>".

    &#x231B; Set <var>request</var>'s <a>same-origin data-URL flag</a>.

    &#x231B; <a>Fetch</a> <var>request</var>. Let this
    instance of the <a>fetching</a> algorithm be associated with
    <var>image request</var>.

    The resource obtained in this fashion, if any, is <var>image request</var>'s <a>image data</a>.
    It can be either <a>CORS-same-origin</a> or <a>CORS-cross-origin</a>; this affects
    the <a for="concept">origin</a> of the image itself (e.g., when used on a <code>canvas</code>).

    Fetching the image must <a>delay the load event</a> of the element's <a>node document</a> until the
    <a>task</a> that is <a>queued</a> by the
    <a>networking task source</a> once the resource has been fetched (defined below) has been run.

    <p class="warning">This, unfortunately, can be used to perform a rudimentary port scan of the
    user's local network (especially in conjunction with scripting, though scripting isn't actually
    necessary to carry out such an attack). User agents may implement <a>cross-origin</a> access control policies that are stricter than those
    described above to mitigate this attack, but unfortunately such policies are typically not
    compatible with existing Web content.</p>

    If the resource is <a>CORS-same-origin</a>, each <a>task</a>
    that is <a>queued</a> by the <a>networking task source</a>
    while the image is being fetched, if <var>image request</var> is the <a>current
    request</a>, must <a>fire a progress event</a> named <code>progress</code> at the <{img}> element.

    </li>

    <li>End the <a>synchronous section</a>, continuing the remaining steps <a>in
    parallel</a>, but without missing any data from fetching.</li>

    <li>

    As soon as possible, jump to the first applicable entry from the following list:

    <dl class="switch">

      <dt>If the resource type is <code>multipart/x-mixed-replace</code></dt>

      <dd>

      The next <a>task</a> that is <a>queued</a> by the <a>networking task source</a> while the image is being
      fetched must run the following steps:

      <ol>

        <li>

        If <var>image request</var> is the <a>pending request</a>
        and at least one body part has been completely decoded,
        <a>abort the image request</a> for the <a>current request</a>,
        <a>upgrade the pending request to the current request</a>.

        </li>

        <li>

        Otherwise, if <var>image request</var> is the <a>pending request</a>
        and the user agent is able to determine that <var>image request</var>'s image
        is corrupted in some fatal way such that the image dimensions cannot be obtained,
        <a>abort the image request</a> for the <a>current request</a>,
        <a>upgrade the pending request to the current request</a>
        and set the <a>current request</a>'s state to <a state for="img">broken</a>.

        </li>

        <li>

        Otherwise, if <var>image request</var> is the <a>current request</a>,
        it is in the <a state for="img">unavailable</a> state,
        and the user agent is able to determine <var>image request</var>'s image's width and height,
        set the <a>current request</a>'s state to <a state for="img">partially available</a>.

        </li>

        <li>

        Otherwise, if <var>image request</var> is the <a>current request</a>,
        it is in the <a state for="img">unavailable</a> state,
        and the user agent is able to determine that <var>image request</var>'s image
        is corrupted in some fatal way such that the image dimensions cannot be obtained,
        set the <a>current request</a>'s state to <a state for="img">broken</a>.

        </li>

      </ol>

      Each <a>task</a> that is <a>queued</a> by the <a>networking task source</a> while the image is being
      fetched must update the presentation of the image, but as each new body part comes in, it must
      replace the previous image. Once one body part has been completely decoded, the user agent
      must set the <{img}> element to the <a state for="img">completely available</a> state and <a>queue a task</a> to <a>fire a simple event</a> named
      <code>load</code> at the <{img}> element.

      <p class="note">
    The <code>progress</code> and <code>loadend</code> events are not fired for
      <code>multipart/x-mixed-replace</code> image streams.
  </p>

      </dd>

      <dt>If the resource type and data corresponds to a supported image format, as described below</dt>

      <dd>

      The next <a>task</a> that is <a>queued</a> by the <a>networking task source</a> while the image is being
      fetched must run the following steps:

      <ol>

        <li>

        If the user agent is able to determine <var>image request</var>'s image's width and height,
        and <var>image request</var> is <a>pending request</a>,
        set <var>image request</var>'s state to <a state for="img">partially available</a>.

        </li>

        <li>

        Otherwise, if the user agent is able to determine <var>image request</var>'s image's width and height,
        and <var>image request</var> is <a>current request</a>,
        update the <{img}> element's presentation appropriately
        and set <var>image request</var>'s state to <a state for="img">partially available</a>.

        </li>

        <li>

        Otherwise, if the user agent is able to determine that <var>image request</var>'s image
        is corrupted in some fatal way such that the image dimensions cannot be obtained,
        and <var>image request</var> is <a>pending request</a>,
        <a>abort the image request</a> for the <a>current request</a> and the <a>pending request</a>,
        <a>upgrade the pending request to the current request</a>,
        set <a>current request</a> to the <a state for="img">broken</a> state,
        <a>fire a simple event</a> named <code>error</code> at the <{img}> element,
        <a>fire a simple event</a> named <code>loadend</code> at the <{img}> element,
        and abort these steps.

        </li>

        <li>

        Otherwise, if the user agent is able to determine that <var>image request</var>'s image
        is corrupted in some fatal way such that the image dimensions cannot be obtained,
        and <var>image request</var> is <a>current request</a>,
        <a>abort the image request</a> for <var>image request</var>,
        <a>fire a simple event</a> named <code>error</code> at the <{img}> element,
        <a>fire a simple event</a> named <code>loadend</code> at the <{img}> element,
        and abort these steps.

        </li>

      </ol>

      That <a>task</a>, and each subsequent <a>task</a>, that is <a>queued</a> by the
      <a>networking task source</a> while the image is being fetched, if <var>image
      request</var> is the <a>current request</a>, must update the presentation of the image
      appropriately (e.g., if the image is a progressive JPEG, each packet can improve the
      resolution of the image).

      Furthermore, the last <a>task</a> that is <a>queued</a> by the <a>networking task source</a> once the resource has been
      fetched must additionally run these steps:

      <ol>

        <li>If <var>image request</var> is the <a>pending request</a>,
        <a>abort the image request</a> for the <a>current request</a>,
        <a>upgrade the pending request to the current request</a> and
        update the <{img}> element's presentation appropriately.</li>

        <li>Set <var>image request</var> to the <a state for="img">completely available</a> state.</li>

        <li>Add the image to the <a>list of available images</a> using the key <var>key</var>, with the <a>ignore higher-layer caching</a> flag set.</li>

        <li><a>Fire a progress event or simple event</a> named <code>load</code>
        at the <{img}> element, depending on the resource in <var>image request</var>.</li>

        <li><a>Fire a progress event or simple event</a> named <code>loadend</code>
        at the <{img}> element, depending on the resource in <var>image request</var>.</li>

      </ol>

      </dd>

      <dt>Otherwise</dt>

      <dd>

      The image data is not in a supported file format; the user agent must set
      <var>image request</var> to the <a state for="img">broken</a> state,
      <a>abort the image request</a> for the <a>current request</a> and the <a>pending request</a>,
      <a>upgrade the pending request to the current request</a> if <var>image request</var> is the <a>pending request</a>,
      and then <a>queue a task</a> to first <a>fire a simple event</a> named <code>error</code> at the <{img}> element and then <a>fire a simple
      event</a> named <code>loadend</code> at the <code>img</code>
      element.

      </dd>

    </dl>

    </li>

  </ol>

  To <dfn>abort the image request</dfn> for an <a>image request</a> <var>image request</var> means to run the following steps:

  <ol>

    <li>Forget <var>image request</var>'s <a>image data</a>, if any.</li>

    <li>Abort any instance of the <a>fetching</a> algorithm for
    <var>image request</var>, discarding any pending tasks generated by that algorithm.</li>

  </ol>

  To <dfn>upgrade the pending request to the current request</dfn> for an <{img}> element means to run the following steps:

  <ol>

    <li>Let the <{img}> element's <a>current request</a> be the <a>pending request</a>.</li>

    <li>Let the <{img}> element's <a>pending request</a> be null.</li>

  </ol>

  To <dfn lt="fire a progress event or simple event|fire a progress event">fire a progress event or simple event</dfn> named <var>type</var> at an element <var>e</var>,
  depending on resource <var>r</var>, means to
  <a>fire a progress event</a> named <var>type</var> at <var>e</var> if <var>r</var> is <a>CORS-same-origin</a>,
  and otherwise <a>fire a simple event</a> named <var>type</var> at <var>e</var>.

  While a user agent is running the above algorithm for an element <var>x</var>, there
  must be a strong reference from the element's <a>node document</a> to the element <var>x</var>,
  even if that element is not in its <code>Document</code>.

  An <code>img</code> element is said to <dfn>use <code>srcset</code> or <code>picture</code></dfn>
  if it has a <{img/srcset}> attribute specified or if it has a parent that is a
  <code>picture</code> element.

  When an <{img}> element is in the <a state for="img">completely available</a>
  state <em>and</em> the user agent can decode the media data without errors, then the
  <{img}> element is said to be <dfn>fully decodable</dfn>.

  Whether the image is fetched successfully or not (e.g., whether the response status was an
  <a>ok status</a>) must be ignored when determining the image's type and whether it is a
  valid image.

  <p class="note">
    This allows servers to return images with error responses, and have them displayed.
  </p>

  The user agent should apply the <a>image sniffing rules</a> to determine the type of the image, with the image's <a>associated Content-Type headers</a> giving the <var>official
  type</var>. If these rules are not applied, then the type of the image must be the type given by
  the image's <a>associated Content-Type headers</a>.

  User agents must not support non-image resources with the <{img}> element (e.g., XML
  files whose root element is an HTML element). User agents must not run executable code (e.g.,
  scripts) embedded in the image resource. User agents must only display the first page of a
  multipage resource (e.g., a PDF file). User agents must not allow the resource to act in an
  interactive fashion, but should honor any animation in the resource.

  This specification does not specify which image types are to be supported.

  <hr />

  An <{img}> element is associated with a <a>source set</a>.

  A <dfn>source set</dfn> is an ordered set of zero or more <a>image sources</a>
  and a <a>source size</a>.

  An <dfn>image source</dfn> is a <a for="url">URL</a>,
  and optionally either a density descriptor, or a <a>width descriptor</a>.

  A <dfn>source size</dfn> is a <code>&lt;source-size-value&gt;</code>.
  When a <a>source size</a> has a unit relative to the <a>viewport</a>,
  it must be interpreted relative to the <{img}> element's document's <a>viewport</a>.
  Other units must be interpreted the same as in Media Queries. [[!MEDIAQ]]

  When asked to <dfn lt="selecting an image source|select an image source">select an image source</dfn> for a given <{img}>
  element <var>el</var>, user agents must do the following:

  <ol>

    <li><a>Update the source set</a> for <var>el</var>.</li>

    <li>If <var>el</var>'s <a>source set</a> is empty,
    return null as the URL and undefined as the pixel density and abort these steps.</li>

    <li>Otherwise, take <var>el</var>'s <a>source set</a>
    and let it be <var>source set</var>.</li>

    <li>If an entry <var>b</var> in <var>source set</var> has the same associated density descriptor
    as an earlier entry <var>a</var> in <var>source set</var>, then remove entry <var>b</var>.
    Repeat this step until none of the entries in <var>source set</var> have the same associated density descriptor as an earlier entry.</li>

    <li>In a user agent-specific manner,
    choose one <a>image source</a> from <var>source set</var>.
    Let this be <var>selected source</var>.</li>

    <li>Return <var>selected source</var> and its associated pixel density.</li>

  </ol>

  When asked to <dfn>update the source set</dfn> for a given <{img}> element <var>el</var>,
  user agents must do the following:

  <ol>

    <li>Set <var>el</var>'s <a>source set</a> to an empty <a>source set</a>.</li>

    <li>If <var>el</var> has a parent node and that is a <{picture}> element,
    let <var>elements</var> be an array containing <var>el</var>'s parent node's child elements, retaining relative order.
    Otherwise, let <var>elements</var> be array containing only <var>el</var>.</li>

    <li>If <var>el</var> has a <code>width</code> attribute, and parsing
    that attribute's value using the <a>rules for parsing dimension values</a> doesn't generate
    an error or a percentage value, then let <var>width</var> be the returned integer value.
    Otherwise, let <var>width</var> be null.</li>

    <li>

    Iterate through <var>elements</var>,
    doing the following for each item <var>child</var>:

    <ol>

      <li>

      If <var>child</var> is <var>el</var>:

      <ol>

        <li>If <var>child</var> has a <code>srcset</code> attribute,
        <a>parse <var>child</var>'s srcset attribute</a>
        and let the returned <a>source set</a> be <var>source set</var>.
        Otherwise, let <var>source set</var> be an empty <a>source set</a>.</li>

        <li><a>Parse <var>child</var>'s sizes
        attribute</a> with the fallback width <var>width</var>, and let <var>source set</var>'s
        <a>source size</a> be the returned value.</li>

        <li>If <var>child</var> has a <code>src</code> attribute
        whose value is not the empty string
        and <var>source set</var> does not contain an
        <a>image source</a> with a density descriptor value of 1,
        and no <a>image source</a> with a <a>width descriptor</a>,
        append <var>child</var>'s <code>src</code> attribute value to <var>source set</var>.</li>

        <li><a>Normalize the source densities</a> of <var>source set</var>.</li>

        <li>Let <var>el</var>'s <a>source set</a> be <var>source set</var>.</li>

        <li>Abort this algorithm.</li>

      </ol>

      </li>

      <li>If <var>child</var> is not a <{source}> element,
      continue to the next child.
      Otherwise, <var>child</var> is a <{source}> element.</li>

      <li>If <var>child</var> does not have a <code>srcset</code> attribute,
      continue to the next child.</li>

      <li><a>Parse <var>child</var>'s <code>srcset</code> attribute</a> and
      let the returned <a>source set</a> be <var>source set</var>.</li>

      <li>If <var>source set</var> has zero <a>image sources</a>,
      continue to the next child.</li>

      <li>If <var>child</var> has a <code>media</code> attribute,
      and its value does not <a>match the environment</a>,
      continue to the next child.</li>

      <li><a>Parse <var>child</var>'s <code>sizes</code> attribute</a>
      with the fallback width <var>width</var>, and let <var>source set</var>'s <a>source
      size</a> be the returned value.</li>

      <li>If <var>child</var> has a <code>type</code> attribute,
      and its value is an unknown or unsupported <a>MIME type</a>,
      continue to the next child.</li>

      <li><a>Normalize the source densities</a> of <var>source set</var>.</li>

      <li>Let <var>el</var>'s <a>source set</a> be <var>source set</var>.</li>

      <li>Abort this algorithm.</li>

    </ol>

    </li>

  </ol>

  <p class="note">
    Each <{img}> element independently considers
  its previous sibling <{source}> elements
  plus the <{img}> element itself
  for selecting an <a>image source</a>, ignoring any other (invalid) elements,
  including other <{img}> elements in the same <{picture}> element,
  or <{source}> elements that are following siblings
  of the relevant <{img}> element.
  </p>

  When asked to <dfn lt="parse a srcset attribute|parse child's srcset attribute">parse a srcset attribute</dfn> from an element,
  parse the value of the element's <code>srcset</code> attribute as follows:

  <ol>

    <li>Let <var>input</var> be the value passed to this algorithm.</li>

    <li>Let <var>position</var> be a pointer into <var>input</var>,
    initially pointing at the start of the string.</li>

    <li>Let <var>candidates</var> be an initially empty <a>source set</a>.</li>

    <li><i>Splitting loop</i>: <a>Collect a sequence of characters</a>
    that are <a>space characters</a> or U+002C COMMA characters.
    If any U+002C COMMA characters were collected, that is a <a for="parser">parse error</a>.</li>

    <li>If <var>position</var> is past the end of <var>input</var>,
    return <var>candidates</var> and abort these steps.</li>

    <li><a>Collect a sequence of characters</a> that are not
    <a>space characters</a>, and let that be <var>url</var>.</li>

    <li>Let <var>descriptors</var> be a new empty list.</li>

    <li>

    If <var>url</var> ends with a U+002C COMMA character (,),
    follow these substeps:

    <ol>

      <li>Remove all trailing U+002C COMMA characters from <var>url</var>.
      If this removed more than one character,
      that is a <a for="parser">parse error</a>.</li>

    </ol>

    Otherwise, follow these substeps:

    <ol>

      <li><i>Descriptor tokenizer</i>: <a>Skip whitespace</a></li>

      <li>Let <var>current descriptor</var> be the empty string.</li>

      <li>Let <var>state</var> be <i>in descriptor</i>.</li>

      <li>

      Let <var>c</var> be the character at <var>position</var>.
      Do the following depending on the value of <var>state</var>.
      For the purpose of this step, "EOF" is a special character representing
      that <var>position</var> is past the end of <var>input</var>.

      <dl class="switch">

        <dt><i title="">In descriptor</i></dt>

        <dd>

        Do the following, depending on the value of <var>c</var>:

        <dl class="switch">

          <dt><a>Space character</a></dt>

          <dd>If <var>current descriptor</var> is not empty,
          append <var>current descriptor</var> to <var>descriptors</var>
          and let <var>current descriptor</var> be the empty string.
          Set <var>state</var> to <i>after descriptor</i>.</dd>

          <dt>U+002C COMMA (,)</dt>

          <dd>Advance <var>position</var> to the next character in <var>input</var>.
          If <var>current descriptor</var> is not empty,
          append <var>current descriptor</var> to <var>descriptors</var>.
          Jump to the step labeled <i>descriptor parser</i>.</dd>

          <dt>U+0028 LEFT PARENTHESIS (()</dt>

          <dd>Append <var>c</var> to <var>current descriptor</var>.
          Set <var>state</var> to <i>in parens</i>.</dd>

          <dt>EOF</dt>

          <dd>If <var>current descriptor</var> is not empty,
          append <var>current descriptor</var> to <var>descriptors</var>.
          Jump to the step labeled <i>descriptor parser</i>.</dd>

          <dt>Anything else</dt>

          <dd>Append <var>c</var> to <var>current descriptor</var>.</dd>

        </dl>

        </dd>

        <dt><i title="">In parens</i></dt>

        <dd>

        Do the following, depending on the value of <var>c</var>:

        <dl class="switch">

          <dt>U+0029 RIGHT PARENTHESIS ())</dt>

          <dd>Append <var>c</var> to <var>current descriptor</var>.
          Set <var>state</var> to <i>in descriptor</i>.</dd>

          <dt>EOF</dt>

          <dd>Append <var>current descriptor</var> to <var>descriptors</var>.
          Jump to the step labeled <i>descriptor parser</i>.</dd>

          <dt>Anything else</dt>

          <dd>Append <var>c</var> to <var>current descriptor</var>.</dd>

        </dl>

        </dd>

        <dt><i title="">After descriptor</i></dt>

        <dd>

        Do the following, depending on the value of <var>c</var>:

        <dl class="switch">

          <dt><a>Space character</a></dt>

          <dd>Stay in this state.</dd>

          <dt>EOF</dt>

          <dd>Jump to the step labeled <i>descriptor parser</i>.</dd>

          <dt>Anything else</dt>

          <dd>Set <var>state</var> to <i>in descriptor</i>.
          Set <var>position</var> to the <em>previous</em> character in <var>input</var>.</dd>

        </dl>

        </dd>

      </dl>

      Advance <var>position</var> to the next character in <var>input</var>.
      Repeat this substep.

      <p class="note">
    In order to be compatible with future additions,
      this algorithm supports multiple descriptors and descriptors with parens.
  </p>

      </li>

    </ol>

    </li>

    <li><i>Descriptor parser</i>: Let <var>error</var> be <i>no</i>.</li>

    <li>Let <var>width</var> be <i>absent</i>.</li>

    <li>Let <var>density</var> be <i>absent</i>.</li>

    <li>Let <var>future-compat-h</var> be <i>absent</i>.</li>

    <li>

    For each descriptor in <var>descriptors</var>,
    run the appropriate set of steps from the following list:

    <dl class="switch">

      <dt>If the descriptor consists of a <a>valid non-negative integer</a>
      followed by a U+0077 LATIN SMALL LETTER W character</dt>

      <dd>

      <ol>

        <li>

        If the user agent does not support the <code>sizes</code> attribute,
        let <var>error</var> be <i>yes</i>.

        <p class="note">
    A conforming user agent will support the <code>sizes</code> attribute.
        However, user agents typically implement and ship features in an incremental manner in practice.
  </p>

        </li>

        <li>If <var>width</var> and <var>density</var>
        are not both <i>absent</i>,
        then let <var>error</var> be <i>yes</i>.</li>

        <li>Apply the <a>rules for parsing non-negative integers</a> to the descriptor.
        If the result is zero, let <var>error</var> be <i>yes</i>.
        Otherwise, let <var>width</var> be the result.</li>

      </ol>

      </dd>

      <dt>If the descriptor consists of a <a>valid floating-point number</a>
      followed by a U+0078 LATIN SMALL LETTER X character</dt>

      <dd>

      <ol>

        <li>If <var>width</var>, <var>density</var> and <var>future-compat-h</var>
        are not all <i>absent</i>,
        then let <var>error</var> be <i>yes</i>.</li>

        <li>

        Apply the <a>rules for parsing floating-point number values</a> to the descriptor.
        If the result is less than zero, let <var>error</var> be <i>yes</i>.
        Otherwise, let <var>density</var> be the result.

        <p class="note">
    If <var>density</var> is zero,
        the <a>intrinsic dimensions</a> will be infinite.
        User agents are expected to have limits in how big images can be rendered,
        which is allowed by the <a>hardware limitations</a> clause.
  </p>

        </li>

      </ol>

      </dd>

      <dt>If the descriptor consists of a <a>valid non-negative integer</a>
      followed by a U+0068 LATIN SMALL LETTER H character</dt>

      <dd>

      This is a <a for="parser">parse error</a>.

      <ol>

        <li>If <var>future-compat-h</var> and <var>density</var>
        are not both <i>absent</i>,
        then let <var>error</var> be <i>yes</i>.</li>

        <li>Apply the <a>rules for parsing non-negative integers</a> to the descriptor.
        If the result is zero, let <var>error</var> be <i>yes</i>.
        Otherwise, let <var>future-compat-h</var> be the result.</li>

      </ol>

      </dd>

      <dt>Anything else</dt>

      <dd>Let <var>error</var> be <i>yes</i>.</dd>

    </dl>

    </li>

    <li>If <var>future-compat-h</var> is not <i>absent</i> and <var>width</var> is <i>absent</i>,
    let <var>error</var> be <i>yes</i>.</li>

    <li>If <var>error</var> is still <i>no</i>,
    then append a new <a>image source</a> to <var>candidates</var>
    whose URL is <var>url</var>,
    associated with a width <var>width</var> if not <i>absent</i>
    and a pixel density <var>density</var> if not <i>absent</i>.
    Otherwise, there is a <a for="parser">parse error</a>.</li>

    <li>Return to the step labeled <i>splitting loop</i>.</li>

  </ol>

  When asked to <dfn lt="parse a sizes attribute|parse child's sizes attribute">parse a sizes attribute</dfn> from an element,
  <a>parse a comma-separated list of component values</a>
  from the value of the element's <code>sizes</code> attribute
  (or the empty string, if the attribute is absent),
  and let <var>unparsed sizes list</var> be the result. [[!CSS-SYNTAX-3]]

  For each <var>unparsed size</var> in <var>unparsed sizes list</var>:

  <ol>

    <li>Remove all consecutive <a>&lt;whitespace-token&gt;</a>s
    from the end of <var>unparsed size</var>.
    If <var>unparsed size</var> is now empty,
    that is a <a for="parser">parse error</a>;
    continue to the next iteration of this algorithm.</li>

    <li>If the last <a>component value</a> in <var>unparsed size</var>
    is a valid non-negative <code>&lt;source-size-value&gt;</code>,
    let <var>size</var> be its value
    and remove the <a>component value</a> from <var>unparsed size</var>.
    Any CSS function other than the <code>calc()</code> function is invalid.
    Otherwise, there is a <a for="parser">parse error</a>;
    continue to the next iteration of this algorithm.</li>

    <li>Remove all consecutive <a>&lt;whitespace-token&gt;</a>s
    from the end of <var>unparsed size</var>.
    If <var>unparsed size</var> is now empty,
    return <var>size</var> and exit this algorithm.
    If this was not the last item in <var>unparsed sizes list</var>,
    that is a <a for="parser">parse error</a>.</li>

    <li>Parse the remaining <a>component values</a> in <var>unparsed size</var>
    as a <a>&lt;media-condition&gt;</a>.
    If it does not parse correctly,
    or it does parse correctly but the <a>&lt;media-condition&gt;</a> evaluates to false,
    continue to the next iteration of this algorithm. [[!MEDIAQ]]</li>

    <li>Return <var>size</var> and exit this algorithm.</li>

  </ol>

  If the above algorithm exhausts <var>unparsed sizes list</var> without returning a
  <var>size</var> value, follow these steps:

  <ol>

    <li>If <var>width</var> is not null, return a <code>&lt;length&gt;</code> with the value
    <var>width</var> and the unit <code>px</code>.</li>

    <li>Return <code>100vw</code>.</li>

  </ol>

  A <a for="parser">parse error</a> for the algorithms above
  indicates a non-fatal mismatch between input and requirements.
  User agents are encouraged to expose <a for="parser">parse error</a>s somehow.

  <p class="note">
    While a <a>valid source size list</a> only contains a bare <code>&lt;source-size-value&gt;</code>
  (without an accompanying <code>&lt;media-condition&gt;</code>)
  as the last entry in the <code>&lt;source-size-list&gt;</code>,
  the parsing algorithm technically allows such at any point in the list,
  and will accept it immediately as the size
  if the preceding entries in the list weren't used.
  This is to enable future extensions,
  and protect against simple author errors such as a final trailing comma.
  </p>

  An <a>image source</a> can have a density descriptor,
  a <a>width descriptor</a>,
  or no descriptor at all accompanying its URL.
  Normalizing a <a>source set</a> gives every <a>image source</a> a density descriptor.

  When asked to <dfn>normalize the source densities</dfn> of a <a>source set</a> <var>source set</var>,
  the user agent must do the following:

  <ol>

    <li>Let <var>source size</var> be <var>source set</var>'s <a>source size</a>.</li>

    <li>

    For each <a>image source</a> in <var>source set</var>:

    <ol>

      <li>If the <a>image source</a> has a density descriptor,
      continue to the next <a>image source</a>.</li>

      <li>

      Otherwise, if the <a>image source</a> has a <a>width descriptor</a>,
      replace the <a>width descriptor</a> with a density descriptor
      with a value of the <a>width descriptor</a> divided by the <a>source size</a>
      and a unit of <code>x</code>.

      <p class="note">
    If the <a>source size</a> is zero,
      the density would be infinity,
      which results in the <a>intrinsic dimensions</a> being zero by zero.
  </p>

      </li>

      <li>Otherwise, give the <a>image source</a> a density descriptor of <code>1x</code>.</li>

    </ol>

    </li>

  </ol>

  The user agent may at any time run the following algorithm to update an <code>img</code>
  element's image in order to react to changes in the environment. (User agents are <em>not
  required</em> to ever run this algorithm; for example, if the user is not looking at the page any
  more, the user agent might want to wait until the user has returned to the page before determining
  which image to use, in case the environment changes again in the meantime.)

  <p class="note">
    User agents are encouraged to run this algorithm in particular when the user changes the <a>viewport</a>'s size
  (e.g., by resizing the window or changing the page zoom),
  and when an <{img}> element is <a for="document">inserted into a document</a>,
  so that the <a>density-corrected intrinsic width and height</a> match the new <a>viewport</a>,
  and so that the correct image is chosen when <a for="image">art direction</a> is involved.
  </p>

  <ol>

    <li><a>in parallel</a> <a>await a stable state</a>. The <a>synchronous section</a>
    consists of all the remaining steps of this algorithm until the algorithm says the
    <a>synchronous section</a> has ended. (Steps in <a>synchronous sections</a> are marked with &#x231B;.)</li>

    <li>&#x231B; If the <{img}> element does not <a>use <code>srcset</code> or <code>picture</code></a>, its
    <a>node document</a> is not the <a>active document</a>, has image data whose resource type is
    <code>multipart/x-mixed-replace</code>, or the <a>pending request</a> is not null, then abort
    this algorithm.</li>

    <li>&#x231B; Let <var>selected source</var> and <var>selected pixel
    density</var> be the URL and pixel density that results from <a>selecting an image source</a>, respectively.</li>

    <li>&#x231B; If <var>selected source</var> is null, then abort these steps.</li>

    <li>&#x231B; If <var>selected source</var> and <var>selected pixel
    density</var> are the same as the element's <a>last selected source</a> and <a>current
    pixel density</a>, then abort these steps.</li>

    <li>&#x231B; <a>Parse</a> <var>selected source</var>,
    relative to the element's <a>node document</a>, and let <var>absolute URL</var> be the
    <a>resulting URL string</a>.
    If that is not successful, abort these steps.</li>

    <li>&#x231B; Let <var>corsAttributeState</var> be the state of the element's
    <code>crossorigin</code> content attribute.</li>

    <li>&#x231B; Let <var>origin</var> be the <a for="concept">origin</a> of the <{img}> element's
    <a>node document</a>.</li>

    <li>&#x231B; Let <var>client</var> be the <{img}> element's <a>node
    document</a>'s <code>Window</code> object's <a>environment settings object</a>.</li>

    <li>&#x231B; Let <var>key</var> be a tuple consisting of <var>absolute URL</var>,
    <var>corsAttributeState</var>, and, if <var>corsAttributeState</var> is not
    <a state for="cors">No CORS</a>, <var>origin</var>.</li>

    <li>&#x231B; Let <var>image request</var> be a new <a>image request</a>
    whose <a>current URL</a> is <var>absolute URL</var></li>

    <li>&#x231B; Let the element's <a>pending request</a> be <var>image request</var>.</li>

    <li>End the <a>synchronous section</a>, continuing the remaining steps
    <a>in parallel</a>.</li>

    <li>

    If the <a>list of available images</a> contains an entry for <var>key</var>,
    then set <var>image request</var>'s <a>image data</a> to that of the entry.
    Continue to the next step.

    Otherwise, run these substeps:

    <ol>
      <li>Let <var>request</var> be the result of <a>creating a potential-CORS request</a> given
      <var>absolute URL</var> and <var>corsAttributeState</var>.</li>

      <li>Set <var>request</var>'s <a>client</a> to
      <var>client</var>, <a for="request">type</a> to "<code>image</code>", and set <var>request</var>'s <a>synchronous flag</a>.</li>

      <li>Let <var>response</var> be the result of <a>fetching</a> <var>request</var>.</li>

      <li>If <var>response</var>'s unsafe response is a network error or
      if the image format is unsupported (as determined by applying the <a>image sniffing rules</a>, again as mentioned earlier),
      or if the user agent is able to determine that <var>image request</var>'s image is corrupted in
      some fatal way such that the image dimensions cannot be obtained, or if the resource type is
      <code>multipart/x-mixed-replace</code>, then let <a>pending request</a> be null and abort
      these steps.</li>

      <li>Otherwise, <var>response</var>'s unsafe response is <var>image
      request</var>'s <a>image data</a>. It can be either
      <a>CORS-same-origin</a> or <a>CORS-cross-origin</a>; this affects the
      <a for="concept">origin</a> of the image itself (e.g., when used on a
      <code>canvas</code>).</li>
    </ol>

    </li>

    <li>

    <a>Queue a task</a> to run the following substeps:

    <ol>

      <li>If the <{img}> element has experienced <a>relevant mutations</a>
      since this algorithm started, then let <a>pending request</a> be null and abort these steps.

      </li><li>Let the <{img}> element's <a>last selected source</a> be <var>selected source</var>
      and the <{img}> element's <a>current pixel density</a> be <var>selected pixel density</var>.</li>

      <li>Set <var>image request</var> to the <a state for="img">completely available</a> state.</li>

      <li>Add the image to the <a>list of available images</a> using the key <var>key</var>,
      with the <a>ignore higher-layer caching</a> flag set.</li>

      <li><a>Upgrade the pending request to the current request</a>.</li>

      <li>Update the <{img}> element's presentation appropriately.</li>

      <li><a>Fire a simple event</a> named <code>load</code> at the
      <{img}> element.</li>

    </ol>

    </li>

  </ol>

  <hr />

  The <a>task source</a> for the <a>tasks</a> <a>queued</a> by algorithms in this section is the <a>DOM manipulation task
  source</a>.

  <hr />

  What an <{img}> element represents depends on the <code>src</code> attribute and the <code>alt</code>
  attribute.

  <dl class="switch">

    <dt>If the <code>src</code> attribute is set and the <code>alt</code> attribute is set to the empty string</dt>

    <dd>

    The image is either decorative or supplemental to the rest of the content, redundant with
    some other information in the document.

    If the image is <a>available</a> and the user agent is configured
    to display that image, then the element <a>represents</a> the element's image data.

    Otherwise, the element <a>represents</a> nothing, and may be omitted completely from
    the rendering. User agents may provide the user with a notification that an image is present but
    has been omitted from the rendering.

    </dd>

    <dt>If the <code>src</code> attribute is set and the <code>alt</code> attribute is set to a value that isn't empty</dt>

    <dd>

    The image is a key part of the content; the <code>alt</code> attribute
    gives a textual equivalent or replacement for the image.

    If the image is <a>available</a> and the user agent is configured
    to display that image, then the element <a>represents</a> the element's image data.

    Otherwise, the element <a>represents</a> the text given by the <code>alt</code> attribute. User agents may provide the user with a notification
    that an image is present but has been omitted from the rendering.

    </dd>

    <dt>If the <code>src</code> attribute is set and the <code>alt</code> attribute is not</dt>

    <dd>

    There is no textual equivalent of the image available.

    If the image is <a>available</a> and the user agent is configured
    to display that image, then the element <a>represents</a> the element's image data.

    Otherwise, the user agent should display some sort of indicator that there is an image that
    is not being rendered, and may, if requested by the user, or if so configured, or when required
    to provide contextual information in response to navigation, provide caption information for the
    image, derived as follows:

    <ol>

      <li>If the image is a descendant of a <{figure}> element that has a child
      <{figcaption}> element, and, ignoring the <{figcaption}> element and its
    descendants, the <{figure}> element has no <code>Text</code> node descendants other
    than <a>inter-element whitespace</a>, and no <a>embedded content</a> descendant
    other than the <{img}> element, then the contents of the first such
      <{figcaption}> element are the caption information; abort these steps.</li>

      <li>There is no caption information.</li>

    </ol>

    </dd>

    <dt>If the <code>src</code> attribute is not set and either the <code>alt</code> attribute is set to the empty string or the <code>alt</code> attribute is not set at all</dt>

    <dd>

    The element <a>represents</a> nothing.

    </dd>

    <dt>Otherwise</dt>

    <dd>

    The element <a>represents</a> the text given by the <code>alt</code> attribute.

    </dd>

  </dl>

  The <code>alt</code> attribute does not represent advisory information.
  User agents must not present the contents of the <code>alt</code> attribute
  in the same way as content of the <code>title</code> attribute.

  User agents may always provide the user with the option to display any image, or to prevent any
  image from being displayed. User agents may also apply heuristics to help the user make use of the
  image when the user is unable to see it, e.g., due to a visual disability or because they are using
  a text terminal with no graphics capabilities. Such heuristics could include, for instance,
  optical character recognition (OCR) of text found within the image.

  <p class="warning">While user agents are encouraged to repair cases of missing <code>alt</code> attributes, authors must not rely on such behavior. <a href="#alt-text">Requirements for providing text to act as an alternative for images</a> are described
  in detail below.</p>

  The <em>contents</em> of <{img}> elements, if any, are ignored for the purposes of
  rendering.

  </div>

  <hr />

  The <dfn element-attr for="img"><code>usemap</code></dfn> attribute,
  if present, can indicate that the image has an associated
  <a>image map</a>.

  The <dfn element-attr for="img"><code>ismap</code></dfn>
  attribute, when used on an element that is a descendant of an
  <{a}> element with an <{a/href}> attribute, indicates by its
  presence that the element provides access to a server-side image
  map. This affects how events are handled on the corresponding
  <{a}> element.

  The <code>ismap</code> attribute is a
  <a>boolean attribute</a>. The attribute must not be specified
  on an element that does not have an ancestor <{a}> element
  with an <{a/href}> attribute.

  <p class="note">
    The <code>usemap</code> and
  <code>ismap</code> attributes
  can result in confusing behavior when used together with
  <{source}> elements with the
  <code>media</code> attribute specified
  in a <{picture}> element.
  </p>

  The <{img}> element supports <a>dimension
  attributes</a>.

  <div class="impl">

  The <dfn attribute for="HTMLImageElement"><code>alt</code></dfn>, <dfn attribute for="HTMLImageElement"><code>src</code></dfn>, <dfn attribute for="HTMLImageElement"><code>srcset</code></dfn> and <dfn attribute for="HTMLImageElement"><code>sizes</code></dfn> IDL attributes must <a>reflect</a> the
  respective content attributes of the same name.

  The <dfn attribute for="HTMLImageElement"><code>crossOrigin</code></dfn> IDL attribute must
  <a>reflect</a> the <code>crossorigin</code> content attribute.

  The <dfn attribute for="HTMLImageElement"><code>useMap</code></dfn> IDL attribute must
  <a>reflect</a> the <code>usemap</code> content attribute.

  The <dfn attribute for="HTMLImageElement"><code>isMap</code></dfn> IDL attribute must <a>reflect</a>
  the <code>ismap</code> content attribute.

  </div>

  <dl class="domintro">

    <dt><var>image</var> . <code>width</code> [ = <var>value</var> ]</dt>
    <dt><var>image</var> . <code>height</code> [ = <var>value</var> ]</dt>

    <dd>

    These attributes return the actual rendered dimensions of the
    image, or zero if the dimensions are not known.

    They can be set, to change the corresponding content
    attributes.

    </dd>

    <dt><var>image</var> . <code>naturalWidth</code></dt>
    <dt><var>image</var> . <code>naturalHeight</code></dt>

    <dd>

    These attributes return the intrinsic dimensions of the image,
    or zero if the dimensions are not known.

    </dd>

    <dt><var>image</var> . <code>complete</code></dt>

    <dd>

    Returns true if the image has been completely downloaded or if
    no image is specified; otherwise, returns false.

    </dd>

    <dt><var>image</var> . <code>currentSrc</code></dt>

    <dd>

    Returns the image's <a>absolute URL</a>.

    </dd>

    <dt><var>image</var> = new <code>Image</code>( [ <var>width</var> [, <var>height</var> ] ] )</dt>

    <dd>

    Returns a new <{img}> element, with the <code>width</code> and <code>height</code> attributes set to the values
    passed in the relevant arguments, if applicable.

    </dd>

  </dl>

  <div class="impl">

  The IDL attributes <dfn attribute for="HTMLImageElement"><code>width</code></dfn> and <dfn attribute for="HTMLImageElement"><code>height</code></dfn> must return the rendered width and height of the
  image, in CSS pixels, if the image is <a>being rendered</a>, and is being rendered to a
  visual medium; or else the <a>density-corrected intrinsic width and height</a>
  of the image, in CSS pixels, if the image has <a>intrinsic dimensions</a> and is
  <i>available</i> but not being rendered to a visual medium; or else 0, if
  the image is not <i>available</i> or does not have
  <a>intrinsic dimensions</a>. [[!CSS-2015]]

  On setting, they must act as if they <a>reflected</a> the respective
  content attributes of the same name.

  The IDL attributes <dfn attribute for="HTMLImageElement"><code>naturalWidth</code></dfn> and
  <dfn attribute for="HTMLImageElement"><code>naturalHeight</code></dfn> must return
  the <a>density-corrected intrinsic width and height</a>
  of the image, in CSS pixels, if the image has <a>intrinsic dimensions</a> and is
  <i>available</i>, or else 0. [[!CSS-2015]]

  The IDL attribute <dfn attribute for="HTMLImageElement"><code>complete</code></dfn> must return true if
  any of the following conditions is true:

  <ul class="brief">

    <li>Both the <code>src</code> attribute and the <code>srcset</code> attribute are omitted.

    </li><li>The <code>srcset</code> attribute is omitted and the <code>src</code> attribute's value is the empty string.

    </li><li>The final <a>task</a> that is <a>queued</a> by the <a>networking task source</a> once the resource has been fetched
    has been <a>queued</a>.

    </li><li>The <{img}> element is <a state for="img">completely available</a>.

    </li><li>The <{img}> element is <a state for="img">broken</a>.

  </li></ul>

  Otherwise, the attribute must return false.

  <p class="note">
    The value of <code>complete</code> can thus change while
  a <a for="concept">script</a> is executing.
  </p>

  The <dfn attribute for="HTMLImageElement"><code>currentSrc</code></dfn> IDL attribute
  must return the <{img}> element's <a>current request</a>'s <a>current URL</a>.

  <p id='image'>
  A constructor is provided for creating <code>HTMLImageElement</code> objects (in addition to
  the factory methods from DOM such as <code>createElement()</code>): <dfn constructor for="HTMLImageElement"><code>Image(<var>width</var>, <var>height</var>)</code></dfn>.
  When invoked as a constructor, this must return a new <code>HTMLImageElement</code> object (a new
  <{img}> element). If the <var>width</var> argument is present, the new object's
  <code>width</code> content attribute must be set to <var>width</var>. If the <var>height</var> argument is also present, the new object's
  <code>height</code> content attribute must be set to <var>height</var>.
  The element's <a>node document</a> must be the <a>active document</a> of the
  <a>browsing context</a> of the <code>Window</code> object on which the interface object of
  the invoked constructor is found.
  </p>

  </div>

<h5 id="alt-text">Requirements for providing text to act as an alternative for images</h5>

  <a>Text alternatives</a>, [[WCAG20]]
  are a primary way of making visual information accessible, because they can be rendered through any
  sensory modality (for example, visual, auditory or tactile) to match the needs of the user. Providing text alternatives allows
  the information to be rendered in a variety of ways by a variety of user agents. For example, a person who cannot see a picture
  can have the text alternative read aloud using synthesized speech.

  <p class="note">
    The <code>alt</code> attribute on images is a very important accessibility attribute.
  Authoring useful <code>alt</code> attribute content requires the author to carefully consider the context in
  which the image appears and the function that image may have in that context. The guidance included
  here addresses the most common ways authors use images. Additional guidance and techniques are available in <a>Resources on Alternative Text for Images</a>.
  </p>

<h6 id="examples-of-scenarios-where-users-benefit-from-text-alternatives-for-images">Examples of scenarios where users benefit from text alternatives for images</h6>

  <ul>
      <li>They have a very slow connection and are browsing with images disabled.</li>
      <li>They have a vision impairment and use text to speech software.</li>
      <li>They have a cognitive impairment and use text to speech software.</li>
      <li>They are using a text-only browser.</li>
      <li>They are listening to the page being read out by a voice Web browser.</li>
      <li>They have images disabled to save on download costs.</li>
      <li>They have problems loading images or the source of an image is wrong.</li>
    </ul>

<h6 id="general-guidelines">General guidelines</h6>

  Except where otherwise specified, the <code>alt</code> attribute must be specified and its value must not be empty;
  the value must be an appropriate functional replacement for the image. The specific requirements for the <code>alt</code> attribute content
  depend on the image's function in the page, as described in the following sections.

  To determine an appropriate text alternative it is important to think about why an image is being included in a page.
  What is its purpose? Thinking like this will help you to understand what is important about the image for the
  intended audience. Every image has a reason for being on a page, because it provides useful information, performs a
  function, labels an interactive element, enhances aesthetics or is purely decorative. Therefore, knowing what the image
  is for, makes writing an appropriate text alternative easier.

<h6 id="a-link-or-button-containing-nothing-but-an-image">A link or button containing nothing but an image</h6>

  When an <{a}> element that is a <a>hyperlink</a>, or a <{button}> element, has no text content
  but contains one or more images, include text in the <code>alt</code> attribute(s) that together convey the purpose of the link or button.

  <div class="example">
    In this example, a portion of an editor interface is displayed. Each button has an icon representing an action a user can take on content they are editing. For users who cannot view the images, the action names are included within the <code>alt</code> attributes of the images:

    <img src="images/buttons1.png" alt="5 buttons: bold, italic, strike through, bulleted list and numbered list." />

    <pre highlight="html">
      &lt;ul&gt;
        &lt;li&gt;&lt;button&gt;&lt;img src="b.png" alt="Bold"&gt;&lt;/button&gt;&lt;/li&gt;
        &lt;li&gt;&lt;button&gt;&lt;img src="i.png" alt="Italics"&gt;&lt;/button&gt;&lt;/li&gt;
        &lt;li&gt;&lt;button&gt;&lt;img src="strike.png" alt="Strike through"&gt;&lt;/button&gt;&lt;/li&gt;
        &lt;li&gt;&lt;button&gt;&lt;img src="blist.png" alt="Bulleted list"&gt;&lt;/button&gt;&lt;/li&gt;
        &lt;li&gt;&lt;button&gt;&lt;img src="nlist.png" alt="Numbered list"&gt;&lt;/button&gt;&lt;/li&gt;
      &lt;/ul&gt;
    </pre>
  </div>

  <div class="example">
    In this example, a link contains a logo. The link points to the W3C web site <strong>from an external site</strong>. The text alternative is
    a brief description of the link target.

    <abbr title="World Wide Web Consortium"><img src="images/w3c_home.png" alt="W3C logo used as link content." width="72" height="48" /></abbr>

    <pre highlight="html">
      &lt;a href="https://w3.org"&gt;
      &lt;img src="images/w3c_home.png" width="72" height="48" alt="W3C web site"&gt;
      &lt;/a&gt;
    </pre>
  </div>

  <div class="example">
    This example is the same as the previous example, except that the <strong>link is on the W3C web site</strong>. The text alternative is
    a brief description of the link target.

    <abbr title="World Wide Web Consortium"><img src="images/w3c_home.png" alt="W3C logo used as link content." width="72" height="48" /></abbr>

    <pre highlight="html">
      &lt;a href="https://w3.org"&gt;
      &lt;img src="images/w3c_home.png" width="72" height="48" alt="W3C home"&gt;
      &lt;/a&gt;
    </pre>

    <p class="note">
      Depending on the context in which an image of a logo is used it could be appropriate to provide an indication, as part of the text alternative, that the image is a <em>logo</em>. Refer to section [[#logos-insignia-flags-or-emblems]].
    </p>
  </div>

  <div class="example">
    In this example, a link contains a print preview icon. The link points to a version of the page with a
    print stylesheet applied. The text alternative is a brief description of the link target.

    <img src="images/preview.png" width="32" height="30" alt="Print preview icon used as link content." />

    <pre highlight="html">
      &lt;a href="preview.html"&gt;
      &lt;img src="images/preview.png" width="32" height="30" alt="Print preview."&gt;
      &lt;/a&gt;
    </pre>
  </div>

  <div class="example">
    In this example, a button contains a search icon. The button submits a search form. The text alternative is a
    brief description of what the button does.

    <img src="images/search.png" width="74" height="29" alt="Search icon used as button content." />

    <pre highlight="html">
      &lt;button&gt;
      &lt;img src="images/search.png" width="74" height="29" alt="Search"&gt;
      &lt;/button&gt;
    </pre>
  </div>

  <div class="example">
    In this example, a company logo for the <i>PIP Corporation</i> has been split into the following two images,
    the first containing the word <i>PIP</i> and the second with the abbreviated word <i>CO</i>. The images are the
    sole content of a link to the <i>PIPCO</i> home page. In this case a brief description of the link target is provided.
    As the images are presented to the user as a single entity the text alternative <i>PIP CO home</i> is in the
    <code>alt</code> attribute of the first image.

    <img src="images/pip.gif" alt="Image containing the text 'PIP'." width="99" height="64" /><img src="images/co.gif" alt="Image containing the text 'CO'." width="103" height="64" />

    <pre highlight="html">
      &lt;a href="pipco-home.html"&gt;
      &lt;img src="pip.gif" alt="PIP CO home"&gt;&lt;img src="co.gif" alt=""&gt;
      &lt;/a&gt;
    </pre>
  </div>

<h6 id="graphical-representations-charts-diagrams-graphs-maps-illustrations">Graphical Representations: Charts, diagrams, graphs, maps, illustrations</h6>

  Users can benefit when content is presented in graphical form, for example as a
  flowchart, a diagram, a graph, or a map showing directions. Users also benefit when
  content presented in a graphical form is also provided in a textual format, these users include
  those who are unable to view the image (e.g., because they have a very slow connection,
  or because they are using a text-only browser, or because they are listening to the page
  being read out by a hands-free automobile voice Web browser, or because they have a
  visual impairment and use an assistive technology to render the text to speech).

  <div class="example">
    In the following example we have an image of a pie chart, with text in the <code>alt</code>
    attribute representing the data shown in the pie chart:

    <img src="images/browserShare.png" width="380" height="299" alt="Browser Share: Internet Explorer 25%, Firefox 40%, Chrome 25%, Safari 6% and Opera 4%." />

    <pre highlight="html">
      &lt;img src="piechart.gif" alt="Pie chart: Browser Share - Internet Explorer 25%, Firefox 40%, Chrome 25%, Safari 6% and Opera 4%."&gt;
    </pre>
  </div>

  <div class="example">
    In the case where an image repeats the previous paragraph in graphical form. The
    <code>alt</code> attribute content labels the image.

    <pre highlight="html">
      &lt;p&gt;According to a recent study Firefox has a 40% browser share, Internet Explorer has 25%, Chrome has 25%, Safari has 6% and Opera has 4%.&lt;/p&gt;
      &lt;p&gt;&lt;img src="piechart.gif" alt="Pie chart representing the data in the previous paragraph."&gt;&lt;/p&gt;
    </pre>

    It can be seen that when the image is not available, for example because the <code>src</code>
    attribute value is incorrect, the text alternative provides the user with a brief description of
    the image content:

    <img src="images/brokenimg.png" alt="Representation of the code snippet above." />
  </div>

  <p class="note">
    In cases where the text alternative is lengthy, more than a sentence or two, or would benefit
    from the use of structured markup, provide a brief description or label using the
    <code>alt</code>
  attribute, and an associated text alternative.
  </p>

  <div class="example">
  Here's an example of a flowchart image, with a short text alternative
  included in the <code>alt</code> attribute, in this case the text alternative is a description of the link target
  as the image is the sole content of a link. The link points to a description, within the same document, of the
  process represented in the flowchart.

  <img width="221" height="320" src="images/flowchart.png" alt="Flowchart: Dealing with a broken lamp." />

  <pre highlight="html">
  &lt;a href="#desc"&gt;</strong>&lt;img src="flowchart.gif" alt="Flowchart: Dealing with a broken lamp."&gt;&lt;/a&gt;

  ...

  ...

  &lt;div id="desc"&gt;
  &lt;h2&gt;Dealing with a broken lamp&lt;/h2&gt;
  &lt;ol&gt;
  &lt;li&gt;Check if it's plugged in, if not, plug it in.&lt;/li&gt;
  &lt;li&gt;If it still doesn't work; check if the bulb is burned out. If it is, replace the bulb.&lt;/li&gt;
  &lt;li&gt;If it still doesn't work; buy a new lamp.&lt;/li&gt;
  &lt;/ol&gt;
  &lt;/div&gt;
    </pre>
  </div>

  <div class="example">
  In this example, there is an image of a chart. It would be inappropriate to provide the information depicted in
  the chart as a plain text alternative in an <code>alt</code> attribute as the information is a data set. Instead a
  structured text alternative is provided below the image in the form of a data table using the data that is represented
  in the chart image.

  <img src="images/table.gif" alt="Bar Chart showing average rainfall in millimetres by Country and Season. Full description in Table below." width="407" height="341">
  <p class="note">
    Indications of the highest and lowest rainfall for each season have been included in the
  table, so trends easily identified in the chart are also available in the data table.
  </p>

  <table border="1" style="width:28em">
  <caption>Average rainfall in millimetres  by country and season.</caption>
  <tbody><tr><td></td><th scope="col">United Kingdom</th><th scope="col">Japan</th><th scope="col">Australia</th></tr>
  <tr><th scope="row">Spring</th><td>5.3 (highest)</td><td>2.4</td><td>2 (lowest)</td></tr>
  <tr><th scope="row">Summer</th><td>4.5 (highest)</td><td>3.4</td><td>2 (lowest)</td></tr>
  <tr><th scope="row">Autumn</th><td>3.5 (highest)</td><td>1.8</td><td>1.5 (lowest)</td></tr>
  <tr><th scope="row">Winter</th><td>1.5 (highest)</td><td>1.2</td><td>1 (lowest)</td></tr>
  </tbody></table>

  <pre highlight="html">
  &lt;figure&gt;
  &lt;figcaption&gt;Rainfall Data&lt;/figcaption&gt;
  &lt;img src="rainchart.gif" alt="Bar chart: Average rainfall in millimetres by Country and Season.
  Full description in Table below."&gt;
  &lt;table&gt;
  &lt;caption&gt;Rainfall in millimetres by Country and Season.&lt;/caption&gt;
  &lt;tr&gt;&lt;td&gt;&lt;th scope="col"&gt;UK &lt;th scope="col"&gt;Japan&lt;th scope="col"&gt;Australia&lt;/tr&gt;
  &lt;tr&gt;&lt;th scope="row"&gt;Spring &lt;td&gt;5.5 (highest)&lt;td&gt;2.4 &lt;td&gt;2 (lowest)&lt;/tr&gt;
  &lt;tr&gt;&lt;th scope="row"&gt;Summer &lt;td&gt;4.5 (highest)&lt;td&gt;3.4&lt;td&gt;2 (lowest)&lt;/tr&gt;
  &lt;tr&gt;&lt;th scope="row"&gt;Autumn &lt;td&gt;3.5 (highest) &lt;td&gt;1.8 &lt;td&gt;1.5 (lowest)&lt;/tr&gt;
  &lt;tr&gt;&lt;th scope="row"&gt;Winter &lt;td&gt;1.5 (highest) &lt;td&gt;1.2 &lt;td&gt;1 lowest&lt;/tr&gt;
  &lt;/table&gt;
  &lt;/figure&gt;
    </pre>
  <p class="note">
    The <{figure}> element is used to group the Bar Chart image and data table.
  The <{figcaption}> element provides a caption for the grouped content.
  </p>

  </div>
  <p class="note">
    For any of the examples in this section the <code>details</code> and <code>summary</code>
  elements could be used so that the text descriptions for the images are only displayed on demand:
  </p>

  <div class="example">

    <img src="images/altdetails-collapsed.png" alt="Details element in the closed state." />

    <img src="images/altdetails-expanded.png" alt="Details element in the open state with list content displayed." />


    <pre highlight="html">
      &lt;figure&gt;
      &lt;img src="flowchart.gif" alt="Flowchart: Dealing with a broken lamp."&gt;
      &lt;details&gt;
      &lt;summary&gt;Dealing with a broken lamp&lt;/summary&gt;
      &lt;ol&gt;
      &lt;li&gt;Check if it's plugged in, if not, plug it in.&lt;/li&gt;
      &lt;li&gt;If it still doesn't work; check if the bulb is burned out. If it is, replace the bulb.&lt;/li&gt;
      &lt;li&gt;If it still doesn't work; buy a new lamp.&lt;/li&gt;
      &lt;/ol&gt;
      &lt;/details&gt;
      &lt;/figure&gt;
    </pre>

    <p class="note">
      The <{details}> and <{summary}> elements are not currently well supported by
      browsers, until such times they are supported, if used, you will need to use scripting to
      provide the functionality. There are a number of scripted Polyfills and scripted custom
      controls available, in popular JavaScript UI widget libraries, which provide similar
      functionality.
    </p>
  </div>

<h6 id="images-of-text">Images of text</h6>

  Sometimes, an image only contains  text, and the purpose of the image
  is to display text  using visual effects and /or fonts.  It is <em>strongly</em>
  recommended that text styled using CSS be used, but if this is not possible, provide
  the same text in the <code>alt</code> attribute as is in the image.

  <div class="example">
    This example shows an image of the text "Get Happy!" written in a fancy multi colored freehand
    style. The image makes up the content of a heading. In this case the text alternative for the
    image is "Get Happy!".

    <img src="images/text.png" alt="Get Happy!" width="275" height="77" />

    <pre highlight="html">
      &lt;h1&gt;&lt;img src="gethappy.gif" alt="Get Happy!"&gt;&lt;/h1&gt;
    </pre>
  </div>

  <div class="example">
  In this example we have an advertising image consisting of text, the phrase "The BIG sale" is
    repeated 3 times, each time the text gets smaller and fainter, the last line reads "...ends Friday"
    In the context of use, as an advertisement, it is recommended that the image's text alternative only include the text "The BIG sale"
    once as the repetition is for visual effect and the repetition of the text for users who cannot view
    the image is unnecessary and could be confusing.

  <img src="images/sale.png" alt="The big sale ...ends Friday." width="400" height="190" />
  <pre highlight="html">
  &lt;p&gt;&lt;img src="sale.gif" alt="The BIG sale ...ends Friday."&gt;&lt;/p&gt;
    </pre>
  <p class="note">
    In situations where there is also a photo or other graphic along with the image of text,
    ensure that the words in the image text are included in the text alternative, along with any other description
    of the image that conveys meaning to users who can view the image, so the information is also
    available to users who cannot view the image.
  </p>
  </div>
  When an image is used to represent a character that cannot otherwise be represented in Unicode,
  for example gaiji, itaiji, or new characters such as novel currency symbols, the alternative text
  should be a more conventional way of writing the same thing, e.g., using the phonetic hiragana or
  katakana to give the character's pronunciation.

  <div class="example">
    In this example from 1997, a new-fangled currency symbol that looks like a curly E with two
    bars in the middle instead of one is represented using an image. The alternative text gives the
    character's pronunciation.

Only <img width="21" height="18" src="images/euro.png" alt="euro " />5.99!

    <pre highlight="html">
&lt;p&gt;Only &lt;img src="euro.png" alt="euro "&gt;5.99!
    </pre>

  </div>

  An image should not be used if Unicode characters would serve an identical purpose. Only when
  the text cannot be directly represented using Unicode, e.g., because of decorations or because the
  character is not in the Unicode character set (as in the case of gaiji), would an image be
  appropriate.

  <p class="note">
    If an author is tempted to use an image because their default system font does not
  support a given character, then Web Fonts are a better solution than images.
  </p>

  <div class="example">
    An illuminated manuscript might use graphics for some of its letters. The text alternative in
    such a situation is just the character that the image represents.
    <img width="24" height="32" src="images/fancyO.png" alt="O" />nce upon a time and a long long time ago...
    <pre highlight="html">
&lt;p&gt;&lt;img src="initials/fancyO.png" <mark>alt="O"</mark>&gt;nce upon a time and a long long time ago...
    </pre>
  </div>

<h6 id="images-that-include-text">Images that include text</h6>

  Sometimes, an image consists of a graphics such as a chart and associated text.
  In this case it is recommended that the text in the image is included in the text alternative.

  <div class="example">
  Consider an image containing  a pie chart and associated text. It is recommended wherever
  possible to provide any associated text as text, not an image of text.
  If this is not possible include the text in the text alternative along with the pertinent information
  conveyed in the image.

  <img src="images/figure1.png" alt="Figure 1. Distribution of Articles by Journal
  Category. Pie chart: Language=68%, Education=14% and Science=18%." id="piechart" width="351" height="279">
  <pre highlight="html">
  &lt;p&gt;&lt;img src="figure1.gif" <strong>alt="Figure 1. Distribution of Articles by Journal Category.
  Pie chart: Language=68%, Education=14% and Science=18%."</strong>&gt;&lt;/p&gt;
    </pre>
  </div>

  <div class="example">
  Here's another example of the same pie chart image,
  showing a short text alternative included in the <code>alt</code> attribute
  and a longer text alternative in text. The <code>figure</code> and <code>figcaption</code>
  elements are used to associate the longer text alternative with the image. The <code>alt</code> attribute is used
  to label the image.

  <pre highlight="html">
  &lt;figure&gt;
  &lt;img src="figure1.gif" alt="Figure 1"&gt;
  &lt;figcaption&gt;&lt;strong&gt;Figure 1.&lt;/strong&gt; Distribution of Articles by Journal Category.
  Pie chart: Language=68%, Education=14% and Science=18%.&lt;/figcaption&gt;
  &lt;/figure&gt;
    </pre>
  <p class="note">
    The advantage of this method over the previous example is that the text alternative
  is available to all users at all times. It also allows structured mark up to be used in the text
  alternative, where as a text alternative provided using the <code>alt</code> attribute does not.
  </p>
  </div>

<h6 id="images-that-enhance-the-themes-or-subject-matter-of-the-page-content">Images that enhance the themes or subject matter of the page content</h6>

  An image that isn't discussed directly by the surrounding text but still has
  some relevance can be included in a page using the <{img}> element. Such images
  are more than mere decoration, they may augment the themes or subject matter of the page
  content and so still form part of the content. In these cases, it is recommeneded that a
  text alternative be provided.

  <div class="example">
  Here is an example of an image closely related to the subject matter of the page content
  but not directly discussed. An image of a painting inspired by a poem, on a page reciting that poem.
  The following snippet shows an example. The image is a painting titled the "Lady of Shallot", it is
  inspired by the poem and its subject matter is derived from the poem. Therefore it is strongly
  recommended that a text alternative is provided. There is a short description of the content of
  the image in the <code>alt</code> attribute and
  a link below the image to a longer description located at the bottom of the document. At the end
  of the longer description there is also a link to further information about the painting.

  <img src="images/shalott.jpg" alt="A painting inspired by Alfred Tennyson's poem The Lady of Shalott" width="338" height="234" />
  <pre highlight="html">
  &lt;header&gt;
  &lt;h1&gt;The Lady of Shalott&lt;/h1&gt;
  &lt;p&gt;A poem by Alfred Lord Tennyson&lt;/p&gt;
  &lt;/header&gt;

  &lt;img src="shalott.jpeg" alt="Painting of a  young woman with long hair, sitting in a wooden boat. Full description below."&gt;
  &lt;p&gt;&lt;a href="#des"&gt;Description of the painting&lt;/a&gt;.&lt;/p&gt;

  &lt;!-- Full Recitation of Alfred, Lord Tennyson's Poem.  --&gt;

  ...
  ...
  ...
  &lt;p id="des"&gt;<strong>The woman in the painting is wearing a flowing white dress. A large piece of intricately
  patterned fabric is draped over the side. In her right hand she holds the chain mooring the boat. Her expression
  is mournful. She stares at a crucifix lying in front of her. Beside it are three candles. Two have blown out.</strong>
  &lt;a href="https://bit.ly/5HJvVZ"&gt;Further information about the painting&lt;/a&gt;.&lt;/p&gt;
    </pre>
  </div>
  <div class="example">
  <p>This example illustrates the provision of a text alternative identifying an image as a photo of the
  main subject of a page.
  <p><img src="images/robin.png" alt="Portrait photo(black and white) of Robin, accompanied by a heading 'Robin Berjon' and a question
  'what more needs to be said?'" width="354" height="138">
<pre highlight="html">
  &lt;img src="orateur_robin_berjon.png" alt="Portrait photo(black and white) of Robin."&gt;
  &lt;h1&gt;Robin Berjon&lt;/h1&gt;
  &lt;p&gt;What more needs to be said?&lt;/p&gt;
    </pre>
  </div>

<h6 id="a-graphical-representation-of-some-of-the-surrounding-text">A graphical representation of some of the surrounding text</h6>

  In many cases, the image is actually just supplementary, and its presence merely reinforces the
  surrounding text. In these cases, the <code>alt</code> attribute must be
  present but its value must be the empty string.

  In general, an image falls into this category if removing the image doesn't make the page any
  less useful, but including the image makes it a lot easier for users of visual browsers to
  understand the concept.

  <div class="example">
  It is not always easy to write a useful text alternative for an image, another option is to provide a link to a
  description or further information about the image when one is available.
  In this example of  the same image, there is a short text alternative included in the <code>alt</code> attribute, and
  there is a link after the image. The link points to a page containing <a>information about the painting</a>.

  <strong>The Lady of Shalott</strong>

  <small>A poem by Alfred Lord Tennyson.</small>

  <img src="images/shalott.jpg" alt="Painting of a woman in a white flowing dress, sitting in a small boat." width="271" height="171" />

  <a>About this painting</a>

  <em>Full recitation of Alfred, Lord Tennyson's poem.</em>
  <pre highlight="html">
  &lt;header&gt;&lt;h1&gt;The Lady of Shalott&lt;/h1&gt;
  &lt;p&gt;A poem by Alfred Lord Tennyson&lt;/p&gt;&lt;/header&gt;
  &lt;figure&gt;
  &lt;img src="shalott.jpeg" alt="Painting of a woman in a white flowing dress, sitting in a small boat."&gt;
  &lt;p&gt;&lt;a href="https://bit.ly/5HJvVZ"&gt;About this painting.&lt;/a&gt;&lt;/p&gt;
  &lt;/figure&gt;
  &lt;!-- Full Recitation of Alfred, Lord Tennyson's Poem.  --&gt;
    </pre>
  </div>

<h6 id="a-purely-decorative-image-that-doesnt-add-any-information">A purely decorative image that doesn't add any information</h6>

  Purely decorative images are visual enhancements, decorations or embellishments that provide no
  function or information beyond aesthetics to users who can view the images.

  Mark up purely decorative images so they can be ignored by assistive technology by using an empty <code>alt</code>
  attribute (<code>alt=""</code>). While it is not unacceptable to include decorative images inline,
  it is recommended if they are purely decorative to include the image using CSS.

  <div class="example">
  Here's an example of an image being used as a decorative banner for a person's blog, the image offers no information
  and so an empty <code>alt</code> attribute is used.

  <img src="images/border.png" alt="" width="400" height="30" />

  <strong>Clara's Blog</strong>
  Welcome to my blog...
  </div>

  <pre highlight="html">
  &lt;header&gt;
  &lt;div&gt;&lt;img src="border.gif" alt="" width="400" height="30"&gt;&lt;/div&gt;
  &lt;h1&gt;Clara's Blog&lt;/h1&gt;
  &lt;/header&gt;
  &lt;p&gt;Welcome to my blog...&lt;/p&gt;
    </pre>

<h6 id="inline-images">Inline images</h6>

  When images are used inline as part of the flow of text in a sentence, provide a word or phrase as a text
  alternative which makes sense in the context of the sentence it is apart of.

  <div class="example">
  I <img src="images/heart.png" alt="love" width="27" height="24" /> you.

  <pre highlight="html">
I &lt;img src="heart.png" alt="love"&gt; you.
    </pre>

  My <img src="images/heart.png" alt="heart" width="27" height="24" /> breaks.

  <pre highlight="html">
My &lt;img src="heart.png" alt="heart"&gt; breaks.
    </pre>
  </div>

<h6 id="a-group-of-images-that-form-a-single-larger-picture-with-no-links">A group of images that form a single larger picture with no links</h6>

  When a picture has been sliced into smaller image files that are then displayed
  together to form the complete picture again, include a text alternative for one
  of the images using the <code>alt</code> attribute as per the relevant relevant
  guidance for the picture as a whole, and then include an empty <code>alt</code>
  attribute on the other images.

  <div class="example">
  In this example, a picture representing a company logo for the <i>PIP Corporation</i>
  has been split into two pieces, the first containing the letters "PIP" and the second with the word "CO".
  The text alternatve <i>PIP CO</i> is in the <code>alt</code> attribute of the first image.

  <img src="images/pip.gif" alt="Image containing the text 'PIP'." width="99" height="64" /><img src="images/co.gif" alt="Image containing the text 'CO'." width="103" height="64" />

  <pre highlight="html">
  &lt;img src="pip.gif" alt="PIP CO"&gt;&lt;img src="co.gif" alt=""&gt;
    </pre>
  </div>

  <div class="example">
  In the following example, a rating is shown as three filled
  stars and two empty stars. While the text alternative could have
  been "★★★☆☆", the author has
  instead decided to more helpfully give the rating in the form "3
  out of 5". That is the text alternative of the first image, and the
  rest have empty <code>alt</code> attributes.
  <img src="images/rating.png" alt="3 out of 5." width="149" height="30" />

  <pre highlight="html">
  &lt;p&gt;Rating:
  &lt;img src="1" alt="3 out of 5"&gt;
  &lt;img src="1" alt=""&gt;&lt;img src="1" alt=""&gt;
  &lt;img src="0" alt=""&gt;&lt;img src="0" alt=""&gt;
  &lt;/p&gt;
    </pre>

  </div>

<h6 id="the-img-element-image-maps">Image maps</h6>
  If an <{img}> element has a <code>usemap</code> attribute which references a <{map}> element containing
  <{area}> elements that have <code>href</code> attributes, the <code>img</code> is considered to be interactive content.
  In such cases, always provide a text alternative for the image using the <code>alt</code> attribute.<p></p>
  <div class="example">
    Consider the following image which is a map of <a href="https://en.wikipedia.org/wiki/Katoomba,_New_South_Wales">Katoomba</a>,
    it has 2 interactive regions corresponding to the areas of North and South Katoomba:

    <img src="images/imagemap.png" width="209" height="249" alt="Map of Katoomba." usemap="#Map" />
<map name="Map">
<area shape="poly" coords="78,124,124,10,189,29,173,93,168,132,136,151,110,130" href="#" alt="North Katoomba">
<area shape="poly" coords="66,63,80,135,106,138,137,154,167,137,175,133,144,240,49,223,17,137,17,61" alt="South Katoomba" href="#">
</map>
    The text alternative is a brief description of the image. The <code>alt</code> attribute on each
    of the <{area}> elements provides text describing the content of the target page of each linked region:

  <pre highlight="html">
&lt;p&gt;View houses for sale in North Katoomba or South Katoomba:&lt;/p&gt;
  &lt;p&gt;&lt;img src="imagemap.png" width="209" <mark>alt="Map of Katoomba"</mark> height="249" usemap="#Map"&gt;

  &lt;map name="Map"&gt;
  &lt;area shape="poly" coords="78,124,124,10,189,29,173,93,168,132,136,151,110,130"
  href="north.html" <mark>alt="Houses in North Katoomba"</mark>&gt;
  &lt;area shape="poly" coords="66,63,80,135,106,138,137,154,167,137,175,133,144,240,49,223,17,137,17,61"
  <mark>alt="Houses in South Katoomba"</mark> href="south.html"&gt;
  &lt;/map&gt;
    </pre>

  </div>

<h6 id="a-group-of-images-that-form-a-single-larger-picture-with-links">A group of images that form a single larger picture with links</h6>

  Sometimes, when you create a composite picture from multiple images, you may wish to
  link one or more of the images. Provide an <code>alt</code> attribute
  for each linked image to describe the purpose of the link.

  <div class="example">
  In the following example, a composite picture is used to represent a "crocoduck"; a fictional creature which
  defies evolutionary principles by being part crocodile and part duck. You are asked to interact with the
  crocoduck, but you need to exercise caution...

  <img src="images/crocoduck1.png" alt="crocodile's angry, chomping head" /><img src="images/crocoduck2.png" alt="duck's soft, feathery body" />
  <pre highlight="html">
  &lt;h1&gt;The crocoduck&lt;/h1&gt;
  &lt;p&gt;You encounter a strange creature called a "crocoduck".
  The creature seems angry! Perhaps some friendly stroking will help to calm
  it, but be careful not to stroke any crocodile parts. This would just enrage
  the beast further.&lt;/p&gt;
  &lt;a href="?stroke=head"&gt;&lt;img src="crocoduck1.png" alt="Stroke crocodile's angry, chomping head"&gt;&lt;/a&gt;
  &lt;a href="?stroke=body"&gt;&lt;img src="crocoduck2.png" alt="Stroke duck's soft, feathery body"&gt;&lt;/a&gt;
    </pre>

  </div>

<h6 id="images-of-pictures">Images of Pictures</h6>

  Images of pictures or graphics include visual representations of objects, people, scenes, abstractions, etc.
  This <a>non-text content</a>, [[WCAG20]] can convey a significant amount of
  information visually or provide a <a>specific sensory experience</a>, [[WCAG20]] to
  a sighted person. Examples include photographs, paintings, drawings and artwork.

  An appropriate text alternative for a picture is a brief description, or name [[WCAG20]]. As in all text alternative authoring decisions, writing suitable text alternatives for pictures requires
  human judgment. The text value is subjective to the context where the image is used and the page author's writing style. Therefore,
  there is no single &quot;right&quot; or &quot;correct&quot; piece of <code>alt</code> text for any particular image. In  addition to providing a short text
  alternative that gives a brief description of the <a>non-text content</a>, also providing supplemental content through another means when
  appropriate may be useful.

    <div class="example">
  This first example shows an image uploaded to a photo-sharing site. The photo is of a cat, sitting in the bath. The image has a
  text alternative provided using the <{img}> element's <code>alt</code> attribute. It also has a caption provided by including
  the <{img}> element in a <{figure}> element and using a <{figcaption}> element to identify the caption text.

  <img src="images/lola.png" alt="Lola the cat sitting under an umbrella in the bath tub." width="300" height="242" />

  Lola prefers a bath to a shower.

  <pre highlight="html">
  &lt;figure&gt;
  &lt;img src="664aef.jpg" alt="Lola the cat sitting under an umbrella in the bath tub."&gt;
  &lt;figcaption&gt;Lola prefers a bath to a shower.&lt;/figcaption&gt;
  &lt;/figure&gt;
    </pre>
    </div>

    <div class="example">
  This example is of an image that defies a complete description, as the subject of the image is open to interpretation.
  The image has a text alternative in the <code>alt</code> attribute which gives users who cannot view the image a sense
  of what the image is. It also has a caption provided by including the <{img}> element in a <code>figure</code>
  element and using a <{figcaption}> element to identify the caption text.

  <img src="images/inkblot1.png" alt="An abstract, freeform, vertically symmetrical, black inkblot on a light background." width="300" height="197" />

  The first of the ten cards in the Rorschach test.

  <pre highlight="html">
&lt;figure&gt;
  &lt;img src="Rorschach1.jpg" alt="An abstract, freeform, vertically symmetrical, black inkblot on a light background."&gt;
  &lt;figcaption&gt;The first of the ten cards in the Rorschach test.&lt;/figcaption&gt;
  &lt;/figure&gt;
    </pre>
    </div>

<h6 id="webcam-images">Webcam images</h6>

  Webcam images are static images that are automatically updated periodically. Typically the images are
  from a fixed viewpoint, the images may update on the page automatically as each new image is uploaded from
  the camera or the user may be required to refresh the page to view an updated image. Examples include traffic
  and weather cameras.

  <div class="example">
  This example is fairly typical; the title and a time stamp are included in the image, automatically generated
  by the webcam software. It would be better if the text information was not included in the image, but as it is part
  of the image, include it as part of the text alternative. A caption is also provided using the <{figure}>
  and <{figcaption}> elements.  As the image is provided to give a visual indication of the current weather near a building,
  a link to a local weather forecast is provided, as with automatically generated and uploaded webcam images it may be impractical to
  provide such information as a text alternative.

  The text of the <code>alt</code> attribute includes a prose version of the timestamp, designed to make the text more
  understandable when announced by text to speech software.  The text alternative also includes a description of some aspects
  of what can be seen in the image which are unchanging, although weather conditions and time of day change.

  <img src="images/webcam1.png" alt="Sopwith house weather cam. Taken on the 21/04/10 at 11:51 and 34 seconds. In the foreground are the safety
  rails on the flat part of the roof. Nearby ther are low rize industrial buildings, beyond those are block of flats. In the distance there's a
  church steeple." width="296" height="225">

  View from the top of Sopwith house, looking towards North Kingston. This image is updated every hour.

  View the <a>latest weather details</a> for Kingston upon Thames.

  <pre highlight="html">
&lt;figure&gt;
  &lt;img src="webcam1.jpg" <strong>alt="Sopwith house weather cam. Taken on the 21/04/10 at 11:51 and 34 seconds.
  In the foreground are the safety rails on the flat part of the roof. Nearby there are low rize industrial buildings,
  beyond are blocks of flats. In the distance there's a church steeple."</strong>&gt;
  &lt;figcaption&gt;View from Sopwith house, looking towards north Kingston. This image is updated every hour.&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;p&gt;View the &lt;a href="https://news.bbc.co.uk/weather/forecast/4296?area=Kingston"&gt;latest weather details&lt;/a&gt; for Kingston upon Thames.&lt;/p&gt;
    </pre>
  </div>

<h6 id="when-a-text-alternative-is-not-available-at-the-time-of-publication">When a text alternative is not available at the time of publication</h6>

  In some cases an image is included in a published document, but the author is unable to provide an appropriate text alternative.
  In such cases the minimum requirement is to provide a caption for the image using the <code>figure</code> and <code>figcaption</code>
  elements under the following conditions:

  <ul>
  <li><dfn lt="the conditions described above|described above"></dfn>The <{img}> element is in a <{figure}> element
  </li><li>The <{figure}> element contains a <{figcaption}> element
  </li><li>The <{figcaption}> element contains content other than inter-element whitespace
  </li><li>Ignoring the <{figcaption}> element and its descendants, the <code>figure</code>
  element has no <code>Text</code> node descendants other than inter-element whitespace, and no
  embedded content descendant other than the <{img}> element.
  </li></ul>

  <p class="note">
    In other words, the only content of the <code>figure</code> is an <{img}> element and a <code>figcaption</code>
  element, and the <{figcaption}> element must include (caption) content.
  </p>
  <p class="note">
    Such cases are to be kept to an absolute
    minimum. If there is even the slightest possibility of the author
    having the ability to provide real alternative text, then it would
    not be acceptable to omit the <code>alt</code>
    attribute.
  </p>

  <div class="example">
  In this example, a person uploads a photo, as part of a bulk upload of many images, to a photo sharing site. The user has not
  provided a text alternative or a caption for the image. The site's authoring tool inserts a caption automatically using whatever useful
  information it has for the image. In this case it's the file name and date the photo was taken.
  <p class="warning">The caption text in the example below is not a suitable text alternative and is
  not conforming to the Web Accessibility Guidelines 2.0. [[WCAG20]]</p>
  <img src="images/clara.png" alt="no text alternative provided" width="300" height="258" />

  <strong>clara.jpg, taken on 12/11/2010.</strong>

  <pre highlight="html">
  &lt;figure&gt;
  &lt;img src="clara.jpg"&gt;
  &lt;figcaption&gt;clara.jpg, taken on 12/11/2010.&lt;/figcaption&gt;
  &lt;/figure&gt;
    </pre>
  Notice that even in this example, as much useful information
    as possible is still included in the <{figcaption}> element.
    </div>

    <div class="example">
  In this second example, a person uploads a photo to a photo sharing site. She has provided
  a caption for the image but not a text alternative. This may be because the site does not provide users with the ability
  to add a text alternative in the <code>alt</code> attribute.

  <img src="images/elo.png" alt="no text alternative provided" width="205" height="250" />

  <strong>Eloisa with Princess Belle</strong>

  <pre highlight="html">
  &lt;figure&gt;
  &lt;img src="elo.jpg"&gt;
  &lt;figcaption&gt;Eloisa with Princess Belle&lt;/figcaption&gt;
  &lt;/figure&gt;
    </pre>

    </div>

    <div class="example">
  Sometimes the entire point of the image is that a textual
  description is not available, and the user is to provide the
  description. For example, software that displays images and
  asks for alternative text precisely for the purpose of then
  writing a page with correct alternative text. Such a page could
  have a table of images, like this:

  <pre highlight="html">
&lt;table&gt;
  &lt;tr&gt;&lt;tr&gt; &lt;th&gt; Image &lt;th&gt; Description&lt;tr&gt;
  &lt;td&gt;
  &lt;figure&gt;
  &lt;img src="2421.png"&gt;
  &lt;figcaption&gt;Image 640 by 100, filename 'banner.gif'&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;td&gt; &lt;input name="alt2421"&gt;
  &lt;tr&gt;
  &lt;td&gt; &lt;figure&gt;
  &lt;img src="2422.png"&gt;
  &lt;figcaption&gt;Image 200 by 480, filename 'ad3.gif'&lt;/figcaption&gt;
  &lt;/figure&gt;
  &lt;td&gt; &lt;input name="alt2422"&gt;
  &lt;/table&gt;
    </pre>

    </div>

  <p class="note">
    Since some users cannot use images at all (e.g., because they are blind) the
  <code>alt</code> attribute is only allowed to be omitted when no text
  alternative is available and none can be made available, as in the above examples.
  </p>

<h6 id="an-image-not-intended-for-the-user">An image not intended for the user</h6>

  Generally authors should avoid using <{img}> elements
  for purposes other than showing images.

  If an <{img}> element is being used for purposes other
  than showing an image, e.g., as part of a service to count page
  views, use an empty <code>alt</code> attribute.

  <div class="example">
  An example of an <{img}> element used to collect web page statistics.
  The <code>alt</code> attribute is empty as the image has no meaning.

  <pre highlight="html">
  &lt;img src="https://server3.stats.com/count.pl?NeonMeatDream.com" width="0" height="0" alt=""&gt;
    </pre>
  </div>

  <p class="note">
    It is recommended for the example use above the <code>width</code> and
  <code>height</code> attributes  be set to zero.
  </p>

  <div class="example">
  Another example use is when an image such as a <i>spacer.gif</i> is used to aid positioning of content.
  The <code>alt</code> attribute is empty as the image has no meaning.

  <pre highlight="html">
  &lt;img src="spacer.gif" width="10" height="10" alt=""&gt;
    </pre>
  </div>

  <p class="note">
    It is recommended that CSS be used to position content instead of <{img}> elements.
  </p>

<h6 id="icon-images">Icon Images</h6>

  An icon is usually a simple picture representing a program, action, data file or a concept.
  Icons are intended to help users of visual browsers to recognize features at a glance.

  Use an empty <code>alt</code> attribute when an icon is supplemental to
  text conveying the same meaning.

  <div class="example">
    In this example, we have a link pointing to a site's home page, the link contains a
    house icon image and the text "home". The image has an empty <code>alt</code> text.

    <img src="images/home.png" alt="A house icon next to the word 'home'." width="100" height="38" />

    <pre highlight="html">
      &lt;a href="home.html"&gt;&lt;img src="home.gif" width="15" height="15" alt=""&gt;Home&lt;/a&gt;
    </pre>

    Where images are used in this way, it would also be appropriate to add the image using CSS.

    <pre highlight="css">
      #home:before
      {
      content: url(home.png);
      }

      &lt;a href="home.html" id="home"&gt;Home&lt;/a&gt;
    </pre>
  </div>

    <div class="example">
  In this example, there is a warning message, with a warning icon. The word "Warning!" is in emphasized
  text next to the icon. As the information conveyed by the icon is redundant the <{img}> element is given an empty <code>alt</code> attribute.

  <img src="images/warning.png" alt="Warning!" width="38" height="34" /> <strong>Warning!</strong> Your session is about to expire.

  <pre highlight="html">
  &lt;p&gt;&lt;img src="warning.png" width="15" height="15" alt=""&gt;
  &lt;strong&gt;Warning!&lt;/strong&gt;
  Your session is about to expire&lt;/p&gt;
    </pre>
    </div>

  When an icon conveys additional information not available in text, provide a text alternative.

    <div class="example">
  In this example, there is a warning message, with a warning icon. The icon emphasizes the
  importance of the message and identifies it as a particular type of content.

  <img src="images/warning.png" alt="Warning!" width="38" height="34" /> <strong>Your session is about to expire.</strong>

  <pre highlight="html">
  &lt;p&gt;&lt;img src="warning.png" width="15" height="15" alt="Warning!"&gt;
  Your session is about to expire&lt;/p&gt;
    </pre>

  </div>

<h6 id="logos-insignia-flags-or-emblems">Logos, insignia, flags, or emblems</h6>

  Many pages include logos, insignia, flags, or emblems, which stand for a company, organization, project,
  band, software package, country, or other entity. What can be considered as an appropriate text alternative depends upon,
  like all images, the context in which the image is being used and what function it serves in the given context.

  If a logo is the sole content of a link, provide a brief description of the link target in the <code>alt</code> attribute.

  <div class="example">
    This example illustrates the use of the HTML5 logo as the sole content of a link to the HTML specification.

    <a href="https://w3c.github.io/html/"><img src="images/HTML5_Logo.png" alt="HTML 5.1 Nightly specification" width="128" height="128" /></a>

    <pre highlight="html">
      &lt;a href="https://w3c.github.io/html/"&gt;
      &lt;img src="HTML5_Logo.png" alt="HTML 5.1 specification"&gt;&lt;/a&gt;
    </pre>
  </div>

  If a logo is being used to represent the entity, e.g., as a page heading, provide the name of the
  entity being represented by the logo as the text alternative.

  <div class="example">
    This example illustrates the use of the WebPlatform.org logo being used to represent itself.

    <img src="images/logo-with-text.png" alt="WebPlatform.org" width="110" height="100" /> and other developer resources

    <pre highlight="html">
      &lt;h2&gt;&lt;img src="images/webplatform.png" alt="WebPlatform.org"&gt; and other developer resources&lt;h2&gt;
    </pre>

    <p class="note">
      The text alternative in the example above could also include the word "logo" to describe the
      type of image content. If so, it is suggested that square brackets be used to delineate this
      information: <code>alt="[logo] WebPlatform.org"</code>.
    </p>
  </div>

  If a logo is being used next to the name of the what that it represents, then the logo is
  supplemental. Include an empty <code>alt</code> attribute as the text alternative is already
  provided.

  <div class="example">
    This example illustrates the use of a logo next to the name of the organization it represents.

    <img src="images/webplatform.png" alt="" width="72" height="68" /> WebPlatform.org

    <pre highlight="html">&lt;img src="images/webplatform1.png" alt=""&gt; WebPlatform.org</pre>
  </div>

  If the logo is used alongside text discussing the subject or entity the logo represents, then
  provide a text alternative which describes the logo.

  <div class="example">
    This example illustrates the use of a logo next to text discussing the subject the logo
    represents.

    <p style="float:left;">
      <img src="images/HTML5_Logo.png" alt="HTML5 logo: Shaped like a shield with the text 'HTML' above and the numeral '5' prominent on the face of the shield." width="128" height="128" />
    </p>
    <p style="width:30em;">
      <strong>HTML</strong> is a language for structuring and presenting content for the World Wide
      Web, a core technology of the Internet. It is the latest revision of the HTML standard
      (originally created in 1990 and most recently standardized as HTML 4.01 in 1997) and currently
      remains under development. Its core aims have been to improve the language with support for
      the latest multimedia while keeping it easily readable by humans and consistently understood
      by computers and devices (web browsers, parsers etc.).
    </p>

    <pre style="clear:both">
      &lt;p&gt;&lt;img src="HTML5_Logo.png" alt="HTML5 logo: Shaped like a shield with the
      text 'HTML' above and the numeral '5' prominent on the face of the shield."&gt;&lt;/p&gt;

      <i>Information about HTML</i>
    </pre>
  </div>

<h6 id="captcha-images">CAPTCHA Images</h6>

  CAPTCHA stands for "Completely Automated Public Turing test to tell Computers and Humans Apart".
  CAPTCHA images are used for security purposes to confirm that content is being accessed by a
  person rather than a computer. This authentication is done through visual verification of an
  image. CAPTCHA typically presents an image with characters or words in it that the user is to
  re-type. The image is usually distorted and has some noise applied to it to make the characters
  difficult to read.

  To improve the accessibility of CAPTCHA provide text alternatives that identify and describe the
  purpose of the image, and provide alternative forms of the CAPTCHA using output modes for
  different types of sensory perception. For instance provide an audio alternative along with the
  visual image. Place the audio option right next to the visual one. This helps but is still
  problematic for people without sound cards, the deaf-blind, and some people with limited hearing.
  Another method is to include a form that asks a question along with the visual image. This helps
  but can be problematic for people with cognitive impairments.

  <p class="note">
    It is strongly recommended that alternatives to CAPTCHA be used, as all forms of CAPTCHA
    introduce unacceptable barriers to entry for users with disabilities. Further information is
    available in <a>Inaccessibility of CAPTCHA</a>.
  </p>

  <div class="example">
    This example shows a CAPTCHA test which uses a distorted image of text. The text alternative in
    the <code>alt</code> attribute provides instructions for a user in the case where she cannot
    access the image content.

  <img src="images/captcha.png" alt="captcha containing the words 'aides' and 'sprucest'. The letters are distorted and the color of the letters and background is partially inverted," width="270" height="60" />

  <strong>Example code:</strong>

    <pre highlight="html">
      &lt;img src="captcha.png" alt="If you cannot view this image an audio challenge is provided."&gt;
      &lt;!-- audio CAPTCHA option that allows the user to listen and type the word --&gt;
      &lt;!-- form that asks a question --&gt;
    </pre>
  </div>

<h6 id="an-image-in-a-picture-element">An image in a <{picture}> element</h6>

  The <{picture}> element and any <{source}> elements it contains have no semantics for users,
  only the <{img}> element or its text alternative is displayed to users. Provide a text alternative for an
  <{img}> element without regard to it being within a <{picture}> element. Refer to
  <a href="#alt-text">Requirements for providing text to act as an alternative for images</a> for more information on how to provide
  useful <code>alt</code> text for images.

  <p class="note"><a for="image">Art directed</a> images that rely on <code>picture</code> need to depict
  the same content (irrespective of size, pixel density, or any other discriminating factor). Therefore the appropriate
  text alternative for an image will always be the same irrespective of which source file ends up being chosen by the browser.</p>

  <div class="example">
    <pre highlight="html">
      &lt;h2&gt;Is it a ghost?&lt;/h2&gt;
      &lt;picture&gt;
        &lt;source media="(min-width: 32em)" srcset="large.jpg"&gt;
        &lt;img src="small.jpg" alt="Reflection of a girls face in a train window."&gt;
      &lt;/picture&gt;
    </pre>

    The large and small versions (both versions are displayed for demonstration purposes) of
    the image portray the same scene: Reflection of a girls face in a train window,
    while the small version (displayed on smaller screens) is cropped, this does not effect the subject matter
    or the appropriateness of the <code>alt</code> text.

    <img src="images/face_large.png" alt="Reflection of a girls face in a train window." width="300" height="315" />&nbsp;<img src="images/face_small.png" alt="Reflection of a girls face in a train window." width="228" height="237" />
</div>

  <div class="impl">

<h6 id="guidance-for-markup-generators">Guidance for markup generators</h6>

  Markup generators (such as WYSIWYG authoring tools) should, wherever possible, obtain
  alternative text from their users. However, it is recognized that in many cases, this will not be
  possible.

  For images that are the sole contents of links, markup generators should examine the link
  target to determine the title of the target, or the URL of the target, and use information
  obtained in this manner as the alternative text.

  For images that have captions, markup generators should use the
  <{figure}> and <{figcaption}> elements to provide the image's caption.

  As a last resort, implementors should either set the <code>alt</code> attribute to the empty string, under
  the assumption that the image is a purely decorative image that
  doesn't add any information but is still specific to the surrounding
  content, or omit the <code>alt</code> attribute
  altogether, under the assumption that the image is a key part of the
  content.

  Markup generators may specify a <dfn><code>generator-unable-to-provide-required-alt</code></dfn>
  attribute on <{img}> elements for which they have been
  unable to obtain a text alternative and for which they have therefore
  omitted the <code>alt</code> attribute. The
  value of this attribute must be the empty string. Documents
  containing such attributes are not conforming, but conformance
  checkers will silently ignore this error.

  <p class="note">
    This is intended to avoid markup generators from
  being pressured into replacing the error of omitting the <code>alt</code> attribute with the even more
  egregious error of providing phony text alternatives, because
  state-of-the-art automated conformance checkers cannot distinguish
  phony text alternatives from correct text alternatives.
  </p>

  Markup generators should generally avoid using the image's own
  file name as the text alternative. Similarly, markup generators
  should avoid generating text alternatives from any content that will
  be equally available to presentation user agents (e.g., Web
  browsers).

  <p class="note">
    This is because once a page is generated, it will
  typically not be updated, whereas the browsers that later read the
  page can be updated by the user, therefore the browser is likely to
  have more up-to-date and finely-tuned heuristics than the markup
  generator did when generating the page.
  </p>

  </div>

<h6 id="guidance-for-conformance-checkers">Guidance for conformance checkers</h6>

  A conformance checker must report the lack of an <code>alt</code> attribute as an error unless one
  of the conditions listed below applies:

  * The <{img}> element is in a <{figure}> element that satisfies
     <a>the conditions described above</a>.
  * The <{img}> element has a (non-conforming) <code>generator-unable-to-provide-required-alt</code>
    attribute whose value is the empty string. A conformance checker that is not reporting the lack
    of an <code>alt</code> attribute as an error must also not report the presence of the empty
    <code>generator-unable-to-provide-required-alt</code> attribute as an error. (This case does not
    represent a case where the document is conforming, only that the generator could not determine
    appropriate alternative text — validators are not required to show an error in this case,
    because such an error might encourage markup generators to include bogus alternative text purely
    in an attempt to silence validators. Naturally, conformance checkers <em>may</em> report the
    lack of an <code>alt</code> attribute as an error even in the presence of the
    <code>generator-unable-to-provide-required-alt</code> attribute; for example, there could be a
    user option to report <em>all</em> conformance errors even those that might be the more or less
    inevitable result of using a markup generator.)

<h4 id="the-iframe-element">The <dfn element><code>iframe</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Embedded content</a>.</dd>
    <dd><a>Interactive content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>embedded content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Text that conforms to the requirements given in the prose.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>src</code> - Address of the resource</dd>
    <dd><code>srcdoc</code> - A document to render in the <code>iframe</code></dd>
    <dd><{iframe/name}> - Name of <a>nested browsing context</a></dd>
    <dd><{iframe/sandbox}> - Security rules for nested content</dd>
    <dd><code>allowfullscreen</code> - Whether to allow the <code>iframe</code>'s
    contents to use <code>requestFullscreen()</code></dd>
    <dd><code>width</code> - Horizontal dimension</dd>
    <dd><code>height</code> - Vertical dimension</dd>
    <dt>Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values:</dt>
    <dd><a value for="role"><code>application</code></a>, <a value for="role"><code>document</code></a>, or <a value for="role"><code>img</code></a>.</dd>
    <dt>Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl" dfn-for="HTMLIFrameElement">
        interface HTMLIFrameElement : HTMLElement {
          attribute DOMString src;
          attribute DOMString srcdoc;
          attribute DOMString name;
          [PutForwards=value] readonly attribute DOMTokenList sandbox;
          attribute boolean allowFullscreen;
          attribute DOMString width;
          attribute DOMString height;
          readonly attribute Document? contentDocument;
          readonly attribute WindowProxy? contentWindow;
        };
      </pre>
    </dd>
  </dl>

  The <{iframe}> element <a>represents</a> a <a>nested browsing context</a>.

  The <dfn element-attr for="iframe"><code>src</code></dfn> attribute gives the address of a page
  that the <a>nested browsing context</a> is to contain. The attribute, if present, must be a
  <a>valid non-empty URL potentially surrounded by spaces</a>.

  The <dfn element-attr for="iframe"><code>srcdoc</code></dfn> attribute gives the content of
  the page that the <a>nested browsing context</a> is to contain. The value of the attribute
  is the source of <dfn for="iframe" lt="iframe srcdoc document|an iframe srcdoc documents">an <code>iframe</code> <code>srcdoc</code>
  document</dfn>.

  The <code>srcdoc</code> attribute, if present, must have a value
  using <a href="#syntax">the HTML syntax</a> that consists of the following syntactic components, in the
  given order:

  <ol>

    <li>Any number of <a>comments</a> and <a>space characters</a>.</li>

    <li>Optionally, a <a>DOCTYPE</a>.

    </li><li>Any number of <a>comments</a> and <a>space characters</a>.</li>

    <li>The root element, in the form of an <{html}> element.</li>

    <li>Any number of <a>comments</a> and <a>space characters</a>.</li>

  </ol>

  For <{iframe}> elements in <a>XML documents</a>, the <code>srcdoc</code> attribute, if present, must have a value that matches the
  production labeled <code>document</code> in the XML specification. [[!XML]]

  <div class="example">
    Here a blog uses the <code>srcdoc</code> attribute in conjunction
    with the <{iframe/sandbox}> attributes described below to provide users of user
    agents that support this feature with an extra layer of protection from script injection in the
    blog post comments:

    <pre highlight="html">
&lt;article&gt;
  &lt;h1&gt;I got my own magazine!&lt;/h1&gt;
  &lt;p&gt;After much effort, I've finally found a publisher, and so now I
  have my own magazine! Isn't that awesome?! The first issue will come
  out in September, and we have articles about getting food, and about
  getting in boxes, it's going to be great!&lt;/p&gt;
  &lt;footer&gt;
  &lt;p&gt;Written by &lt;a href="/users/cap"&gt;cap&lt;/a&gt;, 1 hour ago.
  &lt;/footer&gt;
  &lt;article&gt;
  &lt;footer&gt; Thirteen minutes ago, &lt;a href="/users/ch"&gt;ch&lt;/a&gt; wrote: &lt;/footer&gt;
  &lt;iframe sandbox srcdoc="&lt;p&gt;did you get a cover picture yet?"&gt;&lt;/iframe&gt;
  &lt;/article&gt;
  &lt;article&gt;
  &lt;footer&gt; Nine minutes ago, &lt;a href="/users/cap"&gt;cap&lt;/a&gt; wrote: &lt;/footer&gt;
  &lt;iframe sandbox srcdoc="&lt;p&gt;Yeah, you can see it &lt;a href=&amp;quot;/gallery?mode=cover&amp;amp;amp;page=1&amp;quot;&gt;in my gallery&lt;/a&gt;."&gt;&lt;/iframe&gt;
  &lt;/article&gt;
  &lt;article&gt;
  &lt;footer&gt; Five minutes ago, &lt;a href="/users/ch"&gt;ch&lt;/a&gt; wrote: &lt;/footer&gt;
  &lt;iframe sandbox srcdoc="&lt;p&gt;hey that's earl's table.
&lt;p&gt;you should get earl&amp;amp;amp;me on the next cover."&gt;&lt;/iframe&gt;
  &lt;/article&gt;
    </pre>

    Notice the way that quotes have to be escaped (otherwise the <code>srcdoc</code> attribute would end prematurely), and the way raw
    ampersands (e.g., in URLs or in prose) mentioned in the sandboxed content have to be
    <em>doubly</em> escaped — once so that the ampersand is preserved when originally parsing
    the <code>srcdoc</code> attribute, and once more to prevent the
    ampersand from being misinterpreted when parsing the sandboxed content.

    Furthermore, notice that since the <a>DOCTYPE</a> is optional in
    <a lt="iframe srcdoc document"><code>iframe</code> <code>srcdoc</code> documents</a>, and the <{html}>,
    <{head}>, and <{body}> elements have <a>optional
    start and end tags</a>, and the <a element for="html"><code>title</code></a> element is also optional in <a lt="iframe srcdoc document"><code>iframe</code> <code>srcdoc</code>
    documents</a>, the markup in a <code>srcdoc</code> attribute can be
    relatively succinct despite representing an entire document, since only the contents of the
    <{body}> element need appear literally in the syntax. The other elements are still
    present, but only by implication.

  </div>

  <p class="note">
    In <a href="#syntax">the HTML syntax</a>, authors need only remember to use U+0022
  QUOTATION MARK characters (") to wrap the attribute contents and then to escape all U+0022
  QUOTATION MARK (") and U+0026 AMPERSAND (&amp;) characters, and to specify the <{iframe/sandbox}> attribute, to ensure safe embedding of content.
  </p>

  <p class="note">
    Due to restrictions of <a href="#xhtml">the XHTML syntax</a>, in XML the U+003C LESS-THAN
  SIGN character (&lt;) needs to be escaped as well. In order to prevent <a>attribute-value normalization</a>, some of XML's
  whitespace characters — specifically U+0009 CHARACTER TABULATION (tab), U+000A LINE FEED
  (LF), and U+000D CARRIAGE RETURN (CR) — also need to be escaped. [[!XML]]
  </p>

  <p class="note">
    If the <code>src</code> attribute and the <code>srcdoc</code> attribute are both specified together, the <code>srcdoc</code> attribute takes priority. This allows authors to provide
  a fallback <a for="url">URL</a> for legacy user agents that do not support the <code>srcdoc</code> attribute.
  </p>

  <div class="impl">

  <hr />

  When an <{iframe}> element is <a for="document">inserted into a document</a> that has a <a>browsing context</a>, the user agent must create a <a>nested browsing context</a>, and
  then <a>process the <code>iframe</code> attributes</a> for the "first time".

  When an <{iframe}> element is <a for="document">removed from a document</a>, the user agent must <a>discard</a> the <a>nested browsing context</a>, if any.

  <p class="note">
    This happens without any <code>unload</code> events firing
  (the <a>nested browsing context</a> and its {{Document}} are <em><a>discarded</a></em>, not <em><a>unloaded</a></em>).
  </p>

  Whenever an <{iframe}> element with a <a>nested browsing context</a> has its
  <code>srcdoc</code> attribute set, changed, or removed, the user agent
  must <a>process the <code>iframe</code> attributes</a>.

  Similarly, whenever an <{iframe}> element with a <a>nested browsing context</a>
  but with no <code>srcdoc</code> attribute specified has its <code>src</code> attribute set, changed, or removed, the user agent must
  <a>process the <code>iframe</code> attributes</a>.

  When the user agent is to <dfn lt="reprocess the iframe attributes|process the iframe attributes">process the <code>iframe</code> attributes</dfn>, it must run
  the first appropriate steps from the following list:

  <dl class="switch">

    <dt>If the <code>srcdoc</code> attribute is specified</dt>

    <dd>

    <a>Navigate</a> the element's <a>child browsing context</a> to a new <a>response</a> whose
    <a>url list</a> consists of <a scheme>about:srcdoc</a>, <a for="response">header list</a>
    consists of <code>Content-Type</code>/<a href="#text-html"><code>text/html</code></a>,
    <a for="response">body</a> is the value of the attribute, <a for="response">CSP list</a> is the
    <a for="document">CSP list</a> of the <{iframe}> element's <a>node document</a>, and
    <a for="response">HTTPS state</a> is the <a for="document">HTTPS state</a> of the <{iframe}>
    element's <a>node document</a>.

    The resulting {{Document}} must be considered
    <a lt="iframe srcdoc document">an <code>iframe</code> <code>srcdoc</code> document</a>.

    </dd>

    <dt>Otherwise, if the element has no <code>src</code> attribute
    specified, and the user agent is processing the <code>iframe</code>'s attributes for the "first
    time"</dt>

    <dd>

    <a>Queue a task</a> to run the <a>iframe load event steps</a>.

    The <a>task source</a> for this <a>task</a> is the
    <a>DOM manipulation task source</a>.

    </dd>

    <dt>Otherwise</dt>

    <dd>

    <ol>

      <li>

      If the element has no <code>src</code> attribute specified, or its value is the empty string,
      let <var>url</var> be the string "<code>about:blank</code>".

      Otherwise, <a>parse</a> the value of the <code>src</code> attribute, relative to the <{iframe}> element.

      If that is not successful, then let <var>url</var> be the string
      "<code>about:blank</code>". Otherwise, let <var>url</var> be the <a>resulting URL string</a>.

      </li>

      <li>

      If there exists an <a>ancestor browsing context</a> whose <a>active
      document</a>'s <a>address</a>, ignoring fragment
      identifiers, is equal to <var>url</var>, then abort these steps.

      </li>

      <li>

      <a>Navigate</a> the element's <a>child browsing context</a>
      to <var>url</var>.

      </li>

    </ol>

    </dd>

  </dl>

  Furthermore, if the <a>active document</a> of the element's <a>child browsing
  context</a> before such a <a>navigation</a> was not <a>completely
  loaded</a> at the time of the new <a>navigation</a>, then the <a>navigation</a> must be completed with <a>replacement enabled</a>.

  Similarly, if the <a>child browsing context</a>'s <a>session history</a> contained
  only one {{Document}} when the <a>process the <code>iframe</code> attributes</a>
  algorithm was invoked, and that was the <code>about:blank</code> {{Document}} created
  when the <a>child browsing context</a> was created, then any <a>navigation</a> required of the user agent in that algorithm must be completed
  with <a>replacement enabled</a>.

  When a {{Document}} in an <code>iframe</code> is marked as <a>completely
  loaded</a>, the user agent must run the <a>iframe load event steps</a> <a>in parallel</a>.

  <p class="note">
    A <code>load</code> event is also fired at the
  <{iframe}> element when it is created if no other data is loaded in it.
  </p>

  Each {{Document}} has an <dfn>iframe load in progress</dfn> flag and a <dfn>mute
  iframe load</dfn> flag. When a {{Document}} is created, these flags must be unset for
  that {{Document}}.

  The <dfn>iframe load event steps</dfn> are as follows:

  <ol>

    <li>Let <var>child document</var> be the <a>active document</a> of the
    <{iframe}> element's <a>nested browsing context</a>.</li>

    <li>If <var>child document</var> has its <a>mute iframe load</a> flag set,
    abort these steps.</li>

    <li>Set <var>child document</var>'s <a>iframe load in progress</a>
    flag.</li>

    <li><a>Fire a simple event</a> named <code>load</code> at the
    <{iframe}> element.</li>

    <li>Unset <var>child document</var>'s <a>iframe load in progress</a>
    flag.</li>

  </ol>

  <p class="warning">This, in conjunction with scripting, can be used to probe the URL space of the
  local network's HTTP servers. User agents may implement <a>cross-origin</a>
  access control policies that are stricter than those described above to mitigate this attack, but
  unfortunately such policies are typically not compatible with existing Web content.</p>

  When the <code>iframe</code>'s <a>browsing context</a>'s <a>active document</a> is
  not <a>ready for post-load tasks</a>, and when anything in the <code>iframe</code> is <a>delaying the load event</a> of the <code>iframe</code>'s
  <a>browsing context</a>'s <a>active document</a>, and when the <code>iframe</code>'s
  <a>browsing context</a> is in the <a>delaying <code>load</code> events
  mode</a>, the <code>iframe</code> must <a>delay the load event</a> of its document.

  <p class="note">
    If, during the handling of the <code>load</code> event, the
  <a>browsing context</a> in the <code>iframe</code> is again <a>navigated</a>, that will further <a>delay the load event</a>.
  </p>

  </div>

  <p class="note">
    If, when the element is created, the <code>srcdoc</code> attribute is not set, and the <code>src</code> attribute is either also not set or set but its value cannot be
  <a>resolved</a>, the browsing context will remain at the initial
  <code>about:blank</code> page.
  </p>

  <p class="note">
    If the user <a>navigates</a> away from this page, the
  <code>iframe</code>'s corresponding <code>WindowProxy</code> object will proxy new
  <code>Window</code> objects for new {{Document}} objects, but the <code>src</code> attribute will not change.
  </p>

  <hr />

  The <dfn element-attr for="iframe"><code>name</code></dfn> attribute, if present, must be a
  <a>valid browsing context name</a>. The given value is used to name the <a>nested browsing context</a>. <span class="impl">When the browsing context is created, if the attribute
  is present, the <a>browsing context name</a> must be set to the value of this attribute;
  otherwise, the <a>browsing context name</a> must be set to the empty string.</span>

  <div class="impl">

  Whenever the <code>name</code> attribute is set, the nested
  <a>browsing context</a>'s <a lt="browsing context name">name</a> must be changed to
  the new value. If the attribute is removed, the <a>browsing context name</a> must be set to
  the empty string.

  </div>

  <hr />

  The <dfn element-attr for="iframe"><code>sandbox</code></dfn> attribute, when specified,
  enables a set of extra restrictions on any content hosted by the <{iframe}>. Its value
  must be an <a>unordered set of unique space-separated tokens</a> that are <a>ASCII
  case-insensitive</a>. The allowed values are <code>allow-forms</code>, <code>allow-pointer-lock</code>, <code>allow-popups</code>, <code>allow-same-origin</code>, <code>allow-scripts</code>, and <code>allow-top-navigation</code>.

  When the attribute is set, the content is treated as being from a unique
  <a for="concept">origin</a>,
  forms, scripts, and various potentially annoying APIs are disabled, links are prevented from
  targeting other <a>browsing contexts</a>, and plugins are secured.
  The <code>allow-same-origin</code> keyword causes
  the content to be treated as being from its real origin instead of forcing it into a unique
  origin; the <code>allow-top-navigation</code>
  keyword allows the content to <a>navigate</a> its <a>top-level browsing context</a>;
  and the <code>allow-forms</code>, <code>allow-pointer-lock</code>, <code>allow-popups</code> and <code>allow-scripts</code> keywords re-enable forms, the
  pointer lock API, popups, and scripts respectively. [[!POINTERLOCK]]

  <p class="warning">Setting both the <code>allow-scripts</code> and <code>allow-same-origin</code> keywords together when the
  embedded page has the <a>same origin</a> as the page containing the <code>iframe</code>
  allows the embedded page to simply remove the <{iframe/sandbox}>
  attribute and then reload itself, effectively breaking out of the sandbox altogether.</p>

  <p class="warning">These flags only take effect when the <a>nested browsing context</a> of
  the <code>iframe</code> is <a>navigated</a>. Removing them, or removing the
  entire <{iframe/sandbox}> attribute, has no effect on an
  already-loaded page.</p>

  <p class="warning">Potentially hostile files should not be served from the same server as the file
  containing the <{iframe}> element. Sandboxing hostile content is of minimal help if an
  attacker can convince the user to just visit the hostile content directly, rather than in the
  <{iframe}>. To limit the damage that can be caused by hostile HTML content, it should be
  served from a separate dedicated domain. Using a different domain ensures that scripts in the
  files are unable to attack the site, even if the user is tricked into visiting those pages
  directly, without the protection of the <{iframe/sandbox}>
  attribute.</p>

  <div class="impl">

  When an <{iframe}> element with a <{iframe/sandbox}>
  attribute has its <a>nested browsing context</a> created (before the initial
  <code>about:blank</code> {{Document}} is created), and when an <code>iframe</code>
  element's <{iframe/sandbox}> attribute is set or changed while it
  has a <a>nested browsing context</a>, the user agent must <a>parse the sandboxing directive</a> using the attribute's value as the <var>input</var>, the <{iframe}> element's <a>nested browsing context</a>'s
  <span><{iframe}> sandboxing flag set</span> as the output, and, if the
  <code>iframe</code> has an <code>allowfullscreen</code>
  attribute, the <var>allow fullscreen flag</var>.

  When an <{iframe}> element's <{iframe/sandbox}>
  attribute is removed while it has a <a>nested browsing context</a>, the user agent must
  empty the <{iframe}> element's <a>nested browsing context</a>'s
  <span><{iframe}> sandboxing flag set</span> as the output.

  </div>

  <div class="example">
    In this example, some completely-unknown, potentially hostile, user-provided HTML content is
    embedded in a page. Because it is served from a separate domain, it is affected by all the normal
    cross-site restrictions. In addition, the embedded page has scripting disabled, plugins disabled,
    forms disabled, and it cannot navigate any frames or windows other than itself (or any frames or
    windows it itself embeds).

    <pre highlight="html">
&lt;p&gt;We're not scared of you! Here is your content, unedited:&lt;/p&gt;
&lt;iframe title="Example iframe" sandbox src="https://usercontent.example.net/getusercontent.cgi?id=12193"&gt;&lt;/iframe&gt;
    </pre>

    <p class="warning">It is important to use a separate domain so that if the attacker convinces the
    user to visit that page directly, the page doesn't run in the context of the site's origin, which
    would make the user vulnerable to any attack found in the page.</p>

  </div>

  <div class="example">
    In this example, a gadget from another site is embedded. The gadget has scripting and forms
    enabled, and the origin sandbox restrictions are lifted, allowing the gadget to communicate with
    its originating server. The sandbox is still useful, however, as it disables plugins and popups,
    thus reducing the risk of the user being exposed to malware and other annoyances.

    <pre highlight="html">
&lt;iframe title="Maps" sandbox="allow-same-origin allow-forms allow-scripts"
        src="https://maps.example.com/embedded.html"&gt;&lt;/iframe&gt;
    </pre>

  </div>

  <div class="example">
    Suppose a file A contained the following fragment:

    <pre highlight="html">
&lt;iframe title="Example iframe" sandbox="allow-same-origin allow-forms" src=B&gt;&lt;/iframe&gt;
    </pre>

    Suppose that file B contained an iframe also:

    <pre highlight="html">
&lt;iframe title="Example iframe" sandbox="allow-scripts" src=C&gt;&lt;/iframe&gt;
    </pre>

    Further, suppose that file C contained a link:

    <pre highlight="html">
&lt;a href=D&gt;Link&lt;/a&gt;
    </pre>

    For this example, suppose all the files were served as <a href="#text-html"><code>text/html</code></a>.

    Page C in this scenario has all the sandboxing flags set. Scripts are disabled, because the
    <code>iframe</code> in A has scripts disabled, and this overrides the <code>allow-scripts</code> keyword set on the
    <code>iframe</code> in B. Forms are also disabled, because the inner <code>iframe</code> (in B)
    does not have the <code>allow-forms</code> keyword
    set.

    Suppose now that a script in A removes all the <{iframe/sandbox}> attributes in A  and B.
    This would change nothing immediately. If the user clicked the link in C, loading page D into the
    <code>iframe</code> in B, page D would now act as if the <code>iframe</code> in B had the <code>allow-same-origin</code> and <code>allow-forms</code> keywords set, because that was the
    state of the <a>nested browsing context</a> in the <code>iframe</code> in A when page B was
    loaded.

    Generally speaking, dynamically removing or changing the <{iframe/sandbox}> attribute is ill-advised, because it can make it quite
    hard to reason about what will be allowed and what will not.

  </div>

  <hr />

  The <dfn element-attr for="iframe"><code>allowfullscreen</code></dfn> attribute is a
  <a>boolean attribute</a>. When specified, it indicates that {{Document}} objects in
  the <{iframe}> element's <a>browsing context</a> are to be allowed to use <code>requestFullscreen()</code> (if it's not blocked for other
  reasons, e.g., there is another ancestor <code>iframe</code> without this attribute set).

  <div class="example">
    Here, an <code>iframe</code> is used to embed a player from a video site. The <code>allowfullscreen</code> attribute is needed to enable the
    player to show its video fullscreen.

    <pre highlight="html">
&lt;article&gt;
  &lt;header&gt;
  &lt;p&gt;&lt;img src="/usericons/1627591962735"&gt; &lt;b&gt;Fred Flintstone&lt;/b&gt;&lt;/p&gt;
  &lt;p&gt;&lt;a href="/posts/3095182851" rel=bookmark&gt;12:44&lt;/a&gt; — &lt;a href="#acl-3095182851"&gt;Private Post&lt;/a&gt;&lt;/p&gt;
  &lt;/header&gt;
  &lt;main&gt;
  &lt;p&gt;Check out my new ride!&lt;/p&gt;
  &lt;iframe title="Video" src="https://video.example.com/embed?id=92469812" allowfullscreen&gt;&lt;/iframe&gt;
  &lt;/main&gt;
&lt;/article&gt;
    </pre>

  </div>

  <hr />

  The <{iframe}> element supports <a>dimension attributes</a> for cases where the
  embedded content has specific dimensions (e.g., ad units have well-defined dimensions).

  An <{iframe}> element never has <a>fallback content</a>, as it will always
  create a nested <a>browsing context</a>, regardless of whether the specified initial
  contents are successfully used.

  <hr />

  Descendants of <{iframe}> elements represent nothing. (In legacy user agents that do
  not support <{iframe}> elements, the contents would be parsed as markup that could act as
  fallback content.)

  When used in <a>HTML documents</a>, the allowed content model
  of <{iframe}> elements is text, except that invoking the <a>HTML fragment parsing
  algorithm</a> with the <{iframe}> element as the <a>context</a> element and the text contents as
  the <var>input</var> must result in a list of nodes that are all <a>phrasing content</a>,
  with no <a for="parser">parse errors</a> having occurred, with no <code>script</code>
  elements being anywhere in the list or as descendants of elements in the list, and with all the
  elements in the list (including their descendants) being themselves conforming.

  The <{iframe}> element must be empty in <a>XML documents</a>.

  <p class="note">
    The <a>HTML parser</a> treats markup inside <{iframe}> elements as
  text.
  </p>

  <div class="impl">

  <hr />

  The IDL attributes <dfn attribute for="HTMLIFrameElement"><code>src</code></dfn>, <dfn attribute for="HTMLIFrameElement"><code>srcdoc</code></dfn>, <dfn attribute for="HTMLIFrameElement"><code>name</code></dfn>, and <dfn attribute for="HTMLIFrameElement"><code>sandbox</code></dfn> must <a>reflect</a> the respective
  content attributes of the same name.

  The <a>supported tokens</a> for <{iframe/sandbox}>'s {{DOMTokenList}} are the
  allowed values defined in the <{iframe/sandbox}> attribute and supported by the user agent.

  The <dfn attribute for="HTMLIFrameElement"><code>allowFullscreen</code></dfn> IDL attribute
  must <a>reflect</a> the <code>allowfullscreen</code>
  content attribute.

  The <dfn attribute for="HTMLIFrameElement"><code>contentDocument</code></dfn> IDL attribute must
  return the {{Document}} object of the <a>active document</a> of the <{iframe}> element's
  <a>nested browsing context</a>, if any and if its <a for="concept">origin</a> is the
  <a>same origin-domain</a> as the <a for="concept">origin</a> specified by the
  <a>incumbent settings object</a>, or null otherwise.

  The <dfn attribute for="HTMLIFrameElement"><code>contentWindow</code></dfn> IDL attribute must
  return the <code>WindowProxy</code> object of the <{iframe}> element's <a>nested browsing context</a>, if any, or null otherwise.

  </div>

  <div class="example">
    Here is an example of a page using an <code>iframe</code> to include advertising from an
    advertising broker:

    <pre highlight="html">
&lt;iframe title="Advert" src="https://ads.example.com/?customerid=923513721&amp;amp;format=banner"
        width="468" height="60"&gt;&lt;/iframe&gt;
    </pre>

  </div>

<h4 id="the-embed-element">The <dfn element><code>embed</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Embedded content</a>.</dd>
    <dd><a>Interactive content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>embedded content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a></dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>src</code> - Address of the resource</dd>
    <dd><code>type</code> - Type of embedded resource</dd>
    <dd><code>width</code> - Horizontal dimension</dd>
    <dd><code>height</code>- Vertical dimension</dd>
    <dd>Any other attribute that has no namespace (see prose).</dd>
    <dt>Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values:</dt>
    <dd><a value for="role"><code>application</code></a>,
    <a value for="role"><code>document</code></a> or
    <a value for="role"><code>img</code></a> or
    <a value for="role"><code>presentation</code></a>.</dd>
    <dt>Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl" dfn-for="HTMLEmbedElement">
        interface HTMLEmbedElement : HTMLElement {
          attribute DOMString src;
          attribute DOMString type;
          attribute DOMString width;
          attribute DOMString height;
          legacycaller any (any... arguments);
        };
      </pre>

      <div class="impl">
        Depending on the type of content instantiated by the <{embed}> element, the node may also
        support other interfaces.
      </div>
    </dd>
  </dl>

  The <{embed}> element provides an integration point for an external (typically
  non-HTML) application or interactive content.

  The <dfn element-attr for="embed"><code>src</code></dfn> attribute gives the address of the
  resource being embedded. The attribute, if present, must contain a <a>valid non-empty URL
  potentially surrounded by spaces</a>.

  The <dfn element-attr for="embed"><code>type</code></dfn> attribute, if present, gives the
  <a>MIME type</a> by which the plugin to instantiate is selected. The value must be a
  <a>valid mime type</a>. If both the <code>type</code> attribute and
  the <code>src</code> attribute are present, then the <code>type</code> attribute must specify the same type as the <a>explicit Content-Type metadata</a> of the resource given by the <code>src</code> attribute.

  <div class="impl">

  While any of the following conditions are occurring, any <a>plugin</a> instantiated for
  the element must be removed, and the <{embed}> element <a>represents</a>
  nothing:

  <ul class="brief">

    <li>The element has neither a <code>src</code> attribute nor a <code>type</code> attribute.</li>

    <li>The element has a <a>media element</a> ancestor.</li>

    <li>The element has an ancestor <{object}> element that is <em>not</em> showing its
    <a>fallback content</a>.</li>

  </ul>

  An <{embed}> element is said to be <dfn>potentially
  active</dfn> when the following conditions are all met simultaneously:

  <ul class="brief">

    <li>The element is <a>in a <code>Document</code></a> or was <a>in a <code>Document</code></a> the last time the <a>event loop</a>
    reached step 1.</li>

    <li>The element's <a>node document</a> is <a>fully active</a>.</li>

    <li>The element has either a <code>src</code> attribute set or a <code>type</code> attribute set (or both).</li>

    <li>The element's <code>src</code> attribute is either absent or its value
    is not the empty string.</li>

    <li>The element is not a descendant of a <a>media element</a>.</li>

    <li>The element is not a descendant of an <{object}> element that is not showing its
    <a>fallback content</a>.</li>

    <li>The element is <a>being rendered</a>, or was <a>being rendered</a> the last time
    the <a>event loop</a> reached step 1.</li>

  </ul>

  Whenever an <{embed}> element that was not <a>potentially active</a> becomes <a>potentially active</a>, and whenever a <a>potentially active</a> <{embed}> element that is
  remaining <a>potentially active</a> and has its <code>src</code> attribute set, changed, or removed or its <code>type</code> attribute set, changed, or removed, the user agent must
  <a>queue a task</a> using the <dfn>embed task source</dfn> to run <a>the
  <code>embed</code> element setup steps</a>.

  <dfn>The <{embed}> element setup steps</dfn> are as follows:

  <ol>

    <li>If another <a>task</a> has since been queued to run <a>the
    <code>embed</code> element setup steps</a> for this element, then abort these steps.</li>

    <li>

    <dl class="switch">

      <dt>If the element has a <code>src</code> attribute set</dt>

      <dd>

      The user agent must <a>parse</a> the value of the element's
      <code>src</code> attribute, relative to the element. If that is
      successful, the user agent should run these steps:

      <ol>

        <li>Let <var>request</var> be a new <a>request</a> whose
        <a for="url">URL</a> is the <a>resulting URL string</a>,
        <a>client</a> is the element's <a>node
        document</a>'s <code>Window</code> object's <a>environment settings object</a>,
        <a>destination</a> is "<code>unknown</code>", <a>omit-<code>Origin</code>-header flag</a> is set if the
        element doesn't have a <a>browsing context scope origin</a>, <a>credentials mode</a> is "<code>include</code>", and whose <a>use-URL-credentials flag</a> is set.</li>

        <li><a>Fetch</a> <var>request</var>.</li>
      </ol>

      The <a>task</a> that is <a>queued</a> by the <a>networking task source</a> once the
      resource has been fetched must run the following steps:

      <ol>

        <li>If another <a>task</a> has since been queued to run
        <a>the <code>embed</code> element setup steps</a> for this element, then abort these
        steps.</li>

        <li>

        Determine the <dfn>type of the content</dfn> being embedded, as
        follows (stopping at the first substep that determines the type):

        <ol>

          <li>If the element has a <code>type</code> attribute, and that
attribute's value is a type that a <a>plugin</a> supports, then the value of the
          <code>type</code> attribute is the content's type.</li>

          <li>

          Otherwise, if applying the <a>URL parser</a> algorithm to the <a for="url">URL</a> of
          the specified resource (after any redirects) results in a <a>URL record</a> whose
          <a>path</a> component matches a pattern that a
          <a>plugin</a> supports, then the content's type is the type that the plugin can handle.

          <p class="example">For example, a plugin might say that it can handle resources with <a>path</a> components that end with the four character string
          "<code>.swf</code>".</p>

          </li>

          <li>Otherwise, if the specified resource has <a>explicit
          Content-Type metadata</a>, then that is the content's type.</li>

          <li>Otherwise, the content has no <a for="request">type</a> and there
          can be no appropriate <a>plugin</a> for it.</li>

        </ol>

        </li>

        <li>

        If the previous step determined that the content's type is <code>image/svg+xml</code>, then run the following substeps:

        <ol>

          <li>If the <{embed}> element is not associated with a <a>nested browsing context</a>, associate the element with a newly created <a>nested browsing context</a>, and, if the element has a <code>name</code> attribute, set the <a>browsing context name</a> of the element's <a>nested browsing context</a> to the value of this attribute.

          </li><li><a>Navigate</a> the <a>nested browsing context</a> to
          the fetched resource, with <a>replacement enabled</a>, and with the
          <{embed}> element's <a>node document</a>'s <a>browsing context</a> as the <a>source
          browsing context</a>. (The <code>src</code> attribute of the
          <{embed}> element doesn't get updated if the browsing context gets further
          navigated to other locations.)</li>

          <li>The <{embed}> element now <a>represents</a> its associated
          <a>nested browsing context</a>.</li>

        </ol>

        </li>

        <li>

        Otherwise, find and instantiate an appropriate <a>plugin</a> based on the content's type, and hand that <a>plugin</a> the
        content of the resource, replacing any previously instantiated plugin for the element. The
        <{embed}> element now represents this <a>plugin</a> instance.

        </li>

        <li>Once the resource or plugin has completely loaded, <a>queue a task</a> to
        <a>fire a simple event</a> named <code>load</code> at the
        element.</li>

      </ol>

      Whether the resource is fetched successfully or not (e.g., whether the response status was
      an <a>ok status</a>) must be ignored when determining the content's type and when handing the resource to the
      plugin.

      <p class="note">
    This allows servers to return data for plugins even with error responses (e.g.,
      HTTP 500 Internal Server Error codes can still contain plugin data).
  </p>

      Fetching the resource must <a>delay the load event</a> of the element's <a>node document</a>.

      </dd>

      <dt>If the element has no <code>src</code> attribute set</dt>

      <dd>

      The user agent should find and instantiate an appropriate <a>plugin</a> based on the
      value of the <code>type</code> attribute. The <code>embed</code>
      element now represents this <a>plugin</a> instance.

      Once the plugin is completely loaded, <a>queue a task</a> to <a>fire a simple
      event</a> named <code>load</code> at the element.

      </dd>

    </dl>

    </li>

  </ol>

  The <{embed}> element has no <a>fallback content</a>. If the user agent can't
  find a suitable plugin when attempting to find and instantiate one for the algorithm above, then
  the user agent must use a default plugin. This default could be as simple as saying "Unsupported
  Format".

  Whenever an <{embed}> element that was <a>potentially
  active</a> stops being <a>potentially active</a>, any
  <a>plugin</a> that had been instantiated for that element must be unloaded.

  When a <a>plugin</a> is to be instantiated but it cannot be <a>secured</a> and the <a>sandboxed plugins browsing context
  flag</a> is set on the <{embed}> element's <a>node document</a>'s <a>active
  sandboxing flag set</a>, then the user agent must not instantiate the <a>plugin</a>, and
  must instead render the <{embed}> element in a manner that conveys that the
  <a>plugin</a> was disabled. The user agent may offer the user the option to override the
  sandbox and instantiate the <a>plugin</a> anyway; if the user invokes such an option, the
  user agent must act as if the conditions above did not apply for the purposes of this element.

  <p class="warning">Plugins that cannot be <a>secured</a> are
  disabled in sandboxed browsing contexts because they might not honor the restrictions imposed by
  the sandbox (e.g., they might allow scripting even when scripting in the sandbox is disabled). User
  agents should convey the danger of overriding the sandbox to the user if an option to do so is
  provided.</p>

  When an <{embed}> element represents a <a>nested browsing context</a>: if the
  <{embed}> element's <a>nested browsing context</a>'s <a>active document</a>
  is not <a>ready for post-load tasks</a>, and when anything is <a>delaying the load event</a> of the <{embed}> element's <a>browsing context</a>'s <a>active document</a>, and when the <{embed}> element's
  <a>browsing context</a> is in the <a>delaying <code>load</code>
  events mode</a>, the <code>embed</code> must <a>delay the load event</a> of its
  document.

  The <a>task source</a> for the <a>tasks</a> mentioned in this
  section is the <a>DOM manipulation task source</a>.

  </div>

  Any namespace-less attribute other than <code>name</code>, <code>align</code>, <code>hspace</code>, and <code>vspace</code> may be
  specified on the <{embed}> element, so long as its name is <a>XML-compatible</a>
  and contains no <a>uppercase ASCII letters</a>. These attributes are then passed as
  parameters to the <a>plugin</a>.

  <p class="note">
    All attributes in <a>HTML documents</a> get lowercased automatically, so the
  restriction on uppercase letters doesn't affect such documents.
  </p>

  <p class="note">
    The four exceptions are to exclude legacy attributes that have side-effects beyond
  just sending parameters to the <a>plugin</a>.
  </p>

  <div class="impl">

  The user agent should pass the names and values of all the attributes of the <code>embed</code>
  element that have no namespace to the <a>plugin</a> used, when one is instantiated.

  The <code>HTMLEmbedElement</code> object representing the element must expose the scriptable
  interface of the <a>plugin</a> instantiated for the <{embed}> element, if any. At a
  minimum, this interface must implement the <dfn for="embed">legacy caller
  operation</dfn>. (It is suggested that the default behavior of this legacy caller operation, e.g.,
  the behavior of the default plugin's legacy caller operation, be to throw a
  {{NotSupportedError}} exception.)

  </div>

  The <{embed}> element supports <a>dimension attributes</a>.

  <div class="impl">

  The IDL attributes <dfn attribute for="HTMLEmbedElement"><code>src</code></dfn> and {{HTMLEmbedElement/type}} each must <a>reflect</a> the respective
  content attributes of the same name.

  </div>

  <div class="example">
    Here's a way to embed a resource that requires a proprietary plugin, like Flash:

    <pre highlight="html">
&lt;embed src="catgame.swf"&gt;
    </pre>

    If the user does not have the plugin (for example if the plugin vendor doesn't support the
    user's platform), then the user will be unable to use the resource.

    To pass the plugin a parameter "quality" with the value "high", an attribute can be
    specified:

    <pre highlight="html">
&lt;embed src="catgame.swf" quality="high"&gt;
    </pre>

    This would be equivalent to the following, when using an <{object}> element
    instead:

    <pre highlight="html">
&lt;object data="catgame.swf"&gt;
  &lt;param name="quality" value="high"&gt;
&lt;/object&gt;
    </pre>

  </div>

<h4 id="the-object-element">The <dfn element><code>object</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Embedded content</a>.</dd>
    <dd>If the element has a <code>usemap</code> attribute: <a>interactive content</a>.</dd>
    <dd><a lt="listed element">listed</a>, <a>submittable</a>, and <a>reassociateable</a> <a>form-associated element</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>embedded content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Zero or more <{param}> elements, then, <a>transparent</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>data</code> - Address of the resource</dd>
    <dd><code>type</code> - Type of embedded resource</dd>
    <dd><code>typemustmatch</code> - Whether the <code>type</code>
    attribute and the <a>Content-Type</a> value need to match for the resource to be used</dd>
    <dd><{object/name}> - Name of <a>nested browsing context</a></dd>
    <dd><code>usemap</code> - Name of <a>image map</a> to use </dd>
    <dd><code>form</code> - Associates the control with a <{form}> element</dd>
    <dd><code>width</code> - Horizontal dimension</dd>
    <dd><code>height</code> - Vertical dimension</dd>
    <dt>Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values:</dt>
    <dd><a value for="role"><code>application</code></a>, <a value for="role"><code>document</code></a> or <a value for="role"><code>img</code></a> or
    <a value for="role"><code>presentation</code></a>.</dd>
    <dt>Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl" dfn-for="HTMLObjectElement">
        interface HTMLObjectElement : HTMLElement {
          attribute DOMString data;
          attribute DOMString type;
          attribute boolean typeMustMatch;
          attribute DOMString name;
          attribute DOMString useMap;
          readonly attribute HTMLFormElement? form;
          attribute DOMString width;
          attribute DOMString height;
          readonly attribute Document? contentDocument;
          readonly attribute WindowProxy? contentWindow;

          readonly attribute boolean willValidate;
          readonly attribute ValidityState validity;
          readonly attribute DOMString validationMessage;
          boolean checkValidity();
          boolean reportValidity();
          void setCustomValidity(DOMString error);

          legacycaller any (any... arguments);
        };
      </pre>

      <div class="impl">
        Depending on the type of content instantiated by the <{object}> element, the node also
        supports other interfaces.
      </div>
    </dd>
  </dl>

  The <{object}> element can represent an external resource, which, depending on the
  type of the resource, will either be treated as an image, as a <a>nested browsing context</a>, or as an external resource to be processed by a <a>plugin</a>.

  The <dfn element-attr for="object"><code>data</code></dfn> attribute, if present, specifies the
  address of the resource. If present, the attribute must be a <a>valid non-empty URL potentially
  surrounded by spaces</a>.

  <p class="warning">Authors who reference resources from other <a for="concept">origins</a>
  that they do not trust are urged to use the <code>typemustmatch</code> attribute defined below. Without that
  attribute, it is possible in certain cases for an attacker on the remote host to use the plugin
  mechanism to run arbitrary scripts, even if the author has used features such as the Flash
  "allowScriptAccess" parameter.</p>

  The <dfn element-attr for="object"><code>type</code></dfn> attribute, if present, specifies the
  type of the resource. If present, the attribute must be a <a>valid mime type</a>.

  At least one of either the <code>data</code> attribute or the <code>type</code> attribute must be present.

  The <dfn element-attr for="object"><code>typeMustMatch</code></dfn> attribute is a
  <a>boolean attribute</a> whose presence indicates that the resource specified by the <code>data</code> attribute is only to be used if the value of the <code>type</code> attribute and the <a>Content-Type</a> of the
  aforementioned resource match.

  The <code>typemustmatch</code> attribute must not be
  specified unless both the <code>data</code> attribute and the <code>type</code> attribute are present.

  The <dfn element-attr for="object"><code>name</code></dfn> attribute, if present, must be a
  <a>valid browsing context name</a>. The given value is used to name the <a>nested browsing context</a>, if applicable.

  <div class="impl">

  Whenever one of the following conditions occur:

  <ul>

    <li>the element is created,

    </li><li>the element is popped off the <a>stack of open elements</a> of an <a>HTML
    parser</a> or <a>XML parser</a>,

    </li><li>the element is not on the <a>stack of open elements</a> of an <a>HTML parser</a>
    or <a>XML parser</a>, and it is either <a for="document">inserted into a document</a> or <a for="document">removed from a document</a>,

    </li><li>the element's <a>node document</a> changes whether it is <a>fully active</a>,

    </li><li>one of the element's ancestor <{object}> elements changes to or from showing its
    <a>fallback content</a>,

    </li><li>the element's <code>classid</code> attribute is set, changed, or
    removed,

    </li><li>the element's <code>classid</code> attribute is not present, and
    its <code>data</code> attribute is set, changed, or removed,

    </li><li>neither the element's <code>classid</code> attribute nor its
    <code>data</code> attribute are present, and its <code>type</code> attribute is set, changed, or removed,

    </li><li>the element changes from <a>being rendered</a> to not being rendered, or vice versa,

  </li></ul>

  ...the user agent must <a>queue a task</a> to run the following steps to (re)determine
  what the <{object}> element represents. This <a>task</a>
  being <a>queued</a> or actively running must <a>delay the load
  event</a> of the element's <a>node document</a>.

  <ol>

    <li>

    If the user has indicated a preference that this <{object}> element's <a>fallback
    content</a> be shown instead of the element's usual behavior, then jump to the step below
    labeled <i>fallback</i>.

    <p class="note">
    For example, a user could ask for the element's <a>fallback content</a> to
    be shown because that content uses a format that the user finds more accessible.
  </p>

    </li>

    <li>

    If the element has an ancestor <a>media element</a>, or has an ancestor
    <{object}> element that is <em>not</em> showing its <a>fallback content</a>, or
    if the element is not <a>in a <code>Document</code></a> with a
    <a>browsing context</a>, or if the element's <a>node document</a> is not <a>fully
    active</a>, or if the element is still in the <a>stack of open elements</a> of an
    <a>HTML parser</a> or <a>XML parser</a>, or if the element is not <a>being
    rendered</a>, then jump to the step below labeled <i>fallback</i>.

    </li>

    <li>

    If the <code>classid</code> attribute is present, and has a
    value that isn't the empty string, then: if the user agent can find a <a>plugin</a>
    suitable according to the value of the <code>classid</code>
    attribute, and either plugins aren't being sandboxed or that
    <a>plugin</a> can be <a>secured</a>, then that
    <a>plugin</a> <a>should be used</a>, and the value of the <code>data</code> attribute, if any, should be passed to the
    <a>plugin</a>. If no suitable <a>plugin</a> can be found, or if the
    <a>plugin</a> reports an error, jump to the step below labeled <i>fallback</i>.

    </li>

    <li>If the <code>data</code> attribute is present and its value is
    not the empty string, then:

    <ol>

      <li>If the <code>type</code> attribute is present and its value is
      not a type that the user agent supports, and is not a type that the user agent can find a
      <a>plugin</a> for, then the user agent may jump to the step below labeled <i>fallback</i>
      without fetching the content to examine its real type.</li>

      <li><a>Parse</a> the <a for="url">URL</a> specified by the <code>data</code> attribute, relative to the element.</li>

      <li>If that failed, <a>fire a simple event</a> named <code>error</code> at the element, then jump to the step below labeled
      <i>fallback</i>.</li>

      <li>Let <var>request</var> be a new <a>request</a> whose
      <a for="url">URL</a> is the <a>resulting URL string</a>,
      <a>client</a> is the element's <a>node
      document</a>'s <code>Window</code> object's <a>environment settings object</a>,
      <a>destination</a> is "<code>unknown</code>", <a>omit-<code>Origin</code>-header flag</a> is set if the
      element doesn't have a <a>browsing context scope origin</a>, <a>credentials mode</a> is "<code>include</code>", and whose <a>use-URL-credentials flag</a> is set.</li>

      <li>
      <a>Fetch</a> <var>request</var>.

      Fetching the resource must <a>delay the load event</a> of the element's <a>node
      document</a> until the <a>task</a> that is <a>queued</a> by the <a>networking task source</a> once the resource has been
      fetched (defined next) has been run.
      </li>

      <li>If the resource is not yet available (e.g., because the resource was not available in the
      cache, so that loading the resource required making a request over the network), then jump to
      the step below labeled <i>fallback</i>. The <a>task</a> that is
      <a>queued</a> by the <a>networking task source</a> once the
      resource is available must restart this algorithm from this step. Resources can load
      incrementally; user agents may opt to consider a resource "available" whenever enough data has
      been obtained to begin processing the resource.</li>

      <li>If the load failed (e.g., there was an HTTP 404 error, there was a DNS error), <a>fire
      a simple event</a> named <code>error</code> at the element, then jump to
      the step below labeled <i>fallback</i>.</li>

      <li>

      Determine the <var>resource type</var>, as follows:

      <ol>

        <li>

        Let the <var>resource type</var> be unknown.

        </li>

        <li>

        If the <{object}> element has a <code>type</code>
        attribute and a <code>typemustmatch</code> attribute, and
        the resource has <a>associated Content-Type metadata</a>, and the
        type specified in <a>the resource's Content-Type metadata</a> is
        an <a>ASCII case-insensitive</a> match for the value of the element's <code>type</code> attribute, then let <var>resource type</var>
        be that type and jump to the step below labeled <i>handler</i>.

        </li>

        <li>

        If the <{object}> element has a <code>typemustmatch</code> attribute, jump to the step below
        labeled <i>handler</i>.

        </li>

        <li>

        If the user agent is configured to strictly obey Content-Type headers for this resource,
        and the resource has <a>associated Content-Type metadata</a>,
        then let the <var>resource type</var> be the type specified in <a>the resource's Content-Type metadata</a>, and jump to the step below
        labeled <i>handler</i>.

        <p class="warning">This can introduce a vulnerability, wherein a site is trying to embed a
        resource that uses a particular plugin, but the remote site overrides that and instead
        furnishes the user agent with a resource that triggers a different plugin with different
        security characteristics. </p>

        </li>

        <li>

        If there is a <code>type</code> attribute present on the
        <{object}> element, and that attribute's value is not a type that the user agent
        supports, but it <em>is</em> a type that a <a>plugin</a> supports, then let the <var>resource type</var> be the type specified in that <code>type</code> attribute, and jump to the step below labeled
        <i>handler</i>.

        </li>

        <li>

        Run the appropriate set of steps from the following
        list:

        <dl class="switch">

          <dt>If the resource has <a>associated Content-Type
          metadata</a></dt>

          <dd>

          <ol>

            <li>

            Let <var>binary</var> be false.

            </li>

            <li>

            If the type specified in <a>the resource's Content-Type
            metadata</a> is "<code>text/plain</code>", and the result of applying the <a>rules for distinguishing if a resource is
            text or binary</a> to the resource is that the resource is not
            <code>text/plain</code>, then set <var>binary</var> to true.

            </li>

            <li>

            If the type specified in <a>the resource's Content-Type
            metadata</a> is "<code>application/octet-stream</code>", then set <var>binary</var> to true.

            </li>

            <li>

            If <var>binary</var> is false, then let the <var>resource
            type</var> be the type specified in <a>the resource's
            Content-Type metadata</a>, and jump to the step below labeled <i>handler</i>.

            </li>

            <li>

            If there is a <code>type</code> attribute present on the
            <{object}> element, and its value is not <code>application/octet-stream</code>,
            then run the following steps:

            <ol>

              <li>

              If the attribute's value is a type that a <a>plugin</a> supports, or the
      attribute's value is a type that starts with "<code>image/</code>" that is
              not also an <a>XML MIME type</a>, then let the <var>resource type</var> be the
              type specified in that <code>type</code> attribute.

              </li>

              <li>

              Jump to the step below labeled <i>handler</i>.

              </li>

            </ol>

            </li>

          </ol>

          </dd>

          <dt>Otherwise, if the resource does not have <a>associated
          Content-Type metadata</a></dt>

          <dd>

          <ol>

            <li>

            If there is a <code>type</code> attribute present on the
            <{object}> element, then let the <var>tentative type</var> be the type
            specified in that <code>type</code> attribute.

            Otherwise, let <var>tentative type</var> be the <a>computed type of the resource</a>.

            </li>

            <li>

            If <var>tentative type</var> is <em>not</em>
            <code>application/octet-stream</code>, then let <var>resource type</var> be
            <var>tentative type</var> and jump to the step below labeled
            <i>handler</i>.

            </li>

          </ol>

          </dd>

        </dl>

        </li>

        <li>

        If applying the <a>URL parser</a> algorithm to the <a for="url">URL</a> of the
        specified resource (after any redirects) results in a <a>URL record</a> whose <a>path</a> component matches a pattern that a <a>plugin</a>
        supports, then let <var>resource type</var> be the type that the plugin can
        handle.

        <p class="example">For example, a plugin might say that it can handle resources with <a>path</a> components that end with the four character string
        "<code>.swf</code>".</p>

        </li>

      </ol>

      <p class="note">
    It is possible for this step to finish, or for one of the substeps above to
      jump straight to the next step, with <var>resource type</var> still being unknown. In
      both cases, the next step will trigger fallback.
  </p>

      </li>

      <li><i>Handler</i>: Handle the content as given by the first of the following cases that
      matches:

      <dl class="switch">

        <dt>If the <var>resource type</var> is not a type that the user agent supports, but
        it <em>is</em> a type that a <a>plugin</a> supports</dt>

        <dd>

        If plugins are being sandboxed and the plugin that
        supports <var>resource type</var> cannot be <a>secured</a>, jump to the step below labeled <i>fallback</i>.

        Otherwise, the user agent should use the plugin that supports
        <var>resource type</var> and pass the content of the resource to that
        <a>plugin</a>. If the <a>plugin</a> reports an error, then jump to the step
        below labeled <i>fallback</i>.

        </dd>

        <dt>If the <var>resource type</var> is an <a>XML MIME type</a>, or  if the <var>resource type</var>
        does not start with "<code>image/</code>"</dt>

        <dd>
        The <{object}> element must be associated with a newly created <a>nested browsing context</a>, if it does not already have one.

        If the <a for="url">URL</a> of the given resource is not <code>about:blank</code>, the
        element's <a>nested browsing context</a> must then be <a>navigated</a> to that resource, with
        <a>replacement enabled</a>, and with the <{object}> element's <a>node document</a>'s
        <a>browsing context</a> as the <a>source browsing context</a>. (The <code>data</code> attribute of the <{object}> element doesn't
        get updated if the browsing context gets further navigated to other locations.)

        If the <a for="url">URL</a> of the given resource <em>is</em> <code>about:blank</code>, then,
        instead, the user agent must <a>queue a task</a> to <a>fire a simple event</a>
        named <code>load</code> at the <{object}> element. <span class="note">No <code>load</code> event is fired at the
        <code>about:blank</code> document itself.</span>

        The <{object}> element <a>represents</a> the <a>nested browsing context</a>.

        If the <code>name</code> attribute is present, the
        <a>browsing context name</a> must be set to the value of this attribute; otherwise,
        the <a>browsing context name</a> must be set to the empty string.
        </dd>

        <dt>If the <var>resource type</var> starts with "<code>image/</code>", and support
        for images has not been disabled</dt>

        <dd>

        Apply the <a>image sniffing</a> rules to
        determine the type of the image.

        The <{object}> element <a>represents</a> the specified image. The image is
        not a <a>nested browsing context</a>.

        If the image cannot be rendered, e.g., because it is malformed or in an unsupported
        format, jump to the step below labeled <i>fallback</i>.

        </dd>

        <dt>Otherwise</dt>

        <dd>

        The given <var>resource type</var> is not supported. Jump to the step below
        labeled <i>fallback</i>.

        <p class="note">
    If the previous step ended with the <var>resource type</var> being
        unknown, this is the case that is triggered.
  </p>

        </dd>

      </dl>

      </li>

      <li>The element's contents are not part of what the <{object}> element
      represents.

      </li><li>

      Abort these steps. Once the resource is completely loaded, <a>queue a task</a> to
      <a>fire a simple event</a> named <code>load</code> at the
      element.

      </li>

    </ol>

    </li>

    <li>If the <code>data</code> attribute is absent but the <code>type</code> attribute is present, and the user agent can find a
    <a>plugin</a> suitable according to the value of the <code>type</code> attribute, and either plugins aren't being sandboxed or the <a>plugin</a> can be
    <a>secured</a>, then that <a>plugin</a> <a>should be used</a>. If these conditions cannot be met, or if the
    <a>plugin</a> reports an error, jump to the step below labeled <i>fallback</i>. Otherwise
    abort these steps; once the plugin is completely loaded, <a>queue a task</a> to <a>fire
    a simple event</a> named <code>load</code> at the element.</li>

    <li><i>Fallback</i>: The <{object}> element <a>represents</a> the element's
    children, ignoring any leading <{param}> element children. This is the element's
    <a>fallback content</a>. If the element has an instantiated <a>plugin</a>, then
    unload it.</li>

  </ol>

  <dfn lt="should be used"></dfn>When the algorithm above instantiates a <a>plugin</a>, the user agent
  should pass to the <a>plugin</a> used the names and values of all the attributes on the
  element, in the order they were added to the element, with the attributes added by the parser
  being ordered in source order, followed by a parameter named "PARAM" whose value is null, followed
  by all the names and values of <a>parameters</a> given by
  <{param}> elements that are children of the <{object}> element, in <a>tree
  order</a>. If the <a>plugin</a> supports a scriptable interface, the
  <code>HTMLObjectElement</code> object representing the element should expose that interface. The
  <{object}> element <a>represents</a> the <a>plugin</a>. The
  <a>plugin</a> is not a nested <a>browsing context</a>.

  Plugins are considered sandboxed for the purpose of an
  <{object}> element if the <a>sandboxed plugins browsing context flag</a> is set on
  the <{object}> element's <a>node document</a>'s <a>active sandboxing flag
  set</a>.

  Due to the algorithm above, the contents of <{object}> elements act as <a>fallback
  content</a>, used only when referenced resources can't be shown (e.g., because it returned a 404
  error). This allows multiple <{object}> elements to be nested inside each other,
  targeting multiple user agents with different capabilities, with the user agent picking the first
  one it supports.

  When an <{object}> element represents a <a>nested browsing context</a>: if the
  <{object}> element's <a>nested browsing context</a>'s <a>active document</a>
  is not <a>ready for post-load tasks</a>, and when anything is <a>delaying the load event</a> of the <{object}> element's <a>browsing context</a>'s <a>active document</a>, and when the <{object}> element's
  <a>browsing context</a> is in the <a>delaying <code>load</code>
  events mode</a>, the <code>object</code> must <a>delay the load event</a> of its
  document.

  The <a>task source</a> for the <a>tasks</a> mentioned in this
  section is the <a>DOM manipulation task source</a>.

  Whenever the <code>name</code> attribute is set, if the
  <{object}> element has a nested <a>browsing context</a>, its <a lt="browsing context name">name</a> must be changed to the new value. If the attribute is removed, if the
  <{object}> element has a <a>browsing context</a>, the <a>browsing context name</a> must be set to the empty string.

  </div>

  The <dfn element-attr for="object"><code>usemap</code></dfn> attribute, if present while the
  <{object}> element represents an image, can indicate that the object has an associated
  <a>image map</a>. <span class="impl">The attribute must be ignored if the
  <{object}> element doesn't represent an image.</span>

  The <{object/form}> attribute is used to explicitly associate the
  <{object}> element with its <a>form owner</a>.

  <div class="impl">

  <strong>Constraint validation</strong>: <{object}> elements are always <a>barred
  from constraint validation</a>.

  </div>

  The <{object}> element supports <a>dimension attributes</a>.

  <div class="impl">

  The IDL attributes {{HTMLObjectElement/data}}, {{HTMLObjectElement/type}} and {{HTMLObjectElement/name}} each must <a>reflect</a> the respective
  content attributes of the same name. The {{HTMLObjectElement/typeMustMatch}} IDL attribute must
  <a>reflect</a> the <{object/typemustmatch}> content
  attribute. The {{HTMLObjectElement/useMap}} IDL attribute must
  <a>reflect</a> the <{object/usemap}> content attribute.

  The {{HTMLObjectElement/contentDocument}} IDL attribute must return the {{Document}} object of the
  <a>active document</a> of the <{object}> element's <a>nested browsing context</a>, if any and if
  its <a for="concept">origin</a> is the <a>same origin-domain</a> as the
  <a for="concept">origin</a> specified by the <a>incumbent settings object</a>, or null otherwise.

  The {{HTMLObjectElement/contentWindow}} IDL attribute must
  return the <code>WindowProxy</code> object of the <{object}> element's <a>nested browsing context</a>, if it has one; otherwise, it must return null.

  The <code>willValidate</code>, <code>validity</code>, and <code>validationMessage</code> attributes, and the <code>checkValidity()</code>, <code>reportValidity()</code>, and <code>setCustomValidity()</code> methods, are part of the
  <a>constraint validation API</a>. The <code>form</code> IDL attribute
  is part of the element's forms API.

  All <{object}> elements have a <dfn for="object">legacy caller
  operation</dfn>. If the <{object}> element has an instantiated <a>plugin</a> that
  supports a scriptable interface that defines a legacy caller operation, then that must be the
  behavior of the object's legacy caller operation. Otherwise, the object's legacy caller operation
  must be to throw a {{NotSupportedError}} exception.

  </div>

  <div class="example">
    In the following example, a Java applet is embedded in a page using the <code>object</code>
    element. (Generally speaking, it is better to avoid using applets like these and instead use
    native JavaScript and HTML to provide the functionality, since that way the application will work
    on all Web browsers without requiring a third-party plugin. Many devices, especially embedded
    devices, do not support third-party technologies like Java.)

    <pre highlight="html">
&lt;figure&gt;
  &lt;object type="application/x-java-applet"&gt;
  &lt;param name="code" value="MyJavaClass"&gt;
  &lt;p&gt;You do not have Java available, or it is disabled.&lt;/p&gt;
  &lt;/object&gt;
  &lt;figcaption&gt;My Java Clock&lt;/figcaption&gt;
&lt;/figure&gt;
    </pre>

  </div>

  <div class="example">
    In this example, an HTML page is embedded in another using the <code>object</code>
    element.

    <pre highlight="html">
&lt;figure&gt;
  &lt;object data="clock.html"&gt;&lt;/object&gt;
  &lt;figcaption&gt;My HTML Clock&lt;/figcaption&gt;
&lt;/figure&gt;
    </pre>

  </div>

  <div class="example">
    The following example shows how a plugin can be used in HTML (in this case the Flash plugin,
    to show a video file). Fallback is provided for users who do not have Flash enabled, in this case
    using the <{video}> element to show the video for those using user agents that support
    <{video}>, and finally providing a link to the video for those who have neither Flash
    nor a <code>video</code>-capable browser.

    <pre highlight="html">
&lt;p&gt;Look at my video:
  &lt;object type="application/x-shockwave-flash"&gt;
  &lt;param name=movie value="https://video.example.com/library/watch.swf"&gt;
  &lt;param name=allowfullscreen value=true&gt;
  &lt;param name=flashvars value="https://video.example.com/vids/315981"&gt;
  &lt;video controls src="https://video.example.com/vids/315981"&gt;
    &lt;a href="https://video.example.com/vids/315981"&gt;View video&lt;/a&gt;.
  &lt;/video&gt;
  &lt;/object&gt;
&lt;/p&gt;
    </pre>

  </div>

<h4 id="the-param-element">The <dfn element><code>param</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of an <{object}> element, before any <a>flow content</a>.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a></dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>name</code> - Name of parameter</dd>
    <dd><code>value</code> - Value of parameter</dd>
    <dt>Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl" dfn-for="HTMLParamElement">
        interface HTMLParamElement : HTMLElement {
          attribute DOMString name;
          attribute DOMString value;
        };
      </pre>
    </dd>
  </dl>

  The <{param}> element defines parameters for plugins invoked by <code>object</code>
  elements. It does not <a>represent</a> anything on its own.

  The <dfn element-attr for="param"><code>name</code></dfn> attribute gives the name of the
  parameter.

  The <dfn element-attr for="param"><code>value</code></dfn> attribute gives the value of the
  parameter.

  Both attributes must be present. They may have any value.

  <div class="impl">

  If both attributes are present, and if the parent element of the <code>param</code> is an
  <{object}> element, then the element defines a <dfn>parameter</dfn> with the given name-value pair.

  If either the name or value of a <a>parameter</a> defined
  by a <{param}> element that is the child of an <{object}> element that
  <a>represents</a> an instantiated <a>plugin</a> changes, and if that
  <a>plugin</a> is communicating with the user agent using an API that features the ability to
  update the <a>plugin</a> when the name or value of a <a>parameter</a> so changes, then the user agent must
  appropriately exercise that ability to notify the <a>plugin</a> of the change.

  The IDL attributes <dfn attribute for="HTMLParamElement"><code>name</code></dfn> and <dfn attribute for="HTMLParamElement"><code>value</code></dfn> must both <a>reflect</a> the respective
  content attributes of the same name.

  </div>

  <div class="example">
    The following example shows how the <{param}> element can be used to pass a parameter
    to a plugin, in this case the O3D plugin.

    <pre highlight="html">
&lt;!DOCTYPE HTML&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;title&gt;O3D Utah Teapot&lt;/title&gt;
  &lt;/head&gt;
  &lt;body&gt;
    &lt;p&gt;
    &lt;object type="application/vnd.o3d.auto"&gt;
      &lt;param name="o3d_features" value="FloatingPointTextures"&gt;
      &lt;img src="o3d-teapot.png"
          title="3D Utah Teapot illustration rendered using O3D."
          alt="When O3D renders the Utah Teapot, it appears as a squat
          teapot with a shiny metallic finish on which the
          surroundings are reflected, with a faint shadow caused by
          the lighting."&gt;
      &lt;p&gt;To see the teapot actually rendered by O3D on your
      computer, please download and install the &lt;a
      href="https://code.google.com/apis/o3d/docs/gettingstarted.html#install"&gt;O3D plugin&lt;/a&gt;.&lt;/p&gt;
    &lt;/object&gt;
    &lt;script src="o3d-teapot.js"&gt;&lt;/script&gt;
    &lt;/p&gt;
  &lt;/body&gt;
&lt;/html&gt;
    </pre>

  </div>

<h4 id="the-video-element">The <dfn element><code>video</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Embedded content</a>.</dd>
    <dd>If the element has a <{video/controls}> attribute: <a>interactive content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>embedded content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>If the element has a <code>src</code> attribute:
  zero or more <{track}> elements, then
  <a>transparent</a>, but with no <a>media element</a> descendants.</dd>
    <dd>If the element does not have a <code>src</code> attribute: zero or
    more <{source}> elements, then zero or more <{track}> elements, then
  <a>transparent</a>, but with no <a>media element</a> descendants.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>src</code> - Address of the resource</dd>
    <dd><code>crossorigin</code> - How the element handles crossorigin requests</dd>
    <dd><code>poster</code> - Poster frame to show prior to video playback</dd>
    <dd><code>preload</code> - Hints how much buffering the
    <a>media resource</a> will likely need</dd>
    <dd><code>autoplay</code> - Hint that the <a>media resource</a>
    can be started automatically when the page is loaded</dd>
    <dd><code>loop</code> - Whether to loop the <a>media resource</a></dd>
    <dd><code>muted</code> - Whether to mute the <a>media resource</a> by default</dd>
    <dd><{video/controls}> - Show user agent controls</dd>
    <dd><code>width</code> - Horizontal dimension</dd>
    <dd><code>height</code> - Vertical dimension</dd>
    <dt>Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values:</dt>
    <dd><a value for="role"><code>application</code></a>.</dd>
    <dt>Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>

    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl" dfn-for="HTMLVideoElement">
        interface HTMLVideoElement : HTMLMediaElement {
          attribute unsigned long width;
          attribute unsigned long height;
          readonly attribute unsigned long videoWidth;
          readonly attribute unsigned long videoHeight;
          attribute DOMString poster;
        };
      </pre>
    </dd>
  </dl>

  A <{video}> element is used for playing videos or movies, and audio files with
  captions.

  Content may be provided inside the <{video}> element<span class="impl">. User agents
  should not show this content to the user</span>; it is intended for older Web browsers which do
  not support <{video}>, so that legacy video plugins can be tried, or to show text to the
  users of these older browsers informing them of how to access the video contents.

  <p class="note">
    In particular, this content is not intended to address accessibility concerns. To
  make video content accessible to the partially sighted, the blind, the hard-of-hearing, the deaf,
  and those with other physical or cognitive disabilities, a variety of features are available.
  Captions can be provided, either embedded in the video stream or as external files using the
  <{track}> element. Sign-language tracks can be provided, again either embedded in the
  video stream. Audio descriptions can be provided, either as a separate track embedded in the video
  stream, or in text form using a <a>WebVTT file</a> referenced using the <{track}> element and
  synthesized into speech by the user agent. WebVTT can also be used to provide chapter titles. For
  users who would rather not use a media element at all, transcripts or other textual alternatives
  can be provided by simply linking to them in the prose near the <{video}> element. [[WEBVTT]]
  </p>

  The <{video}> element is a <a>media element</a> whose <a>media data</a> is
  ostensibly video data, possibly with associated audio data.

  The <code>src</code>, <code>preload</code>,
  <code>autoplay</code>, <code>loop</code>, <code>muted</code>, and <{video/controls}>
  attributes are the attributes common to all media elements.

  The <dfn element-attr for="video"><code>poster</code></dfn> content attribute gives the address of an
  image file that the user agent can show while no video data is available. The attribute, if
  present, must contain a <a>valid non-empty URL potentially surrounded by spaces</a>.

  <div class="impl">

  If the specified resource is to be used, then, when the element is created or when the <code>poster</code> attribute is set, changed, or removed, the user agent must
  run the following steps to determine the element's <dfn>poster frame</dfn> (regardless of the
  value of the element's <a>show poster flag</a>):

  <ol>

    <li>If there is an existing instance of this algorithm running for this <code>video</code>
    element, abort that instance of this algorithm without changing the <a>poster
    frame</a>.</li>

    <li>If the <code>poster</code> attribute's value is the empty string
    or if the attribute is absent, then there is no <a>poster frame</a>; abort these
    steps.</li>

    <li><a>Parse</a> the <code>poster</code> attribute's value relative to the element. If this fails,
    then there is no <a>poster frame</a>; abort these steps.</li>

    <li>Let <var>request</var> be a new <a>request</a> whose
    <a for="url">URL</a> is the <a>resulting URL string</a>,
    <a>client</a> is the element's <a>node document</a>'s
    <code>Window</code> object's <a>environment settings object</a>, <a for="request">type</a> is "<code>image</code>", <a>destination</a> is "<code>subresource</code>",
    <a>credentials mode</a> is "<code>include</code>", and whose <a>use-URL-credentials flag</a> is set.

    </li><li><a>Fetch</a> <var>request</var>. This must
    <a>delay the load event</a> of the element's <a>node document</a>.</li>

    <li>If an image is thus obtained, the <a>poster frame</a> is that image. Otherwise,
    there is no <a>poster frame</a>.</li>

  </ol>

  </div>

  <p class="note">
    The image given by the <code>poster</code> attribute,
  the <i>poster frame</i>, is intended to be a representative frame of the
  video (typically one of the first non-blank frames) that gives the user an idea of what the video
  is like.
  </p>

  <div class="impl">

  <hr />

  A <{video}> element represents what is given for the first matching condition in the
  list below:

  <dl class="switch">

    <dt>When no video data is available (the element's <code>readyState</code> attribute is either <code>HAVE_NOTHING</code>, or <code>HAVE_METADATA</code> but no video data has yet been obtained at
    all, or the element's <code>readyState</code> attribute is any
    subsequent value but the <a>media resource</a> does not have a video channel)</dt>

    <dd>The <{video}> element <a>represents</a> its <a>poster frame</a>, if any,
    or else transparent black with no <a>intrinsic dimensions</a>.</dd>

    <dt>When the <{video}> element is <a>paused</a>, the <a>current playback position</a> is the first frame of video,
    and the element's <a>show poster flag</a> is set</dt>

    <dd>The <{video}> element <a>represents</a> its <a>poster frame</a>, if any,
    or else the first frame of the video.</dd>

    <dt>When the <{video}> element is <a>paused</a>, and the
    frame of video corresponding to the <a>current playback
    position</a> is not available (e.g., because the video is seeking or buffering)</dt>

    <dt>When the <{video}> element is neither <a>potentially playing</a> nor <a>paused</a> (e.g., when seeking or stalled)</dt>

    <dd>The <{video}> element <a>represents</a> the last frame of the video to have
    been rendered.</dd>

    <dt>When the <{video}> element is <a>paused</a></dt>

    <dd>The <{video}> element <a>represents</a> the frame of video corresponding to
    the <a>current playback position</a>.</dd>

    <dt>Otherwise (the <{video}> element has a video channel and is <a>potentially
    playing</a>)</dt>

    <dd>The <{video}> element <a>represents</a> the frame of video at the continuously
    increasing <a lt="current position">"current" position</a>. When the
    <a>current playback position</a> changes such that the last frame rendered is no longer the
    frame corresponding to the <a>current playback position</a> in the video, the new frame
    must be rendered.</dd>

  </dl>

  Frames of video must be obtained from the video track that was <a>selected</a> when the <a>event loop</a> last reached
  step 1.

  <p class="note">
    Which frame in a video stream corresponds to a particular playback position is
  defined by the video stream's format.
  </p>

  The <{video}> element also <a>represents</a> any <a>text track cues</a> whose <a>text track cue active flag</a> is set and whose
  <a>text track</a> is in the <a mode for="track">showing</a> mode, and any
  audio from the <a>media resource</a>, at the <a>current playback position</a>.

  Any audio associated with the <a>media resource</a> must, if played, be played
  synchronized with the <a>current playback position</a>, at the element's <a>effective
  media volume</a>. The user agent must play the audio from audio tracks that were enabled when the <a>event loop</a> last reached step 1.

  In addition to the above, the user agent may provide messages to the user (such as "buffering",
  "no video loaded", "error", or more detailed information) by overlaying text or icons on the video
  or other areas of the element's playback area, or in another appropriate manner.

  User agents that cannot render the video may instead make the element <a>represent</a> a link to an external video playback utility or to the video
  data itself.

  When a <{video}> element's <a>media resource</a> has a video channel, the
  element <a>provides a paint source</a> whose width is the <a>media resource</a>'s
  <a for="video">intrinsic width</a>, whose height is the
  <a>media resource</a>'s <a for="video">intrinsic height</a>, and whose appearance is
  the frame of video corresponding to the <a>current playback position</a>, if that is available, or else
  (e.g., when the video is seeking or buffering) its previous appearance, if any, or else (e.g.,
  because the video is still loading the first frame) blackness.

  <hr />

  </div>

  <dl class="domintro">

    <dt><var>video</var> . <code>videoWidth</code></dt>
    <dt><var>video</var> . <code>videoHeight</code></dt>

    <dd>

    These attributes return the intrinsic dimensions of the video,
    or zero if the dimensions are not known.

    </dd>

  </dl>

  <div class="impl">

  The <dfn for='video'>intrinsic width</dfn> and <dfn for='video'>intrinsic height</dfn> of the <a>media resource</a>
  are the dimensions of the resource in CSS pixels after taking into account the resource's
  dimensions, aspect ratio, clean aperture, resolution, and so forth, as defined for the format used
  by the resource. If an anamorphic format does not define how to apply the aspect ratio to the
  video data's dimensions to obtain the "correct" dimensions, then the user agent must apply the
  ratio by increasing one dimension and leaving the other unchanged.

  The <dfn attribute for="HTMLVideoElement"><code>videoWidth</code></dfn> IDL attribute must return
  the <a for='video'>intrinsic width</a> of the video in CSS pixels.
  The <dfn attribute for="HTMLVideoElement"><code>videoHeight</code></dfn> IDL attribute must return
  the <a for='video'>intrinsic height</a> of the video in CSS
  pixels. If the element's <code>readyState</code> attribute is <code>HAVE_NOTHING</code>, then the attributes must return 0.

  Whenever the <a for='video'>intrinsic width</a>
  or <a for='video'>intrinsic height</a> of the video changes
  (including, for example, because the selected video
  track was changed), if the element's <code>readyState</code>
  attribute is not <code>HAVE_NOTHING</code>, the user agent must
  <a>queue a task</a> to <a>fire a simple event</a> named <code>resize</code> at the <a>media element</a>.

  </div>

  The <{video}> element supports <a>dimension attributes</a>.

  <div class="impl">

  In the absence of style rules to the contrary, video content should be rendered inside the
  element's playback area such that the video content is shown centered in the playback area at the
  largest possible size that fits completely within it, with the video content's aspect ratio being
  preserved. Thus, if the aspect ratio of the playback area does not match the aspect ratio of the
  video, the video will be shown letterboxed or pillarboxed. Areas of the element's playback area
  that do not contain the video represent nothing.

  <p class="note">
    In user agents that implement CSS, the above requirement can be implemented by
  using the style rule suggested in [[#rendering]].
  </p>

  The <a for="css">intrinsic width</a> of a <{video}> element's playback area is the
  <a for="css">intrinsic width</a> of the <a>poster frame</a>, if that is available and the
  element currently <a>represents</a> its poster frame; otherwise, it is the <a for="video">intrinsic width</a> of the video resource, if that is
  available; otherwise the <a for="css">intrinsic width</a> is missing.

  The <a for="css">intrinsic height</a> of a <{video}> element's playback area is the
  <a for="css">intrinsic height</a> of the <a>poster frame</a>, if that is available and the
  element currently <a>represents</a> its poster frame; otherwise it is the <a for="video">intrinsic height</a> of the video resource, if that is
  available; otherwise the <a for="css">intrinsic height</a> is missing.

  The <a>default object size</a> is a width of 300 CSS pixels and a height of 150 CSS
  pixels. [[!CSS3-IMAGES]]

  <hr />

  User agents should provide controls to enable or disable the display of closed captions, audio
  description tracks, and other additional data associated with the video stream, though such
  features should, again, not interfere with the page's normal rendering.

  User agents may allow users to view the video content in manners more suitable to the user
  (e.g., fullscreen or in an independent resizable window). As for the other user interface
  features, controls to enable this should not interfere with the page's normal rendering unless the
  user agent is <a>exposing a user interface</a>.
  In such an independent context, however, user agents may make full user interfaces visible even
  if the <{mediaelements/controls}> attribute is absent.

  User agents may allow video playback to affect system features that could interfere with the
  user's experience; for example, user agents could disable screensavers while video playback is in
  progress.

  <hr />

  The <dfn><code>poster</code></dfn> IDL attribute must
  <a>reflect</a> the <code>poster</code> content attribute.

  </div>

  <div class="example">
    This example shows how to detect when a video has failed to play correctly:

    <pre highlight="html">
&lt;script&gt;
  function failed(e) {
    // video playback failed - show a message saying why
    switch (e.target.error.code) {
      case e.target.error.MEDIA_ERR_ABORTED:
        alert('You aborted the video playback.');
        break;
      case e.target.error.MEDIA_ERR_NETWORK:
        alert('A network error caused the video download to fail part-way.');
        break;
      case e.target.error.MEDIA_ERR_DECODE:
        alert('The video playback was aborted due to a corruption problem or because the video used features your browser did not support.');
        break;
      case e.target.error.MEDIA_ERR_SRC_NOT_SUPPORTED:
        alert('The video could not be loaded, either because the server or network failed or because the format is not supported.');
        break;
      default:
        alert('An unknown error occurred.');
        break;
    }
  }
&lt;/script&gt;
&lt;p&gt;&lt;video src="tgif.vid" autoplay controls onerror="failed(event)"&gt;&lt;/video&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="tgif.vid"&gt;Download the video file&lt;/a&gt;.&lt;/p&gt;
    </pre>

  </div>

<h4 id="the-audio-element">The <dfn element><code>audio</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Embedded content</a>.</dd>
    <dd>If the element has a <{audio/controls}> attribute: <a>Interactive content</a>.</dd>
    <dd>If the element has a <{audio/controls}> attribute: <a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>embedded content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>If the element has a <code>src</code> attribute:
zero or more <{track}> elements, then
<a>transparent</a>, but with no <a>media element</a> descendants.</dd>
    <dd>If the element does not have a <code>src</code> attribute: zero or more <{source}> elements, then
  zero or more <{track}> elements, then
  <a>transparent</a>, but with no <a>media element</a> descendants.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>src</code> - Address of the resource</dd>
    <dd><code>crossorigin</code> - How the element handles crossorigin requests</dd>
    <dd><code>preload</code> - Hints how much buffering the
    <a>media resource</a> will likely need</dd>
    <dd><code>autoplay</code> - Hint that the <a>media resource</a>
    can be started automatically when the page is loaded</dd>
    <dd><code>loop</code> - Whether to loop the <a>media resource</a></dd>
    <dd><code>muted</code> - Whether to mute the <a>media resource</a> by default</dd>
    <dd><{audio/controls}> - Show user agent controls</dd>
    <dt>Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values:</dt>
    <dd><a value for="role"><code>application</code></a>.</dd>
    <dt>Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
    <pre class="idl" data-highlight="webidl" dfn-for="HTMLAudioElement">
      [NamedConstructor=Audio(optional DOMString src)]
      interface HTMLAudioElement : HTMLMediaElement {};
    </pre>
    </dd>
  </dl>

  An <{audio}> element <a>represents</a> a sound or audio stream.

  Content may be provided inside the <{audio}> element<span class="impl">. User agents
  should not show this content to the user</span>; it is intended for older Web browsers which do
  not support <{audio}>, so that legacy audio plugins can be tried, or to show text to the
  users of these older browsers informing them of how to access the audio contents.

  <p class="note">
    In particular, this content is not intended to address accessibility concerns. To
  make audio content accessible to the deaf or to those with other physical or cognitive
  disabilities, a variety of features are available. If captions or a sign language video are
  available, the <{video}> element can be used instead of the <{audio}> element to
  play the audio, allowing users to enable the visual alternatives. Chapter titles can be provided
  to aid navigation, using the <{track}> element and a <a>WebVTT file</a>. And,
  naturally, transcripts or other textual alternatives can be provided by simply linking to them in
  the prose near the <{audio}> element. [[WEBVTT]]
  </p>

  The <{audio}> element is a <a>media element</a> whose <a>media data</a> is
  ostensibly audio data.

  The <code>src</code>, <code>preload</code>,
  <code>autoplay</code>, <code>loop</code>, <code>muted</code>, and <{audio/controls}>
  attributes are the attributes common to all media elements.

  <div class="impl">

  When an <{audio}> element is <a>potentially playing</a>, it must have its audio
  data played synchronized with the <a>current playback position</a>, at the element's
  <a>effective media volume</a>. The user agent must play the audio from audio tracks that
  were enabled when the <a>event loop</a> last reached step 1.

  When an <{audio}> element is not <a>potentially playing</a>, audio must not play
  for the element.

  </div>

  <dl class="domintro">

    <dt><var>audio</var> = new <code>Audio</code>( [ <var>url</var> ] )</dt>

    <dd>

    Returns a new <{audio}> element, with the <code>src</code>
    attribute set to the value passed in the argument, if applicable.

    </dd>

  </dl>

  <div class="impl" id='audio'>

  A constructor is provided for creating <code>HTMLAudioElement</code> objects (in addition to
  the factory methods from DOM such as <code>createElement()</code>): <dfn constructor for="HTMLAudioElement"><code>Audio(<var>src</var>)</code></dfn>. When invoked as a
  constructor, it must return a new <code>HTMLAudioElement</code> object (a new <code>audio</code>
  element). The element must be created with its <code>preload</code>
  attribute set to the literal value "<code>auto</code>". If the
  <var>src</var> argument is present, the object created must be created with its <code>src</code> content attribute set to the provided value (this will cause the user agent to invoke the object's
  <a>resource selection algorithm</a> before returning).
  The element's <a>node document</a> must be the <a>active document</a> of the <a>browsing context</a> of the <code>Window</code> object on which the interface object of the invoked
  constructor is found.

  </div>

<h4 id="the-source-element">The <dfn element for="media"><code>source</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <a>media element</a>, before any <a>flow content</a>
  or <{track}> elements.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a></dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>src</code> - Address of the resource</dd>
    <dd><code>type</code> - Type of embedded resource</dd>
    <dt>Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl" dfn-for="HTMLSourceElement">
        interface HTMLSourceElement : HTMLElement {
          attribute DOMString src;
          attribute DOMString type;
        };
      </pre>
    </dd>
  </dl>

  The <{source}> element allows authors to specify multiple alternative <a>media resources</a> for <a>media elements</a>. It does not <a>represent</a> anything on its own.

  The <dfn element-attr for="source"><code>src</code></dfn> attribute gives the address of the
  <a>media resource</a>. The value must be a <a>valid non-empty URL potentially surrounded
  by spaces</a>. This attribute must be present.

  <p class="note">
    Dynamically modifying a <{source}> element and its attribute when the
  element is already inserted in a <code>video</code> or <{audio}> element will have no
  effect. To change what is playing, just use the <code>src</code> attribute
  on the <a>media element</a> directly, possibly making use of the <code>canPlayType()</code> method to pick from amongst available
  resources. Generally, manipulating <{source}> elements manually after the document has
  been parsed is an unnecessarily complicated approach.
  </p>

  The <dfn element-attr for="source"><code>type</code></dfn> content attribute gives the type of the
  <a>media resource</a>, to help the user agent determine if it can play this <a>media
  resource</a> before fetching it. If specified, its value must be a <a>valid MIME
  type</a>. The <code>codecs</code> parameter, which certain MIME types define, might be
  necessary to specify exactly how the resource is encoded. [[!RFC6381]]

  <div class="example">
    The following list shows some examples of how to use the <code>codecs=</code> MIME
    parameter in the <code>type</code> attribute.

    <dl>

    <dt>H.264 Constrained baseline profile video (main and extended video compatible) level 3 and Low-Complexity AAC audio in MP4 container</dt>
    <dd><pre highlight="html">
&lt;source src='video.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'&gt;
    </pre></dd>

    <dt>H.264 Extended profile video (baseline-compatible) level 3 and Low-Complexity AAC audio in MP4 container</dt>
    <dd><pre highlight="html">
&lt;source src='video.mp4' type='video/mp4; codecs="avc1.58A01E, mp4a.40.2"'&gt;
    </pre></dd>

    <dt>H.264 Main profile video level 3 and Low-Complexity AAC audio in MP4 container</dt>
    <dd><pre highlight="html">
&lt;source src='video.mp4' type='video/mp4; codecs="avc1.4D401E, mp4a.40.2"'&gt;
    </pre></dd>

    <dt>H.264 &quot;High&quot; profile video (incompatible with main, baseline, or extended profiles) level 3 and Low-Complexity AAC audio in MP4 container</dt>
    <dd><pre highlight="html">
&lt;source src='video.mp4' type='video/mp4; codecs="avc1.64001E, mp4a.40.2"'&gt;
    </pre></dd>

    <dt>MPEG-4 Visual Simple Profile Level 0 video and Low-Complexity AAC audio in MP4 container</dt>
    <dd><pre highlight="html">
&lt;source src='video.mp4' type='video/mp4; codecs="mp4v.20.8, mp4a.40.2"'&gt;
    </pre></dd>

    <dt>MPEG-4 Advanced Simple Profile Level 0 video and Low-Complexity AAC audio in MP4 container</dt>
    <dd><pre highlight="html">
&lt;source src='video.mp4' type='video/mp4; codecs="mp4v.20.240, mp4a.40.2"'&gt;
    </pre></dd>

    <dt>MPEG-4 Visual Simple Profile Level 0 video and AMR audio in 3GPP container</dt>
    <dd><pre highlight="html">
&lt;source src='video.3gp' type='video/3gpp; codecs="mp4v.20.8, samr"'&gt;
    </pre></dd>

    <dt>Theora video and Vorbis audio in Ogg container</dt>
    <dd><pre highlight="html">
&lt;source src='video.ogv' type='video/ogg; codecs="theora, vorbis"'&gt;
    </pre></dd>

    <dt>Theora video and Speex audio in Ogg container</dt>
    <dd><pre highlight="html">
&lt;source src='video.ogv' type='video/ogg; codecs="theora, speex"'&gt;
    </pre></dd>

    <dt>Vorbis audio alone in Ogg container</dt>
    <dd><pre highlight="html">
&lt;source src='audio.ogg' type='audio/ogg; codecs=vorbis'&gt;
    </pre></dd>

    <dt>Speex audio alone in Ogg container</dt>
    <dd><pre highlight="html">
&lt;source src='audio.spx' type='audio/ogg; codecs=speex'&gt;
    </pre></dd>

    <dt>FLAC audio alone in Ogg container</dt>
    <dd><pre highlight="html">
&lt;source src='audio.oga' type='audio/ogg; codecs=flac'&gt;
    </pre></dd>

    <dt>Dirac video and Vorbis audio in Ogg container</dt>
    <dd><pre highlight="html">
&lt;source src='video.ogv' type='video/ogg; codecs="dirac, vorbis"'&gt;
    </pre></dd>

    </dl>

  </div>

  <div class="impl">

  If a <code>source</code> element is inserted as a child of a <a>media element</a> that
  has no <code>src</code> attribute and whose <code>networkState</code> has the value <code>NETWORK_EMPTY</code>, the user agent must invoke the <a>media element</a>'s <a>resource selection
  algorithm</a>.

  The IDL attributes <dfn attribute for="source"><code>src</code></dfn> and <dfn attribute for="source"><code>type</code></dfn> must <a>reflect</a> the respective content
  attributes of the same name.

  </div>

  <div class="example">
    If the author isn't sure if user agents will all be able to render the media resources
    provided, the author can listen to the <code>error</code> event on the last
    <{source}> element and trigger fallback behavior:

    <pre highlight="html">
&lt;script&gt;
  function fallback(video) {
    // replace &lt;video&gt; with its contents
    while (video.hasChildNodes()) {
      if (video.firstChild instanceof HTMLSourceElement)
        video.removeChild(video.firstChild);
      else
        video.parentNode.insertBefore(video.firstChild, video);
    }
    video.parentNode.removeChild(video);
  }
&lt;/script&gt;
&lt;video controls autoplay&gt;
  &lt;source src='video.mp4' type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'&gt;
  &lt;source src='video.ogv' type='video/ogg; codecs="theora, vorbis"'
          onerror="fallback(parentNode)"&gt;
  ...
&lt;/video&gt;
    </pre>

  </div>

<h4 id="the-track-element">The <dfn element><code>track</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <a>media element</a>, before any <a>flow content</a>.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a></dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>kind</code> - The type of text track</dd>
    <dd><code>src</code> - Address of the resource</dd>
    <dd><code>srclang</code> - Language of the text track</dd>
    <dd><code>label</code> - User-visible label</dd>
    <dd><code>default</code> - Enable the track if no other <a>text track</a> is more suitable</dd>
    <dt>Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl" dfn-for="HTMLTrackElement">
        interface HTMLTrackElement : HTMLElement {
          attribute DOMString kind;
          attribute DOMString src;
          attribute DOMString srclang;
          attribute DOMString label;
          attribute boolean default;

          const unsigned short NONE = 0;
          const unsigned short LOADING = 1;
          const unsigned short LOADED = 2;
          const unsigned short ERROR = 3;
          readonly attribute unsigned short readyState;

          readonly attribute TextTrack track;
        };
      </pre>
    </dd>
  </dl>

  The <{track}> element allows authors to specify explicit external text resources for <a>media elements</a>. It
  does not <a>represent</a> anything on its own.

  The <dfn element-attr for="track"><code>kind</code></dfn> attribute is an <a>enumerated
  attribute</a>. The following table lists the keywords defined for this attribute. The keyword
  given in the first cell of each row maps to the state given in the second cell.

  <table>
    <thead>
    <tr>
      <th>Keyword
      </th><th>State
      </th><th>Brief description
    </th></tr></thead><tbody>
    <tr>
      <td><dfn attr-value for="track/kind"><code>subtitles</code></dfn>
      </td><td><dfn state for="track">Subtitles</dfn>
      </td><td>
      Transcription or translation of the dialog, suitable for when the sound is available but not understood (e.g., because the user does not understand the language of the <a>media resource</a>'s audio track).
      Overlaid on the video.
    </td></tr><tr>
      <td><dfn attr-value for="track/kind"><code>captions</code></dfn>
      </td><td><dfn state for="track">Captions</dfn>
      </td><td>
      Transcription or translation of the dialog, sound effects, relevant musical cues, and other relevant audio information, suitable for when sound is unavailable or not clearly audible (e.g., because it is muted, drowned-out by ambient noise, or because the user is deaf).
      Overlaid on the video; labeled as appropriate for the hard-of-hearing.
    </td></tr><tr>
      <td><dfn attr-value for="track/kind"><code>descriptions</code></dfn>
      </td><td><dfn state for="track">Descriptions</dfn>
      </td><td>
      Textual descriptions of the video component of the <a>media resource</a>, intended for audio synthesis when the visual component is obscured, unavailable, or not usable (e.g., because the user is interacting with the application without a screen while driving, or because the user is blind).
      Synthesized as audio.
    </td></tr><tr>
      <td><dfn attr-value for="track/kind"><code>chapters</code></dfn>
      </td><td><dfn state for="track">Chapters</dfn>
      </td><td>
      Chapter titles, intended to be used for navigating the <a>media resource</a>.
      Displayed as an interactive (potentially nested) list in the user agent's interface.
    </td></tr><tr>
      <td><dfn attr-value for="track/kind"><code>metadata</code></dfn>
      </td><td><dfn state for="track">Metadata</dfn>
      </td><td>
      Tracks intended for use from script.
      Not displayed by the user agent.
  </td></tr></tbody></table>

  The attribute may be omitted. The <i>missing value default</i> is the <a>subtitles</a> state. The
  <i>invalid value default</i> is the <a>metadata</a> state.

  The <dfn element-attr for="track"><code>src</code></dfn> attribute gives the address of the text
  track data. The value must be a <a>valid non-empty URL potentially surrounded by spaces</a>.
  This attribute must be present.

  If the element has a <{track/src}> attribute whose value is not the
  empty string and whose value, when the attribute was set, could be successfully <a>parsed</a>
  relative to the element's <a>node document</a>, then the element's <dfn>track URL</dfn> is the
  <a>resulting URL string</a>. Otherwise, the element's <a>track URL</a> is the empty string.

  <div class="note">
  If the element's <a>track URL</a> identifies a <a>WebVTT</a> resource, and the
  element's <code>kind</code> attribute is not in the <a state for="track">Metadata</a> state, then the <a>WebVTT</a> file must be
  a <a>WebVTT file using cue text</a>. [[WEBVTT]]

  Furthermore, if the element's <a>track URL</a> identifies a <a>WebVTT</a> resource,
  and the element's <code>kind</code> attribute is in the <a>chapters</a> state, then the <a>WebVTT</a> file must be
  both a <a>WebVTT file using chapter title text</a> and a <a>WebVTT file using only nested
  cues</a>. [[WEBVTT]]
  </div>

  The <dfn element-attr for="track"><code>srclang</code></dfn> attribute gives the language of
  the text track data. The value must be a valid BCP 47 language tag. This attribute must be present
  if the element's <code>kind</code> attribute is in the <a>subtitles</a> state. [[!BCP47]]

  <div class="impl">

  If the element has a <code>srclang</code> attribute whose value is
  not the empty string, then the element's <dfn>track language</dfn> is the value of the attribute.
  Otherwise, the element has no <a>track language</a>.

  </div>

  The <dfn element-attr for="track"><code>label</code></dfn> attribute gives a user-readable
  title for the track. This title is used by user agents when listing <a>subtitle</a>, <a>caption</a>, and <a state for="track" lt="Descriptions">audio description</a> tracks in their user interface.

  The value of the <code>label</code> attribute, if the attribute is
  present, must not be the empty string. Furthermore, there must not be two <code>track</code>
  element children of the same <a>media element</a> whose <code>kind</code> attributes are in the same state, whose <code>srclang</code> attributes are both missing or have values that
  represent the same language, and whose <code>label</code> attributes are
  again both missing or both have the same value.

  <div class="impl">

  If the element has a <code>label</code> attribute whose value is not
  the empty string, then the element's <dfn>track label</dfn> is the value of the attribute.
  Otherwise, the element's <a>track label</a> is an empty string.

  </div>

  The <dfn element-attr for="track"><code>default</code></dfn> attribute is a <a>boolean
  attribute</a>, which, if specified, indicates that the track is to be enabled if the user's
  preferences do not indicate that another track would be more appropriate.

  Each <a>media element</a> must have no more than one <{track}> element child
  whose <code>kind</code> attribute is in the <a state for="track">Subtitles</a> or <a state for="track">Captions</a> state and whose <{track/default}> attribute is specified.

  Each <a>media element</a> must have no more than one <{track}> element child
  whose <code>kind</code> attribute is in the <a state for="track">Descriptions</a> state and whose <{track/default}> attribute is specified.

  Each <a>media element</a> must have no more than one <{track}> element child
  whose <code>kind</code> attribute is in the <a state for="track">Chapters</a> state and whose <{track/default}> attribute is specified.

  <p class="note">
    There is no limit on the number of <{track}> elements whose <code>kind</code> attribute is in the <a state for="track">Metadata</a> state and whose <{track/default}> attribute is specified.
  </p>

  <dl class="domintro">

    <dt><var>track</var> . <code>readyState</code></dt>
    <dd>
    Returns the <a>text track readiness state</a>,
    represented by a number from the following list:
    <dl>
      <dt><var>track</var> . <code>NONE</code> (0)</dt>
      <dd>
      The <a state for="track" lt="not loaded">text track not loaded</a> state.
      </dd>
      <dt><var>track</var> . <code>LOADING</code> (1)</dt>
      <dd>
      The <a state for="track" lt="loading">text track loading</a> state.
      </dd>
      <dt><var>track</var> . <code>LOADED</code> (2)</dt>
      <dd>
      The <a state for="track" lt="loaded">text track loaded</a> state.
      </dd>
      <dt><var>track</var> . <code>ERROR</code> (3)</dt>
      <dd>
      The <a state for="track" lt="failed">text track failed to load</a> state.
      </dd>
    </dl>
    </dd>

    <dt><var>track</var> . <code>track</code></dt>

    <dd>

    Returns the {{TextTrack}} object corresponding to the <a>text track</a> of the <{track}> element.

    </dd>

  </dl>

  <div class="impl">

  The <dfn attribute for="HTMLTrackElement"><code>readyState</code></dfn> attribute must return the
  numeric value corresponding to the <a>text track readiness state</a> of the
  <{track}> element's <a>text track</a>, as defined by the following list:

  <dl>
    <dt><dfn const for="HTMLTrackElement"><code>NONE</code></dfn> (numeric value 0)</dt>
    <dd>The <a state for="track">text track not loaded</a> state.</dd>
    <dt><dfn const for="HTMLTrackElement"><code>LOADING</code></dfn> (numeric value 1)</dt>
    <dd>The <a state for="track">text track loading</a> state.</dd>
    <dt><dfn const for="HTMLTrackElement"><code>LOADED</code></dfn> (numeric value 2)</dt>
    <dd>The <a state for="track">text track loaded</a> state.</dd>
    <dt><dfn const for="HTMLTrackElement"><code>ERROR</code></dfn> (numeric value 3)</dt>
    <dd>The <a state for="track">text track failed to load</a> state.</dd>
  </dl>

  The <dfn attribute for="HTMLTrackElement"><code>track</code></dfn> IDL attribute must, on getting,
  return the <{track}> element's <a>text track</a>'s corresponding
  {{TextTrack}} object.

  The <dfn attribute for="HTMLTrackElement"><code>src</code></dfn>, <dfn attribute for="HTMLTrackElement"><code>srclang</code></dfn>, <dfn attribute for="HTMLTrackElement"><code>label</code></dfn>, and <dfn attribute for="HTMLTrackElement"><code>default</code></dfn> IDL attributes must <a>reflect</a> the
  respective content attributes of the same name. The <dfn attribute for="HTMLTrackElement"><code>kind</code></dfn> IDL attribute must <a>reflect</a> the content
  attribute of the same name, <a>limited to only known values</a>.

  </div>

  <div class="example">
    This video has subtitles in several languages:

    <pre highlight="html">
&lt;video src="brave.webm"&gt;
  &lt;track kind=subtitles src=brave.en.vtt srclang=en label="English"&gt;
  &lt;track kind=captions src=brave.en.hoh.vtt srclang=en label="English for the Hard of Hearing"&gt;
  &lt;track kind=subtitles src=brave.fr.vtt srclang=fr lang=fr label="Français"&gt;
  &lt;track kind=subtitles src=brave.de.vtt srclang=de lang=de label="Deutsch"&gt;
&lt;/video&gt;
    </pre>

    (The <{global/lang}> attributes on the last two describe the language of
    the <code>label</code> attribute, not the language of the subtitles
    themselves. The language of the subtitles is given by the <code>srclang</code> attribute.)

  </div>

<h4 id="the-media-elements">Media elements</h4>

  {{HTMLMediaElement}} objects (<{audio}> and <{video}>, in this specification) are simply known as
  <dfn lt="media element|media elements">media elements</dfn>.

  <pre class="idl" data-highlight="webidl" dfn-for="CanPlayTypeResult">
    enum CanPlayTypeResult { "" /* empty string */, "maybe", "probably" };
  </pre>

  <pre class="idl" data-highlight="webidl" dfn-for="MediaProvider">
    typedef (MediaStream or MediaSource or Blob) MediaProvider;
  </pre>

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLMediaElement">
    interface HTMLMediaElement : HTMLElement {

      // error state
      readonly attribute MediaError? error;

      // network state
      attribute DOMString src;
      attribute MediaProvider? srcObject;
      readonly attribute DOMString currentSrc;
      attribute DOMString? crossOrigin;
      const unsigned short NETWORK_EMPTY = 0;
      const unsigned short NETWORK_IDLE = 1;
      const unsigned short NETWORK_LOADING = 2;
      const unsigned short NETWORK_NO_SOURCE = 3;
      readonly attribute unsigned short networkState;
      attribute DOMString preload;
      readonly attribute TimeRanges buffered;
      void load();
      CanPlayTypeResult canPlayType(DOMString type);

      // ready state
      const unsigned short HAVE_NOTHING = 0;
      const unsigned short HAVE_METADATA = 1;
      const unsigned short HAVE_CURRENT_DATA = 2;
      const unsigned short HAVE_FUTURE_DATA = 3;
      const unsigned short HAVE_ENOUGH_DATA = 4;
      readonly attribute unsigned short readyState;
      readonly attribute boolean seeking;

      // playback state
      attribute double currentTime;
      void fastSeek(double time);
      readonly attribute unrestricted double duration;
      object getStartDate();
      readonly attribute boolean paused;
      attribute double defaultPlaybackRate;
      attribute double playbackRate;
      readonly attribute TimeRanges played;
      readonly attribute TimeRanges seekable;
      readonly attribute boolean ended;
      attribute boolean autoplay;
      attribute boolean loop;
      void play();
      void pause();

      // controls
      attribute boolean controls;
      attribute double volume;
      attribute boolean muted;
      attribute boolean defaultMuted;

      // tracks
      [SameObject] readonly attribute AudioTrackList audioTracks;
      [SameObject] readonly attribute VideoTrackList videoTracks;
      [SameObject] readonly attribute TextTrackList textTracks;
      TextTrack addTextTrack(TextTrackKind kind, optional DOMString label = "", optional DOMString language = "");
    };
  </pre>

  The <dfn>media element attributes</dfn>, <code>src</code>, <code>crossorigin</code>, <code>preload</code>, <code>autoplay</code>,
  <code>loop</code>,
  <code>muted</code>, and <{mediaelements/controls}>, apply to all <a>media elements</a>. They are defined in this section.

  <a>Media elements</a> are used to present audio data, or video and
  audio data, to the user. This is referred to as <dfn>media data</dfn> in this section, since this
  section applies equally to <a>media elements</a> for audio or for
  video.

  The term <dfn lt="media resource|resource">media resource</dfn> is used to refer to the complete set of media data, e.g., the
  complete video file, or complete audio file.

  A <a>media resource</a> can have multiple audio and video tracks. For the purposes of a
  <a>media element</a>, the video data of the <a>media resource</a> is only that of the
  currently selected track (if any) as given by the element's <code>videoTracks</code> attribute when the <a>event loop</a> last
  reached step 1, and the audio data of the <a>media resource</a> is the result of mixing all
  the currently enabled tracks (if any) given by the element's <code>audioTracks</code> attribute when the <a>event loop</a> last
  reached step 1.

  <p class="note">
    Both <code>audio</code> and <{video}> elements can be used for both audio
  and video. The main difference between the two is simply that the <{audio}> element has
  no playback area for visual content (such as video or captions), whereas the <code>video</code>
  element does.
  </p>

  <div class="impl">

  Except where otherwise explicitly specified, the <a>task source</a> for all the tasks
  <a>queued</a> in this section and its subsections is the <dfn>media
  element event task source</dfn> of the <a>media element</a> in question.

  </div>

<h5 id="error-codes">Error codes</h5>

  <dl class="domintro">

    <dt><var>media</var> . <code>error</code></dt>

    <dd>

    Returns a <code>MediaError</code> object representing the current error state of the
    element.

    Returns null if there is no error.

    </dd>

  </dl>

  <div class="impl">

  All <a>media elements</a> have an associated error status, which
  records the last error the element encountered since its <a>resource selection algorithm</a> was last invoked. The
  <dfn attribute for="HTMLMediaElement"><code>error</code></dfn> attribute, on getting, must return the
  <code>MediaError</code> object created for this last error, or null if there has not been an
  error.

  </div>

  <pre class="idl" data-highlight="webidl" dfn-for="MediaError">
    interface MediaError {
      const unsigned short MEDIA_ERR_ABORTED = 1;
      const unsigned short MEDIA_ERR_NETWORK = 2;
      const unsigned short MEDIA_ERR_DECODE = 3;
      const unsigned short MEDIA_ERR_SRC_NOT_SUPPORTED = 4;
      readonly attribute unsigned short code;
    };
  </pre>

  <dl class="domintro">

    <dt><var>media</var> . <code>error</code> . <code>code</code></dt>

    <dd>

    Returns the current error's error code, from the list below.

    </dd>

  </dl>

  <div class="impl">

  The <dfn attribute for="MediaError"><code>code</code></dfn> attribute of a
  <code>MediaError</code> object must return the code for the error, which must be one of the
  following:

  </div>

  <dl>

    <dt><dfn const for="MediaError"><code>MEDIA_ERR_ABORTED</code></dfn> (numeric value 1)</dt>

    <dd>The fetching process for the <a>media resource</a> was aborted by the user agent at the
    user's request.</dd>

    <dt><dfn const for="MediaError"><code>MEDIA_ERR_NETWORK</code></dfn> (numeric value 2)</dt>

    <dd>A network error of some description caused the user agent to stop fetching the <a>media
    resource</a>, after the resource was established to be usable.</dd>

    <dt><dfn const for="MediaError"><code>MEDIA_ERR_DECODE</code></dfn> (numeric value 3)</dt>

    <dd>An error of some description occurred while decoding the <a>media resource</a>, after
    the resource was established to be usable.</dd>

    <dt><dfn const for="MediaError"><code>MEDIA_ERR_SRC_NOT_SUPPORTED</code></dfn> (numeric value 4)</dt>

    <dd>The <a>media resource</a> indicated by the <code>src</code>
    attribute or <a>assigned media provider object</a> was not suitable.</dd>

  </dl>

<h5 id="location-of-the-media-resource">Location of the media resource</h5>

  The <dfn element-attr for="media"><code>src</code></dfn> content attribute on <a>media elements</a> gives the address of the media resource (video, audio) to show. The
  attribute, if present, must contain a <a>valid non-empty URL potentially surrounded by
  spaces</a>.

  The <dfn element-attr for="media"><code>crossorigin</code></dfn> content attribute on
  <a>media elements</a> is a <a>CORS settings attribute</a>.

  <div class="impl">

  If a <a>media element</a> is created with a
  <code>src</code> attribute, the user agent must <a>immediately</a> invoke the
  <a>media element</a>'s <a>resource selection
  algorithm</a>.

  If a <code>src</code> attribute of a <a>media element</a> is set
  or changed, the user agent must invoke the <a>media element</a>'s <a>media element load
  algorithm</a>. (<em>Removing</em> the <code>src</code> attribute does
  not do this, even if there are <{source}> elements present.)

  The <dfn attribute for="HTMLMediaElement"><code>src</code></dfn> IDL attribute on <a>media elements</a> must <a>reflect</a> the content attribute of the same
  name.

  The <dfn attribute for="HTMLMediaElement"><code>crossOrigin</code></dfn> IDL attribute must
  <a>reflect</a> the <code>crossorigin</code> content attribute.

  </div>

  A <dfn>media provider object</dfn> is an object that can represent a <a>media resource</a>,
  separate from a <a for="url">URL</a>. <code>MediaStream</code> objects, <code>MediaSource</code>
  objects, <code>Blob</code> objects, and <code>File</code> objects are all <a>media provider objects</a>.

  Each <a>media element</a> can have an <dfn>assigned media provider object</dfn>, which is a
  <a>media provider object</a>. When a <a>media element</a> is created, it has no
  <a>assigned media provider object</a>.

  <dl class="domintro">
    <dt><var>media</var> . {{HTMLMediaElement/srcObject}} [ = <var>source</var> ]</dt>
    <dd>Allows the <a>media element</a> to be assigned a <a>media provider object</a>.

    <dt><var>media</var> . {{HTMLMediaElement/currentSrc}}</dt>
    <dd>Returns the <a for="url">URL</a> of the current <a>media resource</a>, if any.

    Returns the empty string when there is no <a>media resource</a>, or it doesn't have a
    <a for="url">URL</a>.</dd>
  </dl>

  The <dfn attribute for="HTMLMediaElement"><code>currentSrc</code></dfn> IDL attribute is initially
  the empty string. Its value is changed by the <a>resource
  selection algorithm</a> defined below.

  The <dfn attribute for="HTMLMediaElement"><code>srcObject</code></dfn> IDL attribute, on getting,
  must return the element's <a>assigned media provider object</a>, if any, or null otherwise. On
  setting, it must set the element's <a>assigned media provider object</a> to the new value, and
  then invoke the element's <a>media element load algorithm</a>.

  <p class="note">There are three ways to specify a <a>media resource</a>, the
  {{HTMLMediaElement/srcObject}} IDL attribute, the <{media/src}> content attribute, and <{source}>
  elements. The IDL attribute takes priority, followed by the content attribute, followed by the
  elements.</p>

<h5 id="mime-types">MIME types</h5>

  A <a>media resource</a> can be described in terms of its <em>type</em>, specifically a
  <a>MIME type</a>, in some cases with a <code>codecs</code> parameter. (Whether the
  <code>codecs</code> parameter is allowed or not depends on the MIME type.) [[!RFC6381]]

  Types are usually somewhat incomplete descriptions; for example "<code>video/mpeg</code>" doesn't say anything except what the container type is, and even a
  type like "<code>video/mp4; codecs="avc1.42E01E, mp4a.40.2"</code>" doesn't
  include information like the actual bitrate (only the maximum bitrate). Thus, given a type, a user
  agent can often only know whether it <em>might</em> be able to play media of that type (with
  varying levels of confidence), or whether it definitely <em>cannot</em> play media of that
  type.

  <dfn>A type that the user agent knows it cannot render</dfn> is one that describes a resource
  that the user agent definitely does not support, for example because it doesn't recognize the
  container type, or it doesn't support the listed codecs.

  The <a>MIME type</a> "<code>application/octet-stream</code>" with no parameters is never
  <a>a type that the user agent knows it cannot render</a>. User agents must treat that type
  as equivalent to the lack of any explicit <a>Content-Type metadata</a>
  when it is used to label a potential <a>media resource</a>.

  <p class="note">
    Only the <a>MIME type</a> "<code>application/octet-stream</code>" with no
  parameters is special-cased here; if any parameter appears with it, it will be treated just like
  any other <a>MIME type</a>. This is a deviation from the rule  that unknown <a>MIME type</a> parameters should be ignored.
  </p>

  <dl class="domintro">

    <dt><var>media</var> . <code>canPlayType</code>(<var>type</var>)</dt>

    <dd>

    Returns the empty string (a negative response), "maybe", or "probably" based on how confident
    the user agent is that it can play media resources of the given type.

    </dd>

  </dl>

  <div class="impl">

  The <dfn method for="HTMLMediaElement"><code>canPlayType(<var>type</var>)</code></dfn> method must return <dfn>the
  empty string</dfn> if <var>type</var> is <a>a type that the user agent knows it cannot
  render</a> or is the type "<code>application/octet-stream</code>"; it must return "<dfn><code>probably</code></dfn>" if the user agent is confident
  that the type represents a <a>media resource</a> that it can render if used in with this
  <code>audio</code> or <{video}> element; and it must return "<dfn><code>maybe</code></dfn>" otherwise. Implementors are encouraged
  to return "<code>maybe</code>" unless the type can be
  confidently established as being supported or not. Generally, a user agent should never return
  "<code>probably</code>" for a type that allows the <code>codecs</code> parameter if that parameter is not present.

  </div>

  <div class="example">
    This script tests to see if the user agent supports a (fictional) new format to dynamically
    decide whether to use a <{video}> element or a plugin:

    <pre highlight="html">
&lt;section id="video"&gt;
  &lt;p&gt;&lt;a href="playing-cats.nfv"&gt;Download video&lt;/a&gt;&lt;/p&gt;
&lt;/section&gt;
&lt;script&gt;
  var videoSection = document.getElementById('video');
  var videoElement = document.createElement('video');
  var support = videoElement.canPlayType('video/x-new-fictional-format;codecs="kittens,bunnies"');
  if (support != "probably" &amp;&amp; "New Fictional Video Plugin" in navigator.plugins) {
    // not confident of browser support
    // but we have a plugin
    // so use plugin instead
    videoElement = document.createElement("embed");
  } else if (support == "") {
    // no support from browser and no plugin
    // do nothing
    videoElement = null;
  }
  if (videoElement) {
    while (videoSection.hasChildNodes())
      videoSection.removeChild(videoSection.firstChild);
    videoElement.setAttribute("src", "playing-cats.nfv");
    videoSection.appendChild(videoElement);
  }
&lt;/script&gt;
    </pre>

  </div>

  <p class="note">
    The <code>type</code> attribute of the
  <{source}> element allows the user agent to avoid downloading resources that use formats
  it cannot render.
  </p>

<h5 id="network-states">Network states</h5>

  <dl class="domintro">

    <dt><var>media</var> . <code>networkState</code></dt>

    <dd>

    Returns the current state of network activity for the element, from the codes in the list
    below.

    </dd>

  </dl>

  <div class="impl">

  As <a>media elements</a> interact with the network, their current
  network activity is represented by the <dfn><code>networkState</code></dfn> attribute. On getting, it must
  return the current network state of the element, which must be one of the following values:

  </div>

  <dl>

    <dt><dfn const for="HTMLMediaElement"><code>NETWORK_EMPTY</code></dfn> (numeric value 0)</dt>

    <dd>The element has not yet been initialized. All attributes are in their initial states.</dd>

    <dt><dfn const for="HTMLMediaElement"><code>NETWORK_IDLE</code></dfn> (numeric value 1)</dt>

    <dd>The element<span class="impl">'s <a>resource
    selection algorithm</a> is active and</span> has selected a <a for="http">resource</a>, but it is not actually using the network at this time.</dd>

    <dt><dfn const for="HTMLMediaElement"><code>NETWORK_LOADING</code></dfn> (numeric value 2)</dt>

    <dd>The user agent is actively trying to download data.</dd>

    <dt><dfn const for="HTMLMediaElement"><code>NETWORK_NO_SOURCE</code></dfn> (numeric value 3)</dt>

    <dd>The element<span class="impl">'s <a>resource
    selection algorithm</a> is active, but it</span> has not yet found a <a for="http">resource</a> to use.</dd>

  </dl>

  <div class="impl">

  The <a>resource selection algorithm</a> defined
  below describes exactly when the <code>networkState</code>
  attribute changes value and what events fire to indicate changes in this state.

  </div>

<h5 id="loading-the-media-resource">Loading the media resource</h5>

  <dl class="domintro">

    <dt><var>media</var> . <code>load</code>()</dt>

    <dd>

    Causes the element to reset and start selecting and loading a new <a>media resource</a>
    from scratch.

    </dd>

  </dl>

  <div class="impl">

  All <a>media elements</a> have an <dfn>autoplaying flag</dfn>,
  which must begin in the true state, and a <dfn>delaying-the-load-event flag</dfn>, which must
  begin in the false state. While the <a>delaying-the-load-event flag</a> is true, the element
  must <a>delay the load event</a> of its document.

  When the <dfn method for="HTMLMediaElement"><code>load()</code></dfn> method on a <a>media element</a> is invoked, the user agent must run the <a>media element load
  algorithm</a>.

  The <dfn>media element load algorithm</dfn> consists of the following steps.

  <ol>

    <li>Abort any already-running instance of the <a>resource selection algorithm</a> for this
    element.</li>

    <li>

    If there are any <a>tasks</a> from the <a>media element</a>'s <a>media element event task source</a> in one of the <a>task queues</a>, then remove those tasks.

    <p class="note">
    Basically, pending events and callbacks for the media element are discarded when
    the media element starts loading a new resource.
  </p>

    </li>

    <li>If the <a>media element</a>'s <code>networkState</code> is set to <code>NETWORK_LOADING</code> or <code>NETWORK_IDLE</code>, <a>queue a task</a> to <a>fire a
    simple event</a> named <code>abort</code> at the <a>media element</a>.</li>

    <li>

    If the <a>media element</a>'s <code>networkState</code>
    is not set to <code>NETWORK_EMPTY</code>, then run these
    substeps:

    <ol>

      <li><a>Queue a task</a> to <a>fire a simple event</a> named <a event for="media">emptied</a> at the <a>media element</a>.</li>

      <li>If a fetching process is in progress for the <a>media element</a>, the user agent should stop it.</li>

      <li>If the <a>media element</a>'s <a>assigned media provider object</a>
        is a <code>MediaSource</code> object, then <a lt="detach from a media element">detach
        it</a>.

      <li><a>Forget the media element's media-resource-specific tracks</a>.</li>

      <li>If <code>readyState</code> is not set to <code>HAVE_NOTHING</code>, then set it to that state.

      </li>

      <li>If the <code>paused</code> attribute is false, then set it to
      true.</li>

      <li>If <code>seeking</code> is true, set it to false.</li>

      <li>

      Set the <a>current playback position</a> to 0.

      Set the <a>official playback position</a> to 0.

      If this changed the <a>official playback position</a>, then <a>queue a task</a>
      to <a>fire a simple event</a> named <code>timeupdate</code> at the <a>media element</a>.

      </li>

      <li>Set the <a>initial playback position</a> to 0.</li>

      <li>Set the <a>timeline offset</a> to Not-a-Number (NaN).</li>

      <li>

      Update the <code>duration</code> attribute to Not-a-Number
      (NaN).

      <p class="note">
    The user agent will not fire a <code>durationchange</code> event for this particular change of
      the duration.
  </p>

      </li>

    </ol>

    </li>

    <li>Set the <code>playbackRate</code> attribute to the value of
    the <code>defaultPlaybackRate</code> attribute.</li>

    <li>Set the <code>error</code> attribute to null and the
    <a>autoplaying flag</a> to true.</li>

    <li>Invoke the <a>media element</a>'s <a>resource selection algorithm</a>.</li>

    <li>

    <p class="note">
    Playback of any previously playing <a>media resource</a> for this element
    stops.

  </li>

  </ol>

  The <dfn>resource selection algorithm</dfn> for a
  <a>media element</a> is as follows. This algorithm is always invoked as part of a <a>task</a>, but one
  of the first steps in the algorithm is to return and continue running the remaining steps
  <a>in parallel</a>. In addition, this algorithm interacts
  closely with the <a>event loop</a> mechanism; in particular, it has <a>synchronous sections</a> (which are triggered as part of the <a>event loop</a>
  algorithm). Steps in such sections are marked with &#x231B;.

  <ol>

    <li>Set the element's <code>networkState</code> attribute to
    the <code>NETWORK_NO_SOURCE</code> value.</li>

    <li>Set the element's <a>show poster flag</a> to true.</li>

    <li>Set the <a>media element</a>'s <a>delaying-the-load-event flag</a> to true
    (this <a>delays the load event</a>).</li>

    <li><a>in parallel</a> <a>await a stable state</a>, allowing the <a>task</a> that invoked this algorithm to continue. The <a>synchronous
    section</a> consists of all the remaining steps of this algorithm until the algorithm says the
    <a>synchronous section</a> has ended. (Steps in <a>synchronous sections</a> are marked with &#x231B;.)</li>

    <li>

    &#x231B; If the <a>media element</a>'s <a>blocked-on-parser</a> flag is false,
    then <a>populate the list of pending text tracks</a>.

    </li>

    <li>

    &#x231B; If the <a>media element</a> has an <a>assigned media provider
    object</a>, then let <var>mode</var> be <i>object</i>.

    &#x231B; Otherwise, if the <a>media element</a> has no <a>assigned media provider
    object</a> but has a <code>src</code>
    attribute, then let <var>mode</var> be <i>attribute</i>.

    &#x231B; Otherwise, if the <a>media element</a> does not have an <a>assigned media provider
    object</a> and does not have a <code>src</code> attribute, but does have a <{source}> element child, then
    let <var>mode</var> be <i>children</i> and let <var>candidate</var>
    be the first such <{source}> element child in <a>tree order</a>.

    &#x231B; Otherwise the <a>media element</a> has no <a>assigned media provider
    object</a> and has neither a <code>src</code> attribute nor a <{source}> element child: set the
    <code>networkState</code> to <code>NETWORK_EMPTY</code>, and abort these steps; the
    <a>synchronous section</a> ends.

    </li>

    <li>&#x231B; Set the <a>media element</a>'s <code>networkState</code> to <code>NETWORK_LOADING</code>.</li>

    <li>&#x231B; <a>Queue a task</a> to <a>fire a simple event</a> named <code>loadstart</code> at the <a>media element</a>.</li>

    <li>

    Run the appropriate steps from the following list:

    <dl class="switch">

      <dt>If <var>mode</var> is <i>object</i></dt>

      <dd>

      <ol>

        <li>&#x231B; Set the <code>currentSrc</code> attribute to
        the empty string.</li>

        <li>End the <a>synchronous section</a>, continuing the remaining steps
        <a>in parallel</a>.</li>

        <li>Run the <a>resource fetch algorithm</a>
        with the <a>assigned media provider object</a>. If that algorithm returns without
        aborting <em>this</em> one, then the load failed.</li>

        <li><i>Failed with media provider</i>: Reaching this step indicates that the media
        resource failed to load. <a>Queue a task</a> to run the <a>dedicated media source
        failure steps</a>.</li>

        <li>Wait for the <a>task</a> queued by the previous step to have
        executed.</li>

        <li>Abort these steps. The element won't attempt to load another resource until this
        algorithm is triggered again.</li>

      </ol>

      </dd>

      <dt>If <var>mode</var> is <i>attribute</i></dt>

      <dd>

      <ol>

        <li>&#x231B; If the <code>src</code>
        attribute's value is the empty string, then end the <a>synchronous section</a>, and jump
        down to the <i>failed with attribute</i> step below.</li>

        <li>&#x231B; Let <var>absolute URL</var> be the <a>absolute URL</a> that
        would have resulted from <a>parsing</a> the <a for="url">URL</a>
        specified by the <code>src</code> attribute's value relative to the
        <a>media element</a> when the <code>src</code> attribute was last
      changed.

        </li><li>&#x231B; If <var>absolute URL</var> was obtained successfully, set the <code>currentSrc</code> attribute to <var>absolute
        URL</var>.</li>

        <li>End the <a>synchronous section</a>, continuing the remaining steps
        <a>in parallel</a>.</li>

        <li>If <var>absolute URL</var> was obtained successfully, run the <a>resource fetch algorithm</a> with <var>absolute
        URL</var>. If that algorithm returns without aborting <em>this</em> one, then the load
        failed.</li>

        <li><i>Failed with attribute</i>: Reaching this step indicates that the media resource
        failed to load or that the given <a for="url">URL</a> could not be <a>resolved</a>. <a>Queue a task</a> to run the <a>dedicated media source
        failure steps</a>.</li>

        <li>Wait for the <a>task</a> queued by the previous step to have
        executed.</li>

        <li>Abort these steps. The element won't attempt to load another resource until this
        algorithm is triggered again.</li>

      </ol>

      </dd>

      <dt>Otherwise (<var>mode</var> is <i>children</i>)</dt>

      <dd>

      <ol>

        <li>

        &#x231B; Let <var>pointer</var> be a position defined by two adjacent nodes in the
        <a>media element</a>'s child list, treating the start of the list (before the first
        child in the list, if any) and end of the list (after the last child in the list, if any) as
        nodes in their own right. One node is the node before <var>pointer</var>, and the
        other node is the node after <var>pointer</var>. Initially, let <var>pointer</var> be the position between the <var>candidate</var> node and the
        next node, if there are any, or the end of the list, if it is the last node.

        As <a for="Node" lt="insert">nodes are inserted</a> and <a for="Node" lt="remove">removed</a> into the <a>media element</a>, <var>pointer</var> must be updated as follows:

        <dl>

          <dt>If a new node is inserted between the two nodes that define <var>pointer</var></dt>

          <dd>Let <var>pointer</var> be the point between the node before <var>pointer</var> and the new node. In other words, insertions at <var>pointer</var> go after <var>pointer</var>.</dd>

          <dt>If the node before <var>pointer</var> is removed</dt>

          <dd>Let <var>pointer</var> be the point between the node after <var>pointer</var> and the node before the node after <var>pointer</var>. In
          other words, <var>pointer</var> doesn't move relative to the remaining nodes.</dd>

          <dt>If the node after <var>pointer</var> is removed</dt>

          <dd>Let <var>pointer</var> be the point between the node before <var>pointer</var> and the node after the node before <var>pointer</var>. Just
          as with the previous case, <var>pointer</var> doesn't move relative to the remaining
          nodes.</dd>

        </dl>

        Other changes don't affect <var>pointer</var>.

        </li>

        <li>&#x231B; <i>Process candidate</i>: If <var>candidate</var> does not have a
        <code>src</code> attribute, or if its <code>src</code> attribute's value is the empty string, then end the
        <a>synchronous section</a>, and jump down to the <i>failed with elements</i> step
        below.</li>

        <li>&#x231B; Let <var>absolute URL</var> be the <a>absolute URL</a> that
        would have resulted from <a>parsing</a> the <a for="url">URL</a>
      specified by <var>candidate</var>'s <code>src</code>
      attribute's value relative to the <var>candidate</var> when the <code>src</code> attribute was last changed.

        </li><li>&#x231B; If <var>absolute URL</var> was not obtained successfully, then end the
        <a>synchronous section</a>, and jump down to the <i>failed with elements</i> step
        below.</li>

        <li>&#x231B; If <var>candidate</var> has a <code>type</code> attribute whose value, when parsed as a <a>MIME
        type</a> (including any codecs described by the <code>codecs</code> parameter, for
        types that define that parameter), represents <a>a type that the user agent knows it cannot
        render</a>, then end the <a>synchronous section</a>, and jump down to the <i>failed with elements</i> step below.</li>

        <li>&#x231B; Set the <code>currentSrc</code> attribute to <var>absolute URL</var>.</li>

        <li>End the <a>synchronous section</a>, continuing the remaining steps
        <a>in parallel</a>.</li>

        <li>Run the <a>resource fetch algorithm</a> with
        <var>absolute URL</var>. If that algorithm returns without aborting <em>this</em> one,
        then the load failed.</li>

        <li><i>Failed with elements</i>: <a>Queue a task</a> to <a>fire a simple
        event</a> named <code>error</code> at the <var>candidate</var> element.</li>

        <li><a>Await a stable state</a>. The <a>synchronous section</a>
        consists of all the remaining steps of this algorithm until the algorithm says the
        <a>synchronous section</a> has ended. (Steps in <a>synchronous sections</a> are marked with &#x231B;.)</li>

        <li>&#x231B; <a>Forget the media element's media-resource-specific
        tracks</a>.</li>

        <li>&#x231B; <i>Find next candidate</i>: Let <var>candidate</var> be
        null.</li>

        <li>&#x231B; <i>Search loop</i>: If the node after <var>pointer</var> is
        the end of the list, then jump to the <i>waiting</i> step below.</li>

        <li>&#x231B; If the node after <var>pointer</var> is a <{source}> element,
        let <var>candidate</var> be that element.</li>

        <li>&#x231B; Advance <var>pointer</var> so that the node before <var>pointer</var> is now the node that was after <var>pointer</var>, and the node
        after <var>pointer</var> is the node after the node that used to be after <var>pointer</var>, if any.</li>

        <li>&#x231B; If <var>candidate</var> is null, jump back to the <i>search
        loop</i> step. Otherwise, jump back to the <i>process candidate</i> step.</li>

        <li>&#x231B; <i>Waiting</i>: Set the element's <code>networkState</code> attribute to the <code>NETWORK_NO_SOURCE</code> value.</li>

        <li>&#x231B; Set the element's <a>show poster flag</a> to true.</li>

        <li>&#x231B; <a>Queue a task</a> to set the element's <a>delaying-the-load-event
        flag</a> to false. This stops <a>delaying the load
        event</a>.</li>

        <li>End the <a>synchronous section</a>, continuing the remaining steps
        <a>in parallel</a>.</li>

        <li>Wait until the node after <var>pointer</var> is a node other than the end of
        the list. (This step might wait forever.)</li>

        <li><a>Await a stable state</a>. The <a>synchronous section</a>
        consists of all the remaining steps of this algorithm until the algorithm says the
        <a>synchronous section</a> has ended. (Steps in <a>synchronous sections</a> are marked with &#x231B;.)</li>

        <li>&#x231B; Set the element's <a>delaying-the-load-event flag</a> back to true (this
        <a>delays the load event</a> again, in case it hasn't been
        fired yet).

        </li><li>&#x231B; Set the <code>networkState</code> back to <code>NETWORK_LOADING</code>.</li>

        <li>&#x231B; Jump back to the <i>find next candidate</i> step above.</li>

      </ol>

      </dd>

    </dl>

    The <dfn>dedicated media source failure steps</dfn> are the following steps:

    <ol>

      <li>Set the <code>error</code> attribute to a new
      <code>MediaError</code> object whose <code>code</code> attribute
      is set to <code>MEDIA_ERR_SRC_NOT_SUPPORTED</code>.</li>

      <li><a>Forget the media element's media-resource-specific tracks</a>.</li>

      <li>Set the element's <code>networkState</code> attribute to
      the <code>NETWORK_NO_SOURCE</code> value.</li>

      <li>Set the element's <a>show poster flag</a> to true.</li>

      <li><a>Fire a simple event</a> named <code>error</code> at
      the <a>media element</a>.</li>

      <li>Set the element's <a>delaying-the-load-event flag</a> to false. This stops <a>delaying the load event</a>.</li>

    </ol>

    </li>

  </ol>

  The <dfn>resource fetch algorithm</dfn> for a <a>media element</a> and a given <a>absolute URL</a> or <a>media provider object</a> is as
  follows:

  <ol>

    <li>If the algorithm was invoked with a <a for="url">URL</a>, then let <var>mode</var> be
    <i>remote</i>, otherwise let <var>mode</var> be <i>local</i>.</li>

    <li>If <var>mode</var> is <i>remote</i>, then let the <var>current media resource</var> be the
    resource given by the <a>absolute URL</a> passed to this algorithm; otherwise, let the
    <var>current media resource</var> be the resource given by the <a>media provider
    object</a>. Either way, the <var>current media resource</var> is now the element's <a>media
    resource</a>.</li>

    <li>Remove all <a>media-resource-specific text
    tracks</a> from the <a>media element</a>'s <a>list of pending text tracks</a>, if
    any.

    </li><li>

    Run the appropriate steps from the following list:

    <dl class="switch">

      <dt>If <var>mode</var> is remote</dt>

      <dd>

      <ol>

        <li>

        Optionally, run the following substeps. This is the expected behavior if the user agent
        intends to not attempt to fetch the resource until the user requests it explicitly (e.g., as
        a way to implement the <code>preload</code> attribute's <code>none</code> keyword).

        <ol>

          <li>Set the <code>networkState</code> to <code>NETWORK_IDLE</code>.</li>

          <li><a>Queue a task</a> to <a>fire a simple event</a> named <code>suspend</code> at the element.</li>

          <li><a>Queue a task</a> to set the element's <a>delaying-the-load-event flag</a>
          to false. This stops <a>delaying the load
          event</a>.</li>

          <li>Wait for the task to be run.</li>

          <li>Wait for an implementation-defined event (e.g., the user requesting that the media
          element begin playback).</li>

          <li>Set the element's <a>delaying-the-load-event flag</a> back to true (this <a>delays the load event</a> again, in case it hasn't been fired
          yet).

          </li><li>Set the <code>networkState</code> to <code>NETWORK_LOADING</code>.</li>

        </ol>

        </li>

        <li>

        Let <var>request</var> be the result of <a>creating a potential-CORS request</a> given
        <var>current media resource</var>'s <a>absolute URL</a> and the <a>media element</a>'s <code>crossorigin</code> content attribute
        value.

        Set <var>request</var>'s <a>client</a> to the
        <a>media element</a>'s <a>node document</a>'s <code>Window</code> object's
        <a>environment settings object</a> and <a for="request">type</a>
        to "<code>audio</code>" if the <a>media element</a> is an <code>audio</code>
        element and to "<code>video</code>" otherwise.

        <a>Fetch</a> <var>request</var>.

        The <var>response</var>'s unsafe response obtained in this fashion, if any,
        contains the <a>media data</a>. It can be <a>CORS-same-origin</a> or
        <a>CORS-cross-origin</a>; this affects whether subtitles referenced in the <a>media
        data</a> are exposed in the API and, for <{video}> elements, whether a
        <code>canvas</code> gets tainted when the video is drawn on it.

        The <dfn>stall timeout</dfn> is a user-agent defined length of time, which should be about
        three seconds. When a <a>media element</a> that is actively attempting to obtain
        <a>media data</a> has failed to receive any data for a duration equal to the <a>stall
        timeout</a>, the user agent must <a>queue a task</a> to <a>fire a simple
        event</a> named <code>stalled</code> at the element.

        User agents may allow users to selectively block or slow <a>media data</a> downloads.
        When a <a>media element</a>'s download has been blocked altogether, the user agent must
        act as if it was stalled (as opposed to acting as if the connection was closed). The rate of the
        download may also be throttled automatically by the user agent, e.g., to balance the download
        with other connections sharing the same bandwidth.

        <dfn lt="the rules described previously"></dfn>User agents may decide to not download more content at any time, e.g.,
        after buffering five minutes of a one hour media resource, while waiting for the user to decide
        whether to play the resource or not, while waiting for user input in an interactive resource, or
        when the user navigates away from the page. When a <a>media element</a>'s download has
        been suspended, the user agent must <a>queue a task</a>, to set the <code>networkState</code> to <code>NETWORK_IDLE</code> and <a>fire a simple event</a> named
        <code>suspend</code> at the element. If and when downloading of the
        resource resumes, the user agent must <a>queue a task</a> to set the <code>networkState</code> to <code>NETWORK_LOADING</code>. Between the queuing of these tasks,
        the load is suspended (so <code>progress</code> events don't fire,
        as described above).

        <p class="note">
        The <code>preload</code> attribute provides a hint
        regarding how much buffering the author thinks is advisable, even in the absence of the <code>autoplay</code> attribute.
        </p>

        When a user agent decides to completely suspend a download, e.g., if it is waiting until
        the user starts playback before downloading any further content, the user agent must
        <a>queue a task</a> to set the element's <a>delaying-the-load-event flag</a> to
        false. This stops <a>delaying the load event</a>.

        The user agent may use whatever means necessary to fetch the resource (within the constraints
        put forward by this and other specifications); for example, reconnecting to the server in the
        face of network errors, using HTTP range retrieval requests, or switching to a streaming
        protocol. The user agent must consider a resource erroneous only if it has given up trying to
        fetch it.

        To determine the format of the <a>media resource</a>, the user agent must use the
        <a>rules for sniffing audio and video specifically</a>.

        While the load is not suspended (see below), every 350ms (±200ms) or for every byte
        received, whichever is <em>least</em> frequent, <a>queue a task</a> to <a>fire a simple
        event</a> named <code>progress</code> at the element.

        The <a>networking task source</a> <a>tasks</a> to
        process the data as it is being fetched must each <a>immediately</a> <a>queue a task</a> to
        run the first appropriate steps from the <a>media data processing steps list</a>
        below. (A new task is used for this so that the work described below occurs relative to the
        <a>media element event task source</a> rather than the <a>networking task
        source</a>.)

        When the <a>networking task source</a> has <a>queued</a> the last <a>task</a> as part of fetching the
        <a>media resource</a> (i.e., once the download has completed), if the fetching process
        completes without errors, including decoding the media data, and if all of the data is available
        to the user agent without network access, then, the user agent must move on to the <i>final step</i> below.
        This might never happen, e.g., when streaming an infinite resource such as Web radio, or if the
        resource is longer than the user agent's ability to cache data.

        While the user agent might still need network access to obtain parts of the <a>media
        resource</a>, the user agent must remain on this step.

        <p class="example">For example, if the user agent has discarded the first half of a video, the
        user agent will remain at this step even once the <a>playback has
        ended</a>, because there is always the chance the user will seek back to the start. In fact,
        in this situation, once <a>playback has ended</a>, the user agent
        will end up firing a <code>suspend</code> event, as described
        earlier.</p>

        </li>

      </ol>

      </dd>

      <dt>Otherwise (<var>mode</var> is <i>local</i>)</dt>

      <dd>

      The resource described by the <var>current media resource</var>, if any, contains the
      <a>media data</a>. It is <a>CORS-same-origin</a>.

      If the <var>current media resource</var> is a raw data stream (e.g., from a
      <code>File</code> object), then to determine the format of the <a>media resource</a>,
      the user agent must use the <a>rules for sniffing audio and video specifically</a>.
      Otherwise, if the data stream is pre-decoded, then the format is the format given by the
      relevant specification.

      Whenever new data for the <var>current media resource</var> becomes available, <a>queue
      a task</a> to run the first appropriate steps from the <a>media data processing steps
      list</a> below.

      When the <var>current media resource</var> is permanently exhausted (e.g., all the bytes of
      a <code>Blob</code> have been processed), if there were no decoding errors, then the user
      agent must move on to the <i>final step</i> below. This might never happen, e.g., if the
      <var>current media resource</var> is a <code>MediaStream</code>.

      </dd>

    </dl>

    The <dfn>media data processing steps list</dfn> is as follows:

    <dl class="switch">

      <dt>If the <a>media data</a> cannot be fetched at all, due to network errors, causing the
      user agent to give up trying to fetch the resource</dt>

      <dt>If the <a>media data</a> can be fetched but is found by inspection to be in an
      unsupported format, or can otherwise not be rendered at all</dt>

      <dd>

      DNS errors, HTTP 4xx and 5xx errors (and equivalents in other protocols), and other fatal
      network errors that occur before the user agent has established whether the <var>current media resource</var> is usable, as well as the file using an unsupported
      container format, or using unsupported codecs for all the data, must cause the user agent to
      execute the following steps:

      <ol>

        <li>The user agent should cancel the fetching process.</li>

        <li>Abort this subalgorithm, returning to the <a>resource selection algorithm</a>.

      </li></ol>

      </dd>

      <dt id="found-another-audio-track">If the <a>media resource</a> is found to have an audio
      track</dt>

      <dd>

      <ol>

        <li>Create an <code>AudioTrack</code> object to represent the audio track.</li>

        <li>Update the <a>media element</a>'s <code>audioTracks</code> attribute's <code>AudioTrackList</code>
        object with the new <code>AudioTrack</code> object.</li>

        <li>Let <var>enable</var> be <i>unknown</i>.</li>

        <li>

        If either the <a>media resource</a> or the address of the <var>current
        media resource</var> indicate a particular set of audio tracks to enable, or if the user
        agent has information that would facilitate the selection of specific audio tracks to
        improve the user's experience, then: if this audio track is one of the ones to enable, then
        set <var>enable</var> to <i>true</i>, otherwise, set <var>enable</var>
        to <i>false</i>.

        <p class="example">This could be triggered by <cite>Media Fragments URI</cite> fragment
        identifier syntax, but it could also be triggered e.g., by the user agent selecting a 5.1
        surround sound audio track over a stereo audio track. [[!MEDIA-FRAGS]]</p>

        </li>

        <li>If <var>enable</var> is still <i>unknown</i>, then, if the <a>media element</a> does not yet have an enabled
        audio track, then set <var>enable</var> to <i>true</i>, otherwise, set <var>enable</var> to <i>false</i>.</li>

        <li>If <var>enable</var> is <i>true</i>, then enable this audio track,
        otherwise, do not enable this audio track.</li>

        <li><a>Fire</a> a <a>trusted</a> event with the name <code>addtrack</code>, that does not bubble and is not cancelable,
        and that uses the {{TrackEvent}} interface, with the <code>track</code> attribute initialized to the new
        <code>AudioTrack</code> object, at this <code>AudioTrackList</code> object.</li>

      </ol>

      </dd>

      <dt id="found-another-video-track">If the <a>media resource</a> is found to have a video
      track</dt>

      <dd>

      <ol>

        <li>Create a {{VideoTrack}} object to represent the video track.</li>

        <li>Update the <a>media element</a>'s <code>videoTracks</code> attribute's <code>VideoTrackList</code>
        object with the new <code>VideoTrack</code> object.</li>

        <li>Let <var>enable</var> be <i>unknown</i>.</li>

        <li>

        If either the <a>media resource</a> or the address of the <var>current
        media resource</var> indicate a particular set of video tracks to enable, or if the user
        agent has information that would facilitate the selection of specific video tracks to
        improve the user's experience, then: if this video track is the first such video track, then
        set <var>enable</var> to <i>true</i>, otherwise, set <var>enable</var>
        to <i>false</i>.

        <p class="example">This could again be triggered by <cite>Media Fragments URI</cite>
        fragment identifier syntax.</p>

        </li>

        <li>If <var>enable</var> is still <i>unknown</i>, then, if the <a>media element</a> does not yet have a <a>selected</a>
        video track, then set <var>enable</var> to <i>true</i>, otherwise, set <var>enable</var> to <i>false</i>.</li>

        <li>If <var>enable</var> is <i>true</i>, then select this track and unselect any
        previously selected video tracks, otherwise, do not select this video track. If other tracks
        are unselected, then a <code>change</code> event will be <a>fired</a>.</li>

        <li><a>Fire</a> a <a>trusted</a> event with the name <code>addtrack</code>, that does not bubble and is not cancelable,
        and that uses the {{TrackEvent}} interface, with the <code>track</code> attribute initialized to the new
        <code>VideoTrack</code> object, at this {{VideoTrackList}} object.</li>

      </ol>

      </dd>

      <dt id="getting-media-metadata">Once enough of the <a>media data</a> has been fetched to
      determine the duration of the <a>media resource</a>, its dimensions, and other
      metadata</dt>

      <dd>

      This indicates that the resource is usable. The user agent must follow these substeps:

      <ol>

        <li>

        <a>Establish the media timeline</a> for the purposes of the <a>current playback
        position</a> and the <a>earliest possible position</a>, based on the <a>media data</a>.

        </li>

        <li>

        Update the <a>timeline offset</a> to the date and time that corresponds to the zero
        time in the <a>media timeline</a> established in the previous step, if any. If no
        explicit time and date is given by the <a>media resource</a>, the <a>timeline
        offset</a> must be set to Not-a-Number (NaN).

        </li>

        <li>Set the <a>current playback position</a> and the <a>official playback
        position</a> to the <a>earliest possible position</a>.</li>

        <li>

        Update the <code>duration</code> attribute with the time of
        the last frame of the resource, if known, on the <a>media timeline</a> established
        above. If it is not known (e.g., a stream that is in principle infinite), update the <code>duration</code> attribute to the value positive Infinity.

        <p class="note">
    The user agent will <a>queue a task</a>
        to <a>fire a simple event</a> named <code>durationchange</code> at the element at this point.
  </p>

        </li>

        <li>

        For <{video}> elements, set the <code>videoWidth</code> and <code>videoHeight</code> attributes, and <a>queue a task</a>
        to <a>fire a simple event</a> named <code>resize</code> at
        the <a>media element</a>.

        <p class="note">
    Further <code>resize</code> events will be fired
        if the dimensions subsequently change.
  </p>

        </li>

        <li>

        Set the <code>readyState</code> attribute to <code>HAVE_METADATA</code>.

        <p class="note">
    A <code>loadedmetadata</code> DOM event
        will be <a>fired</a> as part of setting the <code>readyState</code> attribute to a new value.
  </p>

        </li>

        <li>Let <var>jumped</var> be false.</li>

        <li>If the <a>media element</a>'s <a>default playback start position</a> is
        greater than zero, then <a>seek</a> to that time, and let <var>jumped</var> be true.</li>

        <li>Let the <a>media element</a>'s <a>default playback
        start position</a> be zero.</li>

        <li>Let the <var>initial playback position</var> be zero.</li>

        <li>

        If either the <a>media resource</a> or the address of the <var>current
        media resource</var> indicate a particular start time, then set the <var>initial playback
        position</var> to that time and, if <var>jumped</var> is still false, <a>seek</a> to that time and let <var>jumped</var> be
        true.

        <p class="example">For example, with media formats that support the <cite>Media Fragments
        URI</cite> fragment identifier syntax, the fragment identifier can be used to indicate a
        start position. [[!MEDIA-FRAGS]]</p>

        </li>

        <li>If there is no enabled audio track, then
        enable an audio track. This will cause a <code>change</code> event to be <a>fired</a>.</li>

        <li>If there is no <a>selected</a> video track,
        then select a video track. This will cause a <code>change</code> event to be <a>fired</a>.</li>

      </ol>

      Once the <code>readyState</code> attribute reaches <code>HAVE_CURRENT_DATA</code>, after
      the <code>loadeddata</code> event has been <a>fired</a>, set the
      element's <a>delaying-the-load-event flag</a> to false. This stops <a>delaying the load event</a>.

      <p class="note">
    A user agent that is attempting to reduce network usage while still fetching
      the metadata for each <a>media resource</a> would also stop buffering at this point,
      following <a>the rules described previously</a>, which involve the
      <code>networkState</code> attribute switching to the <code>NETWORK_IDLE</code> value and a <code>suspend</code> event firing.
  </p>

      <p class="note">
    The user agent is <em>required</em> to determine the duration of the
      <a>media resource</a> and go through this step before playing.
  </p>

      </dd>

      <dt>Once the entire <a>media resource</a> has been fetched (but potentially before any of
      it has been decoded)</dt>

      <dd>

      <a>Fire a simple event</a> named <code>progress</code>
      at the <a>media element</a>.

      Set the <code>networkState</code> to <code>NETWORK_IDLE</code> and <a>fire a simple event</a> named
      <code>suspend</code> at the <a>media element</a>.

      If the user agent ever discards any <a>media data</a> and then needs to resume the
      network activity to obtain it again, then it must <a>queue a task</a> to set the <code>networkState</code> to <code>NETWORK_LOADING</code>.

      <p class="note">
    If the user agent can keep the <a>media resource</a> loaded, then the
      algorithm will continue to its <i>final step</i> below, which aborts the algorithm.
  </p>

      </dd>

      <dt>If the connection is interrupted after some <a>media data</a> has been received,
      causing the user agent to give up trying to fetch the resource</dt>

      <dd>

      Fatal network errors that occur after the user agent has established whether the <var>current media resource</var> is usable (i.e., once the <a>media element</a>'s
      <code>readyState</code> attribute is no longer <code>HAVE_NOTHING</code>) must cause the user agent to execute the
      following steps:

      <ol>

        <li>The user agent should cancel the fetching process.</li>

        <li>Set the <code>error</code> attribute to a new
        <code>MediaError</code> object whose <code>code</code> attribute
        is set to <code>MEDIA_ERR_NETWORK</code>.</li>

        <li>Set the element's <code>networkState</code> attribute
        to the <code>NETWORK_IDLE</code> value.</li>

        <li>Set the element's <a>delaying-the-load-event flag</a> to false. This stops <a>delaying the load event</a>.</li>

        <li><a>Fire a simple event</a> named <code>error</code> at
        the <a>media element</a>.</li>

        <li>Abort the overall <a>resource selection
        algorithm</a>.</li>

      </ol>

      </dd>

      <dt id="fatal-decode-error">If the <a>media data</a> is corrupted</dt>

      <dd>

      Fatal errors in decoding the <a>media data</a> that occur after the user agent has
      established whether the <var>current media resource</var> is usable (i.e., once the <a>media element</a>'s
      <code>readyState</code> attribute is no longer <code>HAVE_NOTHING</code>) must cause the
      user agent to execute the following steps:

      <ol>

        <li>The user agent should cancel the fetching process.</li>

        <li>Set the <code>error</code> attribute to a new
        <code>MediaError</code> object whose <code>code</code> attribute
        is set to <code>MEDIA_ERR_DECODE</code>.</li>

        <li>Set the element's <code>networkState</code> attribute
        to the <code>NETWORK_IDLE</code> value.</li>

        <li>Set the element's <a>delaying-the-load-event flag</a> to false. This stops <a>delaying the load event</a>.</li>

        <li><a>Fire a simple event</a> named <code>error</code> at
        the <a>media element</a>.</li>

        <li>Abort the overall <a>resource selection
        algorithm</a>.</li>

      </ol>

      </dd>

      <dt>If the <a>media data</a> fetching process is aborted by the user</dt>

      <dd>

      The fetching process is aborted by the user, e.g., because the user
      pressed a "stop" button, the user agent must execute the following steps. These steps are not
      followed if the <code>load()</code> method itself is invoked while
      these steps are running, as the steps above handle that particular kind of abort.

      <ol>

        <li>The user agent should cancel the fetching process.</li>

        <li>Set the <code>error</code> attribute to a new
        <code>MediaError</code> object whose <code>code</code> attribute
        is set to <code>MEDIA_ERR_ABORTED</code>.</li>

        <li><a>Fire a simple event</a> named <code>abort</code> at
        the <a>media element</a>.</li>

        <li>

        If the <a>media element</a>'s <code>readyState</code>
        attribute has a value equal to <code>HAVE_NOTHING</code>, set
        the element's <code>networkState</code> attribute to the
        <code>NETWORK_EMPTY</code> value, set the element's
        <a>show poster flag</a> to true, and <a>fire a simple event</a> named <a event for="media">emptied</a> at the element.

        Otherwise, set the element's <code>networkState</code>
        attribute to the <code>NETWORK_IDLE</code> value.

        </li>

        <li>Set the element's <a>delaying-the-load-event flag</a> to false. This stops <a>delaying the load event</a>.</li>

        <li>Abort the overall <a>resource selection
        algorithm</a>.</li>

      </ol>

      </dd>

      <dt id="non-fatal-media-error">If the <a>media data</a> can be fetched but has non-fatal
      errors or uses, in part, codecs that are unsupported, preventing the user agent from rendering
      the content completely correctly but not preventing playback altogether</dt>

      <dd>

      The server returning data that is partially usable but cannot be optimally rendered must
      cause the user agent to render just the bits it can handle, and ignore the rest.

      </dd>

      <dt id="found-a-media-resource-specific-timed-track"><dfn lt="runs"></dfn>If the <a>media resource</a> is
      found to declare a <a>media-resource-specific text track</a> that the user agent
      supports</dt>

      <dd>

      If the <a>media data</a> is <a>CORS-same-origin</a>, run the <a>steps to
      expose a media-resource-specific text track</a> with the relevant data.

      <p class="note">
    Cross-origin videos do not expose their subtitles, since that would allow
      attacks such as hostile sites reading subtitles from confidential videos on a user's
      intranet.
  </p>

      </dd>

    </dl>

    </li>

    <li><i>Final step:</i> If the user agent ever reaches this step (which can only happen if the entire resource
    gets loaded and kept available): abort the overall <a>resource selection algorithm</a>.</li>

  </ol>

  When a <a>media element</a> is to <dfn>forget the media element's media-resource-specific
  tracks</dfn>, the user agent must remove from the <a>media element</a>'s <a>list of text
  tracks</a> all the <a>media-resource-specific
  text tracks</a>, then empty the <a>media element</a>'s <code>audioTracks</code> attribute's <code>AudioTrackList</code> object,
  then empty the <a>media element</a>'s <code>videoTracks</code>
  attribute's {{VideoTrackList}} object. No events (in particular, no <code>removetrack</code>
  events) are fired as part of this; the <code>error</code> and <a event for="media">emptied</a>
  events, fired by the algorithms that invoke this one, can be used instead.

  </div>

  <hr />

  The <dfn element-attr for="media"><code>preload</code></dfn> attribute is an <a>enumerated
  attribute</a>. The following table lists the keywords and states for the attribute — the
  keywords in the left column map to the states in the cell in the second column on the same row as
  the keyword. The attribute can be changed even once the <a>media resource</a> is being
  buffered or played; the descriptions in the table below are to be interpreted with that in
  mind.

  <table>
    <thead>
    <tr>
      <th> Keyword
      </th><th> State
      </th><th> Brief description
    </th></tr></thead><tbody>
    <tr>
      <td><dfn value for="HTMLMediaElement/preload"><code>none</code></dfn>
      </td><td><dfn state for="media">None</dfn>
      </td><td>Hints to the user agent that either the author does not expect the user to need the media resource, or that the server wants to minimize unnecessary traffic.
          This state does not provide a hint regarding how aggressively to actually download the media resource if buffering starts anyway (e.g., once the user hits "play").
    </td></tr><tr>
      <td><dfn value for="HTMLMediaElement/preload"><code>metadata</code></dfn>
      </td><td><dfn state for="media">Metadata</dfn>
      </td><td>Hints to the user agent that the author does not expect the user to need the media resource, but that fetching the resource metadata (dimensions, track list, duration, etc), and maybe even the first few frames, is reasonable. If the user agent precisely fetches no more than the metadata, then the <a>media element</a> will end up with its <code>readyState</code> attribute set to <code>HAVE_METADATA</code>; typically though, some frames will be obtained as well and it will probably be <code>HAVE_CURRENT_DATA</code> or <code>HAVE_FUTURE_DATA</code>.
          When the media resource is playing, hints to the user agent that bandwidth is to be considered scarce, e.g., suggesting throttling the download so that the media data is obtained at the slowest possible rate that still maintains consistent playback.
    </td></tr><tr>
      <td><dfn value for="HTMLMediaElement/preload"><code>auto</code></dfn>
      </td><td><dfn state for="media">Automatic</dfn>
      </td><td>Hints to the user agent that the user agent can put the user's needs first without risk to the server, up to and including optimistically downloading the entire resource.
  </td></tr></tbody></table>

  The empty string is also a valid keyword, and maps to the <a state for="media">Automatic</a> state. The attribute's <i>missing value default</i> is user-agent defined, though the <a>Metadata</a> state is suggested as a compromise
  between reducing server load and providing an optimal user experience.

  <p class="note">
    Authors might switch the attribute from "<code>none</code>" or "<code>metadata</code>" to "<code>auto</code>" dynamically once the user begins playback. For
  example, on a page with many videos this might be used to indicate that the many videos are not to
  be downloaded unless requested, but that once one <em>is</em> requested it is to be downloaded
  aggressively.
  </p>

  <div class="impl">

  The <code>preload</code> attribute is intended to provide a hint to
  the user agent about what the author thinks will lead to the best user experience. The attribute
  may be ignored altogether, for example based on explicit user preferences or based on the
  available connectivity.

  The <dfn attribute for="HTMLMediaElement"><code>preload</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name, <a>limited to only known
  values</a>.

  </div>

  <p class="note">
    The <code>autoplay</code> attribute can override the
  <code>preload</code> attribute (since if the media plays, it naturally
  has to buffer first, regardless of the hint given by the <code>preload</code> attribute). Including both is not an error, however.
  </p>

  <hr />

  <dl class="domintro">

    <dt><var>media</var> . <code>buffered</code></dt>

    <dd>

    Returns a <code>TimeRanges</code> object that represents the ranges of the <a>media
    resource</a> that the user agent has buffered.

    </dd>

  </dl>

  <div class="impl">

  The <dfn attribute for="HTMLMediaElement"><code>buffered</code></dfn> attribute must return a new
  static <a>normalized <code>TimeRanges</code> object</a> that represents the ranges of the
  <a>media resource</a>, if any, that the user agent has buffered, at the time the attribute
  is evaluated. Users agents must accurately determine the ranges available, even for media streams
  where this can only be determined by tedious inspection.

  <p class="note">
    Typically this will be a single range anchored at the zero point, but if, e.g., the
  user agent uses HTTP range requests in response to seeking, then there could be multiple
  ranges.
  </p>

  User agents may discard previously buffered data.

  <p class="note">
    Thus, a time position included within a range of the objects return by the <code>buffered</code> attribute at one time can end up being not included in
  the range(s) of objects returned by the same attribute at later times.
  </p>

  </div>

<h5 id="offsets-into-the-media-resource">Offsets into the media resource</h5>

  <dl class="domintro">

    <dt><var>media</var> . <code>duration</code></dt>

    <dd>

    Returns the length of the <a>media resource</a>, in seconds, assuming that the start of
    the <a>media resource</a> is at time zero.

    Returns NaN if the duration isn't available.

    Returns Infinity for unbounded streams.

    </dd>

    <dt><var>media</var> . <code>currentTime</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the <a>official playback position</a>, in seconds.

    Can be set, to seek to the given time.

    </dd>

  </dl>

  <div class="impl">

  A <a>media resource</a> has a <dfn>media timeline</dfn> that maps times (in seconds) to
  positions in the <a>media resource</a>. The origin of a timeline is its earliest defined
  position. The duration of a timeline is its last defined position.

  <dfn lt="establish the media timeline|establishing the media timeline">Establishing the media timeline</dfn>: If the <a>media resource</a> somehow specifies an explicit timeline whose
  origin is not negative (i.e., gives each frame a specific time offset and gives the first frame a
  zero or positive offset), then the <a>media timeline</a> should be that timeline. (Whether
  the <a>media resource</a> can specify a timeline or not depends on the <a>media resource's</a> format.) If the <a>media resource</a> specifies an
  explicit start time <em>and date</em>, then that time and date should be considered the zero point
  in the <a>media timeline</a>; the <a>timeline offset</a> will be the time and date,
  exposed using the <code>getStartDate()</code> method.

  If the <a>media resource</a> has a discontinuous timeline, the user agent must extend the
  timeline used at the start of the resource across the entire resource, so that the <a>media
  timeline</a> of the <a>media resource</a> increases linearly starting from the
  <a>earliest possible position</a> (as defined below), even if the underlying <a>media
  data</a> has out-of-order or even overlapping time codes.

  <p class="example">For example, if two clips have been concatenated into one video file, but the
  video format exposes the original times for the two clips, the video data might expose a timeline
  that goes, say, 00:15..00:29 and then 00:05..00:38. However, the user agent would not expose those
  times; it would instead expose the times as 00:15..00:29 and 00:29..01:02, as a single video.</p>

  In the rare case of a <a>media resource</a> that does not have an explicit timeline, the
  zero time on the <a>media timeline</a> should correspond to the first frame of the
  <a>media resource</a>. In the even rarer case of a <a>media resource</a> with no
  explicit timings of any kind, not even frame durations, the user agent must itself determine the
  time for each frame in a user-agent-defined manner.
  <a class="fingerprint" href="#fingerprinting-vector"><img height="21" src="images/fingerprint.png" width="15" alt="(This is a fingerprinting vector.)" /></a>

  <p class="note">
    An example of a file format with no explicit timeline but with explicit frame
  durations is the Animated GIF format. An example of a file format with no explicit timings at all
  is the JPEG-push format (<code>multipart/x-mixed-replace</code> with JPEG frames, often
  used as the format for MJPEG streams).
  </p>

  If, in the case of a resource with no timing information, the user agent will nonetheless be
  able to seek to an earlier point than the first frame originally provided by the server, then the
  zero time should correspond to the earliest seekable time of the <a>media resource</a>;
  otherwise, it should correspond to the first frame received from the server (the point in the
  <a>media resource</a> at which the user agent began receiving the stream).

  <p class="note">
    At the time of writing, there is no known format that lacks explicit frame time
  offsets yet still supports seeking to a frame before the first frame sent by the server.
  </p>

  <div class="example">
    Consider a stream from a TV broadcaster, which begins streaming on a sunny Friday afternoon in
    October, and always sends connecting user agents the media data on the same media timeline, with
    its zero time set to the start of this stream. Months later, user agents connecting to this
    stream will find that the first frame they receive has a time with millions of seconds. The
    <code>getStartDate()</code> method would always return the date that the
    broadcast started; this would allow controllers to display real times in their scrubber (e.g.,
    "2:30pm") rather than a time relative to when the broadcast began ("8 months, 4 hours, 12
    minutes, and 23 seconds").

    Consider a stream that carries a video with several concatenated fragments, broadcast by a
    server that does not allow user agents to request specific times but instead just streams the
    video data in a predetermined order, with the first frame delivered always being identified as
    the frame with time zero. If a user agent connects to this stream and receives fragments defined
    as covering timestamps 2010-03-20 23:15:00 UTC to 2010-03-21 00:05:00 UTC and 2010-02-12 14:25:00
    UTC to 2010-02-12 14:35:00 UTC, it would expose this with a <a>media timeline</a> starting
    at 0s and extending to 3,600s (one hour). Assuming the streaming server disconnected at the end
    of the second clip, the <code>duration</code> attribute would then
    return 3,600. The <code>getStartDate()</code> method would return a
    {{Date}} object with a time corresponding to 2010-03-20 23:15:00 UTC. However, if a
    different user agent connected five minutes later, <em>it</em> would (presumably) receive
    fragments covering timestamps 2010-03-20 23:20:00 UTC to 2010-03-21 00:05:00 UTC and 2010-02-12
    14:25:00 UTC to 2010-02-12 14:35:00 UTC, and would expose this with a <a>media timeline</a>
    starting at 0s and extending to 3,300s (fifty five minutes). In this case, the <code>getStartDate()</code> method would return a {{Date}} object
    with a time corresponding to 2010-03-20 23:20:00 UTC.

    In both of these examples, the <code>seekable</code> attribute
    would give the ranges that the controller would want to actually display in its UI; typically, if
    the servers don't support seeking to arbitrary times, this would be the range of time from the
    moment the user agent connected to the stream up to the latest frame that the user agent has
    obtained; however, if the user agent starts discarding earlier information, the actual range
    might be shorter.

  </div>

  In any case, the user agent must ensure that the <a>earliest possible position</a> (as
  defined below) using the established <a>media timeline</a>, is greater than or equal to
  zero.

  The <a>media timeline</a> also has an associated clock. Which clock is used is user-agent
  defined, and may be <a>media resource</a>-dependent, but it should approximate the user's
  wall clock.

  <a>Media elements</a> have a <dfn lt="current position|current playback position">current playback position</dfn>,
  which must initially (i.e., in the absence of <a>media data</a>) be zero seconds. The
  <a>current playback position</a> is a time on the <a>media timeline</a>.

  <a>Media elements</a> also have an <dfn>official playback
  position</dfn>, which must initially be set to zero seconds. The <a>official playback
  position</a> is an approximation of the <a>current playback position</a> that is kept
  stable while scripts are running.

  <a>Media elements</a> also have a <dfn>default playback start
  position</dfn>, which must initially be set to zero seconds. This time is used to allow the
  element to be seeked even before the media is loaded.

  Each <a>media element</a> has a <dfn>show poster flag</dfn>. When a <a>media element</a> is created, this flag must be set to true. This flag is used to control when the
  user agent is to show a poster frame for a <{video}> element instead of showing the video
  contents.

  The <dfn attribute for="HTMLMediaElement"><code>currentTime</code></dfn> attribute must, on
  getting, return the <a>media element</a>'s <a>default playback start position</a>,
  unless that is zero, in which case it must return the element's <a>official playback
  position</a>. The returned value must be expressed in seconds. On setting, if the
  <a>media element</a>'s <code>readyState</code> is <code>HAVE_NOTHING</code>,
  then it must set the <a>media element</a>'s <a>default playback start position</a> to the new value; otherwise, it must
  set the <a>official playback position</a> to the new value and then <a>seek</a> to the new value. The new value must be interpreted as being in
  seconds.

  <a>Media elements</a> have an <dfn>initial playback position</dfn>,
  which must initially (i.e., in the absence of <a>media data</a>) be zero seconds. The
  <a>initial playback position</a> is updated when a <a>media resource</a> is loaded.
  The <a>initial playback position</a> is a time on the <a>media timeline</a>.

  If the <a>media resource</a> is a streaming resource, then the user agent might be unable
  to obtain certain parts of the resource after it has expired from its buffer. Similarly, some
  <a>media resources</a> might have a <a>media timeline</a> that
  doesn't start at zero. The <dfn>earliest possible position</dfn> is the earliest position in the
  stream or resource that the user agent can ever obtain again. It is also a time on the <a>media
  timeline</a>.

  <p class="note">
    The <a>earliest possible position</a> is not explicitly exposed in the API;
  it corresponds to the start time of the first range in the <code>seekable</code> attribute's <code>TimeRanges</code> object, if any, or
  the <a>current playback position</a> otherwise.
  </p>

  When the <a>earliest possible position</a> changes, then: if the <a>current playback
  position</a> is before the <a>earliest possible position</a>, the user agent must <a>seek</a> to the <a>earliest possible position</a>; otherwise, if
  the user agent has not fired a <code>timeupdate</code> event at the
  element in the past 15 to 250ms and is not still running event handlers for such an event, then
  the user agent must <a>queue a task</a> to <a>fire a simple event</a> named <code>timeupdate</code> at the element.

  <p class="note">
    Because of the above requirement and the requirement in the <a>resource fetch algorithm</a> that kicks in <a href="#getting-media-metadata">when the metadata of the clip becomes known</a>, the <a>current
  playback position</a> can never be less than the <a>earliest possible position</a>.
  </p>

  If at any time the user agent learns that an audio or video track has ended and all <a>media
  data</a> relating to that track corresponds to parts of the <a>media timeline</a> that
  are <em>before</em> the <a>earliest possible position</a>, the user agent may <a>queue a
  task</a> to first remove the track from the <code>audioTracks</code>
  attribute's <code>AudioTrackList</code> object or the <code>videoTracks</code> attribute's {{VideoTrackList}} object as
  appropriate and then <a>fire</a> a <a>trusted</a> event with the name <code>removetrack</code>, that does not bubble and is not cancelable, and that
  uses the {{TrackEvent}} interface, with the <code>track</code> attribute initialized to the <code>AudioTrack</code> or
  <code>VideoTrack</code> object representing the track, at the <a>media element</a>'s
  aforementioned <code>AudioTrackList</code> or {{VideoTrackList}} object.

  The <dfn attribute for="HTMLMediaElement"><code>duration</code></dfn> attribute must return the time
  of the end of the <a>media resource</a>, in seconds, on the <a>media timeline</a>. If
  no <a>media data</a> is available, then the attributes must return the Not-a-Number (NaN)
  value. If the <a>media resource</a> is not known to be bounded (e.g., streaming radio, or a
  live event with no announced end time), then the attribute must return the positive Infinity
  value.

  The user agent must determine the duration of the <a>media resource</a> before playing
  any part of the <a>media data</a> and before setting <code>readyState</code> to a value equal to or greater than <code>HAVE_METADATA</code>, even if doing so requires fetching multiple
  parts of the resource.

  <p id='durationChange'>When the length of the <a>media resource</a> changes to a known value
  (e.g., from being unknown to known, or from a previously established length to a new length) the
  user agent must <a>queue a task</a> to <a>fire a simple event</a> named <a event for="media">durationchange</a> at the <a>media element</a>. (The
  event is not fired when the duration is reset as part of loading a new media resource.) If the
  duration is changed such that the <a>current playback position</a> ends up being greater
  than the time of the end of the <a>media resource</a>, then the user agent must also <a>seek</a> to the time of the end of the <a>media resource</a>.

  <p class="example">If an "infinite" stream ends for some reason, then the duration would change
  from positive Infinity to the time of the last frame or sample in the stream, and the <code>durationchange</code> event would be fired. Similarly, if the
  user agent initially estimated the <a>media resource</a>'s duration instead of determining
  it precisely, and later revises the estimate based on new information, then the duration would
  change and the <code>durationchange</code> event would be
  fired.</p>

  Some video files also have an explicit date and time corresponding to the zero time in the
  <a>media timeline</a>, known as the <dfn>timeline offset</dfn>. Initially, the
  <a>timeline offset</a> must be set to Not-a-Number (NaN).

  The <dfn method for="HTMLMediaElement"><code>getStartDate()</code></dfn> method must return <a>a new <code>Date</code> object</a> representing the current
  <a>timeline offset</a>.

  </div>

  <hr />

  The <dfn element-attr for="media"><code>loop</code></dfn> attribute is a <a>boolean
  attribute</a> that, if specified, indicates that the <a>media element</a> is to seek back
  to the start of the <a>media resource</a> upon reaching the end.

  The <dfn attribute for="HTMLMediaElement"><code>loop</code></dfn> IDL attribute must <a>reflect</a>
  the content attribute of the same name.

<h5 id="ready-states">Ready states</h5>

  <dl class="domintro">

    <dt><var>media</var> . <code>readyState</code></dt>

    <dd>

    Returns a value that expresses the current state of the element with respect to rendering the
    <a>current playback position</a>, from the codes in the list below.

    </dd>

  </dl>

  <div class="impl">

  <a>Media elements</a> have a <i>ready state</i>, which describes to
  what degree they are ready to be rendered at the <a>current playback position</a>. The
  possible values are as follows; the ready state of a media element at any particular time is the
  greatest value describing the state of the element:

  </div>

  <dl>

    <dt><dfn const for="HTMLMediaElement"><code>HAVE_NOTHING</code></dfn> (numeric value 0)</dt>

    <dd>No information regarding the <a>media resource</a> is available. No data for the
    <a>current playback position</a> is available. <a>Media elements</a> whose <code>networkState</code> attribute are set
    to <code>NETWORK_EMPTY</code> are always in the <code>HAVE_NOTHING</code> state.</dd>

    <dt><dfn const for="HTMLMediaElement"><code>HAVE_METADATA</code></dfn> (numeric value 1)</dt>

    <dd>Enough of the resource has been obtained that the duration of the resource is available.
    In the case of a <{video}> element, the dimensions of the video are also available. No
    <a>media data</a> is available for the immediate <a>current playback
    position</a>.</dd>

    <dt><dfn const for="HTMLMediaElement"><code>HAVE_CURRENT_DATA</code></dfn> (numeric value 2)</dt>

    <dd>Data for the immediate <a>current playback position</a> is available, but either not
    enough data is available that the user agent could successfully advance the <a>current
    playback position</a> in the <a>direction of playback</a> at all without immediately
    reverting to the <code>HAVE_METADATA</code> state, or there is no
    more data to obtain in the <a>direction of playback</a>. For example, in video this
    corresponds to the user agent having data from the current frame, but not the next frame, when
    the <a>current playback position</a> is at the end of the current frame; and to when <a>playback has ended</a>.</dd>

    <dt><dfn const for="HTMLMediaElement"><code>HAVE_FUTURE_DATA</code></dfn> (numeric value 3)</dt>

    <dd>Data for the immediate <a>current playback position</a> is available, as well as
    enough data for the user agent to advance the <a>current playback position</a> in the
    <a>direction of playback</a> at least a little without immediately reverting to the <code>HAVE_METADATA</code> state, and <a>the text tracks are
    ready</a>. For example, in video this corresponds to the user agent having data for at least
    the current frame and the next frame when the <a>current playback position</a> is at the
    instant in time between the two frames, or to the user agent having the video data for the
    current frame and audio data to keep playing at least a little when the <a>current playback
    position</a> is in the middle of a frame. The user agent cannot be in this state if <a>playback has ended</a>, as the <a>current playback position</a>
    can never advance in this case.</dd>

    <dt><dfn const for="HTMLMediaElement"><code>HAVE_ENOUGH_DATA</code></dfn> (numeric value 4)</dt>

    <dd>

    All the conditions described for the <code>HAVE_FUTURE_DATA</code> state are met, and, in addition,
    either of the following conditions is also true:

    <ul>

      <li>The user agent estimates that data is being fetched at a rate where the <a>current
      playback position</a>, if it were to advance at the <a>effective playback rate</a>,
      would not overtake the available data before playback reaches the end of the <a>media
      resource</a>.</li>

      <li>The user agent has entered a state where waiting longer will not result in further data
      being obtained, and therefore nothing would be gained by delaying playback any further. (For
      example, the buffer might be full.)</li>

    </ul>

    </dd>

  </dl>

  <p class="note">
    In practice, the difference between <code>HAVE_METADATA</code> and <code>HAVE_CURRENT_DATA</code> is negligible. Really the only time
  the difference is relevant is when painting a <{video}> element onto a
  <{canvas}>, where it distinguishes the case where something will be drawn (<code>HAVE_CURRENT_DATA</code> or greater) from the case where
  nothing is drawn (<code>HAVE_METADATA</code> or less). Similarly,
  the difference between <code>HAVE_CURRENT_DATA</code> (only
  the current frame) and <code>HAVE_FUTURE_DATA</code> (at least
  this frame and the next) can be negligible (in the extreme, only one frame). The only time that
  distinction really matters is when a page provides an interface for "frame-by-frame"
  navigation.
  </p>

  <div class="impl">

  When the ready state of a <a>media element</a> whose <code>networkState</code> is not <code>NETWORK_EMPTY</code> changes, the user agent must follow the steps
  given below:

  <ol>

    <li>

    Apply the first applicable set of substeps from the following list:

    <dl class="switch">

      <dt>If the previous ready state was <code>HAVE_NOTHING</code>,
      and the new ready state is <code>HAVE_METADATA</code></dt>

      <dd id="fire-loadedmetadata">

      <a>Queue a task</a> to <a>fire a simple event</a> named <code>loadedmetadata</code> at the element.

      <p class="note">
    Before this task is run, as part of the <a>event loop</a> mechanism, the
      rendering will have been updated to resize the <{video}> element if appropriate.
  </p>

      </dd>

      <dt id="handling-first-frame-available">If the previous ready state was <code>HAVE_METADATA</code> and the new ready state is <code>HAVE_CURRENT_DATA</code> or greater</dt>

      <dd>

      If this is the first time this occurs for this <a>media element</a> since the <code>load()</code> algorithm was last
      invoked, the user agent must <a>queue a task</a> to <a>fire a simple event</a>
      named <code>loadeddata</code> at the element.

      If the new ready state is <code>HAVE_FUTURE_DATA</code>
      or <code>HAVE_ENOUGH_DATA</code>, then the relevant steps
      below must then be run also.

      </dd>

      <dt>If the previous ready state was <code>HAVE_FUTURE_DATA</code> or more, and the new ready state is
      <code>HAVE_CURRENT_DATA</code> or less</dt>

      <dd>

      If the <a>media element</a> was <a>potentially
      playing</a> before its <code>readyState</code> attribute
      changed to a value lower than <code>HAVE_FUTURE_DATA</code>, and the element has not
      <a>ended playback</a>, and playback has not <a>stopped due to errors</a>,
      <a>paused for user interaction</a>, or <a>paused for in-band content</a>, the user
      agent must <a>queue a task</a> to <a>fire a simple event</a> named <code>timeupdate</code> at the element, and <a>queue a task</a>
      to <a>fire a simple event</a> named <code>waiting</code> at
      the element.

      </dd>

      <dt>If the previous ready state was <code>HAVE_CURRENT_DATA</code> or less, and the new ready state
      is <code>HAVE_FUTURE_DATA</code></dt>

      <dd>

      The user agent must <a>queue a task</a> to <a>fire a simple event</a> named
      <code>canplay</code> at the element.

      If the element's <code>paused</code> attribute is false, the user
      agent must <a>queue a task</a> to <a>fire a simple event</a> named <code>playing</code> at the element.

      </dd>

      <dt>If the new ready state is <code>HAVE_ENOUGH_DATA</code></dt>

      <dd>

      If the previous ready state was <code>HAVE_CURRENT_DATA</code> or less, the user agent must
      <a>queue a task</a> to <a>fire a simple event</a> named <code>canplay</code> at the element, and, if the element's <code>paused</code> attribute is false, <a>queue a task</a> to
      <a>fire a simple event</a> named <code>playing</code>
      at the element.

      If the <a>autoplaying flag</a> is true, and the <code>paused</code> attribute is true, and the <a>media element</a>
      has an <code>autoplay</code> attribute specified, and the
      <a>media element</a>'s <a>node document</a>'s <a>active sandboxing flag set</a>
      does not have the <a>sandboxed automatic features browsing context flag</a> set, then
      the user agent may also run the following substeps:

      <ol>

        <li>Set the <code>paused</code> attribute to false.</li>

        <li>If the element's <a>show poster flag</a> is true, set it to false and run the
        <i>time marches on</i> steps.</li>

        <li><a>Queue a task</a> to <a>fire a simple event</a> named <code>play</code> at the element.</li>

        <li><a>Queue a task</a> to <a>fire a simple event</a> named <code>playing</code> at the element.</li>

        <li>Set the <a>autoplaying flag</a> to false.</li>

      </ol>

      <p class="note">
    User agents do not need to support autoplay, and it is suggested that user
      agents honor user preferences on the matter. Authors are urged to use the <code>autoplay</code> attribute rather than using script to force the
      video to play, so as to allow the user to override the behavior if so desired.
  </p>

      In any case, the user agent must finally <a>queue a task</a> to <a>fire a simple
      event</a> named <code>canplaythrough</code> at the element.

      </dd>

    </dl>

    </li>

  </ol>

  </div>

  <p class="note">
    It is possible for the ready state of a media element to jump between these states
  discontinuously. For example, the state of a media element can jump straight from <code>HAVE_METADATA</code> to <code>HAVE_ENOUGH_DATA</code> without passing through the <code>HAVE_CURRENT_DATA</code> and <code>HAVE_FUTURE_DATA</code> states.
  </p>

  <div class="impl">

  The <dfn attribute for="HTMLMediaElement"><code>readyState</code></dfn> IDL attribute must, on
  getting, return the value described above that describes the current ready state of the
  <a>media element</a>.

  </div>

  The <dfn element-attr for="media"><code>autoplay</code></dfn> attribute is a <a>boolean
  attribute</a>. When present, the user agent <span class="impl">(as described in the algorithm
  described herein)</span> will automatically begin playback of the <a>media resource</a> as
  soon as it can do so without stopping.

  <p class="note">
    Authors are urged to use the <code>autoplay</code>
  attribute rather than using script to trigger automatic playback, as this allows the user to
  override the automatic playback when it is not desired, e.g., when using a screen reader. Authors
  are also encouraged to consider not using the automatic playback behavior at all, and instead to
  let the user agent wait for the user to start playback explicitly.
  </p>

  <div class="impl">

  The <dfn attribute for="HTMLMediaElement"><code>autoplay</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name.

  </div>

<h5 id="playing-the-media-resource">Playing the media resource</h5>

  <dl class="domintro">

    <dt><var>media</var> . <code>paused</code></dt>

    <dd>

    Returns true if playback is paused; false otherwise.

    </dd>

    <dt><var>media</var> . <code>ended</code></dt>

    <dd>

    Returns true if playback has reached the end of the <a>media resource</a>.

    </dd>

    <dt><var>media</var> . <code>defaultPlaybackRate</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the default rate of playback, for when the user is not fast-forwarding or reversing
    through the <a>media resource</a>.

    Can be set, to change the default rate of playback.

    The default rate has no direct effect on playback, but if the user switches to a fast-forward
    mode, when they return to the normal playback mode, it is expected that the rate of playback
    will be returned to the default rate of playback.

    </dd>

    <dt><var>media</var> . <code>playbackRate</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the current rate playback, where 1.0 is normal speed.

    Can be set, to change the rate of playback.

    </dd>

    <dt><var>media</var> . <code>played</code></dt>

    <dd>

    Returns a <code>TimeRanges</code> object that represents the ranges of the <a>media
    resource</a> that the user agent has played.

    </dd>

    <dt><var>media</var> . <code>play</code>()</dt>

    <dd>

    Sets the <code>paused</code> attribute to false, loading the
    <a>media resource</a> and beginning playback if necessary. If the playback had ended, will
    restart it from the start.

    </dd>

    <dt><var>media</var> . <code>pause</code>()</dt>

    <dd>

    Sets the <code>paused</code> attribute to true, loading the
    <a>media resource</a> if necessary.

    </dd>

  </dl>

  <div class="impl">

  The <dfn><code>paused</code></dfn> attribute represents whether the
  <a>media element</a> is paused or not. The attribute must initially be true.

  A <a>media element</a> is a <dfn>blocked media element</dfn> if its <code>readyState</code> attribute is in the <code>HAVE_NOTHING</code> state, the <code>HAVE_METADATA</code> state, or the <code>HAVE_CURRENT_DATA</code> state, or if the element has
  <a>paused for user interaction</a> or <a>paused for in-band content</a>.

  A <a>media element</a> is said to be <dfn>potentially playing</dfn> when its <code>paused</code> attribute is false, the element has not <a>ended
  playback</a>, playback has not <a>stopped due to errors</a>, and the element is not a <a>blocked media element</a>.

  <p class="note">
    A <code>waiting</code> DOM event can be <a>fired</a> as a result of an element that is
  <a>potentially playing</a> stopping playback due to its <code>readyState</code> attribute changing to a value lower than <code>HAVE_FUTURE_DATA</code>.
  </p>

  A <a>media element</a> is said to have <dfn lt="playback has ended|ended playback|playback ended">ended playback</dfn> when:

  <ul>

    <li>The element's <code>readyState</code> attribute is <code>HAVE_METADATA</code> or greater, and

    </li><li>

    Either:

    <ul>

      <li>The <a>current playback position</a> is the end of the <a>media resource</a>,
      and

      </li><li>The <a>direction of playback</a> is forwards, and

      </li><li>The <a>media element</a> does not have a <code>loop</code> attribute specified.

    </li></ul>

    Or:

    <ul>

      <li>The <a>current playback position</a> is the <a>earliest possible position</a>,
      and

      </li><li>The <a>direction of playback</a> is backwards.

    </li></ul>

    </li>

  </ul>

  The <dfn><code>ended</code></dfn> attribute must return true if, the
  last time the <a>event loop</a> reached step 1, the <a>media element</a> had
  <a>ended playback</a> and the <a>direction of playback</a> was forwards, and false
  otherwise.

  A <a>media element</a> is said to have <dfn>stopped due to errors</dfn> when the
  element's <code>readyState</code> attribute is <code>HAVE_METADATA</code> or greater, and the user agent <a href="#non-fatal-media-error">encounters a non-fatal error</a> during the processing of the
  <a>media data</a>, and due to that error, is not able to play the content at the
  <a>current playback position</a>.

  A <a>media element</a> is said to have <dfn>paused for user interaction</dfn> when its
  <code>paused</code> attribute is false, the <code>readyState</code> attribute is either <code>HAVE_FUTURE_DATA</code> or <code>HAVE_ENOUGH_DATA</code> and the user agent has reached a point
  in the <a>media resource</a> where the user has to make a selection for the resource to
  continue.

  It is possible for a <a>media element</a> to have both <a>ended playback</a> and
  <a>paused for user interaction</a> at the same time.

  When a <a>media element</a> that is <a>potentially playing</a> stops playing
  because it has <a>paused for user interaction</a>, the user agent must <a>queue a
  task</a> to <a>fire a simple event</a> named <code>timeupdate</code> at the element.

  A <a>media element</a> is said to have <dfn>paused for in-band content</dfn> when its
  <code>paused</code> attribute is false, the <code>readyState</code> attribute is either <code>HAVE_FUTURE_DATA</code> or <code>HAVE_ENOUGH_DATA</code> and the user agent has suspended
  playback of the <a>media resource</a> in order to play content that is temporally anchored
  to the <a>media resource</a> and has a non-zero length, or to play content that is
  temporally anchored to a segment of the <a>media resource</a> but has a length longer than
  that segment.

  <p class="example">One example of when a <a>media element</a> would be <a>paused for
  in-band content</a> is when the user agent is playing <a state for="track" lt="Descriptions">audio descriptions</a> from an external WebVTT file, and
  the synthesized speech generated for a cue is longer than the time between the <a>text track
  cue start time</a> and the <a>text track cue end time</a>.</p>

  <hr />

  When the <a>current playback position</a> reaches the end of the
  <a>media resource</a> when the <a>direction of playback</a> is forwards, then the user
  agent must follow these steps:

  <ol>

    <li>If the <a>media element</a> has a <code>loop</code>
    attribute specified, then <a>seek</a> to the <a>earliest possible position</a> of the
    <a>media resource</a> and abort these steps.</li>

    <li>As defined above, the <code>ended</code> IDL attribute starts
    returning true once the <a>event loop</a> returns to step 1.</li>

    <li><a>Queue a task</a> to <a>fire a simple event</a> named <code>timeupdate</code> at the <a>media element</a>.</li>

    <li><a>Queue a task</a> that, if the <a>media element</a> has still <a>ended
    playback</a>, and the <a>direction of playback</a> is still forwards, and <a>paused</a> is false, changes <a>paused</a> to true and <a>fires a
    simple event</a> named <code>pause</code> at the <a>media element</a>.</li>

    <li><a>Queue a task</a> to <a>fire a simple event</a> named <code>ended</code> at the <a>media element</a>.</li>

  </ol>

  When the <a>current playback position</a> reaches the <a>earliest possible
  position</a> of the <a>media resource</a> when the <a>direction of playback</a> is
  backwards, then the user agent must only <a>queue a task</a> to <a>fire a simple
  event</a> named <code>timeupdate</code> at the element.

  <p class="note">
    The word "reaches" here does not imply that the <a>current playback
  position</a> needs to have changed during normal playback; it could be via <a>seeking</a>, for instance.
  </p>

  <hr />

  The <dfn><code>defaultPlaybackRate</code></dfn> attribute
  gives the desired speed at which the <a>media resource</a> is to play, as a multiple of its
  intrinsic speed. The attribute is mutable: on getting it must return the last value it was set to,
  or 1.0 if it hasn't yet been set; on setting the attribute must be set to the new value.

  <p class="note">
    The <code>defaultPlaybackRate</code> is used
  by the user agent when it <a>exposes a user
  interface to the user</a>.
  </p>

  The <dfn><code>playbackRate</code></dfn> attribute gives the
  <a>effective playback rate</a> which is the speed at which the <a>media resource</a> plays, as a multiple
  of its intrinsic speed. If it is not equal to the <code>defaultPlaybackRate</code>, then the implication is that the
  user is using a feature such as fast forward or slow motion playback. The attribute is mutable: on
  getting it must return the last value it was set to, or 1.0 if it hasn't yet been set; on setting
  the attribute must be set to the new value, and the playback will change speed (if the element is
  <a>potentially playing</a>).

  When the <code>defaultPlaybackRate</code>
  or <code>playbackRate</code> attributes change value (either by
  being set by script or by being changed directly by the user agent, e.g., in response to user
  control) the user agent must <a>queue a task</a> to <a>fire a simple event</a> named
  <code>ratechange</code> at the <a>media element</a>.

  <hr />

  The <dfn><code>played</code></dfn> attribute must return a new static
  <a>normalized <code>TimeRanges</code> object</a> that represents the ranges of points on the
  <a>media timeline</a> of the <a>media resource</a> reached through the usual monotonic
  increase of the <a>current playback position</a> during normal playback, if any, at the time
  the attribute is evaluated.

  <hr />

  When the <dfn><code>play()</code></dfn> method on a <a>media element</a> is invoked, the user agent must run the following steps.

  <ol>

    <li>If the <a>media element</a>'s <code>networkState</code> attribute has the value <code>NETWORK_EMPTY</code>, invoke the <a>media element</a>'s
    <a>resource selection algorithm</a>.</li>

    <li>

    If the <a>playback has ended</a> and the <a>direction of playback</a> is forwards, <a>seek</a> to the <a>earliest possible
    position</a> of the <a>media resource</a>.

    <p class="note">
    This will cause the user agent to <a>queue a task</a> to <a>fire a simple event</a> named <code>timeupdate</code> at the <a>media element</a>.
  </p>

    </li><li>

    If the <a>media element</a>'s <code>paused</code> attribute is
    true, run the following substeps:

    <ol>

      <li>Change the value of <code>paused</code> to false.</li>

      <li>If the <a>show poster flag</a> is true, set the element's <a>show poster
      flag</a> to false and run the <i>time marches on</i> steps.</li>

      <li><a>Queue a task</a> to <a>fire a simple event</a> named <code>play</code> at the element.</li>

      <li>

      If the <a>media element</a>'s <code>readyState</code>
      attribute has the value <code>HAVE_NOTHING</code>, <code>HAVE_METADATA</code>, or <code>HAVE_CURRENT_DATA</code>, <a>queue a task</a> to
      <a>fire a simple event</a> named <code>waiting</code> at the
      element.

      Otherwise, the <a>media element</a>'s <code>readyState</code> attribute has the value <code>HAVE_FUTURE_DATA</code> or <code>HAVE_ENOUGH_DATA</code>: <a>queue a task</a> to
      <a>fire a simple event</a> named <code>playing</code> at the
      element.

      </li>

    </ol>

    </li>

    <li>Set the <a>media element</a>'s <a>autoplaying flag</a> to false.</li>

  </ol>

  <hr />

  When the <dfn><code>pause()</code></dfn> method is invoked, and when
  the user agent is required to pause the <a>media element</a>, the user agent must run the
  following steps:

  <ol>

    <li>If the <a>media element</a>'s <code>networkState</code> attribute has the value <code>NETWORK_EMPTY</code>, invoke the <a>media element</a>'s
    <a>resource selection algorithm</a>.</li>

    <li>Run the <a>internal pause steps</a> for the <a>media element</a>.</li>

  </ol>

  The <dfn>internal pause steps</dfn> for a <a>media element</a> are as follows:

  <ol>

    <li>Set the <a>media element</a>'s <a>autoplaying flag</a> to false.</li>

    <li>If the <a>media element</a>'s <code>paused</code> attribute
    is false, run the following steps:

    <ol>

      <li>Change the value of <code>paused</code> to true.</li>

      <li><a>Queue a task</a> to <a>fire a simple
      event</a> named <code>timeupdate</code> at the
      element.</li>

      <li><a>Queue a task</a> to <a>fire a simple
      event</a> named <code>pause</code>
      at the element.</li>

      <li>Set the <a>official playback position</a> to the <a>current playback
      position</a>.</li>

    </ol>

    </li>

  </ol>

  <hr />

  The <dfn>effective playback rate</dfn> is just the element's <code>playbackRate</code>.

  If the <a>effective playback rate</a> is positive or zero, then the <dfn>direction of
  playback</dfn> is forwards. Otherwise, it is backwards.

  When a <a>media element</a> is <a>potentially playing</a> and
  its {{Document}} is a <a>fully active</a> {{Document}}, its <a>current
  playback position</a> must increase monotonically at <a>effective playback rate</a> units
  of media time per unit time of the <a>media timeline</a>'s clock. (This specification always
  refers to this as an <i>increase</i>, but that increase could actually be a <em>de</em>crease if
  the <a>effective playback rate</a> is negative.)

  <p class="note">
    The <a>effective playback rate</a> can be 0.0, in which case the
  <a>current playback position</a> doesn't move, despite playback not being paused (<code>paused</code> doesn't become true, and the <code>pause</code> event doesn't fire).
  </p>

  <p class="note">
    This specification doesn't define how the user agent achieves the appropriate
  playback rate — depending on the protocol and media available, it is plausible that the user
  agent could negotiate with the server to have the server provide the media data at the appropriate
  rate, so that (except for the period between when the rate is changed and when the server updates
  the stream's playback rate) the client doesn't actually have to drop or interpolate any
  frames.
  </p>

  Any time the user agent <a>provides a stable state</a>,
  the <a>official playback position</a> must be set to the <a>current playback
  position</a>.

  While the <a>direction of playback</a> is backwards, any corresponding audio must be
  <a>muted</a>. While the <a>effective playback rate</a> is
  so low or so high that the user agent cannot play audio usefully, the corresponding audio must
  also be <a>muted</a>. If the <a>effective playback
  rate</a> is not 1.0, the user agent may apply pitch adjustments to the audio as necessary to
  render it faithfully.

  <a>Media elements</a> that are <a>potentially playing</a>
  while not <a>in a <code>Document</code></a> must not play any video, but should play any
  audio component. Media elements must not stop playing just because all references to them have
  been removed; only once a media element is in a state where no further audio could ever be played
  by that element may the element be garbage collected.

  <p class="note">
    It is possible for an element to which no explicit references exist to play audio, even if such
    an element is not still actively playing: for instance, a
    <a>media element</a> whose <a>media resource</a> has no audio tracks
    could eventually play audio again if it had an event listener that changes the
    <a>media resource</a>.
  </p>

  <hr />

  Each <a>media element</a> has a <dfn>list of newly introduced cues</dfn>, which must be
  initially empty. Whenever a <a>text track cue</a> is added to the <a>list of cues</a> of a <a>text track</a> that is in the <a>list of text
  tracks</a> for a <a>media element</a>, that <a>cue</a> must
  be added to the <a>media element</a>'s <a>list of newly introduced cues</a>. Whenever
  a <a>text track</a> is added to the <a>list of text tracks</a> for a <a>media element</a>, all of the <a>cues</a> in that <a>text
  track</a>'s <a>list of cues</a> must be added to the
  <a>media element</a>'s <a>list of newly introduced cues</a>. When a <a>media element</a>'s <a>list of newly introduced cues</a> has new cues added while the
  <a>media element</a>'s <a>show poster flag</a> is not set, then the user agent must
  run the <i>time marches on</i> steps.

  When a <a>text track cue</a> is removed from the <a>list of cues</a> of a <a>text track</a> that is in the <a>list of text
  tracks</a> for a <a>media element</a>, and whenever a <a>text track</a> is removed
  from the <a>list of text tracks</a> of a <a>media element</a>, if the <a>media element</a>'s <a>show poster flag</a> is not set, then the user agent must run the
  <i>time marches on</i> steps.

  When the <a>current playback position</a> of a <a>media element</a> changes (e.g.,
  due to playback or seeking), the user agent must run the <i>time marches on</i> steps. If the
  <a>current playback position</a> changes while the steps are running, then the user agent
  must wait for the steps to complete, and then must immediately rerun the steps. (These steps are
  thus run as often as possible or needed — if one iteration takes a long time, this can cause
  certain <a>cues</a> to be skipped over as the user agent rushes ahead
  to "catch up".)

  The <dfn><i>time marches on</i></dfn> steps are as follows:

  <ol>

    <li>Let <var>current cues</var> be a list of <a>cues</a>, initialized to contain all the <a>cues</a> of all
    the <a mode for="track">hidden</a> or <a mode for="track">showing</a> <a>text tracks</a> of the <a>media element</a> (not the disabled ones) whose <a>start times</a> are less than or equal to the <a>current
    playback position</a> and whose <a>end times</a> are
    greater than the <a>current playback position</a>.</li>

    <li>Let <var>other cues</var> be a list of <a>cues</a>,
    initialized to contain all the <a>cues</a> of <a mode for="track">hidden</a> and <a mode for="track">showing</a> <a>text tracks</a> of the <a>media element</a> that are not present in <var>current cues</var>.</li>

    <li>Let <var>last time</var> be the <a>current playback position</a> at the
    time this algorithm was last run for this <a>media element</a>, if this is not the first
    time it has run.</li>

    <li>If the <a>current playback position</a> has, since the last time this algorithm was
    run, only changed through its usual monotonic increase during normal playback, then let <var>missed cues</var> be the list of <a>cues</a> in <var>other cues</var> whose <a>start times</a> are
    greater than or equal to <var>last time</var> and whose <a>end times</a> are less than or equal to the <a>current playback position</a>.
    Otherwise, let <var>missed cues</var> be an empty list.</li>

    <li>Remove all the <a>cues</a> in <var>missed cues</var>
    that are also in the <a>media element</a>'s <a>list of newly introduced cues</a>, and
    then empty the element's <a>list of newly introduced cues</a>.</li>

    <li>If the time was reached through the usual monotonic increase of the <a>current playback
    position</a> during normal playback, and if the user agent has not fired a <code>timeupdate</code> event at the element in the past 15 to 250ms and
    is not still running event handlers for such an event, then the user agent must <a>queue a
    task</a> to <a>fire a simple event</a> named <code>timeupdate</code> at the element. (In the other cases, such as
    explicit seeks, relevant events get fired as part of the overall process of changing the
    <a>current playback position</a>.)

    <p class="note">
    The event thus is not to be fired faster than about 66Hz or slower than 4Hz
    (assuming the event handlers don't take longer than 250ms to run). User agents are encouraged to
    vary the frequency of the event based on the system load and the average cost of processing the
    event each time, so that the UI updates are not any more frequent than the user agent can
    comfortably handle while decoding the video.
  </li>

    <li>If all of the <a>cues</a> in <var>current cues</var>
    have their <a>text track cue active flag</a> set, none of the <a>cues</a> in <var>other cues</var> have their <a>text track cue active
    flag</a> set, and <var>missed cues</var> is empty, then abort these steps.</li>

    <li>

    If the time was reached through the usual monotonic increase of the <a>current playback
    position</a> during normal playback, and there are <a>cues</a>
    in <var>other cues</var> that have their <a>text track cue pause-on-exit flag</a>
    set and that either have their <a>text track cue active flag</a> set or are also in <var>missed cues</var>, then <a>immediately</a> <a state for="useragent">pause</a> the
    <a>media element</a>.

    <p class="note">
    In the other cases, such as explicit seeks, playback is not paused by going past
    the end time of a <a>cue</a>, even if that <a>cue</a> has its <a>text track cue pause-on-exit flag</a> set.
  </p>

    </li>

    <li>

    Let <var>events</var> be a list of <a>tasks</a>,
    initially empty. Each <a>task</a> in this list will be associated
    with a <a>text track</a>, a <a>text track cue</a>, and a time, which are used to
    sort the list before the <a>tasks</a> are queued.

    Let <var>affected tracks</var> be a list of <a>text
    tracks</a>, initially empty.

    When the steps below say to <dfn>prepare an event</dfn> named <var>event</var> for a
    <a>text track cue</a> <var>target</var> with a time <var>time</var>, the
    user agent must run these substeps:

    <ol>

      <li>Let <var>track</var> be the <a>text track</a> with which the <a>text
      track cue</a> <var>target</var> is associated.</li>

      <li>Create a <a>task</a> to <a>fire a simple event</a>
      named <var>event</var> at <var>target</var>.</li>

      <li>Add the newly created <a>task</a> to <var>events</var>, associated with the time <var>time</var>, the <a>text
      track</a> <var>track</var>, and the <a>text track cue</a> <var>target</var>.</li>

      <li>Add <var>track</var> to <var>affected tracks</var>.</li>

    </ol>

    </li>

    <li>For each <a>text track cue</a> in <var>missed
    cues</var>, <a>prepare an event</a> named <code>enter</code> for the
    <code>TextTrackCue</code> object with the <a>text track cue start time</a>.</li>

    <li>For each <a>text track cue</a> in <var>other
    cues</var> that either has its <a>text track cue active flag</a> set or is in <var>missed cues</var>, <a>prepare an event</a> named <code>exit</code> for the <code>TextTrackCue</code> object with the later of the
    <a>text track cue end time</a> and the <a>text track cue start time</a>.</li>

    <li>For each <a>text track cue</a> in <var>current
    cues</var> that does not have its <a>text track cue active flag</a> set, <a>prepare an
    event</a> named <code>enter</code> for the <code>TextTrackCue</code>
    object with the <a>text track cue start time</a>.</li>

    <li>

    Sort the <a>tasks</a> in <var>events</var> in ascending
    time order (<a>tasks</a> with earlier times first).

    Further sort <a>tasks</a> in <var>events</var> that have
    the same time by the relative <a>text track cue order</a> of the <a>text track cues</a> associated with these <a>tasks</a>.

    Finally, sort <a>tasks</a> in <var>events</var> that have
    the same time and same <a>text track cue order</a> by placing <a>tasks</a> that fire <code>enter</code> events before
    those that fire <code>exit</code> events.

    </li>

    <li><a lt="queue a task">Queue</a> each <a>task</a> in
    <var>events</var>, in list order.</li>

    <li>Sort <var>affected tracks</var> in the same order as the <a>text tracks</a> appear in the <a>media element</a>'s <a>list of text
    tracks</a>, and remove duplicates.

    </li><li>For each <a>text track</a> in <var>affected tracks</var>, in the list
    order, <a>queue a task</a> to <a>fire a simple event</a> named <code>cuechange</code> at the {{TextTrack}} object, and, if the
    <a>text track</a> has a corresponding <{track}> element, to then <a>fire a
    simple event</a> named <code>cuechange</code> at the
    <{track}> element as well.</li>

    <li>Set the <a>text track cue active flag</a> of all the <a>cues</a> in the <var>current cues</var>, and unset the <a>text track cue
    active flag</a> of all the <a>cues</a> in the <var>other
    cues</var>.</li>

    <li>Run the <a>rules for updating the text track rendering</a> of each of the <a>text tracks</a>
    in <var>affected tracks</var> that are <a mode for="track">showing</a>, providing the <a>text track</a>'s
    <a>text track language</a> as the fallback language if it is not the empty string. For example,
    for <a>text tracks</a> based on WebVTT, the
    <a>rules for updating the display of WebVTT text tracks</a>. [[WEBVTT]]</li>

  </ol>

  For the purposes of the algorithm above, a <a>text track cue</a> is considered to be part
  of a <a>text track</a> only if it is listed in the <a>text track list of cues</a>, not
  merely if it is associated with the <a>text track</a>.

  <p class="note">
    If the <a>media element</a>'s <a>node document</a> stops being a
  <a>fully active</a> document, then the playback will stop
  until the document is active again.
  </p>

  When a <a>media element</a> is <a>removed
  from a <code>Document</code></a>, the user agent must run the following steps:

  <ol>

    <li><a>Await a stable state</a>, allowing the <a>task</a> that removed the <a>media element</a> from the
    {{Document}} to continue. The <a>synchronous section</a> consists of all the
    remaining steps of this algorithm. (Steps in the <a>synchronous section</a> are marked with
    &#x231B;.)</li>

    <li>&#x231B; If the <a>media element</a> is <a>in a <code>Document</code></a>,
    abort these steps.</li>

    <li>&#x231B; Run the <a>internal pause steps</a> for the <a>media element</a>.

  </li></ol>
  </div>

<h5 id="seeking">Seeking</h5>

  <dl class="domintro">

    <dt><var>media</var> . <code>seeking</code></dt>

    <dd>

    Returns true if the user agent is currently seeking.

    </dd>

    <dt><var>media</var> . <code>seekable</code></dt>

    <dd>

    Returns a <code>TimeRanges</code> object that represents the ranges of the <a>media
    resource</a> to which it is possible for the user agent to seek.

    </dd>

    <dt><var>media</var> . <code>fastSeek</code>( <var>time</var> )</dt>

    <dd>

    Seeks to near the given <var>time</var> as fast as possible, trading precision for
    speed. (To seek to a precise time, use the <code>currentTime</code> attribute.)

    This does nothing if the media resource has not been loaded.

    </dd>

  </dl>

  <div class="impl">

  The <dfn attribute for="HTMLMediaElement"><code>seeking</code></dfn> attribute must initially have the
  value false.

  The <dfn method for="HTMLMediaElement"><code>fastSeek()</code></dfn> method must <a>seek</a> to the time given by the method's argument, with the
  <i>approximate-for-speed</i> flag set.

  When the user agent is required to <dfn>seek</dfn> to a particular <var>new playback position</var> in the <a>media resource</a>, optionally with the
  <i>approximate-for-speed</i> flag set, it means that the user agent must run the following steps.
  This algorithm interacts closely with the <a>event loop</a> mechanism; in particular, it has
  a <a>synchronous section</a> (which is triggered as part of the <a>event loop</a>
  algorithm). Steps in that section are marked with &#x231B;.

  <ol>

    <li>Set the <a>media element</a>'s <a>show poster flag</a> to false.</li>

    <li>If the <a>media element</a>'s <code>readyState</code>
    is <code>HAVE_NOTHING</code>, abort these steps.</li>

    <li>If the element's <code>seeking</code> IDL attribute is true,
    then another instance of this algorithm is already running. Abort that other instance of the
    algorithm without waiting for the step that it is running to complete.</li>

    <li>Set the <code>seeking</code> IDL attribute to true.</li>

    <li>If the seek was in response to a DOM method call or setting of an IDL attribute, then
    continue the script. The remainder of these steps must be run <a>in parallel</a>. With the exception
    of the steps marked with &#x231B;, they could be aborted at any time by another instance of this
    algorithm being invoked.</li>

    <li>If the <var>new playback position</var> is later than the end of the <a>media
    resource</a>, then let it be the end of the <a>media resource</a> instead.</li>

    <li>If the <var>new playback position</var> is less than the <a>earliest possible
    position</a>, let it be that position instead.</li>

    <li>If the (possibly now changed) <var>new playback position</var> is not in one of
    the ranges given in the <code>seekable</code> attribute, then let it
    be the position in one of the ranges given in the <code>seekable</code> attribute that is the nearest to the <var>new
    playback position</var>. If two positions both satisfy that constraint (i.e., the <var>new playback position</var> is exactly in the middle between two ranges in the <code>seekable</code> attribute) then use the position that is closest to
    the <a>current playback position</a>. If there are no ranges given in the <code>seekable</code> attribute then set the <code>seeking</code> IDL attribute to false and abort these steps.</li>

    <li>

    If the <i>approximate-for-speed</i> flag is set, adjust the <var>new playback
    position</var> to a value that will allow for playback to resume promptly. If <var>new
    playback position</var> before this step is before <a>current playback position</a>, then
    the adjusted <var>new playback position</var> must also be before the <a>current
    playback position</a>. Similarly, if the <var>new playback position</var> before
    this step is after <a>current playback position</a>, then the adjusted <var>new
    playback position</var> must also be after the <a>current playback position</a>.

    <p class="example">For example, the user agent could snap to a nearby key frame, so that it
    doesn't have to spend time decoding then discarding intermediate frames before resuming
    playback.</p>

    </li>

    <li><a>Queue a task</a> to <a>fire a simple event</a> named <code>seeking</code> at the element.</li>

    <li>

    Set the <a>current playback position</a> to the <var>new playback
    position</var>.

    <p class="note">
    If the <a>media element</a> was <a>potentially playing</a>
    immediately before it started seeking, but seeking caused its <code>readyState</code> attribute to change to a value lower than <code>HAVE_FUTURE_DATA</code>, then a <code>waiting</code> event will be
    <a>fired</a> at the element.
  </p>

    <p class="note">
    This step sets the <a>current playback position</a>, and thus can
    immediately trigger other conditions, such as the rules regarding when playback "reaches the end of the <a>media resource</a>" (part of the logic that
    handles looping), even before the user agent is actually able to render the media data for that
    position (as determined in the next step).
  </p>

    <p class="note">
    The <code>currentTime</code> attribute returns
    the <a>official playback position</a>, not the <a>current playback position</a>, and
    therefore gets updated before script execution, separate from this algorithm.
  </p>

    </li>

    <li>Wait until the user agent has established whether or not the <a>media data</a> for
    the <var>new playback position</var> is available, and, if it is, until it has decoded
    enough data to play back that position.

    </li>

    <li><a>Await a stable state</a>. The <a>synchronous section</a> consists of all
    the remaining steps of this algorithm. (Steps in the <a>synchronous section</a> are marked
    with &#x231B;.)</li>

    <li>&#x231B; Set the <code>seeking</code> IDL attribute to
    false.</li>

    <li>&#x231B; Run the <a>time marches on</a> steps.</li>

    <li id="seekUpdate">&#x231B; <a>Queue a task</a> to <a>fire a simple event</a>
    named <code>timeupdate</code> at the element.</li>

    <li>&#x231B; <a>Queue a task</a> to <a>fire a simple event</a> named <code>seeked</code> at the element.</li>

  </ol>

  <hr />

  The <dfn attribute for="HTMLMediaElement"><code>seekable</code></dfn> attribute must return a new
  static <a>normalized <code>TimeRanges</code> object</a> that represents the ranges of the
  <a>media resource</a>, if any, that the user agent is able to seek to, at the time the
  attribute is evaluated.

  <p class="note">
    If the user agent can seek to anywhere in the <a>media resource</a>, e.g.,
  because it is a simple movie file and the user agent and the server support HTTP Range requests,
  then the attribute would return an object with one range, whose start is the time of the first
  frame (the <a>earliest possible position</a>, typically zero), and whose end is the same as
  the time of the first frame plus the <code>duration</code> attribute's
  value (which would equal the time of the last frame, and might be positive Infinity).
  </p>

  <p class="note">
    The range might be continuously changing, e.g., if the user agent is buffering a
  sliding window on an infinite stream. This is the behavior seen with DVRs viewing live TV, for
  instance.
  </p>

  User agents should adopt a very liberal and optimistic view of what is seekable. User
  agents should also buffer recent content where possible to enable seeking to be fast.

  <p class="example">For instance, consider a large video file served on an HTTP server without
  support for HTTP Range requests. A browser <em>could</em> implement this by only buffering the
  current frame and data obtained for subsequent frames, never allow seeking, except for seeking to
  the very start by restarting the playback. However, this would be a poor implementation. A high
  quality implementation would buffer the last few minutes of content (or more, if sufficient
  storage space is available), allowing the user to jump back and rewatch something surprizing
  without any latency, and would in addition allow arbitrary seeking by reloading the file from the
  start if necessary, which would be slower but still more convenient than having to literally
  restart the video and watch it all the way through just to get to an earlier unbuffered spot.</p>

  <a>Media resources</a> might be internally scripted or
  interactive. Thus, a <a>media element</a> could play in a non-linear fashion. If this
  happens, the user agent must act as if the algorithm for <a>seeking</a> was used whenever the <a>current playback position</a>
  changes in a discontinuous fashion (so that the relevant events fire).

  </div>

<h5 id="media-resources-with-multiple-media-tracks">Media resources with multiple media tracks</h5>

  A <a>media resource</a> can have multiple embedded audio and video tracks. For example,
  in addition to the primary video and audio tracks, a <a>media resource</a> could have
  foreign-language dubbed dialogs, director's commentaries, audio descriptions, alternative
  angles, or sign-language overlays.

  <dl class="domintro">

    <dt><var>media</var> . <code>audioTracks</code></dt>

    <dd>

    Returns an <code>AudioTrackList</code> object representing the audio tracks available in the
    <a>media resource</a>.

    </dd>

    <dt><var>media</var> . <code>videoTracks</code></dt>

    <dd>

    Returns a {{VideoTrackList}} object representing the video tracks available in the
    <a>media resource</a>.

    </dd>

  </dl>

  <div class="impl">

  The <dfn attribute for="HTMLMediaElement"><code>audioTracks</code></dfn> attribute of a
  <a>media element</a> must return a <a>live</a> <code>AudioTrackList</code> object
  representing the audio tracks available in the <a>media element</a>'s <a>media
  resource</a>.

  The <dfn attribute for="HTMLMediaElement"><code>videoTracks</code></dfn> attribute of a
  <a>media element</a> must return a <a>live</a> {{VideoTrackList}} object
  representing the video tracks available in the <a>media element</a>'s <a>media
  resource</a>.

  <p class="note">
    There are only ever one <code>AudioTrackList</code> object and one
  {{VideoTrackList}} object per <a>media element</a>, even if another <a>media
  resource</a> is loaded into the element: the objects are reused. (The <code>AudioTrack</code>
  and <code>VideoTrack</code> objects are not, though.)
  </p>

  </div>

  <div class="example">
    In this example, a script defines a function that takes a URL to a video and a reference to an
    element where the video is to be placed. That function then tries to load the video, and, once it
    is loaded, checks to see if there is a sign-language track available. If there is, it also
    displays that track. Both tracks are just placed in the given container; it's assumed that styles
    have been applied to make this work in a pretty way!

    <pre highlight="html">
&lt;script&gt;
  function loadVideo(url, container) {
    var video = document.createElement('video');
    video.src = url;
    video.autoplay = true;
    video.controls = true;
    container.appendChild(video);
    video.onloadedmetadata = function (event) {
      for (var i = 0; i &lt; video.videoTracks.length; i += 1) {
        if (video.videoTracks[i].kind == 'sign') {
          var sign = document.createElement('video');
          sign.src = url + '#track=' + video.videoTracks[i].id;
          sign.autoplay = true;
          container.appendChild(sign);
          return;
        }
      }
    };
  }
&lt;/script&gt;
    </pre>

  </div>

<h6 id="audiotracklist-and-videotracklist-objects"><code>AudioTrackList</code> and <code>VideoTrackList</code> objects</h6>

  The <code>AudioTrackList</code> and <code>VideoTrackList</code> interfaces are used by
  attributes defined in the previous section.

  <pre class="idl" data-highlight="webidl" dfn-for="AudioTrackList">
    interface AudioTrackList : EventTarget {
      readonly attribute unsigned long length;
      getter AudioTrack (unsigned long index);
      AudioTrack? getTrackById(DOMString id);

      attribute EventHandler onchange;
      attribute EventHandler onaddtrack;
      attribute EventHandler onremovetrack;
    };
  </pre>

  <pre class="idl" data-highlight="webidl" dfn-for="AudioTrack">
    interface AudioTrack {
      readonly attribute DOMString id;
      readonly attribute DOMString kind;
      readonly attribute DOMString label;
      readonly attribute DOMString language;
      attribute boolean enabled;
    };
  </pre>

  <pre class="idl" data-highlight="webidl" dfn-for="VideoTrackList">
    interface VideoTrackList : EventTarget {
      readonly attribute unsigned long length;
      getter VideoTrack (unsigned long index);
      VideoTrack? getTrackById(DOMString id);
      readonly attribute long selectedIndex;

      attribute EventHandler onchange;
      attribute EventHandler onaddtrack;
      attribute EventHandler onremovetrack;
    };
  </pre>

  <pre class="idl" data-highlight="webidl" dfn-for="VideoTrack">
    interface VideoTrack {
      readonly attribute DOMString id;
      readonly attribute DOMString kind;
      readonly attribute DOMString label;
      readonly attribute DOMString language;
      attribute boolean selected;
    };
</pre>

  <dl class="domintro">

    <dt><var>media</var> . <code>audioTracks</code> . <code>length</code></dt>
    <dt><var>media</var> . <code>videoTracks</code> . <code>length</code></dt>

    <dd>

    Returns the number of tracks in the list.

    </dd>

    <dt><var>audioTrack</var> = <var>media</var> . <code>audioTracks</code>[<var>index</var>]</dt>
    <dt><var>videoTrack</var> = <var>media</var> . <code>videoTracks</code>[<var>index</var>]</dt>

    <dd>

    Returns the specified <code>AudioTrack</code> or <code>VideoTrack</code> object.

    </dd>

    <dt><var>audioTrack</var> = <var>media</var> . <code>audioTracks</code> . <code>getTrackById</code>( <var>id</var> )</dt>
    <dt><var>videoTrack</var> = <var>media</var> . <code>videoTracks</code> . <code>getTrackById</code>( <var>id</var> )</dt>

    <dd>

    Returns the <code>AudioTrack</code> or <code>VideoTrack</code> object with the given identifier, or null if no track has that identifier.

    </dd>

    <dt><var>audioTrack</var> . <code>id</code></dt>
    <dt><var>videoTrack</var> . <code>id</code></dt>

    <dd>

    Returns the ID of the given track. This is the ID that can be used with a fragment identifier
    if the format supports the <cite>Media Fragments URI</cite> syntax, and that can be used with
    the <code>getTrackById()</code> method. [[!MEDIA-FRAGS]]

    </dd>

    <dt><var>audioTrack</var> . <code>kind</code></dt>
    <dt><var>videoTrack</var> . <code>kind</code></dt>

    <dd>

    Returns the category the given track falls into. The <a href="#dom-TrackList-getKind-categories">possible track categories</a> are given below.

    </dd>

    <dt><var>audioTrack</var> . <code>label</code></dt>
    <dt><var>videoTrack</var> . <code>label</code></dt>

    <dd>

    Returns the label of the given track, if known, or the empty string otherwise.

    </dd>

    <dt><var>audioTrack</var> . <code>language</code></dt>
    <dt><var>videoTrack</var> . <code>language</code></dt>

    <dd>

    Returns the language of the given track, if known, or the empty string otherwise.

    </dd>

    <dt><var>audioTrack</var> . <code>enabled</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns true if the given track is active, and false otherwise.

    Can be set, to change whether the track is enabled or not. If multiple audio tracks are
    enabled simultaneously, they are mixed.

    </dd>

    <dt><var>media</var> . <code>videoTracks</code> . <code>selectedIndex</code></dt>

    <dd>

    Returns the index of the currently selected track, if any, or -1 otherwise.

    </dd>

    <dt><var>videoTrack</var> . <code>selected</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns true if the given track is active, and false otherwise.

    Can be set, to change whether the track is selected or not. Either zero or one video track is
    selected; selecting a new track while a previous one is selected will unselect the previous
    one.

    </dd>

  </dl>

  <div class="impl">

  An <code>AudioTrackList</code> object represents a dynamic list of zero or more audio tracks,
  of which zero or more can be enabled at a time. Each audio track is represented by an
  <code>AudioTrack</code> object.

  A {{VideoTrackList}} object represents a dynamic list of zero or more video tracks, of
  which zero or one can be selected at a time. Each video track is represented by a
  <code>VideoTrack</code> object.

  Tracks in <code>AudioTrackList</code> and {{VideoTrackList}} objects must be
  consistently ordered. If the <a>media resource</a> is in a format that defines an order,
  then that order must be used; otherwise, the order must be the relative order in which the tracks
  are declared in the <a>media resource</a>. The order used is called the <i>natural order</i>
  of the list.

  <p class="note">
    Each track in one of these objects thus has an index; the first has the index
  0, and each subsequent track is numbered one higher than the previous one. If a <a>media
  resource</a> dynamically adds or removes audio or video tracks, then the indices of the tracks
  will change dynamically. If the <a>media resource</a> changes entirely, then all the
  previous tracks will be removed and replaced with new tracks.
  </p>

  The <dfn attribute for="AudioTrackList"><code>AudioTrackList.length</code></dfn> and <dfn attribute for="VideoTrackList"><code>VideoTrackList.length</code></dfn> attributes must return
  the number of tracks represented by their objects at the time of getting.

  The <a>supported property indices</a> of <code>AudioTrackList</code> and
  {{VideoTrackList}} objects at any instant are the numbers from zero to the number of
  tracks represented by the respective object minus one, if any tracks are represented. If an
  <code>AudioTrackList</code> or {{VideoTrackList}} object represents no tracks, it has no
  <a>supported property indices</a>.

  To <a>determine the value of an indexed property</a> for a given index <var>index</var> in an <code>AudioTrackList</code> or {{VideoTrackList}} object <var>list</var>, the user agent must return the <code>AudioTrack</code> or
  <code>VideoTrack</code> object that represents the <var>index</var>th track in <var>list</var>.

  The <dfn attribute for="AudioTrackList"><code>AudioTrackList.getTrackById(<var>id</var>)</code></dfn> and <dfn attribute for="VideoTrackList"><code>VideoTrackList.getTrackById(<var>id</var>)</code></dfn> methods must return the first <code>AudioTrack</code> or
  <code>VideoTrack</code> object (respectively) in the <code>AudioTrackList</code> or
  {{VideoTrackList}} object (respectively) whose identifier is equal to the value of the
  <var>id</var> argument (in the natural order of the list, as defined above). When no
  tracks match the given argument, the methods must return null.

  The <code>AudioTrack</code> and <code>VideoTrack</code> objects represent specific tracks of a
  <a>media resource</a>. Each track can have an identifier, category, label, and language.
  These aspects of a track are permanent for the lifetime of the track; even if a track is removed
  from a <a>media resource</a>'s <code>AudioTrackList</code> or <code>VideoTrackList</code>
  objects, those aspects do not change.

  In addition, <code>AudioTrack</code> objects can each be enabled or disabled; this is the audio
  track's <i>enabled state</i>. When an <code>AudioTrack</code> is created, its <i>enabled state</i>
  must be set to false (disabled). The <a>resource fetch
  algorithm</a> can override this.

  Similarly, a single <code>VideoTrack</code> object per {{VideoTrackList}} object can
  be selected, this is the video track's <i>selection state</i>. When a <code>VideoTrack</code> is
  created, its <i>selection state</i> must be set to false (not selected). The <a>resource fetch algorithm</a> can override this.

  The <dfn attribute for="AudioTrack"><code>AudioTrack.id</code></dfn> and <dfn><code>VideoTrack.id</code></dfn> attributes must return the identifier
  of the track, if it has one, or the empty string otherwise. If the <a>media resource</a> is
  in a format that supports the <cite>Media Fragments URI</cite> fragment identifier syntax, the
  identifier returned for a particular track must be the same identifier that would enable the track
  if used as the name of a track in the track dimension of such a fragment identifier. [[!MEDIA-FRAGS]] [[INBANDTRACKS]]

  <p class="example">For example, in Ogg files, this would be the Name header field of the track. [[!OGGSKELETON]]</p>

  The <dfn attribute for="AudioTrack"><code>AudioTrack.kind</code></dfn> and <dfn attribute for="VideoTrack"><code>VideoTrack.kind</code></dfn> attributes must return the category
  of the track, if it has one, or the empty string otherwise.

  The category of a track is the string given in the first column of the table below that is the
  most appropriate for the track based on the definitions in the table's second and third columns,
  as determined by the metadata included in the track in the <a>media resource</a>. The cell
  in the third column of a row says what the category given in the cell in the first column of that
  row applies to; a category is only appropriate for an audio track if it applies to audio tracks,
  and a category is only appropriate for video tracks if it applies to video tracks. Categories must
  only be returned for <code>AudioTrack</code> objects if they are appropriate for audio, and must
  only be returned for <code>VideoTrack</code> objects if they are appropriate for video.

  </div>

  <table id="dom-TrackList-getKind-categories">
    <caption>Return values for <code>AudioTrack.kind</code> and <code>VideoTrack.kind</code></caption>
    <thead>
    <tr>
      <th>Category
      </th><th>Definition
      </th><th>Applies to...</th>
    </tr></thead><tbody>

    <tr>
      <td>"<dfn attr-value for="commonTrack/kind"><code>alternative</code></dfn>"
      </td><td>A possible alternative to the main track, e.g., a different take of a song (audio), or a different angle (video).
      </td><td>Audio and video.

    </td></tr><tr>
      <td>"<dfn attr-value for="commonTrack/kind"><code>captions</code></dfn>"
      </td><td>A version of the main video track with captions burnt in. (For legacy content; new content would use text tracks.)
      </td><td>Video only.

    </td></tr><tr>
      <td>"<dfn attr-value for="commonTrack/kind"><code>descriptions</code></dfn>"
      </td><td>An audio description of a video track.
      </td><td>Audio only.

    </td></tr><tr>
      <td>"<dfn attr-value for="commonTrack/kind"><code>main</code></dfn>"
      </td><td>The primary audio or video track.
      </td><td>Audio and video.

    </td></tr><tr>
      <td>"<dfn attr-value for="commonTrack/kind"><code>main-desc</code></dfn>"
      </td><td>The primary audio track, mixed with audio descriptions.
      </td><td>Audio only.

    </td></tr><tr>
      <td>"<dfn attr-value for="commonTrack/kind"><code>sign</code></dfn>"
      </td><td>A sign-language interpretation of an audio track.
      </td><td>Video only.

    </td></tr><tr>
      <td>"<dfn attr-value for="commonTrack/kind"><code>subtitles</code></dfn>"
      </td><td>A version of the main video track with subtitles burnt in. (For legacy content; new content would use text tracks.)
      </td><td>Video only.

    </td></tr><tr>
      <td>"<dfn attr-value for="commonTrack/kind"><code>translation</code></dfn>"
      </td><td>A translated version of the main audio track.
      </td><td>Audio only.

    </td></tr><tr>
      <td>"<dfn attr-value for="commonTrack/kind"><code>commentary</code></dfn>"
      </td><td>Commentary on the primary audio or video track, e.g., a director's commentary.
      </td><td>Audio and video.

    </td></tr><tr>
      <td>"" (empty string)
      </td><td>No explicit kind, or the kind given by the track's metadata is not recognized by the user agent.
      </td><td>Audio and video.

  </td></tr></tbody></table>

  <div class="impl">

  The <dfn attribute for="AudioTrack"><code>AudioTrack.label</code></dfn> and <dfn attribute for="VideoTrack"><code>VideoTrack.label</code></dfn> attributes must return the label
  of the track, if it has one, or the empty string otherwise. [[INBANDTRACKS]]

  The <dfn attribute for="AudioTrack"><code>AudioTrack.language</code></dfn> and <dfn attribute for="VideoTrack"><code>VideoTrack.language</code></dfn> attributes must return the
  BCP 47 language tag of the language of the track, if it has one, or the empty string otherwise. If
  the user agent is not able to express that language as a BCP 47 language tag (for example because
  the language information in the <a>media resource</a>'s format is a free-form string without
  a defined interpretation), then the method must return the empty string, as if the track had no
  language.

  Source attribute values for id, kind, label and language of multitrack audio and video tracks as
  described for the relevant <a>media resource</a> format. [[INBANDTRACKS]]

  The <dfn attribute for="AudioTrack"><code>AudioTrack.enabled</code></dfn> attribute, on
  getting, must return true if the track is currently enabled, and false otherwise. On setting, it
  must enable the track if the new value is true, and disable it otherwise. (If the track is no
  longer in an <code>AudioTrackList</code> object, then the track being enabled or disabled has no
  effect beyond changing the value of the attribute on the <code>AudioTrack</code> object.)

  Whenever an audio track in an <code>AudioTrackList</code> that was
  disabled is enabled, and whenever one that was enabled is disabled, the user agent must
  <a>queue a task</a> to <a>fire a simple event</a> named <code>change</code> at the <code>AudioTrackList</code> object.

  An audio track that has no data for a particular position on the <a>media timeline</a>,
  or that does not exist at that position, must be interpreted as being silent at that point on the
  timeline.

  The <dfn attribute for="VideoTrackList"><code>VideoTrackList.selectedIndex</code></dfn> attribute
  must return the index of the currently selected track, if any. If the <code>VideoTrackList</code>
  object does not currently represent any tracks, or if none of the tracks are selected, it must
  instead return -1.

  The <dfn attribute for="VideoTrack"><code>VideoTrack.selected</code></dfn> attribute, on
  getting, must return true if the track is currently selected, and false otherwise. On setting, it
  must select the track if the new value is true, and unselect it otherwise. If the track is in a
  <code>VideoTrackList</code>, then all the other <code>VideoTrack</code> objects in that list must
  be unselected. (If the track is no longer in a {{VideoTrackList}} object, then the track
  being selected or unselected has no effect beyond changing the value of the attribute on the
  <code>VideoTrack</code> object.)

  Whenever a track in a <code>VideoTrackList</code> that was previously
  not selected is selected, and whenever the selected track in a <code>VideoTrackList</code> is
  unselected without a new track being selected in its stead, the user agent must <a>queue a task</a> to <a>fire a simple
  event</a> named <code>change</code> at the
  {{VideoTrackList}} object. This <a>task</a> must be <a>queued</a> before the <a>task</a> that fires
  the <code>resize</code> event, if any.

  A video track that has no data for a particular position on the <a>media timeline</a>
  must be interpreted as being fully transparent black at that point on the timeline, with the same
  dimensions as the last frame before that position, or, if the position is before all the data for
  that track, the same dimensions as the first frame for that track. A track that does not exist at
  all at the current position must be treated as if it existed but had no data.

  <p class="example">For instance, if a video has a track that is only introduced after one hour of
  playback, and the user selects that track then goes back to the start, then the user agent will
  act as if that track started at the start of the <a>media resource</a> but was simply
  transparent until one hour in.</p>

  <hr />

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) <span class="impl">that must be</span> supported, as <a>event handler IDL attributes</a>,
  by all objects implementing the <code>AudioTrackList</code> and <code>VideoTrackList</code>
  interfaces:

  <table>
    <thead>
    <tr><th><a>Event handler</a> </th><th><a>Event handler event type</a>
    </th></tr></thead><tbody>
    <tr><td><dfn attribute for="MediaTrackList"><code>onchange</code></dfn> </td><td> <code>change</code>
    </td></tr><tr><td><dfn attribute for="MediaTrackList"><code>onaddtrack</code></dfn> </td><td> <code>addtrack</code>
    </td></tr><tr><td><dfn attribute for="MediaTrackList"><code>onremovetrack</code></dfn> </td><td> <code>removetrack</code>
  </td></tr></tbody></table>

  </div>

<h6 id="selecting-specific-audio-and-video-tracks-declaratively">Selecting specific audio and video tracks declaratively</h6>

  The <code>audioTracks</code> and <code>videoTracks</code> attributes allow scripts to select which track
  should play, but it is also possible to select specific tracks declaratively, by specifying
  particular tracks in the fragment identifier of the <a for="url">URL</a> of the <a>media
  resource</a>. The format of the fragment identifier depends on the <a>MIME type</a> of
  the <a>media resource</a>. [[!RFC2046]] [[!URL]]

  <div class="example">
    In this example, a video that uses a format that supports the <cite>Media Fragments URI</cite>
    fragment identifier syntax is embedded in such a way that the alternative angles labeled
    "Alternative" are enabled instead of the default video track. [[!MEDIA-FRAGS]]

    <pre highlight="html">
&lt;video src="myvideo#track=Alternative"&gt;&lt;/video&gt;
    </pre>

  </div>

<h5 id="timed-text-tracks">Timed text tracks</h5>

<h6 id="text-track-model">Text track model</h6>

  A <a>media element</a> can have a group of associated <dfn>text
  tracks</dfn>, known as the <a>media element</a>'s <dfn>list of text tracks</dfn>. The <a>text tracks</a> are sorted as follows:

  <ol class="brief">

    <li>The <a>text tracks</a> corresponding to <{track}> element
    children of the <a>media element</a>, in <a>tree order</a>.</li>

    <li>Any <a>text tracks</a> added using the <code>addTextTrack()</code> method, in the order they were added, oldest
    first.</li>

    <li>Any <a>media-resource-specific text
    tracks</a> (<a>text tracks</a> corresponding to data in the
    <a>media resource</a>), in the order defined by the <a>media resource</a>'s format
    specification.</li>

  </ol>

  A <a>text track</a> consists of:

  <dl>

    <dt><dfn lt="kind of track|the kind of text track|kind|text track kind|text track kinds">The kind of text track</dfn>

    </dt><dd>

    This decides how the track is handled by the user agent. The kind is represented by a string.
    The possible strings are:

    <ul class="brief">
      <li><dfn><code>subtitles</code></dfn>
      </li><li><dfn><code>captions</code></dfn>
      </li><li><dfn><code>descriptions</code></dfn>
      </li><li><dfn><code>chapters</code></dfn>
      </li><li><dfn><code>metadata</code></dfn>
    </li></ul>

    The <a>kind of track</a> can change dynamically, in the case of
    a <a>text track</a> corresponding to a <{track}> element.

    </dd>

    <dt><dfn lt="label of a track|text track label|a label">A label</dfn>

    </dt><dd>

    This is a human-readable string intended to identify the track for the user.

    The <a>label of a track</a> can change dynamically, in the
    case of a <a>text track</a> corresponding to a <{track}> element.

    When a <a>text track label</a> is the empty string, the user agent should automatically
    generate an appropriate label from the text track's other properties (e.g., the kind of text
    track and the text track's language) for use in its user interface. This automatically-generated
    label is not exposed in the API.

    </dd>

    <dt><dfn lt="in-band metadata track dispatch type|an in-band metadata track dispatch type|text track in-band metadata track dispatch type">An in-band metadata track dispatch type</dfn>

    </dt><dd>

    This is a string extracted from the <a>media resource</a> specifically for in-band
    metadata tracks to enable such tracks to be dispatched to different scripts in the document.

    <p class="example">For example, a traditional TV station broadcast streamed on the Web and
    augmented with Web-specific interactive features could include text tracks with metadata for ad
    targeting, trivia game data during game shows, player states during sports games, recipe
    information during food programs, and so forth. As each program starts and ends, new tracks
    might be added or removed from the stream, and as each one is added, the user agent could bind
    them to dedicated script modules using the value of this attribute.</p>

    Other than for in-band metadata text tracks, the <a>in-band metadata track dispatch type</a> is the empty string. How this
    value is populated for different media formats is described in <a>steps to expose a
    media-resource-specific text track</a>.

    </dd>

    <dt><dfn lt="text track language|a language|language of a text track">A language</dfn>

    </dt><dd>

    This is a string (a BCP 47 language tag) representing the language of the text track's cues.
    [[!BCP47]]

    The <a>language of a text track</a> can change dynamically,
    in the case of a <a>text track</a> corresponding to a <{track}> element.

    </dd>

    <dt><dfn lt="a readiness state|text track readiness state|readiness state">A readiness state</dfn>

    </dt><dd>

    One of the following:

    <dl>

      <dt><dfn state for="track" lt="not loaded|text track not loaded|not yet been loaded">Not loaded</dfn>

      </dt><dd>

      Indicates that the text track's cues have not been obtained.

      </dd>

      <dt><dfn state for="track" lt="loading|text track loading">Loading</dfn>

      </dt><dd>

      Indicates that the text track is loading and there have been no fatal errors encountered so
      far. Further cues might still be added to the track by the parser.

      </dd>

      <dt><dfn state for="track" lt="loaded|text track loaded">Loaded</dfn>

      </dt><dd>

      Indicates that the text track has been loaded with no fatal errors.

      </dd>

      <dt><dfn state for="track" lt="text track failed to load|failed to load|failed">Failed to load</dfn>

      </dt><dd>

      Indicates that the text track was enabled, but when the user agent attempted to obtain it,
      this failed in some way (e.g., <a for="url">URL</a> could not be <a>resolved</a>, network error, unknown text track format). Some or all of the cues are
      likely missing and will not be obtained.

      </dd>

    </dl>

    The <a>readiness state</a> of a <a>text
    track</a> changes dynamically as the track is obtained.

    </dd>

    <dt><dfn lt="a mode|text track mode">A mode</dfn>

    </dt><dd>

    One of the following:

    <dl>

      <dt><dfn mode for="track" lt="disabled">Disabled</dfn>

      </dt><dd>

      Indicates that the text track is not active. Other than for the purposes of exposing the
      track in the DOM, the user agent is ignoring the text track. No cues are active, no events are
      fired, and the user agent will not attempt to obtain the track's cues.

      </dd>

      <dt><dfn mode for="track" lt="hidden">Hidden</dfn>

      </dt><dd>

      Indicates that the text track is active, but that the user agent is not actively displaying
      the cues. If no attempt has yet been made to obtain the track's cues, the user agent will
      perform such an attempt momentarily. The user agent is maintaining a list of which cues are
      active, and events are being fired accordingly.

      </dd>

      <dt><dfn mode for="track" lt="showing">Showing</dfn>

      </dt><dd>

      Indicates that the text track is active. If no attempt has yet been made to obtain the
      track's cues, the user agent will perform such an attempt momentarily. The user agent is
      maintaining a list of which cues are active, and events are being fired accordingly. In
      addition, for text tracks whose <a>kind</a> is <code>subtitles</code> or <code>captions</code>, the cues are being overlaid on the video
      as appropriate; for text tracks whose <a>kind</a> is <code>descriptions</code>, the user agent is making the
      cues available to the user in a non-visual fashion; and for text tracks whose <a>kind</a> is <code>chapters</code>, the user agent is making available to
      the user a mechanism by which the user can navigate to any point in the <a>media
      resource</a> by selecting a cue.

      </dd>

    </dl>

    </dd>

    <dt><dfn lt="list of cues|a list of zero or more cues|text track list of cues|list of cues of a text track">A list of zero or more cues</dfn>

    </dt><dd>

    A list of <a>text track cues</a>, along with <dfn>rules for
    updating the text track rendering</dfn>. For example, for <a>WebVTT</a>, the <a>rules
    for updating the display of WebVTT text tracks</a>. [[WEBVTT]]

    The <a>list of cues of a text track</a> can change
    dynamically, either because the <a>text track</a> has <a state for="track">not yet been loaded</a> or is still <a state for="track">loading</a>,
    or due to DOM manipulation.

    </dd>

  </dl>

  Each <a>text track</a> has a corresponding {{TextTrack}} object.

  <hr />

  Each <a>media element</a> has a <dfn>list of pending text tracks</dfn>, which must
  initially be empty, a <dfn>blocked-on-parser</dfn> flag, which must initially be false, and a
  <dfn>did-perform-automatic-track-selection</dfn> flag, which must also initially be false.

  When the user agent is required to <dfn>populate the list of pending text tracks</dfn> of a
  <a>media element</a>, the user agent must add to the element's <a>list of pending text
  tracks</a> each <a>text track</a> in the element's <a>list of text tracks</a> whose
  <a>text track mode</a> is not disabled and whose
  <a>text track readiness state</a> is  <a state for="track">loading</a>.

  Whenever a <{track}> element's parent node changes, the user agent must remove the
  corresponding <a>text track</a> from any <a>list of pending text tracks</a> that it is
  in.

  Whenever a <a>text track</a>'s <a>text track readiness state</a> changes to either
  <a state for="track">loaded</a> or <a state for="track">failed to load</a>, the user agent must remove it from any <a>list of pending text tracks</a> that
  it is in.

  When a <a>media element</a> is created by an <a>HTML parser</a> or <a>XML
  parser</a>, the user agent must set the element's <a>blocked-on-parser</a> flag to true.
  When a <a>media element</a> is popped off the <a>stack of open elements</a> of an
  <a>HTML parser</a> or <a>XML parser</a>, the user agent must <a>honor user
  preferences for automatic text track selection</a>, <a>populate the list of pending text
  tracks</a>, and set the element's <a>blocked-on-parser</a> flag to false.

  The <a>text tracks</a> of a <a>media element</a> are <dfn lt="the text tracks are ready|ready">ready</dfn> when both the element's <a>list of pending text
  tracks</a> is empty and the element's <a>blocked-on-parser</a> flag is false.

  Each <a>media element</a> has a <dfn>pending text track change notification flag</dfn>,
  which must initially be unset.

  Whenever a <a>text track</a> that is in a <a>media element</a>'s <a>list of text
  tracks</a> has its <a>text track mode</a> change value, the user agent must run the
  following steps for the <a>media element</a>:

  <ol>

    <li>If the <a>media element</a>'s <a>pending text track change notification
    flag</a> is set, abort these steps.</li>

    <li>Set the <a>media element</a>'s <a>pending text track change notification
    flag</a>.</li>

    <li>

    <a>Queue a task</a> that runs the following substeps:

    <ol>

      <li>Unset the <a>media element</a>'s <a>pending text track change notification
      flag</a>.</li>

      <li><a>Fire a simple event</a> named <code>change</code> at
      the <a>media element</a>'s <code>textTracks</code>
      attribute's {{TextTrackList}} object.</li>

    </ol>

    </li>

    <li>If the <a>media element</a>'s <a>show poster flag</a> is not set, run the
    <i>time marches on</i> steps.</li>

  </ol>

  The <a>task source</a> for the <a>tasks</a> listed in this
  section is the <a>DOM manipulation task source</a>.

  <hr />

  A <dfn lt="cue|cues|text track cue">text track cue</dfn> is the unit of time-sensitive data in a <a>text track</a>,
  corresponding for instance for subtitles and captions to the text that appears at a particular
  time and disappears at another time.

  Each <a>text track cue</a> consists of:

  <dl>

    <dt><dfn lt="text track cue identifier|an identifier">An identifier</dfn>
    </dt><dd>
    An arbitrary string.
    </dd>

    <dt><dfn lt="text track cue start time|a start time">A start time</dfn>
    </dt><dd>
    The time, in seconds and fractions of a second, that describes the beginning of the range of
    the <a>media data</a> to which the cue applies.
    </dd>

    <dt><dfn lt="text track cue end time|an end time">An end time</dfn>
    </dt><dd>
    The time, in seconds and fractions of a second, that describes the end of the range of the
    <a>media data</a> to which the cue applies.
    </dd>

    <dt><dfn lt="pause-on-exit flag|pause-on-exit|text track cue pause-on-exit flag">A pause-on-exit flag</dfn>
    </dt><dd>
    A boolean indicating whether playback of the <a>media resource</a> is to pause when the
    end of the range to which the cue applies is reached.
    </dd>

    <dt><dfn lt="text track cue data">Some additional format-specific data</dfn></dt>
    <dd>
    Additional fields, as needed for the format. For example, WebVTT has a <a>text track cue
    writing direction</a> and so forth. [[WEBVTT]]
    </dd>

    <dt><dfn lt="text track rules for extracting the chapter title|rules for extracting the chapter title">Rules for extracting the chapter title</dfn>
    </dt><dd>
    An algorithm which, when applied to the cue, returns a string that can be used in user
    interfaces that use the cue as a chapter title.
    </dd>

  </dl>

  <p class="note">
    The <a>text track cue start time</a> and <a>text track cue end
  time</a> can be negative. (The <a>current playback position</a> can never be negative,
  though, so cues entirely before time zero cannot be active.)
  </p>

  Each <a>text track cue</a> has a corresponding <code>TextTrackCue</code> object (or more
  specifically, an object that inherits from <code>TextTrackCue</code> — for example, WebVTT
  cues use the <code>VTTCue</code> interface). A <a>text track cue</a>'s in-memory
  representation can be dynamically changed through this <code>TextTrackCue</code> API. [[WEBVTT]]

  A <a>text track cue</a> is associated with <a>rules for updating the text track
  rendering</a>, as defined by the specification for the specific kind of <a>text track
  cue</a>. These rules are used specifically when the object representing the cue is added to a
  {{TextTrack}} object using the <code>addCue()</code>
  method.

  In addition, each <a>text track cue</a> has two pieces of dynamic information:

  <dl>

    <dt>The <dfn lt="text track cue active flag|active flag">active flag</dfn>
    </dt><dd>

    This flag must be initially unset. The flag is used to ensure events are fired appropriately
    when the cue becomes active or inactive, and to make sure the right cues are rendered.

    The user agent must immediately unset this flag whenever the <a>text track cue</a> is
    removed from its <a>text track</a>'s <a>text track list of cues</a>; whenever the
    <a>text track</a> itself is removed from its <a>media element</a>'s <a>list of
    text tracks</a> or has its <a>text track mode</a> changed to disabled; and whenever the <a>media element</a>'s <code>readyState</code> is changed back to <code>HAVE_NOTHING</code>. When the flag is unset in this way for one
    or more cues in <a>text tracks</a> that were <a mode for="track">showing</a> prior to the relevant incident, the user agent must, after having unset
    the flag for all the affected cues, apply the <a>rules for updating the text track
    rendering</a> of those <a>text tracks</a>. For example, for <a>text tracks</a> based on <a>WebVTT</a>, the <a>rules for updating
    the display of WebVTT text tracks</a>. [[WEBVTT]] </dd>

    <dt>The <dfn lt="text track cue display state|display state">display state</dfn>
    </dt><dd>

    This is used as part of the rendering model, to keep cues in a consistent position. It must
    initially be empty. Whenever the <a>text track cue active flag</a> is unset, the user
    agent must empty the <a>text track cue display state</a>.

    </dd>

  </dl>

  The <a>text track cues</a> of a <a>media element</a>'s
  <a>text tracks</a> are ordered relative to each other in the <dfn>text
  track cue order</dfn>, which is determined as follows: first group the <a>cues</a> by their <a>text track</a>, with the groups being sorted in the same order
  as their <a>text tracks</a> appear in the <a>media element</a>'s
  <a>list of text tracks</a>; then, within each group, <a>cues</a> must be sorted by their <a>start
  time</a>, earliest first; then, any <a>cues</a> with the same
  <a>start time</a> must be sorted by their <a>end time</a>, latest first; and finally, any <a>cues</a> with identical <a>end
  times</a> must be sorted in the order they were last added to their respective <a>text track
  list of cues</a>, oldest first (so e.g., for cues from a WebVTT file, that would initially be
  the order in which the cues were listed in the file). [[WEBVTT]]

<h6 id="sourcing-inband-text-tracks">Sourcing in-band text tracks</h6>

  A <dfn>media-resource-specific text track</dfn> is a <a>text track</a> that corresponds
  to data found in the <a>media resource</a>.

  <div class="impl">

  Rules for processing and rendering such data are defined by the relevant specifications, e.g.,
  the specification of the video format if the <a>media resource</a> is a video. Details for
  some legacy formats can be found in the <cite>Sourcing In-band Media Resource Tracks from Media
  Containers into HTML</cite> specification. [[INBANDTRACKS]]

  When a <a>media resource</a> contains data that the user agent recognizes and supports as
  being equivalent to a <a>text track</a>, the user agent <a>runs</a> the <dfn>steps to expose a
  media-resource-specific text track</dfn> with the relevant data, as follows.

  <ol>

    <li>Associate the relevant data with a new <a>text track</a> and its corresponding new
    {{TextTrack}} object. The <a>text track</a> is a <a>media-resource-specific
    text track</a>.</li>

    <li>Set the new <a>text track</a>'s <a>kind</a>, <a>label</a>, and <a>language</a>
    based on the semantics of the relevant data, as defined for the relevant format [[INBANDTRACKS]]. If there is no label in that data, then the <a>label</a> must be set to the empty string.</li>

    <li>Associate the <a>text track list of cues</a> with the <a>rules for updating the
    text track rendering</a> appropriate for the format in question.

    </li><li>

    If the new <a>text track</a>'s <a>kind</a> is <code>metadata</code>, then set the <a>text track in-band
    metadata track dispatch type</a> as follows, based on the type of the <a>media
    resource</a>:

    <dl class="switch">

      <dt>If the <a>media resource</a> is an Ogg file</dt>

      <dd>The <a>text track in-band metadata track dispatch type</a> must be set to the value
      of the Role header field. [[!OGGSKELETON]]</dd>

      <dt>If the <a>media resource</a> is a WebM file</dt>

      <dd>The <a>text track in-band metadata track dispatch type</a> must be set to the value
      of the <code>CodecID</code> element. [[!WEBM]]</dd>

      <dt>If the <a>media resource</a> is an MPEG-2 file</dt>

      <dd>Let <var>stream type</var> be the value of the "stream_type" field describing the
      text track's type in the file's program map section, interpreted as an 8-bit unsigned integer.
      Let <var>length</var> be the value of the "ES_info_length" field for the track in the
      same part of the program map section, interpreted as an integer as defined by the MPEG-2
      specification. Let <var>descriptor bytes</var> be the <var>length</var> bytes
      following the "ES_info_length" field. The <a>text track in-band metadata track dispatch
      type</a> must be set to the concatenation of the <var>stream type</var> byte and
      the zero or more <var>descriptor bytes</var> bytes, expressed in hexadecimal using
      <a>uppercase ASCII hex digits</a>. [[!MPEG2TS]]

      </dd>

      <dt>If the <a>media resource</a> is an MPEG-4 file</dt>

      <dd>Let the
      first <code>stsd</code> box of the
      first <code>stbl</code> box of the
      first <code>minf</code> box of the
      first <code>mdia</code> box of the
      <a>text track</a>'s <code>trak</code> box in the
      first <code>moov</code> box
      of the file be the <i>stsd box</i>, if any.

      If the file has no <i>stsd box</i>, or if the <i>stsd box</i> has neither a <code>mett</code> box nor a <code>metx</code> box, then the <a>text track
      in-band metadata track dispatch type</a> must be set to the empty string.

      Otherwise, if the <i>stsd box</i> has a <code>mett</code> box then the <a>text
      track in-band metadata track dispatch type</a> must be set to the concatenation of the
      string "<code>mett</code>", a U+0020 SPACE character, and the value of the first <code>mime_format</code> field of the first <code>mett</code> box of the <i>stsd
      box</i>, or the empty string if that field is absent in that box.

      Otherwise, if the <i>stsd box</i> has no <code>mett</code> box but has a <code>metx</code> box then the <a>text track in-band metadata track dispatch type</a>
      must be set to the concatenation of the string "<code>metx</code>", a U+0020 SPACE
      character, and the value of the first <code>namespace</code> field of the first <code>metx</code> box of the <i>stsd box</i>, or the empty string if that field is absent in
      that box.

      [[!MPEG4]]

      </dd>

      <dt>If the <a>media resource</a> is a DASH media resource</dt>

      <dd>The <a>text track in-band metadata track dispatch type</a> must be set to the concatenation
      of the "AdaptationSet" element attributes and all child Role descriptors. [[!MPEGDASH]]

      </dd>

    </dl>

    </li>

    <li>Populate the new <a>text track</a>'s <a>list of
    cues</a> with the cues parsed so far, following the <a>guidelines for exposing
    cues</a>, and begin updating it dynamically as necessary.</li>

    <li>Set the new <a>text track</a>'s <a>readiness
    state</a> to <a state for="track">loaded</a>.</li>

    <li>Set the new <a>text track</a>'s mode to the
    mode consistent with the user's preferences and the requirements of the relevant specification
    for the data.

    <p class="note">
    For instance, if there are no other active subtitles, and this is a forced
    subtitle track (a subtitle track giving subtitles in the audio track's primary language, but
    only for audio that is actually in another language), then those subtitles might be activated
    here.
  </p>

    </li>

    <li>Add the new <a>text track</a> to the <a>media element</a>'s <a>list of text
    tracks</a>.</li>

    <li><a>Fire</a> a <a>trusted</a> event with the name <code>addtrack</code>, that does not bubble and is not cancelable, and that uses
    the {{TrackEvent}} interface, with the <code>track</code>
    attribute initialized to the <a>text track</a>'s {{TextTrack}} object, at the
    <a>media element</a>'s <code>textTracks</code> attribute's
    {{TextTrackList}} object.</li>

  </ol>

  </div>

  <div class="impl">

<h6 id="sourcing-outofband-text-tracks">Sourcing out-of-band text tracks</h6>

  When a <{track}> element is created, it must be associated with a new <a>text
  track</a> (with its value set as defined below) and its corresponding new
  {{TextTrack}} object.

  The <a>text track kind</a> is determined from the state of the element's <code>kind</code> attribute according to the following table; for a state given
  in a cell of the first column, the <a>kind</a> is the string given
  in the second column:

  <table>
    <thead>
    <tr>
      <th>State
      </th><th>String
    </th></tr></thead><tbody>
    <tr>
      <td><a state for="track">Subtitles</a>
      </td><td><code>subtitles</code>
    </td></tr><tr>
      <td><a state for="track">Captions</a>
      </td><td><code>captions</code>
    </td></tr><tr>
      <td><a state for="track">Descriptions</a>
      </td><td><code>descriptions</code>
    </td></tr><tr>
      <td><a state for="track">Chapters</a>
      </td><td><code>chapters</code>
    </td></tr><tr>
      <td><a state for="track">Metadata</a>
      </td><td><code>metadata</code>
  </td></tr></tbody></table>

  The <a>text track label</a> is the element's <a>track label</a>.

  The <a>text track language</a> is the element's <a>track language</a>, if any, or
  the empty string otherwise.

  As the <code>kind</code>, <code>label</code>,
  and <code>srclang</code> attributes are set, changed, or removed, the
  <a>text track</a> must update accordingly, as per the definitions above.

  <p class="note">
    Changes to the <a>track URL</a> are handled in the algorithm below.
  </p>

  The <a>text track readiness state</a> is initially <a state for="track">not loaded</a>, and the <a>text track mode</a> is initially disabled.

  The <a>text track list of cues</a> is initially empty. It is dynamically modified when
  the referenced file is parsed. Associated with the list are the <a>rules for updating the text
  track rendering</a> appropriate for the format in question; for <a>WebVTT</a>, this is
  the <a>rules for updating the display of WebVTT text tracks</a>. [[WEBVTT]]

  When a <{track}> element's parent element changes and the new parent is a <a>media element</a>, then the user agent must add the <{track}> element's corresponding
  <a>text track</a> to the <a>media element</a>'s <a>list of text tracks</a>, and
  then <a>queue a task</a> to <a>fire</a> a <a>trusted</a> event with the name <code>addtrack</code>, that does not bubble and is not cancelable, and that uses
  the {{TrackEvent}} interface, with the <code>track</code>
  attribute initialized to the <a>text track</a>'s {{TextTrack}} object, at the
  <a>media element</a>'s <code>textTracks</code> attribute's
  {{TextTrackList}} object.

  When a <{track}> element's parent element changes and the old parent was a <a>media element</a>, then the user agent must remove the <{track}> element's corresponding
  <a>text track</a> from the <a>media element</a>'s <a>list of text tracks</a>,
  and then <a>queue a task</a> to <a>fire</a> a <a>trusted</a> event with the name <code>removetrack</code>, that does not bubble and is not cancelable, and that
  uses the {{TrackEvent}} interface, with the <code>track</code> attribute initialized to the <a>text track</a>'s
  {{TextTrack}} object, at the <a>media element</a>'s <code>textTracks</code> attribute's {{TextTrackList}} object.

  <hr />

  When a <a>text track</a> corresponding to a <{track}> element is added to a
  <a>media element</a>'s <a>list of text tracks</a>, the user agent must <a>queue a
  task</a> to run the following steps for the <a>media element</a>:

  <ol>

    <li>If the element's <a>blocked-on-parser</a> flag is true, abort these steps.</li>

    <li>If the element's <a>did-perform-automatic-track-selection</a> flag is true, abort
    these steps.</li>

    <li><a>Honor user preferences for automatic text track selection</a> for this
    element.</li>

  </ol>

  When the user agent is required to <dfn>honor user preferences for automatic text track
  selection</dfn> for a <a>media element</a>, the user agent must run the following steps:

  <ol>

    <li><a>Perform automatic text track selection</a> for <code>subtitles</code> and <code>captions</code>.</li>

    <li><a>Perform automatic text track selection</a> for <code>descriptions</code>.</li>

    <li><a>Perform automatic text track selection</a> for <code>chapters</code>.</li>

    <li>If there are any <a>text tracks</a> in the <a>media element</a>'s <a>list of text tracks</a> whose <a>text track kind</a> is <code>metadata</code> that correspond to <code>track</code>
    elements with a <code>default</code> attribute set whose <a>text
    track mode</a> is set to disabled, then set the
    <a>text track mode</a> of all such tracks to <a>hidden</a></li>

    <li>Set the element's <a>did-perform-automatic-track-selection</a> flag to
    true.</li>

  </ol>

  When the steps above say to <dfn>perform automatic text track selection</dfn> for one or more
  <a>text track kinds</a>, it means to run the following steps:

  <ol>

    <li>Let <var>candidates</var> be a list consisting of the <a>text tracks</a> in the <a>media element</a>'s <a>list of text tracks</a>
    whose <a>text track kind</a> is one of the kinds that were passed to the algorithm, if any,
    in the order given in the <a>list of text tracks</a>.</li>

    <li>If <var>candidates</var> is empty, then abort these steps.</li>

    <li>If any of the <a>text tracks</a> in <var>candidates</var> have a <a>text track mode</a> set to <a mode for="track">showing</a>, abort these steps.</li>

    <li>

    If the user has expressed an interest in having a track from <var>candidates</var>
    enabled based on its <a>text track kind</a>, <a>text track language</a>, and
    <a>text track label</a>, then set its <a>text track mode</a> to <a mode for="track">showing</a>.

    <p class="note">
    For example, the user could have set a browser preference to the effect of "I
    want French captions whenever possible", or "If there is a subtitle track with &quot;Commentary&quot; in
    the title, enable it", or "If there are audio description tracks available, enable one, ideally
    in Swiss German, but failing that in Standard Swiss German or Standard German".
  </p>

    Otherwise, if there are any <a>text tracks</a> in <var>candidates</var> that correspond to <{track}> elements with a <code>default</code> attribute set whose <a>text track mode</a> is
    set to disabled, then set the <a>text track
    mode</a> of the first such track to <a mode for="track">showing</a>.

    </li>

  </ol>

  When a <a>text track</a> corresponding to a <{track}> element experiences any of
  the following circumstances, the user agent must <a>start the <code>track</code> processing
  model</a> for that <a>text track</a> and its <{track}> element:

  <ul>

    <li>The <{track}> element is created.</li>

    <li>The <a>text track</a> has its <a>text track mode</a> changed.</li>

    <li>The <{track}> element's parent element changes and the new parent is a <a>media element</a>.</li>

  </ul>

  When a user agent is to <dfn>start the <code>track</code> processing model</dfn> for a
  <a>text track</a> and its <{track}> element, it must run the following algorithm.
  This algorithm interacts closely with the <a>event loop</a> mechanism; in particular, it has
  a <a>synchronous section</a> (which is triggered as part of the <a>event loop</a>
  algorithm). The steps in that section are marked with &#x231B;.

  <ol>

    <li>If another occurrence of this algorithm is already running for this <a>text
    track</a> and its <{track}> element, abort these steps, letting that other algorithm
    take care of this element.</li>

    <li>If the <a>text track</a>'s <a>text track mode</a> is not set to one of <a>hidden</a> or <a mode for="track">showing</a>, abort
    these steps.</li>

    <li>If the <a>text track</a>'s <{track}> element does not have a <a>media element</a> as a parent, abort these steps.</li>

    <li>Run the remainder of these steps <a>in parallel</a>, allowing whatever caused these steps to
    run to continue.</li>

    <li><i>Top</i>: <a>Await a stable state</a>. The <a>synchronous section</a>
    consists of the following steps. (The steps in the <a>synchronous section</a> are marked
    with &#x231B;.)</li>

    <li>&#x231B; Set the <a>text track readiness state</a> to <a state for="track">loading</a>.</li>

    <li>&#x231B; Let <var>URL</var> be the <a>track URL</a> of the
    <{track}> element.</li>

    <li>&#x231B; If the <{track}> element's parent is a <a>media element</a> then
    let <var>corsAttributeState</var> be the state of the parent <a>media element</a>'s <code>crossorigin</code> content attribute. Otherwise, let
    <var>corsAttributeState</var> be <a state for="cors">No CORS</a>.</li>

    <li>End the <a>synchronous section</a>, continuing the remaining steps
    <a>in parallel</a>.</li>

    <li>

    If <var>URL</var> is not the empty string, run these substeps:

    <ol>
      <li>Let <var>request</var> be the result of <a>creating a potential-CORS request</a> given
      <var>URL</var>, <var>corsAttributeState</var>, and with the <i>same-origin fallback flag</i>
      set.</li>

      <li>Set <var>request</var>'s <a>client</a> to the
      <{track}> element's <a>node document</a>'s <code>Window</code> object's
      <a>environment settings object</a> and <a for="request">type</a> to
      "<code>track</code>".</li>

      <li><a>Fetch</a> <var>request</var>.</li>
    </ol>

    The <a>tasks</a> <a>queued</a> by the
    <a>fetching algorithm</a> on the <a>networking task source</a> to
    process the data as it is being fetched must determine the  type of the resource. If the
     type of the resource is not a supported text track format, the load will fail, as
    described below. Otherwise, the resource's data must be passed to the appropriate parser (e.g.,
    the <a>WebVTT parser</a>) as it is received, with the <a>text track list of cues</a> being used for
    that parser's output. [[WEBVTT]]

    <p class="note">
    The appropriate parser will incrementally update the <a>text track list of
    cues</a> during these <a>networking task
    source</a> <a>tasks</a>, as each such task is
    run with whatever data has been received from the network).
  </p>

    <p class="critical">This specification does not currently say whether or how to check the MIME
    types of text tracks, or whether or how to perform file type sniffing using the actual file
    data. Implementors differ in their intentions on this matter and it is therefore unclear what
    the right solution is. In the absence of any requirement here, the HTTP specification's strict
    requirement to follow the Content-Type header prevails ("Content-Type specifies the media type
    of the underlying data." ... "If and only if the media type is not given by a Content-Type
    field, the recipient MAY attempt to guess the media type via inspection of its content
    and/or the name extension(s) of the URI used to identify the resource.").</p>

    If the <a>fetching algorithm</a> fails for any reason (network error,
    the server returns an error code, a cross-origin check fails, etc), or if <var>URL</var> is the empty string, then <a>queue a task</a> to first change the
    <a>text track readiness state</a> to <a state for="track">failed to load</a> and then <a>fire a simple event</a> named <code>error</code> at the <{track}> element. This <a>task</a> must use the <a>DOM manipulation task source</a>.

    If the <a>fetching algorithm</a> does not fail, but the
    type of the resource is not a supported text track format, or the file was not successfully
    processed (e.g., the format in question is an XML format and the file contained a well-formedness
    error that the XML specification requires be detected and reported to the application), then the
    <a>task</a> that is <a>queued</a> by the
    <a>networking task source</a> in which the aforementioned problem is found must change the
    <a>text track readiness state</a> to <a state for="track">failed to load</a> and <a>fire a simple event</a> named <code>error</code>
    at the <{track}> element.

    If the <a>fetching algorithm</a> does not fail, and the file was
    successfully processed, then the final <a>task</a> that is <a>queued</a> by the <a>networking task source</a>, after it has
    finished parsing the data, must change the <a>text track readiness state</a> to <a state for="track">loaded</a>, and <a>fire a simple event</a> named <code>load</code> at the <{track}> element.

    If, while fetching is ongoing, either:

    <ul>

      <li>the <a>track URL</a> changes so that it is no longer equal to <var>URL</var>, while the <a>text track mode</a> is set to <a>hidden</a> or <a mode for="track">showing</a>; or</li>

      <li>the <a>text track mode</a> changes to <a>hidden</a>
      or <a mode for="track">showing</a>, while the <a>track URL</a> is not
      equal to <var>URL</var></li>

    </ul>

    ...then the user agent must abort <a>fetching</a>, discarding
    any pending <a>tasks</a> generated by that algorithm (and
    in particular, not adding any cues to the <a>text track list of cues</a> after the moment
    the URL changed), and then <a>queue a task</a> that first changes the <a>text track
    readiness state</a> to <a state for="track">failed to load</a> and
    then <a>fires a simple event</a> named <code>error</code> at the <{track}> element. This <a>task</a> must use the <a>DOM manipulation task source</a>.

    </li>

    <li>Wait until the <a>text track readiness state</a> is no longer set to <a state for="track">loading</a>.</li>

    <li>Wait until the <a>track URL</a> is no longer equal to <var>URL</var>, at
    the same time as the <a>text track mode</a> is set to <a>hidden</a> or <a mode for="track">showing</a>.</li>

    <li>Jump to the step labeled <i>top</i>.</li>

  </ol>

  Whenever a <{track}> element has its <code>src</code> attribute
  set, changed, or removed, the user agent must <a>immediately</a> empty the element's <a>text
  track</a>'s <a>text track list of cues</a>. (This also causes the algorithm above to stop
  adding cues from the resource being obtained using the previously given URL, if any.)

  </div>

  <div class="impl">

<h6 id="guidelines-for-exposing-cues-in-various-formats-as-text-track-cues"><dfn>Guidelines for exposing cues</dfn> in various formats as <a>text track cues</a></h6>

  How a specific format's text track cues are to be interpreted for the purposes of processing by
  an HTML user agent is defined by that format [[INBANDTRACKS]]. In the
  absence of such a specification, this section provides some constraints within which implementations can
  attempt to consistently expose such formats.

  To support the <a>text track</a> model of HTML, each unit of timed data is converted to a
  <a>text track cue</a>. Where the mapping of the format's features to the aspects of a
  <a>text track cue</a> as defined in this specification are not defined, implementations must
  ensure that the mapping is consistent with the definitions of the aspects of a <a>text track
  cue</a> as defined above, as well as with the following constraints:

  <dl>

    <dt>The <a>text track cue identifier</a>
    </dt><dd>
    Should be set to the empty string if the format has no obvious analog to a per-cue
    identifier.
    </dd>

    <dt>The <a>text track cue pause-on-exit flag</a>
    </dt><dd>
    Should be set to false.
    </dd>

  </dl>

    For <a>media-resource-specific text tracks</a>
    of <a>kind</a> <code>metadata</code>,
    <a>text track cues</a> are exposed using the <code>DataCue</code> object
    unless there is a more appropriate <code>TextTrackCue</code> interface available.
    For example, if the <a>media-resource-specific text track</a> format is <a>WebVTT</a>,
    then <code>VTTCue</code> is more appropriate.

  </div>

<h6 id="text-track-api">Text track API</h6>

  <pre class="idl" data-highlight="webidl" dfn-for="TextTrackList">
    interface TextTrackList : EventTarget {
      readonly attribute unsigned long length;
      getter TextTrack (unsigned long index);
      TextTrack? getTrackById(DOMString id);

      attribute EventHandler onchange;
      attribute EventHandler onaddtrack;
      attribute EventHandler onremovetrack;
    };
  </pre>

  <dl class="domintro">

    <dt><var>media</var> . <code>textTracks</code> . <code>length</code></dt>
    <dd>
    Returns the number of <a>text tracks</a> associated with the <a>media element</a> (e.g., from <{track}> elements). This is the number of <a>text tracks</a> in the <a>media element</a>'s <a>list of text tracks</a>.
    </dd>

    <dt><var>media</var> . <code>textTracks[</code> <var>n</var> <code>]</code></dt>
    <dd>
    Returns the {{TextTrack}} object representing the <var>n</var>th <a>text track</a> in the <a>media element</a>'s <a>list of text tracks</a>.
    </dd>

    <dt><var>textTrack</var> = <var>media</var> . <code>textTracks</code> . <code>getTrackById</code>( <var>id</var> )</dt>

    <dd>

    Returns the {{TextTrack}} object with the given identifier, or null if no track has that identifier.

    </dd>

  </dl>

  <div class="impl">

  A {{TextTrackList}} object represents a dynamically updating list of <a>text tracks</a> in a given order.

  The <dfn attribute for="HTMLMediaElement">textTracks</dfn> attribute of <a>media elements</a> must
  return a {{TextTrackList}} object representing the {{TextTrack}} objects of the <a>text tracks</a>
  in the <a>media element</a>'s <a>list of text tracks</a>, in the same order as in the
  <a>list of text tracks</a>.

  The <dfn attribute for="TextTrackList">length</dfn> attribute of a
  {{TextTrackList}} object must return the number of <a>text tracks</a>
  in the list represented by the {{TextTrackList}} object.

  The <a>supported property indices</a> of a {{TextTrackList}} object at any
  instant are the numbers from zero to the number of <a>text tracks</a> in
  the list represented by the {{TextTrackList}} object minus one, if any. If there are no
  <a>text tracks</a> in the list, there are no <a>supported property indices</a>.

  To <a>determine the value of an indexed property</a> of a {{TextTrackList}}
  object for a given index <var>index</var>, the user agent must return the
  <var>index</var>th <a>text track</a> in the list represented by the {{TextTrackList}} object.

  The <dfn method for="TextTrackList">getTrackById(<var>id</var>)</dfn> method must return the
  first {{TextTrack}} in the {{TextTrackList}} object whose <a attribute for="TextTrack">id</a> IDL
  attribute would return a value equal to the value of the <var>id</var> argument. When no tracks
  match the given argument, the method must return null.

  </div>

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="TextTrack">
    enum TextTrackMode { "disabled",  "hidden",  "showing" };

    enum TextTrackKind { "subtitles",  "captions",  "descriptions",  "chapters",  "metadata" };

    interface TextTrack : EventTarget {
      readonly attribute TextTrackKind kind;
      readonly attribute DOMString label;
      readonly attribute DOMString language;

      readonly attribute DOMString id;
      readonly attribute DOMString inBandMetadataTrackDispatchType;

      attribute TextTrackMode mode;

      readonly attribute TextTrackCueList? cues;
      readonly attribute TextTrackCueList? activeCues;

      void addCue(TextTrackCue cue);
      void removeCue(TextTrackCue cue);

      attribute EventHandler oncuechange;
    };
  </pre>

  <dl class="domintro">

    <dt><var>textTrack</var> = <var>media</var> . <code>addTextTrack</code>( <var>kind</var> [, <var>label</var> [, <var>language</var> ] ] )</dt>
    <dd>

    Creates and returns a new {{TextTrack}} object, which is also added to the
    <a>media element</a>'s <a>list of text tracks</a>.

    </dd>

    <dt><var>textTrack</var> . <code>kind</code></dt>
    <dd>

    Returns the <a>text track kind</a> string.

    </dd>

    <dt><var>textTrack</var> . <code>label</code></dt>
    <dd>

    Returns the <a>text track label</a>, if there is one, or the empty string otherwise
    (indicating that a custom label probably needs to be generated from the other attributes of the
    object if the object is exposed to the user).

    </dd>

    <dt><var>textTrack</var> . <code>language</code></dt>
    <dd>
    Returns the <a>text track language</a> string.
    </dd>

    <dt><var>textTrack</var> . <code>id</code></dt>
    <dd>

    Returns the ID of the given track.

    For in-band tracks, this is the ID that can be used with a fragment identifier if the format
    supports the <cite>Media Fragments URI</cite> syntax, and that can be used with the <code>getTrackById()</code> method. [[!MEDIA-FRAGS]]

    For {{TextTrack}} objects corresponding to <{track}> elements, this is the
    ID of the <{track}> element.

    </dd>

    <dt><var>textTrack</var> . <code>inBandMetadataTrackDispatchType</code></dt>
    <dd>

    Returns the <a>text track in-band metadata track dispatch type</a> string.

    </dd>

    <dt><var>textTrack</var> . <code>mode</code> [ = <var>value</var> ]</dt>
    <dd>

    Returns the <a>text track mode</a>, represented by a string from the following
    list:

    <dl>
      <dt>"<code>disabled</code>"</dt>
      <dd>
      The <a mode for="track" lt="disabled">text track disabled</a> mode.
      </dd>
      <dt>"<code>hidden</code>"</dt>
      <dd>
      The <a mode for="track" lt="hidden">text track hidden</a> mode.
      </dd>
      <dt>"<code>showing</code>"</dt>
      <dd>
      The <a mode for="track" lt="showing">text track showing</a> mode.
      </dd>
    </dl>

    Can be set, to change the mode.

    </dd>

    <dt><var>textTrack</var> . <code>cues</code></dt>
    <dd>
    Returns the <a>text track list of cues</a>, as a <code>TextTrackCueList</code> object.
    </dd>

    <dt><var>textTrack</var> . <code>activeCues</code></dt>
    <dd>

    Returns the <a>text track cues</a> from the <a>text track
    list of cues</a> that are currently active (i.e., that start before the <a>current playback
    position</a> and end after it), as a <code>TextTrackCueList</code> object.

    </dd>

    <dt><var>textTrack</var> . <code>addCue</code>( <var>cue</var> )</dt>
    <dd>
    Adds the given cue to <var>textTrack</var>'s <a>text track list of cues</a>.
    </dd>

    <dt><var>textTrack</var> . <code>removeCue</code>( <var>cue</var> )</dt>
    <dd>
    Removes the given cue from <var>textTrack</var>'s <a>text track list of cues</a>.
    </dd>

  </dl>

  <div class="impl">

  The <dfn method for="TextTrack"><code>addTextTrack(<var>kind</var>, <var>label</var>, <var>language</var>)</code></dfn> method of <a>media elements</a>, when invoked, must run the following steps:

  <ol>

    <li>

    Create a new {{TextTrack}} object.

    </li>

    <li>

    Create a new <a>text track</a> corresponding to the new object, and set its <a>text
    track kind</a> to <var>kind</var>, its <a>text track label</a> to <var>label</var>, its <a>text track language</a> to <var>language</var>, its
    <a>text track readiness state</a> to the <a state for="track" lt="loaded">text track loaded</a> state, its
    <a>text track mode</a> to the <a mode for="track" lt="hidden">text track hidden</a> mode, and its <a>text
    track list of cues</a> to an empty list.

    Initially, the <a>text track list of cues</a> is not associated with any <a>rules
    for updating the text track rendering</a>. When a <a>text track cue</a> is added to it,
    the <a>text track list of cues</a> has its rules permanently set accordingly.

    </li>

    <li>

    Add the new <a>text track</a> to the <a>media element</a>'s <a>list of text
    tracks</a>.

    </li>

    <li>

    <a>Queue a task</a> to <a>fire</a> a <a>trusted</a> event with the name <code>addtrack</code>, that does not bubble and is not cancelable, and
    that uses the {{TrackEvent}} interface, with the <code>track</code> attribute initialized to the new <a>text
    track</a>'s {{TextTrack}} object, at the <a>media element</a>'s <code>textTracks</code> attribute's <code>TextTrackList</code>
    object.

    </li>

    <li>

    Return the new {{TextTrack}} object.

    </li>

  </ol>

  <hr />

  The <dfn attribute for="TextTrack"><code>kind</code></dfn> attribute must return the
  <a>text track kind</a> of the <a>text track</a> that the {{TextTrack}} object
  represents.

  The <dfn attribute for="TextTrack"><code>label</code></dfn> attribute must return the
  <a>text track label</a> of the <a>text track</a> that the {{TextTrack}}
  object represents.

  The <dfn attribute for="TextTrack"><code>language</code></dfn> attribute must return the
  <a>text track language</a> of the <a>text track</a> that the {{TextTrack}}
  object represents.

  The <dfn attribute for="TextTrack"><code>id</code></dfn> attribute returns the track's
  identifier, if it has one, or the empty string otherwise. For tracks that correspond to
  <{track}> elements, the track's identifier is the value of the element's <code>id</code> attribute, if any. For in-band tracks, the track's identifier is
  specified by the <a>media resource</a>. If the <a>media resource</a> is in a format
  that supports the <cite>Media Fragments URI</cite> fragment identifier syntax, the identifier
  returned for a particular track must be the same identifier that would enable the track if used as
  the name of a track in the track dimension of such a fragment identifier. [[!MEDIA-FRAGS]]

  The <dfn attribute for="TextTrack"><code>inBandMetadataTrackDispatchType</code></dfn>
  attribute must return the <a>text track in-band metadata track dispatch type</a> of the
  <a>text track</a> that the {{TextTrack}} object represents.

  The <dfn attribute for="TextTrack"><code>mode</code></dfn> attribute, on getting, must return
  the string corresponding to the <a>text track mode</a> of the <a>text track</a> that
  the {{TextTrack}} object represents, as defined by the following list:

  <dl>
    <dt>"<dfn enum for="TextTrackMode"><code>disabled</code></dfn>"</dt>
    <dd>The <a mode for="track" lt="disabled">text track disabled</a> mode.</dd>
    <dt>"<dfn enum for="TextTrackMode"><code>hidden</code></dfn>"</dt>
    <dd>The <a mode for="track" lt="hidden">text track hidden</a> mode.</dd>
    <dt>"<dfn enum for="TextTrackMode"><code>showing</code></dfn>"</dt>
    <dd>The <a mode for="track" lt="showing">text track showing</a> mode.</dd>
  </dl>

  On setting, if the new value isn't equal to what the attribute would currently return, the new
  value must be processed as follows:

  <dl class="switch">

    <dt>If the new value is "<code>disabled</code>"</dt>

    <dd>

    Set the <a>text track mode</a> of the <a>text track</a> that the
    {{TextTrack}} object represents to the <a mode for="track" lt="disabled">text track disabled</a> mode.

    </dd>

    <dt>If the new value is "<code>hidden</code>"</dt>

    <dd>

    Set the <a>text track mode</a> of the <a>text track</a> that the
    {{TextTrack}} object represents to the <a mode for="track" lt="hidden">text track hidden</a> mode.

    </dd>

    <dt>If the new value is "<code>showing</code>"</dt>

    <dd>

    Set the <a>text track mode</a> of the <a>text track</a> that the
    {{TextTrack}} object represents to the <a mode for="track" lt="showing">text track showing</a> mode.

    </dd>

  </dl>

  If the <a>text track mode</a> of the <a>text track</a> that the
  {{TextTrack}} object represents is not the <a mode for="track" lt="disabled">text track disabled</a> mode, then
  the <dfn attribute for="TextTrack"><code>cues</code></dfn> attribute must return a
  <a>live</a> <code>TextTrackCueList</code> object that represents the subset of the
  <a>text track list of cues</a> of the <a>text track</a> that the
  {{TextTrack}} object represents whose <a>end
  times</a> occur at or after the <a>earliest possible position when the script
  started</a>, in <a>text track cue order</a>. Otherwise, it must return null. For each {{TextTrack}} object, when an
  object is returned, the same <code>TextTrackCueList</code> object must be returned each time.

  The <dfn>earliest possible position when the script started</dfn> is whatever the
  <a>earliest possible position</a> was the last time the <a>event loop</a> reached step 1.

  If the <a>text track mode</a> of the <a>text track</a> that the
  {{TextTrack}} object represents is not the <a mode for="track" lt="disabled">text track disabled</a> mode, then
  the <dfn attribute for="TextTrack"><code>activeCues</code></dfn> attribute must return a
  <a>live</a> <code>TextTrackCueList</code> object that represents the subset of the
  <a>text track list of cues</a> of the <a>text track</a> that the
  {{TextTrack}} object represents whose <a>active flag was set when the script
  started</a>, in <a>text track cue order</a>. Otherwise, it must return null. For each {{TextTrack}} object, when an
  object is returned, the same <code>TextTrackCueList</code> object must be returned each time.

  A <a>text track cue</a>'s <dfn>active flag was set when the script started</dfn> if its
  <a>text track cue active flag</a> was set the last time the <a>event loop</a> reached
  step 1.

  <hr />

  The <dfn method for="TextTrack"><code>addCue(<var>cue</var>)</code></dfn> method
  of {{TextTrack}} objects, when invoked, must run the following steps:

  <ol>

    <li>If the <a>text track list of cues</a> does not yet have any associated <a>rules
    for updating the text track rendering</a>, then associate the <a>text track list of
    cues</a> with the <a>rules for updating the text track rendering</a> appropriate to <var>cue</var>.

    </li><li>If <a>text track list of cues</a>' associated <a>rules for updating the text
    track rendering</a> are not the same <a>rules for updating the text track rendering</a>
    as appropriate for <var>cue</var>, then throw an <code>InvalidStateError</code>
    exception and abort these steps.

    </li><li>If the given <var>cue</var> is in a <a>text track list of cues</a>, then
    remove <var>cue</var> from that <a>text track list of cues</a>.</li>

    <li>Add <var>cue</var> to the method's {{TextTrack}} object's <a>text
    track</a>'s <a>text track list of cues</a>.</li>

  </ol>

  The <dfn method for="TextTrack"><code>removeCue(<var>cue</var>)</code></dfn>
  method of {{TextTrack}} objects, when invoked, must run the following steps:

  <ol>

    <li>If the given <var>cue</var> is not currently listed in the method's
    {{TextTrack}} object's <a>text track</a>'s <a>text track list of cues</a>,
    then throw a <code>NotFoundError</code> exception and abort these steps.</li>

    <li>Remove <var>cue</var> from the method's {{TextTrack}} object's
    <a>text track</a>'s <a>text track list of cues</a>.</li>

  </ol>

  </div>

  <div class="example">
    In this example, an <{audio}> element is used to play a specific sound-effect from a
    sound file containing many sound effects. A cue is used to pause the audio, so that it ends
    exactly at the end of the clip, even if the browser is busy running some script. If the page had
    relied on script to pause the audio, then the start of the next clip might be heard if the
    browser was not able to run the script at the exact time specified.

    <pre highlight="javascript">
      var sfx = new Audio('sfx.wav');
      var sounds = sfx.addTextTrack('metadata');

      // add sounds we care about
      function addFX(start, end, name) {
        var cue = new VTTCue(start, end, '');
        cue.id = name;
        cue.pauseOnExit = true;
        sounds.addCue(cue);
      }
      addFX(12.783, 13.612, 'dog bark');
      addFX(13.612, 15.091, 'kitten mew'))

      function playSound(id) {
        sfx.currentTime = sounds.getCueById(id).startTime;
        sfx.play();
      }

      // play a bark as soon as we can
      sfx.oncanplaythrough = function () {
        playSound('dog bark');
      }
      // meow when the user tries to leave
      window.onbeforeunload = function () {
        playSound('kitten mew');
        return 'Are you sure you want to leave this awesome page?';
      }
    </pre>

  </div>

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="TextTrackCueList">
    interface TextTrackCueList {
      readonly attribute unsigned long length;
      getter TextTrackCue (unsigned long index);
      TextTrackCue? getCueById(DOMString id);
    };
  </pre>

  <dl class="domintro">

    <dt><var>cuelist</var> . <code>length</code></dt>
    <dd>
    Returns the number of <a>cues</a> in the list.
    </dd>

    <dt><var>cuelist</var>[<var>index</var>]</dt>
    <dd>
    Returns the <a>text track cue</a> with index <var>index</var> in the list. The cues are sorted in <a>text track cue order</a>.
    </dd>

    <dt><var>cuelist</var> . <code>getCueById</code>( <var>id</var> )</dt>
    <dd>
    Returns the first <a>text track cue</a> (in <a>text track cue order</a>) with <a>text track cue identifier</a> <var>id</var>.
    Returns null if none of the cues have the given identifier or if the argument is the empty string.
    </dd>

  </dl>

  <div class="impl">

  A <code>TextTrackCueList</code> object represents a dynamically updating list of <a>text track cues</a> in a given order.

  The <dfn attribute for="TextTrackCueList"><code>length</code></dfn> attribute must return
  the number of <a>cues</a> in the list represented by the
  <code>TextTrackCueList</code> object.

  The <a>supported property indices</a> of a <code>TextTrackCueList</code> object at any
  instant are the numbers from zero to the number of <a>cues</a> in the
  list represented by the <code>TextTrackCueList</code> object minus one, if any. If there are no
  <a>cues</a> in the list, there are no <a>supported property
  indices</a>.

  To <a>determine the value of an indexed property</a> for a given index <var>index</var>, the user agent must return the <var>index</var>th <a>text track
  cue</a> in the list represented by the <code>TextTrackCueList</code> object.

  The <dfn method for="TextTrackCueList"><code>getCueById(<var>id</var>)</code></dfn> method, when called with an argument other than the empty string,
  must return the first <a>text track cue</a> in the list represented by the
  <code>TextTrackCueList</code> object whose <a>text track cue identifier</a> is <var>id</var>, if any, or null otherwise. If the argument is the empty string, then the method
  must return null.

  </div>

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="TextTrackCue">
    interface TextTrackCue : EventTarget {
      readonly attribute TextTrack? track;

      attribute DOMString id;
      attribute double startTime;
      attribute double endTime;
      attribute boolean pauseOnExit;

      attribute EventHandler onenter;
      attribute EventHandler onexit;
    };
  </pre>

  <dl class="domintro">

    <dt><var>cue</var> . {{TextTrackCue/track}}</dt>
    <dd>
    Returns the {{TextTrack}} object to which this
    <a>text track cue</a> belongs, if any, or null
    otherwise.
    </dd>

    <dt><var>cue</var> . {{TextTrackCue/id}} [ = <var>value</var> ]</dt>
    <dd>
    Returns the <a>text track cue identifier</a>.
    Can be set.
    </dd>

    <dt><var>cue</var> . {{TextTrackCue/startTime}} [ = <var>value</var> ]</dt>
    <dd>
    Returns the <a>text track cue start time</a>, in seconds.
    Can be set.
    </dd>

    <dt><var>cue</var> . {{TextTrackCue/endTime}} [ = <var>value</var> ]</dt>
    <dd>
    Returns the <a>text track cue end time</a>, in seconds.
    Can be set.
    </dd>

    <dt><var>cue</var> . {{TextTrackCue/pauseOnExit}} [ = <var>value</var> ]</dt>
    <dd>
    Returns true if the <a>text track cue pause-on-exit flag</a> is set, false otherwise.
    Can be set.
    </dd>

  </dl>

  <div class="impl">

  The <dfn attribute for="TextTrackCue"><code>track</code></dfn> attribute, on getting, must
  return the {{TextTrack}} object of the <a>text track</a> in whose <a>list of cues</a> the <a>text track cue</a> that the
  <code>TextTrackCue</code> object represents finds itself, if any; or null otherwise.

  The <dfn attribute for="TextTrackCue"><code>id</code></dfn> attribute, on getting, must return
  the <a>text track cue identifier</a> of the <a>text track cue</a> that the
  <code>TextTrackCue</code> object represents. On setting, the <a>text track cue
  identifier</a> must be set to the new value.

  The <dfn attribute for="TextTrackCue"><code>startTime</code></dfn> attribute, on
  getting, must return the <a>text track cue start time</a> of the <a>text track cue</a>
  that the <code>TextTrackCue</code> object represents, in seconds. On setting, the <a>text track
  cue start time</a> must be set to the new value, interpreted in seconds; then, if the
  <code>TextTrackCue</code> object's <a>text track cue</a> is in a <a>text track</a>'s
  <a>list of cues</a>, and that <a>text track</a> is in
  a <a>media element</a>'s <a>list of text tracks</a>, and the <a>media element</a>'s <a>show poster flag</a> is not set, then run the <i>time marches on</i> steps for that <a>media element</a>.

  The <dfn attribute for="TextTrackCue"><code>endTime</code></dfn> attribute, on getting,
  must return the <a>text track cue end time</a> of the <a>text track cue</a> that the
  <code>TextTrackCue</code> object represents, in seconds. On setting, the <a>text track cue end
  time</a> must be set to the new value, interpreted in seconds; then, if the
  <code>TextTrackCue</code> object's <a>text track cue</a> is in a <a>text track</a>'s
  <a>list of cues</a>, and that <a>text track</a> is in
  a <a>media element</a>'s <a>list of text tracks</a>, and the <a>media element</a>'s <a>show poster flag</a> is not set, then run the <i>time marches on</i> steps for that <a>media element</a>.

  The <dfn attribute for="TextTrackCue"><code>pauseOnExit</code></dfn> attribute, on
  getting, must return true if the <a>text track cue pause-on-exit flag</a> of the <a>text
  track cue</a> that the <code>TextTrackCue</code> object represents is set; or false otherwise.
  On setting, the <a>text track cue pause-on-exit flag</a> must be set if the new value is
  true, and must be unset otherwise.

  </div>

<h6 id="text-tracks-exposing-inband-metadata">Text tracks exposing in-band metadata</h6>

  <a>Media resources</a> often contain one or more
  <a>media-resource-specific text tracks</a>
  containing data that browsers don't render, but want to expose to script to allow being
  dealt with.

  If the browser is unable to identify a <code>TextTrackCue</code> interface that is more
  appropriate to expose the data in the cues of a <a>media-resource-specific text track</a>,
  the {{DataCue}} object is used. [[INBANDTRACKS]]

  <pre class="idl" data-highlight="webidl" dfn-for="DataCue">
    [Constructor(double startTime, double endTime, ArrayBuffer data)]
    interface DataCue : TextTrackCue {
      attribute ArrayBuffer data;
    };
  </pre>

  <dl class="domintro">

  <dt><var>cue</var> = new <code>DataCue</code>( [ <var>startTime</var>, <var>endTime</var>, <var>data</var> ] )</dt>
  <dd>
    Returns a new <code>DataCue</code> object, for use with the <code>addCue()</code> method.
    The <var>startTime</var> argument sets the <a>text track cue start time</a>.
    The <var>endTime</var> argument sets the <a>text track cue end time</a>.
    The <var>data</var> argument is copied as the <a>text track cue data</a>.
  </dd>

  <dt><var>cue</var> . {{DataCue/data}} [ = <var>value</var> ]</dt>
  <dd>
    Returns the <a>text track cue data</a> in raw unparsed form.
    Can be set.
  </dd>

  </dl>

  <div class="impl">

  The <dfn attribute for="DataCue"><code>data</code></dfn> attribute, on getting, must
  return the raw text track cue data of the <a>text track cue</a> that the
  <code>TextTrackCue</code> object represents. On setting, the text track cue data must
  be set to the new value.

  </div>

  The user agent will use {{DataCue}} to expose only <a>text track cue</a>
  objects that belong to a <a>text track</a> that has a <a>text track kind</a> of
  <a>metadata</a>.

  <p class="note">{{DataCue}} has a constructor to allow script to create {{DataCue}}
  objects in cases where generic metadata needs to be managed for a <a>text track</a>.</p>

  The <a>rules for updating the text track rendering</a> for a {{DataCue}} simply
  state that there is no rendering, even when the cues are in <a mode for="track">showing</a> mode and the <a>text track kind</a> is one of
  <code>subtitles</code> or
  <code>captions</code> or
  <code>descriptions</code> or
  <code>chapters</code>.

<h6 id="text-tracks-describing-chapters">Text tracks describing chapters</h6>

  Chapters are segments of a <a>media resource</a> with a given title. Chapters can be
  nested, in the same way that sections in a document outline can have subsections.

  Each <a>text track cue</a> in a <a>text track</a> being used for describing
  chapters has three key features: the <a>text track cue start time</a>, giving the start time
  of the chapter, the <a>text track cue end time</a>, giving the end time of the chapter, and
  the <a>text track rules for extracting the chapter title</a>.

  <div class="impl">

  The <dfn>rules for constructing the chapter tree from a text track</dfn> are as follows. They
  produce a potentially nested list of chapters, each of which have a start time, end time, title,
  and a list of nested chapters. This algorithm discards cues that do not correctly nest within each
  other, or that are out of order.

  <ol>

    <li>Let <var>list</var> be a copy of the <a>list
    of cues</a> of the <a>text track</a> being processed.</li>

    <li>Remove from <var>list</var> any <a>text track cue</a> whose <a>text
    track cue end time</a> is before its <a>text track cue start time</a>.</li>

    <li>Let <var>output</var> be an empty list of chapters, where a chapter is a record
    consisting of a start time, an end time, a title, and a (potentially empty) list of nested
    chapters. For the purpose of this algorithm, each chapter also has a parent chapter.</li>

    <li>Let <var>current chapter</var> be a stand-in chapter whose start time is negative
    infinity, whose end time is positive infinity, and whose list of nested chapters is <var>output</var>. (This is just used to make the algorithm easier to describe.)</li>

    <li><i>Loop</i>: If <var>list</var> is empty, jump to the step labeled
    <i>end</i>.</li>

    <li>Let <var>current cue</var> be the first cue in <var>list</var>, and then
    remove it from <var>list</var>.</li>

    <li>If <var>current cue</var>'s <a>text track cue start time</a> is less than
    the start time of <var>current chapter</var>, then return to the step labeled
    <i>loop</i>.

    </li><li>While <var>current cue</var>'s <a>text track cue start time</a> is greater
    than or equal to <var>current chapter</var>'s end time, let <var>current
    chapter</var> be <var>current chapter</var>'s parent chapter.</li>

    <li>If <var>current cue</var>'s <a>text track cue end time</a> is greater than
    the end time of <var>current chapter</var>, then return to the step labeled
    <i>loop</i>.

    </li><li>

    Create a new chapter <var>new chapter</var>, whose start time is <var>current cue</var>'s <a>text track cue start time</a>, whose end time is <var>current cue</var>'s <a>text track cue end time</a>, whose title is <var>current cue</var>'s <a>text track cue data</a> interpreted according to its
    rules for rendering the cue in isolation, and whose list of nested chapters is
    empty.

    </li>

    <li>Append <var>new chapter</var> to <var>current chapter</var>'s list of
    nested chapters, and let <var>current chapter</var> be <var>new chapter</var>'s
    parent.</li>

    <li>Let <var>current chapter</var> be <var>new chapter</var>.</li>

    <li>Return to the step labeled <i>loop</i>.</li>

    <li><i>End</i>: Return <var>output</var>.</li>

  </ol>

  </div>

  <div class="example">
    The following snippet of a <a>WebVTT file</a> shows how nested chapters can be marked
    up. The file describes three 50-minute chapters, "Astrophysics", "Computational Physics", and
    "General Relativity". The first has three subchapters, the second has four, and the third has
    two. [[WEBVTT]]

    <pre>WEBVTT

00:00:00.000 --&gt; 00:50:00.000
Astrophysics

00:00:00.000 --&gt; 00:10:00.000
Introduction to Astrophysics

00:10:00.000 --&gt; 00:45:00.000
The Solar System

00:00:00.000 --&gt; 00:10:00.000
Coursework Description

00:50:00.000 --&gt; 01:40:00.000
Computational Physics

00:50:00.000 --&gt; 00:55:00.000
Introduction to Programming

00:55:00.000 --&gt; 01:30:00.000
Data Structures

01:30:00.000 --&gt; 01:35:00.000
Answers to Last Exam

01:35:00.000 --&gt; 01:40:00.000
Coursework Description

01:40:00.000 --&gt; 02:30:00.000
General Relativity

01:40:00.000 --&gt; 02:00:00.000
Tensor Algebra

02:00:00.000 --&gt; 02:30:00.000
The General Relativistic Field Equations</pre>

  </div>

  <div class="impl">

<h6 id="event-handlers-for-objects-of-the-text-track-apis">Event handlers for objects of the text track APIs</h6>

  The following are the <a>event handlers</a> that (and their corresponding <a>event handler event types</a>) must be supported, as <a>event handler IDL
  attributes</a>, by all objects implementing the <code>TextTrackList</code> interface:

  <table>
    <thead>
    <tr><th><a>Event handler</a> </th><th><a>Event handler event type</a>
    </th></tr></thead><tbody>
    <tr><td><dfn attribute for="TextTrackList"><code>onchange</code></dfn> </td><td> <code>change</code>
    </td></tr><tr><td><dfn attribute for="TextTrackList"><code>onaddtrack</code></dfn> </td><td> <code>addtrack</code>
    </td></tr><tr><td><dfn attribute for="TextTrackList"><code>onremovetrack</code></dfn> </td><td> <code>removetrack</code>
  </td></tr></tbody></table>

  The following are the <a>event handlers</a> that (and their corresponding <a>event handler event types</a>) must be supported, as <a>event handler IDL
  attributes</a>, by all objects implementing the {{TextTrack}} interface:

  <table>
    <thead>
    <tr><th><a>Event handler</a> </th><th><a>Event handler event type</a>
    </th></tr></thead><tbody>
    <tr><td><dfn attribute for="TextTrack"><code>oncuechange</code></dfn> </td><td> <code>cuechange</code>
  </td></tr></tbody></table>

  The following are the <a>event handlers</a> that (and their corresponding <a>event handler event types</a>) must be supported, as <a>event handler IDL
  attributes</a>, by all objects implementing the <code>TextTrackCue</code> interface:

  <table>
    <thead>
    <tr><th><a>Event handler</a> </th><th><a>Event handler event type</a>
    </th></tr></thead><tbody>
    <tr><td><dfn attribute for="TextTrackCue"><code>onenter</code></dfn> </td><td> <code>enter</code>
    </td></tr><tr><td><dfn attribute for="TextTrackCue"><code>onexit</code></dfn> </td><td> <code>exit</code>
  </td></tr></tbody></table>

  </div>

<h6 id="best-practices-for-metadata-text-tracks">Best practices for metadata text tracks</h6>

  <em>This section is non-normative.</em>

  Text tracks can be used for storing data relating to the media data, for interactive or
  augmented views.

  For example, a page showing a sports broadcast could include information about the current
  score. Suppose a robotics competition was being streamed live. The image could be overlayed with
  the scores, as follows:

  <iframe src="images/robots.html" width="600" height="400"></iframe>

  In order to make the score display render correctly whenever the user seeks to an arbitrary
  point in the video, the metadata text track cues need to be as long as is appropriate for the
  score. For example, in the frame above, there would be maybe one cue that lasts the length of the
  match that gives the match number, one cue that lasts until the blue alliance's score changes, and
  one cue that lasts until the red alliance's score changes. If the video is just a stream of the
  live event, the time in the bottom right would presumably be automatically derived from the
  current video time, rather than based on a cue. However, if the video was just the highlights,
  then that might be given in cues also.

  The following shows what fragments of this could look like in a WebVTT file:

  <pre>WEBVTT

...

05:10:00.000 --&gt; 05:12:15.000
matchtype:qual
matchnumber:37

...

05:11:02.251 --&gt; 05:11:17.198
red:78

05:11:03.672 --&gt; 05:11:54.198
blue:66

05:11:17.198 --&gt; 05:11:25.912
red:80

05:11:25.912 --&gt; 05:11:26.522
red:83

05:11:26.522 --&gt; 05:11:26.982
red:86

05:11:26.982 --&gt; 05:11:27.499
red:89

...</pre>

  The key here is to notice that the information is given in cues that span the length of time to
  which the relevant event applies. If, instead, the scores were given as zero-length (or very
  brief, nearly zero-length) cues when the score changes, for example saying "red+2" at
  05:11:17.198, "red+3" at 05:11:25.912, etc, problems arise: primarily, seeking is much harder to
  implement, as the script has to walk the entire list of cues to make sure that no notifications
  have been missed; but also, if the cues are short it's possible the script will never see that
  they are active unless it listens to them specifically.

  When using cues in this manner, authors are encouraged to use the <code>cuechange</code> event to update the current annotations. (In
  particular, using the <code>timeupdate</code> event would be less
  appropriate as it would require doing work even when the cues haven't changed, and, more
  importantly, would introduce a higher latency between when the metadata cues become active and
  when the display is updated, since <code>timeupdate</code> events
  are rate-limited.)

<h5 id="user-interface">User interface</h5>

  The <dfn element-attr for="mediaelements,video,audio"><code>controls</code></dfn> attribute is a
  <a>boolean attribute</a>. If present, it indicates that the author has not provided a scripted
  controller and would like the user agent to provide its own set of controls.

  <div class="impl">

  If the attribute is present, or if <a>scripting is
  disabled</a> for the <a>media element</a>, then the user agent should <dfn lt="exposing a user interface|expose a user interface to the user|exposes a user interface to the user|exposing a user interface to the user|controls in the user interface that is exposed to the user">expose a user interface to the user</dfn>. This user interface should include features to begin playback, pause
  playback, seek to an arbitrary position in the content (if the content supports arbitrary
  seeking), change the volume, change the display of closed captions or embedded sign-language
  tracks, select different audio tracks or turn on audio descriptions, and show the media content in
  manners more suitable to the user (e.g., fullscreen video or in an independent resizable window).
  Other controls may also be made available.

  A user agent may provide controls to affect playback
  of the media resource (e.g., play, pause, seeking, track selection, and volume controls), but
  such features should not interfere with the page's normal rendering. For example, such features
  could be exposed in the <a>media element</a>'s context menu, platform
  media keys, or a remote control. The user agent may implement this simply by <a>exposing a user
  interface to the user</a> as described above (as if the <{mediaelements/controls}> attribute
  was present).

  If the user agent <a>exposes a user interface to
  the user</a> by displaying controls over the <a>media element</a>, then the user agent
  should suppress any user interaction events while the user agent is interacting with this
  interface. (For example, if the user clicks on a video's playback control, <code>mousedown</code> events and so forth would not simultaneously be fired at
  elements on the page.)

  Where possible (specifically, for starting, stopping, pausing, and unpausing playback, for
  seeking, for changing the rate of playback, for fast-forwarding or rewinding, for listing,
  enabling, and disabling text tracks, and for muting or changing the volume of the audio), user
  interface features exposed by the user agent must be implemented in terms of the DOM API described
  above, so that, e.g., all the same events fire.

  For the purposes of listing chapters in the <a>media resource</a>, only <a>text tracks</a> in the <a>media element</a>'s <a>list of text tracks</a>
  that are <a mode for="track">showing</a> and whose <a>text track kind</a> is
  <code>chapters</code> should be used. Such tracks must be
  interpreted according to the <a>rules for constructing the chapter tree from a text
  track</a>. When seeking in response to a user manipulating a chapter selection interface, user
  agents should not use the <i>approximate-for-speed</i> flag.

  The <dfn attribute for="HTMLMediaElement"><code>controls</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  </div>

  <dl class="domintro">

    <dt><var>media</var> . <code>volume</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns the current playback volume, as a number in the range 0.0 to 1.0, where 0.0 is the
    quietest and 1.0 the loudest.

    Can be set, to change the volume.

    Throws an <code>IndexSizeError</code> exception if the new value is not in the range 0.0 .. 1.0.

    </dd>

    <dt><var>media</var> . <code>muted</code> [ = <var>value</var> ]</dt>

    <dd>

    Returns true if audio is muted, overriding the <code>volume</code>
    attribute, and false if the <code>volume</code> attribute is being
    honored.

    Can be set, to change whether the audio is muted or not.

    </dd>

  </dl>

  <div class="impl">

  A <a>media element</a> has a <dfn>playback volume</dfn>, which is a fraction in the range 0.0 (silent) to 1.0 (loudest).
  Initially, the volume should be 1.0, but user agents may remember the last set value across
  sessions, on a per-site basis or otherwise, so the volume may start at other values.

  The <dfn attribute for="HTMLMediaElement"><code>volume</code></dfn> IDL attribute must return the
  <a>playback volume</a> of any audio portions of the
  <a>media element</a>. On setting, if the new value is in the range 0.0 to 1.0 inclusive, the
  <a>media element</a>'s <a>playback volume</a> must be
  set to the new value. If the new value is outside the range 0.0 to 1.0 inclusive, then, on
  setting, an <code>IndexSizeError</code> exception must be thrown instead.

  A <a>media element</a> can also be <dfn>muted</dfn>. If
  anything is muting the element, then it is muted. (For example, when the <a>direction of
  playback</a> is backwards, the element is muted.)

  The <dfn attribute for="HTMLMediaElement"><code>muted</code></dfn> IDL attribute must return the value
  to which it was last set. When a <a>media element</a> is created, if the element has a <code>muted</code> content attribute specified, then the <code>muted</code> IDL attribute should be set to true; otherwise, the user
  agents may set the value to the user's preferred value (e.g., remembering the last set value across
  sessions, on a per-site basis or otherwise). While the <code>muted</code>
  IDL attribute is set to true, the <a>media element</a> must be <a>muted</a>.

  Whenever either of the values that would be returned by the <code>volume</code> and <code>muted</code> IDL
  attributes change, the user agent must <a>queue a task</a> to <a>fire a simple
  event</a> named <code>volumechange</code> at the <a>media element</a>.

  An element's <dfn>effective media volume</dfn> is determined as follows:

  <ol>

    <li>If the user has indicated that the user agent is to override the volume of the element,
    then the element's <a>effective media volume</a> is the volume desired by the user. Abort
    these steps.</li>

    <li>If the element's audio output is <a>muted</a>, the
    element's <a>effective media volume</a> is zero. Abort these steps.</li>

    <li>Let <var>volume</var> be the <a>playback
    volume</a> of the audio portions of the <a>media element</a>, in range 0.0 (silent) to
    1.0 (loudest).</li>

    <li>The element's <a>effective media volume</a> is <var>volume</var>,
    interpreted relative to the range 0.0 to 1.0, with 0.0 being silent, and 1.0 being the loudest
    setting, values in between increasing in loudness. The range need not be linear. The loudest
    setting may be lower than the system's loudest possible setting; for example the user could have
    set a maximum volume.</li>

  </ol>

  </div>

  The <dfn element-attr for="media"><code>muted</code></dfn> content attribute on <a>media elements</a> is a <a>boolean attribute</a> that controls the
  default state of the audio output of the <a>media resource</a>, potentially overriding user
  preferences.

  <div class="impl">

  The <dfn attribute for="HTMLMediaElement"><code>defaultMuted</code></dfn> IDL attribute must
  <a>reflect</a> the <{media/muted}> content attribute.

  </div>

  <p class="note">
    This attribute has no dynamic effect (it only controls the default state of the
  element).
  </p>

  <div class="example">
    This video (an advertisement) autoplays, but to avoid annoying users, it does so without
    sound, and allows the user to turn the sound on.

    <pre highlight="html">
&lt;video src="adverts.cgi?kind=video" controls autoplay loop muted&gt;&lt;/video&gt;
    </pre>

  </div>

<h5 id="time-ranges">Time ranges</h5>

  Objects implementing the <code>TimeRanges</code> interface
  represent a list of ranges (periods) of time.

  <pre class="idl" data-highlight="webidl" dfn-for="TimeRanges">
    interface TimeRanges {
      readonly attribute unsigned long length;
      double start(unsigned long index);
      double end(unsigned long index);
    };
  </pre>

  <dl class="domintro">

    <dt><var>media</var> . <code>length</code></dt>

    <dd>

    Returns the number of ranges in the object.

    </dd>

    <dt><var>time</var> = <var>media</var> . <code>start</code>(<var>index</var>)</dt>

    <dd>

    Returns the time for the start of the range with the given index.

    Throws an <code>IndexSizeError</code> exception if the index is out of range.

    </dd>

    <dt><var>time</var> = <var>media</var> . <code>end</code>(<var>index</var>)</dt>

    <dd>

    Returns the time for the end of the range with the given index.

    Throws an <code>IndexSizeError</code> exception if the index is out of range.

    </dd>

  </dl>

  <div class="impl">

  The <dfn attribute for="TimeRanges"><code>length</code></dfn> IDL attribute must return the
  number of ranges represented by the object.

  The <dfn method for="TimeRanges"><code>start(<var>index</var>)</code></dfn>
  method must return the position of the start of the <var>index</var>th range represented
  by the object, in seconds measured from the start of the timeline that the object covers.

  The <dfn method for="TimeRanges"><code>end(<var>index</var>)</code></dfn> method
  must return the position of the end of the <var>index</var>th range represented by the
  object, in seconds measured from the start of the timeline that the object covers.

  These methods must throw <code>IndexSizeError</code> exceptions if called with an <var>index</var> argument greater than or equal to the number of ranges represented by the
  object.

  When a <code>TimeRanges</code> object is said to be a <dfn>normalized <code>TimeRanges</code>
  object</dfn>, the ranges it represents must obey the following criteria:

  <ul>

    <li>The start of a range must be greater than the end of all earlier ranges.</li>

    <li>The start of a range must be less than or equal to the end of that same range.</li>

  </ul>

  In other words, the ranges in such an object are ordered, don't overlap, and don't touch
  (adjacent ranges are folded into one bigger range). A range can be empty (referencing just a
  single moment in time), e.g., to indicate that only one frame is currently buffered in the case
  that the user agent has discarded the entire <a>media resource</a> except for the current
  frame, when a <a>media element</a> is paused.

  Ranges in a <code>TimeRanges</code> object must be inclusive.

  <p class="example">Thus, the end of a range would be equal to the start of a following adjacent
  (touching but not overlapping) range. Similarly, a range covering a whole timeline anchored at
  zero would have a start equal to zero and an end equal to the duration of the timeline.</p>

  The timelines used by the objects returned by the <code>buffered</code>, <code>seekable</code> and
  <code>played</code> IDL attributes of <a>media elements</a> must be that element's <a>media timeline</a>.

  </div>

<h5 id="the-trackevent-interface">The <code>TrackEvent</code> interface</h5>

  <pre class="idl" data-highlight="webidl" dfn-for="TrackEvent">
    [Constructor(DOMString type, optional TrackEventInit eventInitDict)]
    interface TrackEvent : Event {
      readonly attribute (VideoTrack or AudioTrack or TextTrack)? track;
    };

    dictionary TrackEventInit : EventInit {
      (VideoTrack or AudioTrack or TextTrack)? track;
    };
</pre>

  <dl class="domintro">

    <dt><var>event</var> . <code>track</code></dt>

    <dd>

    Returns the track object ({{TextTrack}}, <code>AudioTrack</code>, or
    <code>VideoTrack</code>) to which the event relates.

    </dd>

  </dl>

  <div class="impl">

  The <dfn attribute for="TrackEvent"><code>track</code></dfn> attribute must return the value
  it was initialized to. When the object is created, this attribute must be initialized to null. It
  represents the context information for the event.

  </div>

<h5 id="media-elements-event-summary">Event summary</h5>

  <em>This section is non-normative.</em>

  The following events fire on <a>media elements</a> as part of the
  processing model described above:

  <table>
    <thead>
    <tr>
      <th>Event name
      </th><th>Interface
      </th><th>Fired when...
      </th><th>Preconditions

    </th></tr></thead><tbody>
    <tr>

      <td><dfn event for="media"><code>loadstart</code></dfn>

      </td><td>{{Event}}

      </td><td>The user agent begins looking for <a>media data</a>, as part of the <a>resource selection algorithm</a>.

      </td><td><code>networkState</code> equals <code>NETWORK_LOADING</code>

    </td></tr><tr>

      <td><dfn event for="media"><code>progress</code></dfn>

      </td><td>{{Event}}

      </td><td>The user agent is fetching <a>media data</a>.

      </td><td><code>networkState</code> equals <code>NETWORK_LOADING</code>

    </td></tr><tr>

      <td><dfn event for="media"><code>suspend</code></dfn>

      </td><td>{{Event}}

      </td><td>The user agent is intentionally not currently fetching <a>media data</a>.

      </td><td><code>networkState</code> equals <code>NETWORK_IDLE</code>

    </td></tr><tr>

      <td><dfn event for="media"><code>abort</code></dfn>

      </td><td>{{Event}}

      </td><td>The user agent stops fetching the <a>media data</a> before it is completely
      downloaded, but not due to an error.

      </td><td><code>error</code> is an object with the code <code>MEDIA_ERR_ABORTED</code>. <code>networkState</code> equals either <code>NETWORK_EMPTY</code> or <code>NETWORK_IDLE</code>, depending on when the download was aborted.

    </td></tr><tr>

      <td><dfn event for="media"><code>error</code></dfn>

      </td><td>{{Event}}

      </td><td>An error occurs while fetching the <a>media data</a> or the type of the resource is not supported media format.

      </td><td><code>error</code> is an object with the code <code>MEDIA_ERR_NETWORK</code> or higher. <code>networkState</code> equals either <code>NETWORK_EMPTY</code> or <code>NETWORK_IDLE</code>, depending on when the download was aborted.

    </td></tr><tr>

      <td><dfn event for="media"><code>emptied</code></dfn>

      </td><td>{{Event}}

      </td><td>A <a>media element</a> whose <code>networkState</code>
      was previously not in the <code>NETWORK_EMPTY</code> state has
      just switched to that state (either because of a fatal error during load that's about to be
      reported, or because the <code>load()</code> method was invoked while
      the <a>resource selection algorithm</a> was already
      running).

      </td><td><code>networkState</code> is <code>NETWORK_EMPTY</code>; all the IDL attributes are in their
      initial states.

    </td></tr><tr>

      <td><dfn event for="media"><code>stalled</code></dfn>

      </td><td>{{Event}}

      </td><td>The user agent is trying to fetch <a>media data</a>, but data is unexpectedly not
      forthcoming.

      </td><td><code>networkState</code> is <code>NETWORK_LOADING</code>.

    </td></tr></tbody><tbody>
    <tr>

      <td><dfn event for="media"><code>loadedmetadata</code></dfn>

      </td><td>{{Event}}

      </td><td>The user agent has just determined the duration and dimensions of the <a>media
      resource</a> and <a>the text tracks are ready</a>.

      </td><td><code>readyState</code> is newly equal to <code>HAVE_METADATA</code> or greater for the first time.

    </td></tr><tr>

      <td><dfn event for="media"><code>loadeddata</code></dfn>

      </td><td>{{Event}}

      </td><td>The user agent can render the <a>media data</a> at the <a>current playback
      position</a> for the first time.

      </td><td><code>readyState</code> newly increased to <code>HAVE_CURRENT_DATA</code> or greater for the first time.

    </td></tr><tr>

      <td><dfn event for="media"><code>canplay</code></dfn>

      </td><td>{{Event}}

      </td><td>The user agent can resume playback of the <a>media data</a>, but estimates that if
      playback were to be started now, the <a>media resource</a> could not be rendered at the
      current playback rate up to its end without having to stop for further buffering of content.

      </td><td><code>readyState</code> newly increased to <code>HAVE_FUTURE_DATA</code> or greater.

    </td></tr><tr>

      <td><dfn event for="media"><code>canplaythrough</code></dfn>

      </td><td>{{Event}}

      </td><td>The user agent estimates that if playback were to be started now, the <a>media
      resource</a> could be rendered at the current playback rate all the way to its end without
      having to stop for further buffering.

      </td><td><code>readyState</code> is newly equal to <code>HAVE_ENOUGH_DATA</code>.

    </td></tr><tr>

      <td><dfn event for="media"><code>playing</code></dfn>

      </td><td>{{Event}}

      </td><td>Playback is ready to start after having been paused or delayed due to lack of <a>media
      data</a>.

      </td><td><code>readyState</code> is newly equal to or greater than
      <code>HAVE_FUTURE_DATA</code> and <code>paused</code> is false, or <code>paused</code> is newly false and <code>readyState</code> is equal to or greater than <code>HAVE_FUTURE_DATA</code>. Even if this event fires, the
      element might still not be <a>potentially playing</a>, e.g., if the element is <a>paused for user interaction</a> or <a>paused for in-band content</a>.

    </td></tr><tr>

      <td><dfn event for="media"><code>waiting</code></dfn>

      </td><td>{{Event}}

      </td><td>Playback has stopped because the next frame is not available, but the user agent expects
      that frame to become available in due course.

      </td><td><code>readyState</code> is equal to or less than <code>HAVE_CURRENT_DATA</code>, and <code>paused</code> is false. Either <code>seeking</code> is true, or the <a>current playback position</a>
      is not contained in any of the ranges in <code>buffered</code>. It
      is possible for playback to stop for other reasons without <code>paused</code> being false, but those reasons do not fire this event
      (and when those situations resolve, a separate <code>playing</code>
      event is not fired either): e.g., the <a>playback ended</a>, or playback
      <a>stopped due to errors</a>, or the element has <a>paused for user interaction</a>
      or <a>paused for in-band content</a>.

    </td></tr></tbody><tbody>
    <tr>

      <td><dfn event for="media"><code>seeking</code></dfn>

      </td><td>{{Event}}

      </td><td>The <code>seeking</code> IDL attribute changed to true, and the user agent has started seeking to a new position.

      </td><td>

    </td></tr><tr>

      <td><dfn event for="media"><code>seeked</code></dfn>

      </td><td>{{Event}}

      </td><td>The <code>seeking</code> IDL attribute changed to false after the <a>current playback position</a> was changed.

      </td><td>

    </td></tr><tr>

      <td><dfn event for="media"><code>ended</code></dfn>

      </td><td>{{Event}}

      </td><td>Playback has stopped because the end of the <a>media resource</a> was reached.

      </td><td><code>currentTime</code> equals the end of the <a>media
      resource</a>; <code>ended</code> is true.

    </td></tr></tbody><tbody>
    <tr>

      <td><dfn event for="media"><code>durationchange</code></dfn>

      </td><td>{{Event}}

      </td><td>The <code>duration</code> attribute has just been updated.

      </td><td>

    </td></tr><tr>

      <td><dfn event for="media"><code>timeupdate</code></dfn>

      </td><td>{{Event}}

      </td><td>The <a>current playback position</a> changed as part of normal playback or in an especially interesting way, for example discontinuously.

      </td><td>

    </td></tr><tr>

      <td><dfn event for="media"><code>play</code></dfn>

      </td><td>{{Event}}

      </td><td>The element is no longer paused. Fired after the <code>play()</code>
      method has returned, or when the <code>autoplay</code> attribute
      has caused playback to begin.

      </td><td><code>paused</code> is newly false.

    </td></tr><tr>

      <td><dfn event for="media"><code>pause</code></dfn>

      </td><td>{{Event}}

      </td><td>The element has been paused. Fired after the <code>pause()</code>
      method has returned.

      </td><td><code>paused</code> is newly true.

    </td></tr><tr>

      <td><dfn event for="media"><code>ratechange</code></dfn>

      </td><td>{{Event}}

      </td><td>Either the <code>defaultPlaybackRate</code> or the
      <code>playbackRate</code> attribute has just been updated.

      </td><td>

    </td></tr></tbody><tbody>
    <tr>

      <td><a event><code>resize</code></a>

      </td><td>{{Event}}

      </td><td>One or both of the <code>videoWidth</code> and <code>videoHeight</code> attributes have just been updated.

      </td><td><a>Media element</a> is a <{video}> element; <code>readyState</code> is not <code>HAVE_NOTHING</code>

    </td></tr><tr>

      <td><dfn event for="media"><code>volumechange</code></dfn>

      </td><td>{{Event}}

      </td><td>Either the <code>volume</code> attribute or the <code>muted</code> attribute has changed. Fired after the relevant
      attribute's setter has returned.

      </td><td>

  </td></tr></tbody></table>

  The following event fires on <{source}> element:

  <table>

   <thead>
    <tr>

     <th>Event name

     <th>Interface

     <th>Fired when...

   <tbody>
    <tr>

     <td><dfn event for="source"><code>error</code></dfn>

     <td><code>Event</code>

     <td>An error occurs while fetching the <span>media data</span> or the type of the resource
     is not supported media format.

  </table>

  The following events fire on {{AudioTrackList}}, {{VideoTrackList}}, and
  {{TextTrackList}} objects:

  <table>

    <thead>
    <tr>

      <th>Event name

      </th><th>Interface

      </th><th>Fired when...

    </th></tr></thead><tbody>
    <tr>

      <td><dfn event for="MediaList"><code>change</code></dfn>

      </td><td>{{Event}}

      </td><td>One or more tracks in the track list have been enabled or disabled.

    </td></tr><tr>

      <td><dfn event for="MediaList"><code>addtrack</code></dfn>

      </td><td>{{TrackEvent}}

      </td><td>A track has been added to the track list.

    </td></tr><tr>

      <td><dfn event for="MediaList"><code>removetrack</code></dfn>

      </td><td>{{TrackEvent}}

      </td><td>A track has been removed from the track list.

  </td></tr></tbody></table>

  The following event fires on {{TextTrack}} objects and <{track}> elements:

  <table>

    <thead>
    <tr>

      <th>Event name

      </th><th>Interface

      </th><th>Fired when...

    </th></tr></thead><tbody>
    <tr>

      <td><dfn event for="track"><code>cuechange</code></dfn>

      </td><td>{{Event}}

      </td><td>One or more cues in the track have become active or stopped being active.

  </td></tr></tbody></table>

  The following events fire on <code>track</code> elements:

  <table>

   <thead>
    <tr>

     <th>Event name

     <th>Interface

     <th>Fired when...

   <tbody>
    <tr>

     <td><dfn event for="track"><code>error</code></dfn>

     <td><code>Event</code>

     <td>An error occurs while fetching the track data or the type of the resource is not supported text track format.

    <tr>

     <td><dfn event for="track"><code>load</code></dfn>

     <td><code>Event</code>

     <td>A track data has been fetched and successfully processed.
  </table>

  The following events fire on {{TextTrackCue}} objects:

  <table>

    <thead>
    <tr>

      <th>Event name

      </th><th>Interface

      </th><th>Fired when...

    </th></tr></thead><tbody>
    <tr>

      <td><dfn event for="TextTrackCue"><code>enter</code></dfn>

      </td><td>{{Event}}

      </td><td>The cue has become active.

    </td></tr><tr>

      <td><dfn event for="TextTrackCue"><code>exit</code></dfn>

      </td><td>{{Event}}

      </td><td>The cue has stopped being active.

  </td></tr></tbody></table>

  <div class="impl">

<h5 id="security-and-privacy-considerations">Security and privacy considerations</h5>

  The main security and privacy implications of the <code>video</code> and <code>audio</code>
  elements come from the ability to embed media cross-origin. There are two directions that threats
  can flow: from hostile content to a victim page, and from a hostile page to victim content.

  <hr />

  If a victim page embeds hostile content, the threat is that the content might contain scripted
  code that attempts to interact with the {{Document}} that embeds the content. To avoid
  this, user agents must ensure that there is no access from the content to the embedding page. In
  the case of media content that uses DOM concepts, the embedded content must be treated as if it
  was in its own unrelated <a>top-level browsing context</a>.

  <p class="example">For instance, if an SVG animation was embedded in a <{video}> element,
  the user agent would not give it access to the DOM of the outer page. From the perspective of
  scripts in the SVG resource, the SVG file would appear to be in a lone top-level browsing context
  with no parent.</p>

  <hr />

  If a hostile page embeds victim content, the threat is that the embedding page could obtain
  information from the content that it would not otherwise have access to. The API does expose some
  information: the existence of the media, its type, its duration, its size, and the performance
  characteristics of its host. Such information is already potentially problematic, but in practice
  the same information can be obtained using the <{img}> element, and so it has been deemed
  acceptable.

  However, significantly more sensitive information could be obtained if the user agent further
  exposes metadata within the content such as subtitles or chapter titles. Such information is
  therefore only exposed if the video resource passes a CORS resource sharing check.
  The <code>crossorigin</code> attribute allows authors to control
  how this check is performed. [[!FETCH]]

  <p class="example">Without this restriction, an attacker could trick a user running within a
  corporate network into visiting a site that attempts to load a video from a previously leaked
  location on the corporation's intranet. If such a video included confidential plans for a new
  product, then being able to read the subtitles would present a serious confidentiality breach.</p>

  </div>

<h5 id="best-practices-for-authors-using-media-elements">Best practices for authors using media elements</h5>

  <em>This section is non-normative.</em>

  Playing audio and video resources on small devices such as set-top boxes or mobile phones is
  often constrained by limited hardware resources in the device. For example, a device might only
  support three simultaneous videos. For this reason, it is a good practice to release resources
  held by <a>media elements</a> when they are done playing, either by
  being very careful about removing all references to the element and allowing it to be garbage
  collected, or, even better, by removing the element's <code>src</code>
  attribute and any <{source}> element descendants, and invoking the element's <code>load()</code> method.

  Similarly, when the playback rate is not exactly 1.0, hardware, software, or format limitations
  can cause video frames to be dropped and audio to be choppy or muted.

  <div class="impl">

<h5 id="best-practices-for-implementors-of-media-elements">Best practices for implementors of media elements</h5>

  <em>This section is non-normative.</em>

  How accurately various aspects of the <a>media element</a> API are implemented is
  considered a quality-of-implementation issue.

  For example, when implementing the <code>buffered</code> attribute,
  how precise an implementation reports the ranges that have been buffered depends on how carefully
  the user agent inspects the data. Since the API reports ranges as times, but the data is obtained
  in byte streams, a user agent receiving a variable-bit-rate stream might only be able to determine
  precise times by actually decoding all of the data. User agents aren't required to do this,
  however; they can instead return estimates (e.g., based on the average bitrate seen so far) which
  get revised as more information becomes available.

  As a general rule, user agents are urged to be conservative rather than optimistic. For
  example, it would be bad to report that everything had been buffered when it had not.

  Another quality-of-implementation issue would be playing a video backwards when the codec is
  designed only for forward playback (e.g., there aren't many key frames, and they are far apart, and
  the intervening frames only have deltas from the previous frame). User agents could do a poor job,
  e.g., only showing key frames; however, better implementations would do more work and thus do a
  better job, e.g., actually decoding parts of the video forwards, storing the complete frames, and
  then playing the frames backwards.

  Similarly, while implementations are allowed to drop buffered data at any time (there is no
  requirement that a user agent keep all the media data obtained for the lifetime of the media
  element), it is again a quality of implementation issue: user agents with sufficient resources to
  keep all the data around are encouraged to do so, as this allows for a better user experience. For
  example, if the user is watching a live stream, a user agent could allow the user only to view the
  live video; however, a better user agent would buffer everything and allow the user to seek
  through the earlier material, pause it, play it forwards and backwards, etc.

  <hr />

  When a <a>media element</a> that is paused is <a for="document">removed from a document</a> and not reinserted before the next time the <a>event loop</a> reaches step 1, implementations that are resource constrained are encouraged to take
  that opportunity to release all hardware resources (like video planes, networking resources, and
  data buffers) used by the <a>media element</a>. (User agents still have to keep track of the
  playback position and so forth, though, in case playback is later restarted.)

  </div>

<h4 id="the-map-element">The <dfn element><code>map</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Transparent</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>name</code> - Name of <a>image map</a> to reference from the <code>usemap</code> attribute</dd>
    <dt>Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values:</dt>
    <dd>None</dd>
    <dt>Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl" dfn-for="HTMLMapElement">
        interface HTMLMapElement : HTMLElement {
          attribute DOMString name;
          [SameObject] readonly attribute HTMLCollection areas;
          [SameObject] readonly attribute HTMLCollection images;
        };
      </pre>
    </dd>
  </dl>

  The <{map}> element, in conjunction with an <{img}> element and any
  <{area}> element descendants, defines an <a>image map</a>. The element
  <a>represents</a> its children.

  The <dfn element-attr for="map"><code>name</code></dfn> attribute gives the map a name so that
  it can be referenced. The attribute must be present and must have a non-empty value with no <a>space characters</a>. The value of the <code>name</code> attribute must not be a <a>compatibility caseless</a> match for the value of the <code>name</code> attribute of another <{map}> element in the same
  document. If the <code>id</code> attribute is also specified, both attributes must
  have the same value.

  <dl class="domintro">

    <dt><var>map</var> . <code>areas</code></dt>

    <dd>

    Returns an <code>HTMLCollection</code> of the <{area}> elements in the
    <{map}>.

    </dd>

    <dt><var>map</var> . <code>images</code></dt>

    <dd>

    Returns an <code>HTMLCollection</code> of the <code>img</code> and <code>object</code>
    elements that use the <{map}>.

    </dd>

  </dl>

  <div class="impl">

  The <dfn attribute for="HTMLMapElement"><code>areas</code></dfn> attribute must return an
  <code>HTMLCollection</code> rooted at the <{map}> element, whose filter matches only
  <{area}> elements.

  The <dfn attribute for="HTMLMapElement"><code>images</code></dfn> attribute must return an
  <code>HTMLCollection</code> rooted at the {{Document}} node, whose filter matches only
  <code>img</code> and <{object}> elements that are associated with this <code>map</code>
  element according to the <a>image map</a> processing model.

  The IDL attribute <dfn attribute for="HTMLMapElement"><code>name</code></dfn> must <a>reflect</a>
  the content attribute of the same name.

  </div>

  <div class="example">
    Image maps can be defined in conjunction with other content on the page, to ease maintenance.
    This example is of a page with an image map at the top of the page and a corresponding set of
    text links at the bottom.

    <pre highlight="html">
&lt;!DOCTYPE HTML&gt;
&lt;TITLE&gt;Babies™: Toys&lt;/TITLE&gt;
&lt;HEADER&gt;
  &lt;h1&gt;Toys&lt;/h1&gt;
  &lt;IMG SRC="/images/menu.gif"
      ALT="Babies™ navigation menu. Select a department to go to its page."
      USEMAP="#NAV"&gt;
&lt;/HEADER&gt;
  ...
&lt;FOOTER&gt;
  &lt;MAP NAME="NAV"&gt;
  &lt;P&gt;
    &lt;A HREF="/clothes/"&gt;Clothes&lt;/A&gt;
    &lt;AREA ALT="Clothes" COORDS="0,0,100,50" HREF="/clothes/"&gt; |
    &lt;A HREF="/toys/"&gt;Toys&lt;/A&gt;
    &lt;AREA ALT="Toys" COORDS="100,0,200,50" HREF="/toys/"&gt; |
    &lt;A HREF="/food/"&gt;Food&lt;/A&gt;
    &lt;AREA ALT="Food" COORDS="200,0,300,50" HREF="/food/"&gt; |
    &lt;A HREF="/books/"&gt;Books&lt;/A&gt;
    &lt;AREA ALT="Books" COORDS="300,0,400,50" HREF="/books/"&gt;
  &lt;/P&gt;
  &lt;/MAP&gt;
&lt;/FOOTER&gt;
    </pre>

  </div>

<h4 id="the-area-element">The <dfn element><code>area</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Phrasing content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>phrasing content</a> is expected, but only if there is a <{map}> element ancestor or a <{template}> element ancestor.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a></dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>alt</code> - Replacement text for use when images are not available</dd>
    <dd><code>coords</code> - Coordinates for the shape to be created in an <a>image map</a></dd>
    <dd><code>download</code> - Whether to download the resource instead of navigating to it, and its file name if so</dd>
    <dd><code>href</code> - Address of the <a>hyperlink</a></dd>
    <dd><code>hreflang</code> -  Language of the linked resource</dd>
    <dd><{area/rel}> - Relationship of this document (or subsection/topic) to the destination resource</dd>
    <dd><code>shape</code> - The kind of shape to be created in an <a>image map</a></dd>
    <dd><code>target</code> - <a>browsing context</a> for <a>hyperlink</a> <a>navigation</a></dd>
    <dd><code>type</code> - Hint for the type of the referenced resource</dd>
    <dt>Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values:</dt>
    <dd><a value for="role"><code>link</code></a> role (default - <a><em>do not set</em></a>).</dd>
    <dt>Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl" dfn-for="HTMLAreaElement">
        interface HTMLAreaElement : HTMLElement {
          attribute DOMString alt;
          attribute DOMString coords;
          attribute DOMString shape;
          attribute DOMString target;
          attribute DOMString download;
          attribute DOMString rel;
          readonly attribute DOMTokenList relList;
          attribute DOMString hreflang;
          attribute DOMString type;
        };
        HTMLAreaElement implements HTMLHyperlinkElementUtils;
      </pre>
    </dd>
  </dl>

  The <{area}> element <a>represents</a> either a hyperlink with some text and a
  corresponding area on an <a>image map</a>, or a dead area on an image map.

  An <{area}> element with a parent node must have a <{map}> element ancestor
  or a <{template}> element ancestor.

  If the <{area}> element has an <code>href</code>
  attribute, then the <{area}> element represents a <a>hyperlink</a>. In this case,
  the <dfn element-attr for="area"><code>alt</code></dfn> attribute must be present. It specifies the
  text of the hyperlink. Its value must be text that informs the user about the destination of the link.

  If the <{area}> element has no <code>href</code>
  attribute, then the area represented by the element cannot be selected, and the <code>alt</code> attribute must be omitted.

  In both cases, the <code>shape</code> and <code>coords</code> attributes specify the area.

  The <dfn element-attr for="area"><code>shape</code></dfn> attribute is an <a>enumerated
  attribute</a>. The following table lists the keywords defined for this attribute. The states
  given in the first cell of the rows with keywords give the states to which those keywords map.
  <span class="impl">Some of the keywords are non-conforming, as noted in the last
  column.</span>

  <table>
    <thead>
    <tr>
      <th>State
      </th><th>Keywords
      </th><th class="impl">Notes
    </th></tr></thead><tbody>
    <tr>
      <td rowspan="2"><a state for="area">Circle state</a>
      </td><td><dfn attr-value for="area/shape"><code>circle</code></dfn>
      </td><td class="impl">
    </td></tr><tr>
      <td class="impl"><dfn attr-value for="area/shape"><code>circ</code></dfn>
      </td><td class="impl">Non-conforming
    </td></tr><tr>
      <td><a state for="area">Default state</a>
      </td><td><dfn attr-value for="area/shape"><code>default</code></dfn>
      </td><td class="impl">
    </td></tr><tr>
      <td rowspan="2"><a state for="area">Polygon state</a>
      </td><td><dfn attr-value for="area/shape"><code>poly</code></dfn>
      </td><td class="impl">
    </td></tr><tr>
      <td class="impl"><dfn attr-value for="area/shape"><code>polygon</code></dfn>
      </td><td class="impl">Non-conforming
    </td></tr><tr>
      <td rowspan="2"><a state for="area">Rectangle state</a>
      </td><td><dfn attr-value for="area/shape"><code>rect</code></dfn>
      </td><td class="impl">
    </td></tr><tr>
      <td class="impl"><dfn attr-value for="area/shape"><code>rectangle</code></dfn>
      </td><td class="impl">Non-conforming
  </td></tr></tbody></table>

  The attribute may be omitted. The <i>missing value default</i> is the <a state for="area">rectangle state</a>.

  The <dfn element-attr for="area"><code>coords</code></dfn> attribute must, if specified,
  contain a <a>valid list of floating-point numbers</a>. This attribute gives the coordinates for the shape
  described by the <code>shape</code> attribute. <span class="impl">The
  processing for this attribute is described as part of the <a>image map</a> processing
  model.</span>

  In the <dfn state for="area" lt="Circle state|circle state">circle state</dfn>, <{area}> elements must
  have a <code>coords</code> attribute present, with three integers, the
  last of which must be non-negative. The first integer must be the distance in CSS pixels from the
  left edge of the image to the center of the circle, the second integer must be the distance in CSS
  pixels from the top edge of the image to the center of the circle, and the third integer must be
  the radius of the circle, again in CSS pixels.

  In the <dfn state for="area" lt="Default state|default state">default state</dfn> state, <{area}>
  elements must not have a <code>coords</code> attribute. (The area is the
  whole image.)

  In the <dfn state for="area" lt="Polygon state|polygon state">polygon state</dfn>, <{area}> elements must
  have a <code>coords</code> attribute with at least six integers, and the
  number of integers must be even. Each pair of integers must represent a coordinate given as the
  distances from the left and the top of the image in CSS pixels respectively, and all the
  coordinates together must represent the points of the polygon, in order.

  In the <dfn state for="area" lt="Rectangle state|rectangle state|Rect state|rect state">rectangle state</dfn>, <{area}> elements must
  have a <code>coords</code> attribute with exactly four integers, the
  first of which must be less than the third, and the second of which must be less than the fourth.
  The four points must represent, respectively, the distance from the left edge of the image to the
  left side of the rectangle, the distance from the top edge to the top side, the distance from the
  left edge to the right side, and the distance from the top edge to the bottom side, all in CSS
  pixels.

  <div class="impl">

  When user agents allow users to <a>follow hyperlinks</a> or
  <a>download hyperlinks</a> created using the
  <{area}> element, as described in the next section, the <code>href</code>, <code>target</code>,
  and <code>download</code> attributes decide how the link is followed. The <{area/rel}>,
  <code>hreflang</code>, and <code>type</code> attributes may be used to indicate to the user the
  likely nature of the target resource before the user follows the link.

  </div>

  The <code>target</code>, <code>download</code>, <{area/rel}>, <code>hreflang</code>, and
  <code>type</code> attributes must be omitted if the <code>href</code> attribute is not present.

  <div class="impl">

  The <a>activation behavior</a> of <{area}> elements is to run the following
  steps:

  <ol>

    <li>If the <{area}> element's <a>node document</a> is not <a>fully active</a>,
    then abort these steps.</li>

    <li>

    If the <{area}> element has a <code>download</code>
    attribute and the algorithm is not <a>allowed to show a popup</a>; or, if the user has not indicated a specific <a>browsing context</a> for following the link, and the element's <code>target</code> attribute is present, and applying <a>the rules
    for choosing a browsing context given a browsing context name</a>, using the value of the
    <code>target</code> attribute as the browsing context name, would
    result in there not being a chosen browsing context, then run these substeps:

    <ol>

      <li>If there is an <a>entry settings object</a>, throw an
      <code>InvalidAccessError</code> exception.</li>

      <li>Abort these steps without following the hyperlink.</li>

    </ol>

    </li>

    <li>Otherwise, the user agent must <a>follow the
    hyperlink</a> or <a>download the hyperlink</a> created
    by the <{area}> element, if any, and as determined by the <code>download</code> attribute and any expressed user
    preference.</li>

  </ol>

  The IDL attributes <dfn attribute for="HTMLAreaElement"><code>alt</code></dfn>, <dfn attribute for="HTMLAreaElement"><code>coords</code></dfn>, <dfn attribute for="HTMLAreaElement"><code>target</code></dfn>, <dfn attribute for="HTMLAreaElement"><code>download</code></dfn>,
  <dfn attribute for="HTMLAreaElement"><code>rel</code></dfn>,
  <dfn attribute for="HTMLAreaElement"><code>hreflang</code></dfn>, and <dfn attribute for="HTMLAreaElement"><code>type</code></dfn>, each must <a>reflect</a> the respective
  content attributes of the same name.

  The IDL attribute <dfn attribute for="HTMLAreaElement"><code>shape</code></dfn> must
  <a>reflect</a> the <{area/shape}> content attribute.

  The IDL attribute <dfn attribute for="HTMLAreaElement"><code>relList</code></dfn> must
  <a>reflect</a> the <{links/rel}> content attribute.

  <hr />

  The <{area}> element also supports the <code>HTMLHyperlinkElementUtils</code> interface. [[!URL]]

  When the element is created, and whenever the element's <code>href</code> content attribute is set, changed, or removed, the user
  agent must invoke the element's <code>HTMLHyperlinkElementUtils</code> interface's set the input algorithm with the value of the <code>href</code> content attribute, if any, or the empty string otherwise,
  as the given value.

  The element's <code>HTMLHyperlinkElementUtils</code> interface's get the base algorithm must simply return the <a>document base URL</a>.

  The element's <code>HTMLHyperlinkElementUtils</code> interface's query encoding is the <a>document's character encoding</a>.

  When the element's <code>HTMLHyperlinkElementUtils</code> interface invokes its update steps with a string <var>value</var>, the user
  agent must set the element's <code>href</code> content attribute to
  the string <var>value</var>.

  </div>

<h4 id="embedded-content-image-maps">Image maps</h4>

  <div class="impl">

<h5 id="authoring">Authoring</h5>

  </div>

  An <dfn lt="image map|image maps">image map</dfn> allows geometric areas on an image to be associated with <a>hyperlinks</a>.

  An image, in the form of an <{img}> element or an <{object}> element
  representing an image, may be associated with an image map (in the form of a <code>map</code>
  element) by specifying a <dfn element-attr for="common"><code>usemap</code></dfn> attribute on
  the <{img}> or <{object}> element. The <code>usemap</code> attribute, if specified, must be a <a>valid
  hash-name reference</a> to a <{map}> element.

  <div class="example">
    Consider an image that looks as follows:

    <img src="images/sample-usemap.png" width="600" height="150" alt="A line with four shapes in it, equally spaced: a red hollow box, a green circle, a blue triangle, and a yellow four-pointed star." />

    If we wanted just the colored areas to be clickable, we could do it as follows:

    <pre highlight="html">
&lt;p&gt;
  Please select a shape:
  &lt;img src="shapes.png" usemap="#shapes"
      alt="Four shapes are available: a red hollow box, a green circle, a blue triangle, and a yellow four-pointed star."&gt;
  &lt;map name="shapes"&gt;
  &lt;area shape=rect coords="50,50,100,100"&gt; &lt;!-- the hole in the red box --&gt;
  &lt;area shape=rect coords="25,25,125,125" href="red.html" alt="Red box."&gt;
  &lt;area shape=circle coords="200,75,50" href="green.html" alt="Green circle."&gt;
  &lt;area shape=poly coords="325,25,262,125,388,125" href="blue.html" alt="Blue triangle."&gt;
  &lt;area shape=poly coords="450,25,435,60,400,75,435,90,450,125,465,90,500,75,465,60"
        href="yellow.html" alt="Yellow star."&gt;
  &lt;/map&gt;
&lt;/p&gt;
    </pre>

  </div>

  <div class="impl">

<h5 id="image-maps-processing-model">Processing model</h5>

  If an <{img}> element or an <{object}> element representing an image has a
  <code>usemap</code> attribute specified, user agents must process it
  as follows:

  <ol>

    <li>Parse the attribute's value using the <a>rules for parsing a hash-name reference</a> to a <{map}> element, with the element's <a>node document</a> as the context node.
    This will return either an element (the <var>map</var>) or
    null.</li>

    <li>If that returned null, then abort these steps. The image is not associated with an image
    map after all.</li>

    <li>Otherwise, the user agent must collect all the <{area}> elements that are
    descendants of the <var>map</var>. Let those be the <var>areas</var>.</li>

  </ol>

  Having obtained the list of <{area}> elements that form the image map (the <var>areas</var>), interactive user agents must process the list in one of two ways.

  If the user agent intends to show the text that the <{img}> element represents, then
  it must use the following steps.

  <p class="note">
    In user agents that do not support images, or that have images disabled,
  <{object}> elements cannot represent images, and thus this section never applies (the
  <a>fallback content</a> is shown instead). The following steps therefore only apply to
  <{img}> elements.
  </p>

  <ol>

    <li>Remove all the <{area}> elements in <var>areas</var> that have no <code>href</code> attribute.</li>

    <li>Remove all the <{area}> elements in <var>areas</var> that have no <code>alt</code> attribute, or whose <code>alt</code>
    attribute's value is the empty string, <em>if</em> there is another <{area}> element in
    <var>areas</var> with the same value in the <code>href</code> attribute and with a non-empty <code>alt</code> attribute.</li>

    <li>Each remaining <{area}> element in <var>areas</var> represents a
    <a>hyperlink</a>. Those hyperlinks should all be made available to the user in a manner
    associated with the text of the <{img}>.

    In this context, user agents may represent <code>area</code> and <{img}> elements
    with no specified <code>alt</code> attributes, or whose <code>alt</code>
    attributes are the empty string or some other non-visible text, in a user-agent-defined fashion
    intended to indicate the lack of suitable author-provided text.

  </ol>

  If the user agent intends to show the image and allow interaction with the image to select
  hyperlinks, then the image must be associated with a set of layered shapes, taken from the
  <{area}> elements in <var>areas</var>, in reverse <a>tree order</a> (so the last
  specified <{area}> element in the <var>map</var> is the bottom-most shape, and
  the first element in the <var>map</var>, in <a>tree order</a>, is the top-most shape).

  Each <{area}> element in <var>areas</var> must be processed as follows to
  obtain a shape to layer onto the image:

  <ol>

    <li>Find the state that the element's <code>shape</code> attribute
    represents.</li>

    <li>Use the <a>rules for parsing a list of floating-point numbers</a> to parse the element's
    <code>coords</code> attribute, if it is present, and let the result be the <var>coords</var>
    list. If the attribute is absent, let the <var>coords</var> list be the empty list.</li>

    <li>

    If the number of items in the <var>coords</var> list is less than the minimum number
    given for the <{area}> element's current state, as per the following table, then the
    shape is empty; abort these steps.

    <table>
      <thead>
      <tr>
        <th>State
        </th><th>Minimum number of items
      </th></tr></thead><tbody>
      <tr>
        <td><a state for="area">Circle state</a>
        </td><td>3
      </td></tr><tr>
        <td><a state for="area">Default state</a>
        </td><td>0
      </td></tr><tr>
        <td><a state for="area">Polygon state</a>
        </td><td>6
      </td></tr><tr>
        <td><a state for="area">Rectangle state</a>
        </td><td>4
    </td></tr></tbody></table>

    </li>

    <li>

    Check for excess items in the <var>coords</var> list as per the entry in the
    following list corresponding to the <code>shape</code> attribute's
    state:

    <dl class="switch">
      <dt><a state for="area">Circle state</a></dt>
      <dd>Drop any items in the list beyond the third.</dd>
      <dt><a state for="area">Default state</a></dt>
      <dd>Drop all items in the list.</dd>
      <dt><a state for="area">Polygon state</a></dt>
      <dd>Drop the last item if there's an odd number of items.</dd>
      <dt><a state for="area">Rectangle state</a></dt>
      <dd>Drop any items in the list beyond the fourth.</dd>
    </dl>

    </li>

    <li>If the <code>shape</code> attribute represents the <a state for="area">rectangle state</a>, and the first number in the list is
    numerically greater than the third number in the list, then swap those two numbers around.</li>

    <li>If the <code>shape</code> attribute represents the <a state for="area">rectangle state</a>, and the second number in the list is
    numerically greater than the fourth number in the list, then swap those two numbers around.</li>

    <li>If the <code>shape</code> attribute represents the <a state for="area">circle state</a>, and the third number in the list is less than
    or equal to zero, then the shape is empty; abort these steps.</li>

    <li>Now, the shape represented by the element is the one described for the entry in the list
    below corresponding to the state of the <code>shape</code> attribute:

    <dl class="switch">

      <dt><a state for="area">Circle state</a></dt>
      <dd>

      Let <var>x</var> be the first number in <var>coords</var>, <var>y</var> be the second number, and <var>r</var> be the third number.

      The shape is a circle whose center is <var>x</var> CSS pixels from the left edge
      of the image and <var>y</var> CSS pixels from the top edge of the image, and whose
      radius is <var>r</var> pixels.

      </dd>

      <dt><a state for="area">Default state</a></dt>
      <dd>

      The shape is a rectangle that exactly covers the entire image.

      </dd>

      <dt><a state for="area">Polygon state</a></dt>
      <dd>

      Let <var>x<sub><var>i</var></sub></var> be the (2<var>i</var>)th entry in <var>coords</var>, and <var>y<sub><var>i</var></sub></var> be the (2<var>i</var>+1)th entry in <var>coords</var> (the first entry in <var>coords</var> being the one with index 0).

      Let <var>the coordinates</var> be (<var>x<sub><var>i</var></sub></var>, <var>y<sub><var>i</var></sub></var>),
      interpreted in CSS pixels measured from the top left of the image, for all integer values of
      <var>i</var> from 0 to (<var>N</var>/2)-1, where <var>N</var> is the number of items in <var>coords</var>.

      The shape is a polygon whose vertices are given by <var>the coordinates</var>, and
      whose interior is established using the even-odd rule. [[GRAPHICS]]

      </dd>

      <dt><a state for="area">Rectangle state</a></dt>

      <dd>

      Let <var>x<sub>1</sub></var> be the first number in <var>coords</var>, <var>y<sub>1</sub></var> be the second number, <var>x<sub>2</sub></var> be the third number, and <var>y<sub>2</sub></var> be the fourth number.

      The shape is a rectangle whose top-left corner is given by the coordinate (<var>x<sub>1</sub></var>, <var>y<sub>1</sub></var>) and whose
      bottom right corner is given by the coordinate (<var>x<sub>2</sub></var>,
      <var>y<sub>2</sub></var>), those coordinates being interpreted as CSS pixels
      from the top left corner of the image.

      </dd>

    </dl>

    For historical reasons, the coordinates must be interpreted relative to the
    <em>displayed</em> image after any stretching caused by the CSS 'width' and 'height' properties
    (or, for non-CSS browsers, the image element's <code>width</code> and <code>height</code> attributes — CSS browsers map those attributes to the
    aforementioned CSS properties).

    <p class="note">
    Browser zoom features and transforms applied using CSS or SVG do not affect the
    coordinates.
  </p>

    </li>

  </ol>

  Pointing device interaction with an image associated with a set of layered shapes per the above
  algorithm must result in the relevant user interaction events being first fired to the top-most
  shape covering the point that the pointing device indicated, if any, or to the image element
  itself, if there is no shape covering that point. User agents may also allow individual
  <{area}> elements representing <a>hyperlinks</a> to be selected
  and activated (e.g., using a keyboard).

  <p class="note">
    Because a <{map}> element (and its <{area}> elements) can be
  associated with multiple <{img}> and <{object}> elements, it is possible for an
  <{area}> element to correspond to multiple <i>focusable areas</i>
  of the document.
  </p>

  Image maps are <a>live</a>; if the DOM is mutated, then the user agent must act as if it
  had rerun the algorithms for image maps.

  </div>

<h4 id="mathml">MathML</h4>

  The <{math}> element from the <a>MathML namespace</a>
  falls into the <a>embedded content</a>, <a>phrasing content</a>, <a>flow
  content</a>, and <a>palpable content</a> categories for the purposes of the content
  models in this specification.

  This specification refers to several specific MathML elements, in particular:
    <{annotation-xml}>,
    <{merror}>,
    <{mi}>,
    <{mn}>,
    <{mo}>,
    <{ms}>, and
    <{mtext}>.

  When the MathML <{annotation-xml}> element contains
  elements from the <a>HTML namespace</a>, such elements must all be <a>flow
  content</a>. [[!MATHML]]

  When the MathML token elements (<{mi}>, <{mo}>, <{mn}>, <{ms}>,
  and <{mtext}>) are descendants of HTML elements, they may contain
  <a>phrasing content</a> elements from the <a>HTML namespace</a>. [[!MATHML]]

  <div class="impl">

  User agents must handle text other than <a>inter-element whitespace</a> found in MathML
  elements whose content models do not allow straight text by pretending for the purposes of MathML
  content models, layout, and rendering that the text is actually wrapped in an <{mtext}> element in the <a>MathML namespace</a>. (Such text is not,
  however, conforming.)

  User agents must act as if any MathML element whose contents does not match the element's
  content model was replaced, for the purposes of MathML layout and rendering, by an <{merror}> element in the <a>MathML namespace</a> containing some
  appropriate error message.

  To enable authors to use MathML tools that only accept MathML in its XML form, interactive HTML
  user agents are encouraged to provide a way to export any MathML fragment as an XML
  namespace-well-formed XML fragment.

  </div>

  The semantics of MathML elements are defined by the MathML specification and
  <a lt="applicable specification">other applicable specifications</a>. [[!MATHML]]

  <div class="example">
    Here is an example of the use of MathML in an HTML document:

    <pre highlight="html">
      &lt;!DOCTYPE html&gt;
      &lt;html&gt;
        &lt;head&gt;
        &lt;title&gt;The quadratic formula&lt;/title&gt;
        &lt;/head&gt;
        &lt;body&gt;
        &lt;h1&gt;The quadratic formula&lt;/h1&gt;
        &lt;p&gt;
          &lt;math&gt;
          &lt;mi&gt;x&lt;/mi&gt;
          &lt;mo&gt;=&lt;/mo&gt;
          &lt;mfrac&gt;
            &lt;mrow&gt;
            &lt;mo form="prefix"&gt;-&lt;/mo&gt; &lt;mi&gt;b&lt;/mi&gt;
            &lt;mo&gt;±&lt;/mo&gt;
            &lt;msqrt&gt;
              &lt;msup&gt; &lt;mi&gt;b&lt;/mi&gt; &lt;mn&gt;2&lt;/mn&gt; &lt;/msup&gt;
              &lt;mo&gt;-&lt;/mo&gt;
              &lt;mn&gt;4&lt;/mn&gt; &lt;mo&gt;⁢&lt;/mo&gt; &lt;mi&gt;a&lt;/mi&gt; &lt;mo&gt;⁢&lt;/mo&gt; &lt;mi&gt;c&lt;/mi&gt;
            &lt;/msqrt&gt;
            &lt;/mrow&gt;
            &lt;mrow&gt;
            &lt;mn&gt;2&lt;/mn&gt; &lt;mo&gt;⁢&lt;/mo&gt; &lt;mi&gt;a&lt;/mi&gt;
            &lt;/mrow&gt;
          &lt;/mfrac&gt;
          &lt;/math&gt;
        &lt;/p&gt;
        &lt;/body&gt;
      &lt;/html&gt;
    </pre>
  </div>

<h4 id="svg">SVG</h4>

  The <dfn element><code>svg</code></dfn> element from the <a>SVG namespace</a> falls into the
  <a>embedded content</a>, <a>phrasing content</a>, <a>flow content</a>,
  and <a>palpable content</a> categories for the purposes of the content models in this
  specification.

  <div class="impl">

  To enable authors to use SVG tools that only accept SVG in its XML form, interactive HTML user
  agents are encouraged to provide a way to export any SVG fragment as an XML namespace-well-formed
  XML fragment.

  </div>

  When the SVG <{foreignObject}> element contains elements from the <a>HTML namespace</a>, such
  elements must all be <a>flow content</a>. [[!SVG]]

  The content model for <a element for="svg">title</a> elements in the <a>SVG namespace</a>
  inside <a>HTML documents</a> is <a>phrasing content</a>. (This further constrains the
  requirements given in the SVG specification.)

  The semantics of SVG elements are defined by the SVG specification and <a>other applicable
  specifications</a>. [[!SVG]]

  <p><strong>User agent requirements</strong>: SVG as implemented today follows neither SVG 1.1 nor
  SVG Tiny 1.2 precisely, instead implementing subsets of each. Although it is hoped that the
  in-progress SVG 2 specification is a more realistic target for implementations, until that
  specification is ready, user agents must implement the SVG 1.1 specification with the following
  willful violations and additions. [[!SVG11]] [[!SVGTiny12]] [[!SVG2]]</p>

  <p>The following features from SVG 1.1 must not be implemented:</p>

  <ul>
    <li>The <code>tref</code> element</li>
    <li>The <code>cursor</code> element (use CSS's <code>cursor</code> property
      instead)</li>
    <li>The font-defining elements: <code>font</code>, <code>glyph</code>,
      <code>missing-glyph</code>, <code>hkern</code>,
      <code>vkern</code>, <code>font-face</code>,
      <code>font-face-src</code>, <code>font-face-uri</code>,
      <code>font-face-format</code>, and <code>font-face-name</code> (use
      CSS's <code>@font-face</code> instead)</li>
    <li>The <code>externalResourcesRequired</code> attribute</li>
    <li>The <code>enable-background</code> property</li>
    <li>The <code>contentScriptType</code> and <code>contentStyleType</code>
      attributes (use the <code>type</code> attribute on the <code>script</code>
      and <code>style</code> elements instead)</li>
  </ul>

  <p>The following features from SVG Tiny 1.2 must be implemented:</p>

  <ul>
    <li>The <code>non-scaling-stroke</code> value for the
      <code>vector-effect</code> property</li>
    <li>The <code>class</code> attribute is allowed on all SVG elements</li>
    <li>The <code>tabindex</code> attribute is allowed on visible SVG elements</li>
    <li>The ARIA accessibility attributes are allowed on all SVG elements</li>
  </ul>

<h4 id="sec-dimension-attributes"><dfn>Dimension attributes</dfn></h4>

  <span class="impl"><strong>Author requirements</strong>:</span> The
  <dfn element-attr for="media,img,iframe,embed,object,video,input"><code>width</code></dfn> and
  <dfn element-attr for="media,img,iframe,embed,object,video,input"><code>height</code></dfn> attributes on <{img}>, <{iframe}>,
  <{embed}>, <{object}>, <{video}>, and, when their <code>type</code> attribute is in the <a element-state for="input">image button</a> state, <{input}> elements may be
  specified to give the dimensions of the visual content of the element (the width and height
  respectively, relative to the nominal direction of the output medium), in CSS pixels. The
  attributes, if specified, must have values that are <a>valid non-negative integers</a>.

  The specified dimensions given may differ from the dimensions specified in the resource itself,
  since the resource may have a resolution that differs from the CSS pixel resolution. (On screens,
  CSS pixels have a resolution of 96ppi, but in general the CSS pixel resolution depends on the
  reading distance.) If both attributes are specified, then one of the following statements must be
  true:

  <ul>

    <li><var>specified width</var> - 0.5 ≤
              <var>specified height</var> * <var>target ratio</var> ≤
              <var>specified width</var> + 0.5</li>

    <li><var>specified height</var> - 0.5 ≤
              <var>specified width</var> / <var>target ratio</var> ≤
              <var>specified height</var> + 0.5</li>

    <li><var>specified height</var> = <var>specified width</var> = 0</li>

  </ul>

  The <var>target ratio</var> is the ratio of the <a for="css">intrinsic width</a> to the
  <a for="css">intrinsic height</a> in the resource. The <var>specified width</var> and <var>specified
  height</var> are the values of the <code>width</code> and <code>height</code> attributes respectively.

  The two attributes must be omitted if the resource in question does not have both an
  <a for="css">intrinsic width</a> and an <a for="css">intrinsic height</a>.

  If the two attributes are both zero, it indicates that the element is not intended for the user
  (e.g., it might be a part of a service to count page views).

  <p class="note">The dimension attributes are not intended to be used to stretch the image.</p>

  <div class="impl">

  <strong>User agent requirements</strong>: User agents are expected to use these attributes <a>as hints for the rendering</a>.

  The <dfn attribute for="media"><code>width</code></dfn> and <dfn attribute for="media"><code>height</code></dfn> IDL attributes on the <{iframe}>,
  <{embed}>, <{object}>, and <{video}> elements must <a>reflect</a>
  the respective content attributes of the same name.

  <p class="note">
    For <{iframe}>, <{embed}>, and <{object}> the IDL
  attributes are <code>DOMString</code>; for <{video}> the IDL attributes are <code>unsigned long</code>.
  </p>

  <p class="note">
    The corresponding IDL attributes for <{img}> and
  <{input}> elements are defined in those respective elements'
  sections, as they are slightly more specific to those elements' other behaviors.
  </p>

  </div>

</section>
