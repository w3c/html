<section>

<h3 id="interactive-elements">Interactive elements</h3>

<h4 id="the-details-element">The <dfn element><code>details</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Sectioning root</a>.</dd>
    <dd><a>Interactive content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>One <{summary}> element followed by <a>flow content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>open</code> - Whether the details are visible</dd>
    <dt>Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role</a> that supports
    <code>aria-expanded</code>.</dd>
    <dt>Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl" dfn-for="HTMLDetailsElement">
        interface HTMLDetailsElement : HTMLElement {
          attribute boolean open;
        };
      </pre>
    </dd>
  </dl>

  The <{details}> element <a>represents</a> a disclosure widget from which the
  user can obtain additional information or controls.

  <p class="note">
    The <{details}> element is not appropriate for footnotes. Please see [[#footnotes]] for details on how to mark up footnotes.
  </p>

  The <span class="impl">first</span> <{summary}> element child of the element, if any,
  <a>represents</a> the summary or legend of the details. <span class="impl">If there is no
  child <{summary}> element, the user agent should provide its own legend (e.g.,
  "Details").</span>

  The rest of the element's contents <a>represents</a> the additional information or
  controls.

  The <dfn element-attr for="details"><code>open</code></dfn> content attribute is a <a>boolean
  attribute</a>. If present, it indicates that both the summary and the additional information is
  to be shown to the user. If the attribute is absent, only the summary is to be shown.

  <div class="impl">

  When the element is created, if the attribute is absent, the additional information should be
  hidden; if the attribute is present, that information should be shown. Subsequently, if the
  attribute is removed, then the information should be hidden; if the attribute is added, the
  information should be shown.

  The user agent should allow the user to request that the additional information be shown or
  hidden. To honor a request for the details to be shown, the user agent must set the <code>open</code> attribute on the element to the value <code>open</code>. To honor a request for the information to be hidden, the user agent must
  remove the <code>open</code> attribute from the element.

  Whenever the <code>open</code> attribute is added to or removed from
  a <{details}> element, the user agent must <a>queue a task</a> that runs the
  following steps, which are known as the <dfn>details notification task steps</dfn>, for this
  <{details}> element:

  <ol>

    <li>

    If another <a>task</a> has been <a>queued</a> to run the <a>details notification task steps</a> for this
    <{details}> element, then abort these steps.

    <p class="note">
    When the <code>open</code> attribute is toggled
    several times in succession, these steps essentially get coalesced so that only one event is
    fired.
  </p>

    </li>

    <li><a>Fire a simple event</a> named <code>toggle</code> at the
    <{details}> element.</li>

  </ol>

  The <a>task source</a> for this task must be the <a>DOM manipulation task
  source</a>.

  The <dfn attribute for="HTMLDetailsElement"><code>open</code></dfn> IDL attribute must
  <a>reflect</a> the <code>open</code> content attribute.

  </div>

  <div class="example">
    The following example shows the <{details}> element being used to hide technical
    details in a progress report.

    <pre highlight="html">
      &lt;section class="progress window"&gt;
        &lt;h1&gt;Copying "Really Achieving Your Childhood Dreams"&lt;/h1&gt;
        &lt;details&gt;
        &lt;summary&gt;Copying... &lt;progress max="375505392" value="97543282"&gt;&lt;/progress&gt; 25%&lt;/summary&gt;
        &lt;dl&gt;
          &lt;dt&gt;Transfer rate:&lt;/dt&gt; &lt;dd&gt;452KB/s&lt;/dd&gt;
          &lt;dt&gt;Local filename:&lt;/dt&gt; &lt;dd&gt;/home/rpausch/raycd.m4v&lt;/dd&gt;
          &lt;dt&gt;Remote filename:&lt;/dt&gt; &lt;dd&gt;/var/www/lectures/raycd.m4v&lt;/dd&gt;
          &lt;dt&gt;Duration:&lt;/dt&gt; &lt;dd&gt;01:16:27&lt;/dd&gt;
          &lt;dt&gt;Color profile:&lt;/dt&gt; &lt;dd&gt;SD (6-1-6)&lt;/dd&gt;
          &lt;dt&gt;Dimensions:&lt;/dt&gt; &lt;dd&gt;320&times;240&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;/details&gt;
      &lt;/section&gt;
    </pre>

  </div>

  <div class="example">
    The following shows how a <{details}> element can be used to hide some controls by
    default:

    <pre highlight="html">
      &lt;details&gt;
        &lt;summary&gt;&lt;label for=fn&gt;Name &amp; Extension:&lt;/label&gt;&lt;/summary&gt;
        &lt;p&gt;&lt;input type=text id=fn name=fn value="Pillar Magazine.pdf"&gt;
        &lt;p&gt;&lt;label&gt;&lt;input type=checkbox name=ext checked&gt; Hide extension&lt;/label&gt;
      &lt;/details&gt;
    </pre>

    One could use this in conjunction with other <code>details</code> in a list to allow the user
    to collapse a set of fields down to a small set of headings, with the ability to open each
    one.

    <p class="details-example"><img src="images/sample-details-1.png" width="345" height="611" alt="" /><img src="images/sample-details-2.png" width="345" height="666" alt="" /></p>

    In these examples, the summary really just summarizes what the controls can change, and not
    the actual values, which is less than ideal.

  </div>

  <div class="example">
    Because the <code>open</code> attribute is added and removed
    automatically as the user interacts with the control, it can be used in CSS to style the element
    differently based on its state. Here, a stylesheet is used to animate the color of the summary
    when the element is opened or closed:

    <pre highlight="html">
      &lt;style&gt;
        details &gt; summary { transition: color 1s; color: black; }
        details[open] &gt; summary { color: red; }
      &lt;/style&gt;
      &lt;details&gt;
        &lt;summary&gt;Automated Status: Operational&lt;/summary&gt;
        &lt;p&gt;Velocity: 12m/s&lt;/p&gt;
        &lt;p&gt;Direction: North&lt;/p&gt;
      &lt;/details&gt;
    </pre>

  </div>

<h4 id="the-summary-element">The <dfn element><code>summary</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As the first child of a <{details}> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Either: <a>phrasing content</a>.</dd>
    <dd>Or: one element of <a>heading content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values:</dt>
    <dd><a value for="role"><code>button</code></a>.</dd>
    <dt>Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <{summary}> element <a>represents</a> a summary, caption, or legend for the
  rest of the contents of the <{summary}> element's parent <code>details</code>
  element<span class="impl">, if any</span>.

<h4 id="the-menu-element">The <dfn element><code>menu</code></dfn> element</h4>


  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dd>If the element's <code>type</code> attribute is in the <a state for="menu">popup menu</a> state: as the child of a <{menu}> element whose <code>type</code> attribute is in the <a state for="menu">popup menu</a> state.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>If the element's <code>type</code> attribute is in the <a state for="menu">popup menu</a> state: in any order, zero or more <{menuitem}> elements, zero or more <{hr}> elements, zero or more <{menu}> elements whose <code>type</code> attributes are in the <a state for="menu">popup menu</a> state, and zero or more <a>script-supporting elements</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>type</code> - Type of menu</dd>
    <dd><code>label</code> - User-visible label</dd>
    <dt>Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values:</dt>
    <dd><a value for="role"><code>menu</code></a>
    (default - <a><em>do not set</em></a>),
    <a value for="role"><code>directory</code></a>,
    <a value for="role"><code>list</code></a>,
    <a value for="role"><code>listbox</code></a>,
    <a value for="role"><code>menubar</code></a>,
    <a value for="role" ><code>tablist</code></a>,
    <a value for="role"><code>tabpanel</code></a>
    or <a value for="role"><code>tree</code></a>.</dd>
    <dt>Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl" dfn-for="HTMLMenuElement">
        interface HTMLMenuElement : HTMLElement {
          attribute DOMString type;
          attribute DOMString label;
        };
      </pre>
    </dd>
  </dl>

  The <{menu}> element represents a group of commands.

  The <dfn element-attr for="menu"><code>type</code></dfn> attribute is an <a>enumerated
  attribute</a> indicating the kind of menu being declared. The attribute has 1 state. The
  "<dfn attr-value for="menu/type"><code>context</code></dfn>" keyword maps to the <dfn state for="menu">popup menu</dfn> state, in which the element is declaring a context menu. The attribute may also be
  omitted. The <i>missing value default</i> is the <a state for="menu">popup menu</a>
  state.

  If a <{menu}> element's <code>type</code> attribute is in the
  <a state for="menu">popup menu</a> state, then the element <a>represents</a>
  the commands of a popup menu, and the user can only examine and interact with the commands if that
  popup menu is activated through some other element via the <{global/contextmenu}> attribute.


  The <dfn element-attr for="menu"><code>label</code></dfn> attribute gives the label of the
  menu. It is used by user agents to display nested menus in the UI: a context menu containing
  another menu would use the nested menu's <code>label</code> attribute for
  the submenu's menu label. The <code>label</code> attribute must only be
  specified on <{menu}> elements whose parent element is a <{menu}> element whose
  <code>type</code> attribute is in the <a state for="menu">popup
  menu</a> state.

  <div class="impl">

  <hr />

  A <code>menu</code> is a <dfn>currently relevant <{menu}> element</dfn> if it is the
  child of a <span>currently relevant <{menu}> element</span>, or if it is the
  <a>designated pop-up menu</a> of a <{button}> element that is not
  <a>inert</a>, does not have a <code>hidden</code> attribute, and is not
  the descendant of an element with a <code>hidden</code> attribute.

  <hr />

  A <dfn>menu construct</dfn> consists of an ordered list of zero or more <dfn>menu item constructs</dfn>, which can be any of:

  <ul class="brief">
    <li><a>Commands</a>, which can be marked as <dfn>default commands</dfn> (<code>menuitem</code>)</li>
    <li><dfn>Separators</dfn> (<code>hr</code>)</li>
    <li>Other <a>menu constructs</a>, each with an associated <dfn>submenu label</dfn>, which allows the list to be nested (<code>menu</code>)</li>
  </ul>

  To <dfn lt="build and show|build and show a menu">build and show a menu</dfn> for a particular <{menu}> element
  <var>source</var> and with a particular element <var>subject</var> as a subject, the user agent
  must run the following steps:

  <ol>

    <li>Let <var>pop-up menu</var> be the <a>menu construct</a> created by the <a>build a
    menu construct</a> algorithm when passed the <var>source</var> element.

    </li><li>

    Display <var>pop-up menu</var> to the user, and let the algorithm that invoked this one continue.

    If the user selects a <a>menu item construct</a> that corresponds to an element that still represents a <a>command</a> when the user selects it, then the user agent must invoke that
    command's <a>Action</a>. If the command's <a>Action</a> is defined as <a>firing
    a <code>click</code> event</a>, either directly or via the <a>run
    synthetic click activation steps</a> algorithm, then the <code>relatedTarget</code> attribute of that <code>click</code> event must be initialized to <var>subject</var>.

    Pop-up menus must not, while being shown, reflect changes in the DOM. The menu is constructed
    from the DOM before being shown, and is then immutable.

    </li>

  </ol>

  To <dfn>build a menu construct</dfn> for an element <var>source</var>, the user agent must run
  the following steps, which return a <a>menu construct</a>:

  <ol>

    <li>Let <var>generated menu</var> be an empty <a>menu construct</a>.</li>

    <li>

    Run the <a>menu item generator</a> steps for the <{menu}> element using <var>generated menu</var>
    as the output.

    The <dfn>menu item generator</dfn> steps for a <{menu}> element using a specific <a>menu construct</a> <var>output</var> as
    output are as follows: For each child node of the <code>menu</code> in <a>tree order</a>,
    run the appropriate steps from the following list:

    <dl class="switch">

      <dt>If the child is a <{menuitem}> element that <a for="menuitem">defines a command</a></dt>

      <dd>Append the <a>command</a> to <var>output</var>, respecting the command's <a>facets</a>. If the <{menuitem}> element has a <code>default</code> attribute, mark the <a>command</a> as being a <a>default
      command</a>.</dd>

      <dt>If the child is an <{hr}> element</dt>

      <dd>Append a <a>separator</a> to <var>output</var>.</dd>

      <dt>If the child is a <{menu}> element with no <code>label</code> attribute</dt>

      <dd>Append a <a>separator</a> to <var>output</var>, then run
      the <a>menu item generator</a> steps for this child <{menu}> element, using
      <var>output</var> as the output, then append another <a>separator</a> to <var>output</var>.</dd>

      <dt>If the child is a <{menu}> element with a <code>label</code> attribute</dt>

      <dd>Let <var>submenu</var> be the result of running the <a>build a menu construct</a> steps for the child <{menu}> element. Then, append <var>submenu</var> to <var>output</var>, using the value of the child
      <{menu}> element's <code>label</code> attribute as the <a>submenu label</a>.</dd>

      <dt>Otherwise</dt>

      <dd><a>Ignore</a> the child node.</dd>

    </dl>

    </li>

    <li>Remove from <var>output</var> any <a>menu construct</a> whose <a>submenu
    label</a> is the empty string.</li>

    <li>Remove from <var>output</var> any <a>menu item construct</a> representing a <a>command</a> whose <a>Label</a> is
    the empty string.</li>

    <li>Collapse all sequences of two or more adjacent <a>separators</a> in <var>output</var> to a single <a>separator</a>.</li>

    <li>If the first <a>menu item construct</a> in <var>output</var> is a <a>separator</a>, then remove it.</li>

    <li>If the last <a>menu item construct</a> in <var>output</var> is a <a>separator</a>, then remove it.</li>

    <li>Return <var>output</var>.</li>

  </ol>

  <hr />

  The <dfn attribute for="HTMLMenuElement"><code>type</code></dfn> IDL attribute must <a>reflect</a>
  the content attribute of the same name, <a>limited to only known values</a>.

  The <dfn attribute for="HTMLMenuElement"><code>label</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name.

  </div>


<h4 id="the-menuitem-element">The <dfn element><code>menuitem</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <{menu}> element whose <code>type</code> attribute is in the <a state for="menu">popup menu</a> state.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>type</code> - Type of command</dd>
    <dd><code>label</code> - User-visible label</dd>
    <dd><code>icon</code> - Icon for the command</dd>
    <dd><code>disabled</code> Whether the command or control is disabled</dd>
    <dd><code>checked</code> Whether the command or control is checked</dd>
    <dd><code>radiogroup</code> Name of group of commands to treat as a radio button group</dd>
    <dd><code>default</code> - Mark the command as being a default command</dd>
    <dd>Also, the <{menuitem/title}> attribute has special semantics on this element.</dd>
    <dt>Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values:</dt>
    <dd><a value for="role"><code>menuitem</code></a>
    (default - <a><em>do not set</em></a>).</dd>
    <dt>Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl" dfn-for="HTMLMenuItemElement">
        interface HTMLMenuItemElement : HTMLElement {
          attribute DOMString type;
          attribute DOMString label;
          attribute DOMString icon;
          attribute boolean disabled;
          attribute boolean checked;
          attribute DOMString radiogroup;
          attribute boolean default;
        };
      </pre>
    </dd>
  </dl>

  The <{menuitem}> element represents a command that the user can invoke from a popup
  menu(a <a>context menu</a>).

  A <{menuitem}> element that uses one or more of the
    <code>type</code>,
    <code>label</code>,
    <code>icon</code>,
    <code>disabled</code>,
    <code>checked</code>, and
    <code>radiogroup</code>
  attributes defines a new command.

  <hr />

  The <dfn element-attr for="menuitem"><code>type</code></dfn> attribute indicates the kind of
  command: either a normal command with an associated action, or a state or option that can be
  toggled, or a selection of one item from a list of items.

  The attribute is an <a>enumerated attribute</a> with three keywords and states. The
  "<dfn attr-value for="menuitem/type"><code>command</code></dfn>" keyword maps to the
  <a state for="menuitem">Command</a> state, the "<dfn attr-value for="menuitem/type"><code>checkbox</code></dfn>" keyword maps to the <a state for="menuitem">Checkbox</a> state, and the "<dfn attr-value for="menuitem/type"><code>radio</code></dfn>" keyword maps to the <a state for="menuitem">Radio</a> state. The <i>missing value default</i> is the <a state for="menuitem">Command</a> state.

  <dl>

    <dt>The <dfn state for="menuitem">Command</dfn> state</dt>

    <dd>The element <a>represents</a> a normal command with an associated action.</dd>

    <dt>The <dfn state for="menuitem">Checkbox</dfn> state</dt>

    <dd>The element <a>represents</a> a state or option that can be toggled.</dd>

    <dt>The <dfn state for="menuitem">Radio</dfn> state</dt>

    <dd>The element <a>represents</a> a selection of one item from a list of items.</dd>

  </dl>

  The <dfn element-attr for="menuitem"><code>label</code></dfn> attribute gives the name of the
  command, as shown to the user. If the attribute is
  specified, it must have a value that is not the empty string.

  The <dfn element-attr for="menuitem"><code>icon</code></dfn> attribute gives a picture that
  represents the command. If the attribute is specified, the attribute's value must contain a
  <a>valid non-empty URL potentially surrounded by spaces</a>. <span class="impl">To obtain
  the <a>absolute URL</a> of the icon when the attribute's value is not the empty string, the
  attribute's value must be <a>resolved</a> relative to the element.
  When the attribute is absent, or its value is the empty string, or <a>parsing</a> its value fails, there is no icon.</span>

  The <dfn element-attr for="menuitem"><code>disabled</code></dfn> attribute is a
  <a>boolean attribute</a> that, if present, indicates that the command is not available in
  the current state.

  <p class="note">
    The distinction between <code>disabled</code> and
  <code>hidden</code> is subtle. A command would be disabled if, in the same
  context, it could be enabled if only certain aspects of the situation were changed. A command
  would be marked as hidden if, in that situation, the command will never be enabled. For example,
  in the context menu for a water faucet, the command "open" might be disabled if the faucet is
  already open, but the command "eat" would be marked hidden since the faucet could never be
  eaten.
  </p>

  The <dfn element-attr for="menuitem"><code>checked</code></dfn> attribute is a <a>boolean
  attribute</a> that, if present, indicates that the command is selected. The attribute must be
  omitted unless the <code>type</code> attribute is in either the <a state for="menuitem">Checkbox</a> state or the <a state for="menuitem">Radio</a> state.

  The <dfn element-attr for="menuitem"><code>radiogroup</code></dfn> attribute gives the
  name of the group of commands that will be toggled when the command itself is toggled, for
  commands whose <code>type</code> attribute has the value "<code>radio</code>". The scope of the name is the child list of the parent element. The
  attribute must be omitted unless the <code>type</code> attribute is in
  the <a state for="menuitem">Radio</a> state. When specified, the
  attribute's value must be a non-empty string.

  <hr />

  The <dfn element-attr for="menuitem"><code>title</code></dfn> attribute gives a hint describing
  the command, which might be shown to the user to help him.

  The <dfn element-attr for="menuitem"><code>default</code></dfn> attribute indicates, if
  present, that the command is the one that would have been invoked if the user had directly
  activated the menu's subject instead of using the menu. The <code>default</code> attribute is a <a>boolean attribute</a>.

  <div class="impl">

  <hr />

  The <dfn attribute for="HTMLMenuItemElement"><code>type</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name, <a>limited to only known
  values</a>.

  The <dfn attribute for="HTMLMenuItemElement"><code>label</code></dfn>, <dfn attribute for="HTMLMenuItemElement"><code>icon</code></dfn>, <dfn attribute for="HTMLMenuItemElement"><code>disabled</code></dfn>, <dfn attribute for="HTMLMenuItemElement"><code>checked</code></dfn>, and <dfn attribute for="HTMLMenuItemElement"><code>radiogroup</code></dfn>, and <dfn attribute for="HTMLMenuItemElement"><code>default</code></dfn> IDL attributes must <a>reflect</a>
  the respective content attributes of the same name.

  <hr />

  If the element's <a facet for="menuitem">Disabled State</a> is false
  (enabled) then the element's <a>activation behavior</a> depends on the element's <code>type</code> attribute, as follows:

  <dl class="switch">

    <dt>If the <code>type</code> attribute is in the <a element-state for="input">Checkbox</a> state</dt>

    <dd>If the element has a <code>checked</code> attribute, the user agent
    must remove that attribute. Otherwise, the user agent must add a <code>checked</code> attribute, with the literal value "<code>checked</code>".</dd>

    <dt>If the <code>type</code> attribute is in the <a state for="menuitem">Radio</a> state</dt>

    <dd>If the element has a parent, then the user agent must walk the list of child nodes of that parent
    element, and for each node that is a <{menuitem}> element, if that element has a <code>radiogroup</code> attribute whose value exactly matches the
    current element's (treating missing <code>radiogroup</code>
    attributes as if they were the empty string), and has a <code>checked</code> attribute, must remove that attribute.

    Then, the element's <code>checked</code> attribute must be set
    to the literal value "<code>checked</code>".</dd>

    <dt>Otherwise</dt>

    <dd>The element's <a>activation behavior</a> is to do nothing.</dd>

  </dl>

  <p class="note">
    Firing a synthetic <code>click</code> event at the element
  does not cause any of the actions described above to happen.
  </p>

  If the element's <a facet for="menuitem">Disabled State</a> is true
  (disabled) then the element has no <a>activation behavior</a>.

  </div>

  <p class="note">
    The <{menuitem}> element is not rendered except as <a element lt="menu">part of a popup menu</a>.
  </p>


<h4 id="context-menus"><dfn lt="context menu">Context menus</dfn></h4>

<h5 id="declaring-a-context-menu">Declaring a context menu</h5>

  The <dfn element-attr for="global"><code>contextmenu</code></dfn> attribute gives the element's
  context menu. The value must be the <a>ID</a> of a <{menu}>
  element in the same <a>home subtree</a> whose <code>type</code>
  attribute is in the <a state for="menu">popup menu</a> state.

  <p class="warning">
  The <{global/contextmenu}> attribute is "at risk".
  If testing during the Candidate Recommendation phase does not identify at least two interoperable implementations
  in current shipping browsers of the <{global/contextmenu}> attribute
  it will be removed from the HTML 5.1 Specification.
  </p>

  <p class="note">
    When a user right-clicks on an element with a <{global/contextmenu}> attribute, the user agent will first fire a <code>contextmenu</code> event at the element, and then, if that event is not
  canceled, a <code>show</code> event at the <{menu}> element.
  </p>

  <div class="example">
    Here is an example of a context menu for an input control:

    <pre highlight="html">
&lt;form name="npc"&gt;
  &lt;label&gt;Character name: &lt;input name=char type=text contextmenu=namemenu required&gt;&lt;/label&gt;
  &lt;menu type=context id=namemenu&gt;
  &lt;menuitem label="Pick random name" onclick="document.forms.npc.elements.char.value = getRandomName()"&gt;
  &lt;menuitem label="Prefill other fields based on name" onclick="prefillFields(document.forms.npc.elements.char.value)"&gt;
  &lt;/menu&gt;
&lt;/form&gt;
    </pre>

    This adds two items to the control's context menu, one called "Pick random name", and one
    called "Prefill other fields based on name". They invoke scripts that are not shown in the
    example above.

  </div>

  <div class="impl">

<h5 id="context-menu-processing-model">Processing model</h5>

  Each element has an <dfn>assigned context menu</dfn>, which can be null. If an element <var>A</var> has a <{global/contextmenu}> attribute, and there is
  an element with the ID given by <var>A</var>'s <{global/contextmenu}> attribute's value in <var>A</var>'s
  <a>home subtree</a>, and the first such element in <a>tree order</a> is a
  <{menu}> element whose <code>type</code> attribute is in the <a state for="menu">popup menu</a> state, then <var>A</var>'s <a>assigned
  context menu</a> is that element. Otherwise, if <var>A</var> has a parent element,
  then <var>A</var>'s <a>assigned context menu</a> is the <a>assigned context
  menu</a> of its parent element. Otherwise, <var>A</var>'s <a>assigned context
  menu</a> is null.

  When an element's context menu is requested (e.g., by the user right-clicking the element, or
  pressing a context menu key), the user agent must apply the appropriate rules from the following
  list:

  <dl class="switch">

    <dt>If the user requested a context menu using a pointing device</dt>

    <dd>The user agent must <a>fire</a> a <a>trusted</a> event with the name <code>contextmenu</code>, that bubbles and is cancelable, and that uses the
    <code>MouseEvent</code> interface, at the element for which the menu was requested. The context
    information of the event must be initialized to the same values as the last
    <code>MouseEvent</code> user interaction event that was fired as part of the gesture that was
    interpreted as a request for the context menu.</dd>

    <dt>Otherwise</dt>

    <dd>The user agent must <a>fire a synthetic mouse
    event named <code>contextmenu</code></a> that bubbles and is
    cancelable at the element for which the menu was requested.</dd>

  </dl>

  <p class="note">
    Typically, therefore, the firing of the <code>contextmenu</code> event will be the default action of a <code>mouseup</code> or <code>keyup</code> event. The exact
  sequence of events is user agent-dependent, as it will vary based on platform conventions.
  </p>

  The default action of the <code>contextmenu</code> event depends on
  whether or not the element for which the menu was requested has a non-null <a>assigned context
  menu</a> when the event dispatch has completed, as follows.

  If the <a>assigned context menu</a> of the element for which the menu was requested is
  null, the default action must be for the user agent to show its default context menu, if it has
  one.

  Otherwise, let <var>subject</var> be the element for which the menu was requested, and let
  <var>menu</var> be the <a>assigned context menu</a> of <var>target</var> immediately after
  the <code>contextmenu</code> event's dispatch has completed. The user
  agent must <a>fire</a> a <a>trusted</a> event with the name <code>show</code> at <var>menu</var>, using the <code>RelatedEvent</code> interface,
  with the <code>relatedTarget</code> attribute initialized
  to <var>subject</var>. The event must be cancelable.

  If <em>this</em> event (the <code>show</code> event) is not canceled, then
  the user agent must <a>build and show</a> the menu for
  <var>menu</var> with <var>subject</var> as the subject.

  The user agent may also provide access to its default context menu, if any, with the context
  menu shown. For example, it could merge the menu items from the two menus together, or provide the
  page's context menu as a submenu of the default menu. In general, user agents are encouraged to
  de-emphasize their own contextual menu items, so as to give the author's context menu the
  appearance of legitimacy — to allow documents to feel like "applications" rather than "mere
  Web pages".

  User agents may provide means for bypassing the context menu processing model, ensuring that
  the user can always access the user agent's default context menus. For example, the user agent could
  handle right-clicks that have the Shift key depressed in such a way that it does not fire the
  <code>contextmenu</code> event and instead always shows the default
  context menu.

  <hr />

  The <dfn attribute for="HTMLElement"><code>contextMenu</code></dfn> IDL attribute must
  <a>reflect</a> the <{global/contextmenu}> content attribute.

  </div>

  <div class="example">
    In this example, an image of cats is given a context menu with four possible commands:

    <pre highlight="html">
&lt;img src="cats.jpeg" alt="Cats" contextmenu=catsmenu&gt;
&lt;menu type="context" id="catsmenu"&gt;
  &lt;menuitem label="Pet the kittens" onclick="kittens.pet()"&gt;
  &lt;menuitem label="Cuddle with the kittens" onclick="kittens.cuddle()"&gt;
  &lt;menu label="Feed the kittens"&gt;
  &lt;menuitem label="Fish" onclick="kittens.feed(fish)"&gt;
  &lt;menuitem label="Chicken" onclick="kittens.feed(chicken)"&gt;
  &lt;/menu&gt;
&lt;/menu&gt;
    </pre>

    When a user of a mouse-operated visual Web browser right-clicks on the image, the browser
    might pop up a context menu like this:

    <img src="images/contextmenu-collapsed.png" alt="A context menu, shown over a picture of cats, with four lines: the first two offering the menu items described in the markup above ('Pet the kittens' and 'Cuddle with the kittens'), the third giving a submenu labeled 'Feed the kittens', and the fourth, after a horizontal splitter, consisting of only a downwards-pointing disclosure triangle." />

    When the user clicks the disclosure triangle, such a user agent would expand the context menu
    in place, to show the browser's own commands:

    <img src="images/contextmenu-expanded.png" alt="This would result in the same basic interface, but with a longer menu; the disclosure triangle having been replaced by items such as 'View Image', 'Copy Image', 'Copy Image Location', and so forth." />

  </div>

<h5 id="the-relatedevent-interfaces">The <code>RelatedEvent</code> interfaces</h5>

  <pre class="idl" data-highlight="webidl" dfn-for="RelatedEvent">
    [Constructor(DOMString type, optional RelatedEventInit eventInitDict)]
    interface RelatedEvent : Event {
      readonly attribute EventTarget? relatedTarget;
    };

    dictionary RelatedEventInit : EventInit {
      EventTarget? relatedTarget;
    };
  </pre>

  <dl class="domintro">

    <dt><var>event</var> . <code>relatedTarget</code></dt>

    <dd>

    Returns the other event target involved in this event. For example, when a <code>show</code> event fires on a <{menu}> element, the other event
    target involved in the event would be the element for which the menu is being shown.

    </dd>

  </dl>

  <div class="impl">

  The <dfn attribute for="RelatedEvent"><code>relatedTarget</code></dfn> attribute must
  return the value it was initialized to. When the object is created, this attribute must be
  initialized to null. It represents the other event target that is related to the event.

  </div>

<h4 id="commands">Commands</h4>

<h5 id="facets">Facets</h5>

  A <dfn for="menuitem" lt="defines a command|command">command</dfn> is the abstraction behind menu items, buttons, and
  links. Once a command is defined, other parts of the interface can refer to the same command,
  allowing many access points to a single feature to share facets such as the <a facet for="menuitem">Disabled State</a>.

  Commands are defined to have the following <dfn for="menuitem">facets</dfn>:

  <dl>

    <dt><dfn facet for="menuitem">Label</dfn></dt>

    <dd>The name of the command as seen by the user.</dd>

    <dt><dfn facet for="menuitem">Access Key</dfn></dt>

    <dd>A key combination selected by the user agent that triggers the command. A command might not
    have an Access Key.</dd>

    <dt><dfn facet for="menuitem">Hidden State</dfn></dt>

    <dd>Whether the command is hidden or not (basically, whether it should be shown in menus).</dd>

    <dt><dfn facet for="menuitem">Disabled State</dfn></dt>

    <dd>Whether the command is relevant and can be triggered or not.</dd>

    <dt><dfn facet for="menuitem">Action</dfn></dt>

    <dd>The actual effect that triggering the command will have. This could be a scripted event
    handler, a <a for="url">URL</a> to which to <a>navigate</a>, or a form submission.</dd>

  </dl>

  User agents may expose the <a>commands</a> that match the following criteria:

  <ul class="brief">

    <li>The <a facet for="menuitem">Hidden State</a> facet is false (visible)</li>

    <li>The element is <a>in a <code>Document</code></a> that has an associated <a>browsing context</a>.</li>

    <li>Neither the element nor any of its ancestors has a <code>hidden</code>
    attribute specified.</li>

    <li>The element is not a <{menuitem}> element, or it is a child of a <a>currently
    relevant <code>menu</code> element</a>, or it has an <a facet for="menuitem">Access Key</a>.</li>

  </ul>

  User agents are encouraged to do this especially for commands that have <a facet for="menuitem" lt="Access Key">Access Keys</a>, as a way to advertise those keys to the
  user.

  <p class="example">For example, such commands could be listed in the user agent's menu bar.</p>

  <div class="impl">

<h5 id="using-the-a-element-to-define-a-command">Using the <{a}> element to define a command</h5>

  An <{a}> element with an <{a/href}> attribute defines a command.

  The <a facet for="menuitem">Label</a> of the command is the string given by the
  element's {{Node/textContent}} IDL attribute.

  The <a facet for="menuitem">Access Key</a> of the command is the element's
  <a>assigned access key</a>, if any.

  The <a facet for="menuitem">Hidden State</a> of the command is true (hidden)
  if the element has a <code>hidden</code> attribute, and false otherwise.

  The <a facet for="menuitem">Disabled State</a> facet of the command is
  true if the element or one of its ancestors is <a>inert</a>, and false otherwise.

  The <a facet for="menuitem">Action</a> of the command, if the element has a
  defined <a>activation behavior</a>, is to <a>run synthetic click activation steps</a>
  on the element. Otherwise, it is just to <a>fire a <code>click</code>
  event</a> at the element.

<h5 id="using-the-button-element-to-define-a-command">Using the <{button}> element to define a command</h5>

  A <{button}> element always <a for="menuitem">defines a command</a>.

  The <a facet for="menuitem">Label</a>, <a facet for="menuitem">Access Key</a>, <a facet for="menuitem">Hidden State</a>, and <a facet for="menuitem">Action</a> facets of the command are determined <span>as for <{a}> elements</span> (see the previous section).

  The <a facet for="menuitem">Disabled State</a> of the command is true if
  the element or one of its ancestors is <a>inert</a>, or if the element's disabled state is set, and false otherwise.

<h5 id="using-the-input-element-to-define-a-command">Using the <{input}> element to define a command</h5>

  An <{input}> element whose <code>type</code> attribute is in
  one of the <a element-state for="input">submit button</a>, <a element-state for="input">reset button</a>, <a element-state for="input">Image
  Button</a>, <a element-state for="input">Button</a>, <a element-state for="input">Radio Button</a>, or <a element-state for="input">Checkbox</a> states <a for="menuitem">defines a command</a>.

  The <a facet for="menuitem">Label</a> of the command is determined as
  follows:

  <ul>

    <li>If the <code>type</code> attribute is in one of the
    <a element-state for="input">submit button</a>, <a element-state for="input">reset button</a>, <a element-state for="input">Image
    Button</a>, or <a element-state for="input">Button</a> states, then the
    <a>Label</a> is the string given by the
    <code>value</code> attribute, if any, and a user agent-dependent,
    locale-dependent value that the user agent uses to label the button itself if the attribute is
    absent.</li>

    <li>Otherwise, if the element is a <a>labeled control</a>, then the
    <a facet for="menuitem">Label</a> is the string given by the
    {{Node/textContent}} of the first <{label}> element in <a>tree order</a>
    whose <a>labeled control</a> is the element in question. (In DOM terms, this is the
    string given by <code><var>element</var>.labels[0].textContent</code>.)</li>

    <li>Otherwise, if the <code>value</code> attribute is present, then
    the <a>Label</a> is the value of that attribute.</li>

    <li>Otherwise, the <a>Label</a> is the empty string.</li>

  </ul>

  The <a facet for="menuitem">Access Key</a> of the command is the element's
  <a>assigned access key</a>, if any.

  The <a facet for="menuitem">Hidden State</a> of the command is true (hidden)
  if the element has a <code>hidden</code> attribute, and false otherwise.

  The <a facet for="menuitem">Disabled State</a> of the command is true if
  the element or one of its ancestors is <a>inert</a>, or if the element's disabled state is set, and false otherwise.

  The <a facet for="menuitem">Action</a> of the command, if the element has a
  defined <a>activation behavior</a>, is to <a>run synthetic click activation steps</a>
  on the element. Otherwise, it is just to <a>fire a <code>click</code>
  event</a> at the element.

<h5 id="using-the-option-element-to-define-a-command"><dfn lt="menu command">Using the <{option}> element to define a command</dfn></h5>

  An <{option}> element with an ancestor <{select}> element and either no <code>value</code> attribute or a <code>value</code>
  attribute that is not the empty string defines a command.

  The <a facet for="menuitem">Label</a> of the command is the value of the
  <{option}> element's <code>label</code> attribute, if there is
  one, or else the value of <{option}> element's {{Node/textContent}} IDL attribute,
  with <a>leading and trailing whitespace
  stripped</a>, and with any sequences of two or more <a>space
  characters</a> replaced by a single U+0020 SPACE character.

  The <a facet for="menuitem">Access Key</a> of the command is the element's
  <a>assigned access key</a>, if any.

  The <a facet for="menuitem">Hidden State</a> of the command is true (hidden)
  if the element has a <code>hidden</code> attribute, and false otherwise.

  The <a facet for="menuitem">Disabled State</a> of the command is true if
  the element is disabled, or if its nearest ancestor
  <{select}> element is disabled, or if it or one
  of its ancestors is <a>inert</a>, and false otherwise.

  If the <code>option</code>'s nearest ancestor <{select}> element has a <code>multiple</code> attribute, the <a facet for="menuitem">Action</a> of the command is to <a>pick</a> the <{option}> element. Otherwise, the <a>Action</a> is to <a>toggle</a> the <{option}> element.

<h5 id="using-the-menuitem-element-to-define-a-command">Using the <{menuitem}> element to define a
  command</h5>

  A <{menuitem}> element always <a for="menuitem">defines a command</a>.

  The <a facet for="menuitem">Label</a> of the command is the value of the element's
  <code>label</code> attribute, if there is one, or the empty string if
  it doesn't.

  The <a facet for="menuitem">Access Key</a> of the command is the element's
  <a>assigned access key</a>, if any.

  The <a facet for="menuitem">Hidden State</a> of the command is true (hidden)
  if the element has a <code>hidden</code> attribute, and false otherwise.

  The <a facet for="menuitem">Disabled State</a> of the command is true if
  the element or one of its ancestors is <a>inert</a>, or if the element has a <code>disabled</code> attribute, and false otherwise.

  The <a facet for="menuitem">Action</a> of the command, if the element has a
  defined <a>activation behavior</a>, is to
  <a>run synthetic click activation steps</a> on the element. Otherwise, it is just to
  <a>fire a <code>click</code> event</a> at the element.

<h5 id="using-the-accesskey-attribute-on-a-label-element-to-define-a-command">Using the <code>accesskey</code> attribute
  on a <{label}> element to define a command</h5>

  A <{label}> element that has an <a>assigned access key</a> and a <a>labeled
  control</a> and whose <a>labeled control</a> <a for="menuitem">defines a command</a>, itself defines a command.

  The <a facet for="menuitem">Label</a> of the command is the string given by the
  element's {{Node/textContent}} IDL attribute.

  The <a facet for="menuitem">Access Key</a> of the command is the element's
  <a>assigned access key</a>.

  The <a facet for="menuitem">Hidden State</a>, <a facet for="menuitem">Disabled State</a>, and <a facet for="menuitem">Action</a> facets of the command are the same as the respective
  facets of the element's <a>labeled control</a>.

<h5 id="using-the-accesskey-attribute-on-a-legend-element-to-define-a-command">Using the <code>accesskey</code> attribute
  on a <{legend}> element to define a command</h5>

  A <{legend}> element that has an <a>assigned access key</a> and is a child of a
  <{fieldset}> element that has a descendant that is not a descendant of the
  <{legend}> element and is neither a <{label}> element nor a <code>legend</code>
  element but that defines a command, itself defines a command.

  The <a facet for="menuitem">Label</a> of the command is the string given by the
  element's {{Node/textContent}} IDL attribute.

  The <a facet for="menuitem">Access Key</a> of the command is the element's
  <a>assigned access key</a>.

  The <a facet for="menuitem">Hidden State</a>, <a facet for="menuitem">Disabled State</a>, and <a facet for="menuitem">Action</a> facets of the command are the same as the respective
  facets of the first element in <a>tree order</a> that is a descendant of the parent of the
  <{legend}> element that defines a command but is not
  a descendant of the <{legend}> element and is neither a <code>label</code> nor a
  <{legend}> element.

<h5 id="using-the-accesskey-attribute-to-define-a-command-on-other-elements">Using the <code>accesskey</code>
  attribute to define a command on other elements</h5>

  An element that has an <a>assigned access key</a> <a for="menuitem">defines a command</a>.

  If one of the earlier sections that define elements that <a for="menuitem" lt="command">define commands</a> define that this element defines a command,
  then that section applies to this element, and this section does not. Otherwise, this section
  applies to that element.

  The <a facet for="menuitem">Label</a> of the command depends on the element. If
  the element is a <a>labeled control</a>, the {{Node/textContent}} of the first
  <{label}> element in <a>tree order</a> whose <a>labeled control</a> is the
  element in question is the <a facet for="menuitem">Label</a> (in DOM terms, this is
  the string given by <code><var>element</var>.labels[0].textContent</code>). Otherwise,
  the <a>Label</a> is the {{Node/textContent}} of the element
  itself.

  The <a facet for="menuitem">Access Key</a> of the command is the element's
  <a>assigned access key</a>.

  The <a facet for="menuitem">Hidden State</a> of the command is true (hidden)
  if the element has a <code>hidden</code> attribute, and false otherwise.

  The <a facet for="menuitem">Disabled State</a> of the command is true if
  the element or one of its ancestors is <a>inert</a>, and false otherwise.

  The <a facet for="menuitem">Action</a> of the command is to run the following
  steps:

  <ol>

    <li>Run the <a>focusing steps</a> for the element.</li>

    <li>If the element has a defined <a>activation behavior</a>, <a>run synthetic click
    activation steps</a> on the element.</li>

    <li>Otherwise, if the element does not have a defined <a>activation behavior</a>,
    <a>fire a <code>click</code> event</a> at the element.</li>

  </ol>
  </div>

</section>
