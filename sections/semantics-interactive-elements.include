<section>

<h3 id="interactive-elements">Interactive elements</h3>

<h4 id="the-details-element">The <dfn element><code>details</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Sectioning root</a>.</dd>
    <dd><a>Interactive content</a>.</dd>
    <dd><a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>One <{summary}> element followed by <a>flow content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>open</code> - Whether the details are visible</dd>
    <dt>Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values:</dt>
    <dd><a href="#allowed-aria-roles-states-and-properties">Any role</a> that supports
    <code>aria-expanded</code>.</dd>
    <dt>Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl" dfn-for="HTMLDetailsElement">
        interface HTMLDetailsElement : HTMLElement {
          attribute boolean open;
        };
      </pre>
    </dd>
  </dl>

  The <{details}> element <a>represents</a> a disclosure widget from which the
  user can obtain additional information or controls.

  <p class="note">
    The <{details}> element is not appropriate for footnotes. Please see [[#footnotes]] for details on how to mark up footnotes.
  </p>

  The <span class="impl">first</span> <{summary}> element child of the element, if any,
  <a>represents</a> the summary or legend of the details. <span class="impl">If there is no
  child <{summary}> element, the user agent should provide its own legend (e.g.,
  "Details").</span>

  The rest of the element's contents <a>represents</a> the additional information or
  controls.

  The <dfn element-attr for="details"><code>open</code></dfn> content attribute is a <a>boolean
  attribute</a>. If present, it indicates that both the summary and the additional information is
  to be shown to the user. If the attribute is absent, only the summary is to be shown.

  <div class="impl">

  When the element is created, if the attribute is absent, the additional information should be
  hidden; if the attribute is present, that information should be shown. Subsequently, if the
  attribute is removed, then the information should be hidden; if the attribute is added, the
  information should be shown.

  The user agent should allow the user to request that the additional information be shown or
  hidden. To honor a request for the details to be shown, the user agent must set the <code>open</code> attribute on the element to the value <code>open</code>. To honor a request for the information to be hidden, the user agent must
  remove the <code>open</code> attribute from the element.

  Whenever the <code>open</code> attribute is added to or removed from
  a <{details}> element, the user agent must <a>queue a task</a> that runs the
  following steps, which are known as the <dfn>details notification task steps</dfn>, for this
  <{details}> element:

  <ol>

    <li>

    If another <a>task</a> has been <a>queued</a> to run the <a>details notification task steps</a> for this
    <{details}> element, then abort these steps.

    <p class="note">
    When the <code>open</code> attribute is toggled
    several times in succession, these steps essentially get coalesced so that only one event is
    fired.
  </p>

    </li>

    <li><a>Fire a simple event</a> named <code>toggle</code> at the
    <{details}> element.</li>

  </ol>

  The <a>task source</a> for this task must be the <a>DOM manipulation task
  source</a>.

  The <dfn attribute for="HTMLDetailsElement"><code>open</code></dfn> IDL attribute must
  <a>reflect</a> the <code>open</code> content attribute.

  </div>

  <div class="example">
    The following example shows the <{details}> element being used to hide technical
    details in a progress report.

    <pre highlight="html">
      &lt;section class="progress window"&gt;
        &lt;h1&gt;Copying "Really Achieving Your Childhood Dreams"&lt;/h1&gt;
        &lt;details&gt;
        &lt;summary&gt;Copying... &lt;progress max="375505392" value="97543282"&gt;&lt;/progress&gt; 25%&lt;/summary&gt;
        &lt;dl&gt;
          &lt;dt&gt;Transfer rate:&lt;/dt&gt; &lt;dd&gt;452KB/s&lt;/dd&gt;
          &lt;dt&gt;Local filename:&lt;/dt&gt; &lt;dd&gt;/home/rpausch/raycd.m4v&lt;/dd&gt;
          &lt;dt&gt;Remote filename:&lt;/dt&gt; &lt;dd&gt;/var/www/lectures/raycd.m4v&lt;/dd&gt;
          &lt;dt&gt;Duration:&lt;/dt&gt; &lt;dd&gt;01:16:27&lt;/dd&gt;
          &lt;dt&gt;Color profile:&lt;/dt&gt; &lt;dd&gt;SD (6-1-6)&lt;/dd&gt;
          &lt;dt&gt;Dimensions:&lt;/dt&gt; &lt;dd&gt;320&times;240&lt;/dd&gt;
        &lt;/dl&gt;
        &lt;/details&gt;
      &lt;/section&gt;
    </pre>

  </div>

  <div class="example">
    The following shows how a <{details}> element can be used to hide some controls by
    default:

    <pre highlight="html">
      &lt;details&gt;
        &lt;summary&gt;&lt;label for=fn&gt;Name &amp; Extension:&lt;/label&gt;&lt;/summary&gt;
        &lt;p&gt;&lt;input type=text id=fn name=fn value="Pillar Magazine.pdf"&gt;
        &lt;p&gt;&lt;label&gt;&lt;input type=checkbox name=ext checked&gt; Hide extension&lt;/label&gt;
      &lt;/details&gt;
    </pre>

    One could use this in conjunction with other <code>details</code> in a list to allow the user
    to collapse a set of fields down to a small set of headings, with the ability to open each
    one.

    <p class="details-example"><img src="images/sample-details-1.png" width="345" height="611" alt="" /><img src="images/sample-details-2.png" width="345" height="666" alt="" /></p>

    In these examples, the summary really just summarizes what the controls can change, and not
    the actual values, which is less than ideal.

  </div>

  <div class="example">
    Because the <code>open</code> attribute is added and removed
    automatically as the user interacts with the control, it can be used in CSS to style the element
    differently based on its state. Here, a stylesheet is used to animate the color of the summary
    when the element is opened or closed:

    <pre highlight="html">
      &lt;style&gt;
        details &gt; summary { transition: color 1s; color: black; }
        details[open] &gt; summary { color: red; }
      &lt;/style&gt;
      &lt;details&gt;
        &lt;summary&gt;Automated Status: Operational&lt;/summary&gt;
        &lt;p&gt;Velocity: 12m/s&lt;/p&gt;
        &lt;p&gt;Direction: North&lt;/p&gt;
      &lt;/details&gt;
    </pre>

  </div>

<h4 id="the-summary-element">The <dfn element><code>summary</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As the first child of a <{details}> element.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>Either: <a>phrasing content</a>.</dd>
    <dd>Or: one element of <a>heading content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dt>Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values:</dt>
    <dd><a value for="role"><code>button</code></a>.</dd>
    <dt>Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>Uses <code>HTMLElement</code>.</dd>
  </dl>

  The <{summary}> element <a>represents</a> a summary, caption, or legend for the
  rest of the contents of the <{summary}> element's parent <code>details</code>
  element<span class="impl">, if any</span>.

<h4 id="the-menu-element">The <dfn element><code>menu</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd>If the element's <code>type</code> attribute is in the <a state for="menu">toolbar</a> state: <a>Palpable content</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dd>If the element's <code>type</code> attribute is in the <a state for="menu">popup menu</a> state: as the child of a <{menu}> element whose <code>type</code> attribute is in the <a state for="menu">popup menu</a> state.</dd>
    <dt><a>Content model</a>:</dt>
    <dd>If the element's <code>type</code> attribute is in the <a state for="menu">toolbar</a> state: either zero or more <code>li</code> and <a>script-supporting elements</a>, or, <a>flow content</a>.</dd>
    <dd>If the element's <code>type</code> attribute is in the <a state for="menu">popup menu</a> state: in any order, zero or more <{menuitem}> elements, zero or more <{hr}> elements, zero or more <{menu}> elements whose <code>type</code> attributes are in the <a state for="menu">popup menu</a> state, and zero or more <a>script-supporting elements</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>type</code> - Type of menu</dd>
    <dd><code>label</code> - User-visible label</dd>
    <dt>Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values:</dt>
    <dd><a value for="role"><code>menu</code></a>
    (default - <a><em>do not set</em></a>),
    <a value for="role"><code>directory</code></a>,
    <a value for="role"><code>list</code></a>,
    <a value for="role"><code>listbox</code></a>,
    <a value for="role"><code>menubar</code></a>,
    <a value for="role" ><code>tablist</code></a>,
    <a value for="role"><code>tabpanel</code></a>
    or <a value for="role"><code>tree</code></a>.</dd>
    <dt>Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl" dfn-for="HTMLMenuElement">
        interface HTMLMenuElement : HTMLElement {
          attribute DOMString type;
          attribute DOMString label;
        };
      </pre>
    </dd>
  </dl>

  The <{menu}> element represents a group of commands.

  The <dfn element-attr for="menu"><code>type</code></dfn> attribute is an <a>enumerated
  attribute</a> indicating the kind of menu being declared. The attribute has two states. The
  "<dfn attr-value for="menu/type"><code>context</code></dfn>" keyword maps to the <dfn state for="menu">popup menu</dfn> state, in which the element is declaring a context menu
  or the menu for a <a element-state for="button/type">menu button</a>. The "<dfn attr-value for="menu/type"><code>toolbar</code></dfn>" keyword maps to the <dfn state for="menu">toolbar</dfn> state, in which the element is declaring a toolbar. The attribute may also be
  omitted. The <i>missing value default</i> is the <a state for="menu">popup menu</a>
  state if the parent element is a <{menu}> element whose <code>type</code> attribute is in the <a state for="menu">popup
  menu</a> state; otherwise, it is the <a state for="menu">toolbar</a> state.

  If a <{menu}> element's <code>type</code> attribute is in the
  <a state for="menu">popup menu</a> state, then the element <a>represents</a>
  the commands of a popup menu, and the user can only examine and interact with the commands if that
  popup menu is activated through some other element, either via the <{global/contextmenu}> attribute or the <{button}> element's <code>menu</code> attribute.

  If a <{menu}> element's <code>type</code> attribute is in the
  <a state for="menu">toolbar</a> state, then the element <a>represents</a> a
  toolbar consisting of its contents, in the form of either an unordered list of items (represented
  by <{li}> elements), each of which represents a command that the user can perform or
  activate, or, if the element has no <{li}> element children, <a>flow content</a>
  describing available commands.

  The <dfn element-attr for="menu"><code>label</code></dfn> attribute gives the label of the
  menu. It is used by user agents to display nested menus in the UI: a context menu containing
  another menu would use the nested menu's <code>label</code> attribute for
  the submenu's menu label. The <code>label</code> attribute must only be
  specified on <{menu}> elements whose parent element is a <{menu}> element whose
  <code>type</code> attribute is in the <a state for="menu">popup
  menu</a> state.

  <div class="impl">

  <hr />

  A <code>menu</code> is a <dfn>currently relevant <{menu}> element</dfn> if it is the
  child of a <span>currently relevant <{menu}> element</span>, or if it is the
  <a>designated pop-up menu</a> of a <{button}> element that is not
  <a>inert</a>, does not have a <code>hidden</code> attribute, and is not
  the descendant of an element with a <code>hidden</code> attribute.

  <hr />

  A <dfn>menu construct</dfn> consists of an ordered list of zero or more <dfn>menu item constructs</dfn>, which can be any of:

  <ul class="brief">
    <li><a>Commands</a>, which can be marked as <dfn>default commands</dfn> (<code>menuitem</code>)</li>
    <li><dfn>Separators</dfn> (<code>hr</code>)</li>
    <li>Other <a>menu constructs</a>, each with an associated <dfn>submenu label</dfn>, which allows the list to be nested (<code>menu</code>)</li>
  </ul>

  To <dfn lt="build and show|build and show a menu">build and show a menu</dfn> for a particular <{menu}> element
  <var>source</var> and with a particular element <var>subject</var> as a subject, the user agent
  must run the following steps:

  <ol>

    <li>Let <var>pop-up menu</var> be the <a>menu construct</a> created by the <a>build a
    menu construct</a> algorithm when passed the <var>source</var> element.

    </li><li>

    Display <var>pop-up menu</var> to the user, and let the algorithm that invoked this one continue.

    If the user selects a <a>menu item construct</a> that corresponds to an element that still represents a <a>command</a> when the user selects it, then the user agent must invoke that
    command's <a>Action</a>. If the command's <a>Action</a> is defined as <a>firing
    a <code>click</code> event</a>, either directly or via the <a>run
    synthetic click activation steps</a> algorithm, then the <code>relatedTarget</code> attribute of that <code>click</code> event must be initialized to <var>subject</var>.

    Pop-up menus must not, while being shown, reflect changes in the DOM. The menu is constructed
    from the DOM before being shown, and is then immutable.

    </li>

  </ol>

  To <dfn>build a menu construct</dfn> for an element <var>source</var>, the user agent must run
  the following steps, which return a <a>menu construct</a>:

  <ol>

    <li>Let <var>generated menu</var> be an empty <a>menu construct</a>.</li>

    <li>

    Run the <a>menu item generator</a> steps for the <{menu}> element using <var>generated menu</var>
    as the output.

    The <dfn>menu item generator</dfn> steps for a <{menu}> element using a specific <a>menu construct</a> <var>output</var> as
    output are as follows: For each child node of the <code>menu</code> in <a>tree order</a>,
    run the appropriate steps from the following list:

    <dl class="switch">

      <dt>If the child is a <{menuitem}> element that <a for="menuitem">defines a command</a></dt>

      <dd>Append the <a>command</a> to <var>output</var>, respecting the command's <a>facets</a>. If the <{menuitem}> element has a <code>default</code> attribute, mark the <a>command</a> as being a <a>default
      command</a>.</dd>

      <dt>If the child is an <{hr}> element</dt>

      <dd>Append a <a>separator</a> to <var>output</var>.</dd>

      <dt>If the child is a <{menu}> element with no <code>label</code> attribute</dt>

      <dd>Append a <a>separator</a> to <var>output</var>, then run
      the <a>menu item generator</a> steps for this child <{menu}> element, using
      <var>output</var> as the output, then append another <a>separator</a> to <var>output</var>.</dd>

      <dt>If the child is a <{menu}> element with a <code>label</code> attribute</dt>

      <dd>Let <var>submenu</var> be the result of running the <a>build a menu construct</a> steps for the child <{menu}> element. Then, append <var>submenu</var> to <var>output</var>, using the value of the child
      <{menu}> element's <code>label</code> attribute as the <a>submenu label</a>.</dd>

      <dt>Otherwise</dt>

      <dd><a>Ignore</a> the child node.</dd>

    </dl>

    </li>

    <li>Remove from <var>output</var> any <a>menu construct</a> whose <a>submenu
    label</a> is the empty string.</li>

    <li>Remove from <var>output</var> any <a>menu item construct</a> representing a <a>command</a> whose <a>Label</a> is
    the empty string.</li>

    <li>Collapse all sequences of two or more adjacent <a>separators</a> in <var>output</var> to a single <a>separator</a>.</li>

    <li>If the first <a>menu item construct</a> in <var>output</var> is a <a>separator</a>, then remove it.</li>

    <li>If the last <a>menu item construct</a> in <var>output</var> is a <a>separator</a>, then remove it.</li>

    <li>Return <var>output</var>.</li>

  </ol>

  <hr />

  The <dfn attribute for="HTMLMenuElement"><code>type</code></dfn> IDL attribute must <a>reflect</a>
  the content attribute of the same name, <a>limited to only known values</a>.

  The <dfn attribute for="HTMLMenuElement"><code>label</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name.

  </div>

  <div class="example">
    In this example, the <{menu}> element is used to describe a toolbar with three menu
    buttons on it, each of which has a dropdown menu with a series of options:

  <pre highlight="html">
&lt;menu&gt;
  &lt;li&gt;
  &lt;button type=menu value="File" menu="filemenu"&gt;
  &lt;menu id="filemenu" type="context"&gt;
    &lt;menuitem onclick="fnew()" label="New..."&gt;
    &lt;menuitem onclick="fopen()" label="Open..."&gt;
    &lt;menuitem onclick="fsave()" label="Save"&gt;
    &lt;menuitem onclick="fsaveas()" label="Save as..."&gt;
  &lt;/menu&gt;
  &lt;/li&gt;
  &lt;li&gt;
  &lt;button type=menu value="Edit" menu="editmenu"&gt;
  &lt;menu id="editmenu" type="context"&gt;
    &lt;menuitem onclick="ecopy()" label="Copy"&gt;
    &lt;menuitem onclick="ecut()" label="Cut"&gt;
    &lt;menuitem onclick="epaste()" label="Paste"&gt;
  &lt;/menu&gt;
  &lt;/li&gt;
  &lt;li&gt;
  &lt;button type=menu value="Help" menu="helpmenu"&gt;
  &lt;menu id="helpmenu" type="context"&gt;
    &lt;menuitem onclick="location='help.html'" label="Help"&gt;
    &lt;menuitem onclick="location='about.html'" label="About"&gt;
  &lt;/menu&gt;
  &lt;/li&gt;
&lt;/menu&gt;
    </pre>

    In a supporting user agent, this might look like this (assuming the user has just activated the
    second button):

    <img src="images/sample-toolbar-1.png" width="303" height="101" alt="A toolbar with three buttons, labeled 'File', 'Edit', and 'Help'; where if you select the 'Edit' button you get a drop-down menu with three more options, 'Copy', 'Cut', and 'Paste'." />

  </div>

<h4 id="the-menuitem-element">The <dfn element><code>menuitem</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd>None.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>As a child of a <{menu}> element whose <code>type</code> attribute is in the <a state for="menu">popup menu</a> state.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Nothing</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>No <a>end tag</a>.</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>type</code> - Type of command</dd>
    <dd><code>label</code> - User-visible label</dd>
    <dd><code>icon</code> - Icon for the command</dd>
    <dd><code>disabled</code> Whether the command or control is disabled</dd>
    <dd><code>checked</code> Whether the command or control is checked</dd>
    <dd><code>radiogroup</code> Name of group of commands to treat as a radio button group</dd>
    <dd><code>default</code> - Mark the command as being a default command</dd>
    <dd>Also, the <{menuitem/title}> attribute has special semantics on this element.</dd>
    <dt>Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values:</dt>
    <dd><a value for="role"><code>menuitem</code></a>
    (default - <a><em>do not set</em></a>).</dd>
    <dt>Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl" dfn-for="HTMLMenuItemElement">
        interface HTMLMenuItemElement : HTMLElement {
          attribute DOMString type;
          attribute DOMString label;
          attribute DOMString icon;
          attribute boolean disabled;
          attribute boolean checked;
          attribute DOMString radiogroup;
          attribute boolean default;
        };
      </pre>
    </dd>
  </dl>

  The <{menuitem}> element represents a command that the user can invoke from a popup
  menu (either a <a>context menu</a> or the menu of a <a element-state for="button/type">menu button</a>).

  A <{menuitem}> element that uses one or more of the
    <code>type</code>,
    <code>label</code>,
    <code>icon</code>,
    <code>disabled</code>,
    <code>checked</code>, and
    <code>radiogroup</code>
  attributes defines a new command.

  <hr />

  The <dfn element-attr for="menuitem"><code>type</code></dfn> attribute indicates the kind of
  command: either a normal command with an associated action, or a state or option that can be
  toggled, or a selection of one item from a list of items.

  The attribute is an <a>enumerated attribute</a> with three keywords and states. The
  "<dfn attr-value for="menuitem/type"><code>command</code></dfn>" keyword maps to the
  <a state for="menuitem">Command</a> state, the "<dfn attr-value for="menuitem/type"><code>checkbox</code></dfn>" keyword maps to the <a state for="menuitem">Checkbox</a> state, and the "<dfn attr-value for="menuitem/type"><code>radio</code></dfn>" keyword maps to the <a state for="menuitem">Radio</a> state. The <i>missing value default</i> is the <a state for="menuitem">Command</a> state.

  <dl>

    <dt>The <dfn state for="menuitem">Command</dfn> state</dt>

    <dd>The element <a>represents</a> a normal command with an associated action.</dd>

    <dt>The <dfn state for="menuitem">Checkbox</dfn> state</dt>

    <dd>The element <a>represents</a> a state or option that can be toggled.</dd>

    <dt>The <dfn state for="menuitem">Radio</dfn> state</dt>

    <dd>The element <a>represents</a> a selection of one item from a list of items.</dd>

  </dl>

  The <dfn element-attr for="menuitem"><code>label</code></dfn> attribute gives the name of the
  command, as shown to the user. If the attribute is
  specified, it must have a value that is not the empty string.

  The <dfn element-attr for="menuitem"><code>icon</code></dfn> attribute gives a picture that
  represents the command. If the attribute is specified, the attribute's value must contain a
  <a>valid non-empty URL potentially surrounded by spaces</a>. <span class="impl">To obtain
  the <a>absolute URL</a> of the icon when the attribute's value is not the empty string, the
  attribute's value must be <a>resolved</a> relative to the element.
  When the attribute is absent, or its value is the empty string, or <a>parsing</a> its value fails, there is no icon.</span>

  The <dfn element-attr for="menuitem"><code>disabled</code></dfn> attribute is a
  <a>boolean attribute</a> that, if present, indicates that the command is not available in
  the current state.

  <p class="note">
    The distinction between <code>disabled</code> and
  <code>hidden</code> is subtle. A command would be disabled if, in the same
  context, it could be enabled if only certain aspects of the situation were changed. A command
  would be marked as hidden if, in that situation, the command will never be enabled. For example,
  in the context menu for a water faucet, the command "open" might be disabled if the faucet is
  already open, but the command "eat" would be marked hidden since the faucet could never be
  eaten.
  </p>

  The <dfn element-attr for="menuitem"><code>checked</code></dfn> attribute is a <a>boolean
  attribute</a> that, if present, indicates that the command is selected. The attribute must be
  omitted unless the <code>type</code> attribute is in either the <a state for="menuitem">Checkbox</a> state or the <a state for="menuitem">Radio</a> state.

  The <dfn element-attr for="menuitem"><code>radiogroup</code></dfn> attribute gives the
  name of the group of commands that will be toggled when the command itself is toggled, for
  commands whose <code>type</code> attribute has the value "<code>radio</code>". The scope of the name is the child list of the parent element. The
  attribute must be omitted unless the <code>type</code> attribute is in
  the <a state for="menuitem">Radio</a> state. When specified, the
  attribute's value must be a non-empty string.

  <hr />

  The <dfn element-attr for="menuitem"><code>title</code></dfn> attribute gives a hint describing
  the command, which might be shown to the user to help him.

  The <dfn element-attr for="menuitem"><code>default</code></dfn> attribute indicates, if
  present, that the command is the one that would have been invoked if the user had directly
  activated the menu's subject instead of using the menu. The <code>default</code> attribute is a <a>boolean attribute</a>.

  <div class="impl">

  <hr />

  The <dfn attribute for="HTMLMenuItemElement"><code>type</code></dfn> IDL attribute must
  <a>reflect</a> the content attribute of the same name, <a>limited to only known
  values</a>.

  The <dfn attribute for="HTMLMenuItemElement"><code>label</code></dfn>, <dfn attribute for="HTMLMenuItemElement"><code>icon</code></dfn>, <dfn attribute for="HTMLMenuItemElement"><code>disabled</code></dfn>, <dfn attribute for="HTMLMenuItemElement"><code>checked</code></dfn>, and <dfn attribute for="HTMLMenuItemElement"><code>radiogroup</code></dfn>, and <dfn attribute for="HTMLMenuItemElement"><code>default</code></dfn> IDL attributes must <a>reflect</a>
  the respective content attributes of the same name.

  <hr />

  If the element's <a facet for="menuitem">Disabled State</a> is false
  (enabled) then the element's <a>activation behavior</a> depends on the element's <code>type</code> attribute, as follows:

  <dl class="switch">

    <dt>If the <code>type</code> attribute is in the <a element-state for="input">Checkbox</a> state</dt>

    <dd>If the element has a <code>checked</code> attribute, the user agent
    must remove that attribute. Otherwise, the user agent must add a <code>checked</code> attribute, with the literal value "<code>checked</code>".</dd>

    <dt>If the <code>type</code> attribute is in the <a state for="menuitem">Radio</a> state</dt>

    <dd>If the element has a parent, then the user agent must walk the list of child nodes of that parent
    element, and for each node that is a <{menuitem}> element, if that element has a <code>radiogroup</code> attribute whose value exactly matches the
    current element's (treating missing <code>radiogroup</code>
    attributes as if they were the empty string), and has a <code>checked</code> attribute, must remove that attribute.

    Then, the element's <code>checked</code> attribute must be set
    to the literal value "<code>checked</code>".</dd>

    <dt>Otherwise</dt>

    <dd>The element's <a>activation behavior</a> is to do nothing.</dd>

  </dl>

  <p class="note">
    Firing a synthetic <code>click</code> event at the element
  does not cause any of the actions described above to happen.
  </p>

  If the element's <a facet for="menuitem">Disabled State</a> is true
  (disabled) then the element has no <a>activation behavior</a>.

  </div>

  <p class="note">
    The <{menuitem}> element is not rendered except as <a element lt="menu">part of a popup menu</a>.
  </p>

  <div class="example">
    Here is an example of a pop-up menu button with three options that let the user toggle between
    left, center, and right alignment. One could imagine such a toolbar as part of a text editor. The
    menu also has a separator followed by another menu item labeled "Publish", though that menu item
    is disabled.

    <pre highlight="html">
&lt;button type=menu menu=editmenu&gt;Commands...&lt;/button&gt;
&lt;menu type="context" id="editmenu"&gt;
  &lt;menuitem type="radio" radiogroup="alignment" checked="checked"
          label="Left" icon="icons/alL.png" onclick="setAlign('left')"&gt;
  &lt;menuitem type="radio" radiogroup="alignment"
          label="Center" icon="icons/alC.png" onclick="setAlign('center')"&gt;
  &lt;menuitem type="radio" radiogroup="alignment"
          label="Right" icon="icons/alR.png" onclick="setAlign('right')"&gt;
  &lt;hr&gt;
  &lt;menuitem type="command" disabled
          label="Publish" icon="icons/pub.png" onclick="publish()"&gt;
&lt;/menu&gt;
    </pre>

  </div>

<h4 id="context-menus"><dfn lt="context menu">Context menus</dfn></h4>

<h5 id="declaring-a-context-menu">Declaring a context menu</h5>

  The <dfn element-attr for="global"><code>contextmenu</code></dfn> attribute gives the element's
  context menu. The value must be the <a>ID</a> of a <{menu}>
  element in the same <a>home subtree</a> whose <code>type</code>
  attribute is in the <a state for="menu">popup menu</a> state.

  <p class="note">
    When a user right-clicks on an element with a <{global/contextmenu}> attribute, the user agent will first fire a <code>contextmenu</code> event at the element, and then, if that event is not
  canceled, a <code>show</code> event at the <{menu}> element.
  </p>

  <div class="example">
    Here is an example of a context menu for an input control:

    <pre highlight="html">
&lt;form name="npc"&gt;
  &lt;label&gt;Character name: &lt;input name=char type=text contextmenu=namemenu required&gt;&lt;/label&gt;
  &lt;menu type=context id=namemenu&gt;
  &lt;menuitem label="Pick random name" onclick="document.forms.npc.elements.char.value = getRandomName()"&gt;
  &lt;menuitem label="Prefill other fields based on name" onclick="prefillFields(document.forms.npc.elements.char.value)"&gt;
  &lt;/menu&gt;
&lt;/form&gt;
    </pre>

    This adds two items to the control's context menu, one called "Pick random name", and one
    called "Prefill other fields based on name". They invoke scripts that are not shown in the
    example above.

  </div>

  <div class="impl">

<h5 id="context-menu-processing-model">Processing model</h5>

  Each element has an <dfn>assigned context menu</dfn>, which can be null. If an element <var>A</var> has a <{global/contextmenu}> attribute, and there is
  an element with the ID given by <var>A</var>'s <{global/contextmenu}> attribute's value in <var>A</var>'s
  <a>home subtree</a>, and the first such element in <a>tree order</a> is a
  <{menu}> element whose <code>type</code> attribute is in the <a state for="menu">popup menu</a> state, then <var>A</var>'s <a>assigned
  context menu</a> is that element. Otherwise, if <var>A</var> has a parent element,
  then <var>A</var>'s <a>assigned context menu</a> is the <a>assigned context
  menu</a> of its parent element. Otherwise, <var>A</var>'s <a>assigned context
  menu</a> is null.

  When an element's context menu is requested (e.g., by the user right-clicking the element, or
  pressing a context menu key), the user agent must apply the appropriate rules from the following
  list:

  <dl class="switch">

    <dt>If the user requested a context menu using a pointing device</dt>

    <dd>The user agent must <a>fire</a> a <a>trusted</a> event with the name <code>contextmenu</code>, that bubbles and is cancelable, and that uses the
    <code>MouseEvent</code> interface, at the element for which the menu was requested. The context
    information of the event must be initialized to the same values as the last
    <code>MouseEvent</code> user interaction event that was fired as part of the gesture that was
    interpreted as a request for the context menu.</dd>

    <dt>Otherwise</dt>

    <dd>The user agent must <a>fire a synthetic mouse
    event named <code>contextmenu</code></a> that bubbles and is
    cancelable at the element for which the menu was requested.</dd>

  </dl>

  <p class="note">
    Typically, therefore, the firing of the <code>contextmenu</code> event will be the default action of a <code>mouseup</code> or <code>keyup</code> event. The exact
  sequence of events is user agent-dependent, as it will vary based on platform conventions.
  </p>

  The default action of the <code>contextmenu</code> event depends on
  whether or not the element for which the menu was requested has a non-null <a>assigned context
  menu</a> when the event dispatch has completed, as follows.

  If the <a>assigned context menu</a> of the element for which the menu was requested is
  null, the default action must be for the user agent to show its default context menu, if it has
  one.

  Otherwise, let <var>subject</var> be the element for which the menu was requested, and let
  <var>menu</var> be the <a>assigned context menu</a> of <var>target</var> immediately after
  the <code>contextmenu</code> event's dispatch has completed. The user
  agent must <a>fire</a> a <a>trusted</a> event with the name <code>show</code> at <var>menu</var>, using the <code>RelatedEvent</code> interface,
  with the <code>relatedTarget</code> attribute initialized
  to <var>subject</var>. The event must be cancelable.

  If <em>this</em> event (the <code>show</code> event) is not canceled, then
  the user agent must <a>build and show</a> the menu for
  <var>menu</var> with <var>subject</var> as the subject.

  The user agent may also provide access to its default context menu, if any, with the context
  menu shown. For example, it could merge the menu items from the two menus together, or provide the
  page's context menu as a submenu of the default menu. In general, user agents are encouraged to
  de-emphasize their own contextual menu items, so as to give the author's context menu the
  appearance of legitimacy — to allow documents to feel like "applications" rather than "mere
  Web pages".

  User agents may provide means for bypassing the context menu processing model, ensuring that
  the user can always access the user agent's default context menus. For example, the user agent could
  handle right-clicks that have the Shift key depressed in such a way that it does not fire the
  <code>contextmenu</code> event and instead always shows the default
  context menu.

  <hr />

  The <dfn attribute for="HTMLElement"><code>contextMenu</code></dfn> IDL attribute must
  <a>reflect</a> the <{global/contextmenu}> content attribute.

  </div>

  <div class="example">
    In this example, an image of cats is given a context menu with four possible commands:

    <pre highlight="html">
&lt;img src="cats.jpeg" alt="Cats" contextmenu=catsmenu&gt;
&lt;menu type="context" id="catsmenu"&gt;
  &lt;menuitem label="Pet the kittens" onclick="kittens.pet()"&gt;
  &lt;menuitem label="Cuddle with the kittens" onclick="kittens.cuddle()"&gt;
  &lt;menu label="Feed the kittens"&gt;
  &lt;menuitem label="Fish" onclick="kittens.feed(fish)"&gt;
  &lt;menuitem label="Chicken" onclick="kittens.feed(chicken)"&gt;
  &lt;/menu&gt;
&lt;/menu&gt;
    </pre>

    When a user of a mouse-operated visual Web browser right-clicks on the image, the browser
    might pop up a context menu like this:

    <img src="images/contextmenu-collapsed.png" alt="A context menu, shown over a picture of cats, with four lines: the first two offering the menu items described in the markup above ('Pet the kittens' and 'Cuddle with the kittens'), the third giving a submenu labeled 'Feed the kittens', and the fourth, after a horizontal splitter, consisting of only a downwards-pointing disclosure triangle." />

    When the user clicks the disclosure triangle, such a user agent would expand the context menu
    in place, to show the browser's own commands:

    <img src="images/contextmenu-expanded.png" alt="This would result in the same basic interface, but with a longer menu; the disclosure triangle having been replaced by items such as 'View Image', 'Copy Image', 'Copy Image Location', and so forth." />

  </div>

<h5 id="the-relatedevent-interfaces">The <code>RelatedEvent</code> interfaces</h5>

  <pre class="idl" data-highlight="webidl" dfn-for="RelatedEvent">
    [Constructor(DOMString type, optional RelatedEventInit eventInitDict)]
    interface RelatedEvent : Event {
      readonly attribute EventTarget? relatedTarget;
    };

    dictionary RelatedEventInit : EventInit {
      EventTarget? relatedTarget;
    };
  </pre>

  <dl class="domintro">

    <dt><var>event</var> . <code>relatedTarget</code></dt>

    <dd>

    Returns the other event target involved in this event. For example, when a <code>show</code> event fires on a <{menu}> element, the other event
    target involved in the event would be the element for which the menu is being shown.

    </dd>

  </dl>

  <div class="impl">

  The <dfn attribute for="RelatedEvent"><code>relatedTarget</code></dfn> attribute must
  return the value it was initialized to. When the object is created, this attribute must be
  initialized to null. It represents the other event target that is related to the event.

  </div>

<h4 id="commands">Commands</h4>

<h5 id="facets">Facets</h5>

  A <dfn for="menuitem" lt="defines a command|command">command</dfn> is the abstraction behind menu items, buttons, and
  links. Once a command is defined, other parts of the interface can refer to the same command,
  allowing many access points to a single feature to share facets such as the <a facet for="menuitem">Disabled State</a>.

  Commands are defined to have the following <dfn for="menuitem">facets</dfn>:

  <dl>

    <dt><dfn facet for="menuitem">Label</dfn></dt>

    <dd>The name of the command as seen by the user.</dd>

    <dt><dfn facet for="menuitem">Access Key</dfn></dt>

    <dd>A key combination selected by the user agent that triggers the command. A command might not
    have an Access Key.</dd>

    <dt><dfn facet for="menuitem">Hidden State</dfn></dt>

    <dd>Whether the command is hidden or not (basically, whether it should be shown in menus).</dd>

    <dt><dfn facet for="menuitem">Disabled State</dfn></dt>

    <dd>Whether the command is relevant and can be triggered or not.</dd>

    <dt><dfn facet for="menuitem">Action</dfn></dt>

    <dd>The actual effect that triggering the command will have. This could be a scripted event
    handler, a <a for="url">URL</a> to which to <a>navigate</a>, or a form submission.</dd>

  </dl>

  User agents may expose the <a>commands</a> that match the following criteria:

  <ul class="brief">

    <li>The <a facet for="menuitem">Hidden State</a> facet is false (visible)</li>

    <li>The element is <a>in a <code>Document</code></a> that has an associated <a>browsing context</a>.</li>

    <li>Neither the element nor any of its ancestors has a <code>hidden</code>
    attribute specified.</li>

    <li>The element is not a <{menuitem}> element, or it is a child of a <a>currently
    relevant <code>menu</code> element</a>, or it has an <a facet for="menuitem">Access Key</a>.</li>

  </ul>

  User agents are encouraged to do this especially for commands that have <a facet for="menuitem" lt="Access Key">Access Keys</a>, as a way to advertise those keys to the
  user.

  <p class="example">For example, such commands could be listed in the user agent's menu bar.</p>

  <div class="impl">

<h5 id="using-the-a-element-to-define-a-command">Using the <{a}> element to define a command</h5>

  An <{a}> element with an <{a/href}> attribute defines a command.

  The <a facet for="menuitem">Label</a> of the command is the string given by the
  element's {{Node/textContent}} IDL attribute.

  The <a facet for="menuitem">Access Key</a> of the command is the element's
  <a>assigned access key</a>, if any.

  The <a facet for="menuitem">Hidden State</a> of the command is true (hidden)
  if the element has a <code>hidden</code> attribute, and false otherwise.

  The <a facet for="menuitem">Disabled State</a> facet of the command is
  true if the element or one of its ancestors is <a>inert</a>, and false otherwise.

  The <a facet for="menuitem">Action</a> of the command, if the element has a
  defined <a>activation behavior</a>, is to <a>run synthetic click activation steps</a>
  on the element. Otherwise, it is just to <a>fire a <code>click</code>
  event</a> at the element.

<h5 id="using-the-button-element-to-define-a-command">Using the <{button}> element to define a command</h5>

  A <{button}> element always <a for="menuitem">defines a command</a>.

  The <a facet for="menuitem">Label</a>, <a facet for="menuitem">Access Key</a>, <a facet for="menuitem">Hidden State</a>, and <a facet for="menuitem">Action</a> facets of the command are determined <span>as for <{a}> elements</span> (see the previous section).

  The <a facet for="menuitem">Disabled State</a> of the command is true if
  the element or one of its ancestors is <a>inert</a>, or if the element's disabled state is set, and false otherwise.

<h5 id="using-the-input-element-to-define-a-command">Using the <{input}> element to define a command</h5>

  An <{input}> element whose <code>type</code> attribute is in
  one of the <a element-state for="input">submit button</a>, <a element-state for="input">reset button</a>, <a element-state for="input">Image
  Button</a>, <a element-state for="input">Button</a>, <a element-state for="input">Radio Button</a>, or <a element-state for="input">Checkbox</a> states <a for="menuitem">defines a command</a>.

  The <a facet for="menuitem">Label</a> of the command is determined as
  follows:

  <ul>

    <li>If the <code>type</code> attribute is in one of the
    <a element-state for="input">submit button</a>, <a element-state for="input">reset button</a>, <a element-state for="input">Image
    Button</a>, or <a element-state for="input">Button</a> states, then the
    <a>Label</a> is the string given by the
    <code>value</code> attribute, if any, and a user agent-dependent,
    locale-dependent value that the user agent uses to label the button itself if the attribute is
    absent.</li>

    <li>Otherwise, if the element is a <a>labeled control</a>, then the
    <a facet for="menuitem">Label</a> is the string given by the
    {{Node/textContent}} of the first <{label}> element in <a>tree order</a>
    whose <a>labeled control</a> is the element in question. (In DOM terms, this is the
    string given by <code><var>element</var>.labels[0].textContent</code>.)</li>

    <li>Otherwise, if the <code>value</code> attribute is present, then
    the <a>Label</a> is the value of that attribute.</li>

    <li>Otherwise, the <a>Label</a> is the empty string.</li>

  </ul>

  The <a facet for="menuitem">Access Key</a> of the command is the element's
  <a>assigned access key</a>, if any.

  The <a facet for="menuitem">Hidden State</a> of the command is true (hidden)
  if the element has a <code>hidden</code> attribute, and false otherwise.

  The <a facet for="menuitem">Disabled State</a> of the command is true if
  the element or one of its ancestors is <a>inert</a>, or if the element's disabled state is set, and false otherwise.

  The <a facet for="menuitem">Action</a> of the command, if the element has a
  defined <a>activation behavior</a>, is to <a>run synthetic click activation steps</a>
  on the element. Otherwise, it is just to <a>fire a <code>click</code>
  event</a> at the element.

<h5 id="using-the-option-element-to-define-a-command"><dfn lt="menu command">Using the <{option}> element to define a command</dfn></h5>

  An <{option}> element with an ancestor <{select}> element and either no <code>value</code> attribute or a <code>value</code>
  attribute that is not the empty string defines a command.

  The <a facet for="menuitem">Label</a> of the command is the value of the
  <{option}> element's <code>label</code> attribute, if there is
  one, or else the value of <{option}> element's {{Node/textContent}} IDL attribute,
  with <a>leading and trailing whitespace
  stripped</a>, and with any sequences of two or more <a>space
  characters</a> replaced by a single U+0020 SPACE character.

  The <a facet for="menuitem">Access Key</a> of the command is the element's
  <a>assigned access key</a>, if any.

  The <a facet for="menuitem">Hidden State</a> of the command is true (hidden)
  if the element has a <code>hidden</code> attribute, and false otherwise.

  The <a facet for="menuitem">Disabled State</a> of the command is true if
  the element is disabled, or if its nearest ancestor
  <{select}> element is disabled, or if it or one
  of its ancestors is <a>inert</a>, and false otherwise.

  If the <code>option</code>'s nearest ancestor <{select}> element has a <code>multiple</code> attribute, the <a facet for="menuitem">Action</a> of the command is to <a>pick</a> the <{option}> element. Otherwise, the <a>Action</a> is to <a>toggle</a> the <{option}> element.

<h5 id="using-the-menuitem-element-to-define-a-command">Using the <{menuitem}> element to define a
  command</h5>

  A <{menuitem}> element always <a for="menuitem">defines a command</a>.

  The <a facet for="menuitem">Label</a> of the command is the value of the element's
  <code>label</code> attribute, if there is one, or the empty string if
  it doesn't.

  The <a facet for="menuitem">Access Key</a> of the command is the element's
  <a>assigned access key</a>, if any.

  The <a facet for="menuitem">Hidden State</a> of the command is true (hidden)
  if the element has a <code>hidden</code> attribute, and false otherwise.

  The <a facet for="menuitem">Disabled State</a> of the command is true if
  the element or one of its ancestors is <a>inert</a>, or if the element has a <code>disabled</code> attribute, and false otherwise.

  The <a facet for="menuitem">Action</a> of the command, if the element has a
  defined <a>activation behavior</a>, is to
  <a>run synthetic click activation steps</a> on the element. Otherwise, it is just to
  <a>fire a <code>click</code> event</a> at the element.

<h5 id="using-the-accesskey-attribute-on-a-label-element-to-define-a-command">Using the <code>accesskey</code> attribute
  on a <{label}> element to define a command</h5>

  A <{label}> element that has an <a>assigned access key</a> and a <a>labeled
  control</a> and whose <a>labeled control</a> <a for="menuitem">defines a command</a>, itself defines a command.

  The <a facet for="menuitem">Label</a> of the command is the string given by the
  element's {{Node/textContent}} IDL attribute.

  The <a facet for="menuitem">Access Key</a> of the command is the element's
  <a>assigned access key</a>.

  The <a facet for="menuitem">Hidden State</a>, <a facet for="menuitem">Disabled State</a>, and <a facet for="menuitem">Action</a> facets of the command are the same as the respective
  facets of the element's <a>labeled control</a>.

<h5 id="using-the-accesskey-attribute-on-a-legend-element-to-define-a-command">Using the <code>accesskey</code> attribute
  on a <{legend}> element to define a command</h5>

  A <{legend}> element that has an <a>assigned access key</a> and is a child of a
  <{fieldset}> element that has a descendant that is not a descendant of the
  <{legend}> element and is neither a <{label}> element nor a <code>legend</code>
  element but that defines a command, itself defines a command.

  The <a facet for="menuitem">Label</a> of the command is the string given by the
  element's {{Node/textContent}} IDL attribute.

  The <a facet for="menuitem">Access Key</a> of the command is the element's
  <a>assigned access key</a>.

  The <a facet for="menuitem">Hidden State</a>, <a facet for="menuitem">Disabled State</a>, and <a facet for="menuitem">Action</a> facets of the command are the same as the respective
  facets of the first element in <a>tree order</a> that is a descendant of the parent of the
  <{legend}> element that defines a command but is not
  a descendant of the <{legend}> element and is neither a <code>label</code> nor a
  <{legend}> element.

<h5 id="using-the-accesskey-attribute-to-define-a-command-on-other-elements">Using the <code>accesskey</code>
  attribute to define a command on other elements</h5>

  An element that has an <a>assigned access key</a> <a for="menuitem">defines a command</a>.

  If one of the earlier sections that define elements that <a for="menuitem" lt="command">define commands</a> define that this element defines a command,
  then that section applies to this element, and this section does not. Otherwise, this section
  applies to that element.

  The <a facet for="menuitem">Label</a> of the command depends on the element. If
  the element is a <a>labeled control</a>, the {{Node/textContent}} of the first
  <{label}> element in <a>tree order</a> whose <a>labeled control</a> is the
  element in question is the <a facet for="menuitem">Label</a> (in DOM terms, this is
  the string given by <code><var>element</var>.labels[0].textContent</code>). Otherwise,
  the <a>Label</a> is the {{Node/textContent}} of the element
  itself.

  The <a facet for="menuitem">Access Key</a> of the command is the element's
  <a>assigned access key</a>.

  The <a facet for="menuitem">Hidden State</a> of the command is true (hidden)
  if the element has a <code>hidden</code> attribute, and false otherwise.

  The <a facet for="menuitem">Disabled State</a> of the command is true if
  the element or one of its ancestors is <a>inert</a>, and false otherwise.

  The <a facet for="menuitem">Action</a> of the command is to run the following
  steps:

  <ol>

    <li>Run the <a>focusing steps</a> for the element.</li>

    <li>If the element has a defined <a>activation behavior</a>, <a>run synthetic click
    activation steps</a> on the element.</li>

    <li>Otherwise, if the element does not have a defined <a>activation behavior</a>,
    <a>fire a <code>click</code> event</a> at the element.</li>

  </ol>
  </div>

<h4 id="the-dialog-element">The <dfn element><code>dialog</code></dfn> element</h4>

  <dl class="element">
    <dt><a>Categories</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dd><a>Sectioning root</a>.</dd>
    <dt><a>Contexts in which this element can be used</a>:</dt>
    <dd>Where <a>flow content</a> is expected.</dd>
    <dt><a>Content model</a>:</dt>
    <dd><a>Flow content</a>.</dd>
    <dt><a>Tag omission in text/html</a>:</dt>
    <dd>Neither tag is omissible</dd>
    <dt><a>Content attributes</a>:</dt>
    <dd><a>Global attributes</a></dd>
    <dd><code>open</code> - Whether the dialog box is showing</dd>
    <dt>Allowed <a href="#aria-role-attribute">ARIA role attribute</a> values:</dt>
    <dd><a value for="role"><code>dialog</code></a>
    (default - <a><em>do not set</em></a>),
    <a value for="role"><code>alert</code></a>,
    <a value for="role"><code>alertdialog</code></a>,
    <a value for="role"><code>application</code></a>,
    <a value for="role"><code>log</code></a>,
    <a value for="role"><code>marquee</code></a>
    or <a value for="role"><code>status</code></a>.</dd>
    <dt>Allowed <a href="#state-and-property-attributes">ARIA state and property attributes</a>:</dt>
    <dd><a>Global aria-* attributes</a></dd>
    <dd>Any <code>aria-*</code> attributes
    <a href="#allowed-aria-roles-states-and-properties">applicable to the allowed roles</a>.</dd>
    <dt><a>DOM interface</a>:</dt>
    <dd>
      <pre class="idl" data-highlight="webidl" dfn-for="HTMLDialogElement">
        interface HTMLDialogElement : HTMLElement {
          attribute boolean open;
          attribute DOMString returnValue;
          void show(optional (MouseEvent or Element) anchor);
          void showModal(optional (MouseEvent or Element) anchor);
          void close(optional DOMString returnValue);
        };
      </pre>
    </dd>
  </dl>

  The <{dialog}> element represents a part of an application that a user interacts with
  to perform a task, for example a dialog box, inspector, or window.

  The <dfn element-attr for="dialog"><code>open</code></dfn> attribute is a <a>boolean
  attribute</a>. When specified, it indicates that the <{dialog}> element is active and
  that the user can interact with it.

  <div class="example">
   <p>The following is an example of a modal <{dialog}> which provides a form for a user to add
   coins to their wallet, as part of an online game.</p>

    <pre highlight="html">
      ...
      &lt;body>
      &lt;div> &lt;!-- body content --> &lt;/div>
      &lt;dialog&gt;
        &lt;h1&gt;Add to Wallet&lt;/h1&gt;
        &lt;label for="num"&gt;How many gold coins do you want to add to your wallet?&lt;/label&gt;
        &lt;div&gt;&lt;input name=amt id="num" type=number min=0 step=0.01 value=100&gt;&lt;/div&gt;
        &lt;p&gt;&lt;strong&gt;You add coins at your own risk.&lt;/strong&gt;&lt;/p&gt;
        &lt;div&gt;&lt;label&gt;&lt;input name=round type=checkbox&gt; Only add perfectly round coins &lt;/label&gt;
        &lt;div&gt;&lt;input type=button onclick="submit()" value="Add Coins"&gt;&lt;/div&gt;
      &lt;/dialog&gt;
      &lt;/body>
      ...
    </pre>

    <img src="images/dialog.png" alt="Add to Wallet Dialog">
  </div>

  <div class="impl">

  A <{dialog}> element without an <code>open</code> attribute
  specified should not be shown to the user. This requirement may be implemented indirectly through
  the style layer. For example, user agents that <a>support the suggested
  default rendering</a> implement this requirement using the CSS rules described in [[#rendering]].

  </div>

  The <code>tabindex</code> attribute must not be specified on
  <{dialog}> elements.

  <dl class="domintro">

    <dt><var>dialog</var> . <code>show</code>( [ <var>anchor</var> ] )</dt>

    <dd>

    Displays the <{dialog}> element.

    The argument, if provided, provides an anchor point to which the element will be fixed.

    </dd>

    <dt><var>dialog</var> . <code>showModal</code>( [ <var>anchor</var> ] )</dt>

    <dd>

    Displays the <{dialog}> element and makes it the top-most modal dialog.

    The argument, if provided, provides an anchor point to which the element will be fixed.

    This method honors the <{formelements/autofocus}> attribute.

    </dd>

    <dt><var>dialog</var> . <code>close</code>( [ <var>result</var> ] )</dt>

    <dd>

    Closes the <{dialog}> element.

    The argument, if provided, provides a return value.

    </dd>

    <dt><var>dialog</var> . {{HTMLDialogElement/returnValue}} [ = <var>result</var> ]</dt>

    <dd>

    Returns the <code>dialog</code>'s return value.

    Can be set, to update the return value.

    </dd>

  </dl>

  <div class="impl">

  When the <dfn method for="HTMLDialogElement"><code>show()</code></dfn> method is invoked, the user
  agent must run the following steps:

  <ol>

    <li>If the element already has an <code>open</code> attribute, then
    abort these steps.</li>

    <li>Add an <code>open</code> attribute to the <code>dialog</code>
    element, whose value is the empty string.</li>

    <li>If the <code>show()</code> method was invoked with an argument,
    <a>set up the position</a> of the <{dialog}> element, using that argument as the
    anchor. Otherwise, set the <code>dialog</code> to the <a>normal alignment</a> mode.</li>

    <li>Run the <a>dialog focusing steps</a> for the <{dialog}> element.</li>

  </ol>

  <hr />

  Each <code>Document</code> has a stack of <{dialog}> elements known as the
  <dfn>pending dialog stack</dfn>. When a <code>Document</code> is created, this stack must be
  initialized to be empty.

  When an element is added to the <a>pending dialog stack</a>, it must also be added to the
  <a>top layer</a>. When an element is removed from the <a>pending dialog
  stack</a>, it must be removed from the <a>top layer</a>. [[!FULLSCREEN]]

  When the <dfn lt="modal dialog is shown"></dfn><dfn method for="HTMLDialogElement"><code>showModal()</code></dfn> method is invoked,
  the user agent must run the following steps:

  <ol>

    <li>Let <var>subject</var> be the <{dialog}> element on which the method was
    invoked.</li>

    <li>If <var>subject</var> already has an <code>open</code>
    attribute, then throw an <code>InvalidStateError</code> exception and abort these steps.</li>

    <li>If <var>subject</var> is not <a>in a <code>Document</code></a>, then throw
    an <code>InvalidStateError</code> exception and abort these steps.</li>

    <li>Add an <code>open</code> attribute to <var>subject</var>, whose value is the empty string.</li>

    <li>If the <code>showModal()</code> method was invoked with an
    argument, <a>set up the position</a> of <var>subject</var>, using that argument
    as the anchor. Otherwise, set the <code>dialog</code> to the <a>centered alignment</a>
    mode.</li>

    <li>Let <var>subject</var>'s <a>node document</a> be <a>blocked by the modal dialog</a> <var>subject</var>.</li>

    <li>Push <var>subject</var> onto <var>subject</var>'s
    <a>node document</a>'s <a>pending dialog stack</a>.</li>

    <li>Run the <a>dialog focusing steps</a> for <var>subject</var>.</li>

  </ol>

  The <dfn>dialog focusing steps</dfn> for a <{dialog}> element <var>subject</var> are as follows:

  <ol>

    <li>If for some reason <var>subject</var> is not a <a>control group owner</a>
    at this point, or if it is <a>inert</a>, abort these steps.</li>

    <li>

    Let <var>control</var> be the first non-<a>inert</a> <a>focusable area</a> in
    <var>subject</var>'s <a>control group</a> whose <a>DOM anchor</a> has an <{formelements/autofocus}> attribute specified.

    If there isn't one, then let <var>control</var> be the first non-<a>inert</a>
    <a>focusable area</a> in <var>subject</var>'s <a>control group</a>.

    If there isn't one of those either, then let <var>control</var> be <var>subject</var>.

    </li>

    <li>Run the <a>focusing steps</a> for <var>control</var>.</li>

  </ol>

  If at any time a <{dialog}> element is <a>removed from a <code>Document</code></a>, then if that <code>dialog</code> is in that
  <code>Document</code>'s <a>pending dialog stack</a>, the following steps must be run:

  <ol>

    <li>Let <var>subject</var> be that <{dialog}> element and <var>document</var> be the <code>Document</code> from which it is being removed.</li>

    <li>Remove <var>subject</var> from <var>document</var>'s <a>pending
    dialog stack</a>.</li>

    <li>If <var>document</var>'s <a>pending dialog stack</a> is not empty, then let
    <var>document</var> be <a>blocked by the modal
    dialog</a> that is at the top of <var>document</var>'s <a>pending dialog
    stack</a>. Otherwise, let <var>document</var> be no longer <a>blocked by a modal
    dialog</a> at all.</li>

  </ol>

  When the <dfn method for="HTMLDialogElement"><code>close()</code></dfn> method is invoked, the user
  agent must <a>close the dialog</a> that the method was invoked on. If the method was invoked
  with an argument, that argument must be used as the return value; otherwise, there is no return
  value.

  When a <{dialog}> element <var>subject</var> is to be <dfn lt="close the dialog">closed</dfn>, optionally with a return value <var>result</var>, the user agent
  must run the following steps:

  <ol>

    <li>If <var>subject</var> does not have an <code>open</code>
    attribute, then abort these steps.</li>

    <li>Remove <var>subject</var>'s <code>open</code>
    attribute.</li>

    <li>If the argument <var>result</var> was provided, then set the {{HTMLDialogElement/returnValue}} attribute to the value of <var>result</var>.</li>

    <li>

    If <var>subject</var> is in its <code>Document</code>'s <a>pending dialog
    stack</a>, then run these substeps:

    <ol>

      <li>Remove <var>subject</var> from that <a>pending dialog stack</a>.</li>

      <li>If that <a>pending dialog stack</a> is not empty, then let <var>subject</var>'s <a>node document</a> be <a>blocked by the modal dialog</a> that is at the top of the <a>pending dialog
      stack</a>. Otherwise, let <var>document</var> be no longer <a>blocked by a modal
      dialog</a> at all.</li>

    </ol>

    </li>

    <li><a>Queue a task</a> to <a>fire a simple event</a> named <code>close</code> at <var>subject</var>.</li>

  </ol>

  The <dfn attribute for="HTMLDialogElement"><code>returnValue</code></dfn> IDL attribute, on
  getting, must return the last value to which it was set. On setting, it must be set to the new
  value. When the element is created, it must be set to the empty string.

  <hr />

  <strong>Canceling dialogs</strong>: When a <code>Document</code>'s <a>pending dialog
  stack</a> is not empty, user agents may provide a user interface that, upon activation, <a>queues a task</a> to <a>fire a simple event</a> named <code>cancel</code> that is cancelable at the top <{dialog}> element on
  the <code>Document</code>'s <a>pending dialog stack</a>. The default action of this event
  must be to check if that element has an <code>open</code> attribute, and
  if it does, <a>close the dialog</a> with no return value.

  <p class="note">
    An example of such a UI mechanism would be the user pressing the "Escape" key.
  </p>

  <hr />

  All <{dialog}> elements are always in one of three modes: <dfn>normal alignment</dfn>,
  <dfn>centered alignment</dfn>, and <dfn lt="magically aligned|magic alignment">magic alignment</dfn>. When a <{dialog}> element
  is created, it must be placed in the <a>normal alignment</a> mode. In this mode, normal CSS
  requirements apply to the element. The <a>centered alignment</a> mode is only used for
  <{dialog}> elements that are in the <a>top layer</a>. [[!FULLSCREEN]] [[!CSS-2015]]

  When an element <var>subject</var> is placed in <a>centered alignment</a> mode,
  and when it is in that mode and has new rendering boxes created, the user agent must set up the
  element such that its top static position, for the purposes of calculating the used value of the
  'top' property, is the value that would place the element's top margin edge as far from the top of
  the <a>viewport</a> as the element's bottom margin edge from the bottom of the viewport, if the element's
  height is less than the height of the viewport, and otherwise is the value that would place the
  element's top margin edge at the top of the viewport.

  If there is a <{dialog}> element with <a>centered alignment</a> and that is
  <a>being rendered</a> when its <a>browsing context</a> changes <a>viewport</a> width (as
  measured in CSS pixels), then the user agent must recreate the element's boxes, recalculating its
  top static position as in the previous paragraph.

  This top static position of a <{dialog}> element with <a>centered alignment</a>
  must remain the element's top static position until its boxes are recreated. (The element's static
  position is only used in calculating the used value of the 'top' property in certain situations;
  it's not used, for instance, to position the element if its 'position' property is set to
  ''static''.)

  When a user agent is to <dfn>set up the position</dfn> of an element <var>subject</var> using an anchor <var>anchor</var>, it must run the following
  steps:

  <ol>

    <li>

    If <var>anchor</var> is a <code>MouseEvent</code> object, then run these
    substeps:

    <ol>

      <li>If <var>anchor</var>'s target element does not have a rendered box, or is in a
      different document than <var>subject</var>, then let <var>subject</var> be
      in the <a>centered alignment</a> mode, and abort the <a>set up the position</a>
      steps.</li>

      <li>Let <var>anchor element</var> be an anonymous element rendered as a box with
      zero height and width (so its margin and border boxes both just form a point), positioned so
      that its top and left are at the coordinate identified by the event, and whose properties all
      compute to their initial values.</li>

    </ol>

    Otherwise, let <var>anchor element</var> be <var>anchor</var>.

    </li>

    <li>Put <var>subject</var> in the <a>magic alignment</a> mode, aligned to <var>anchor element</var>.</li>

  </ol>

  While an element <var>A</var> has <a>magic alignment</a>, aligned to an element
  <var>B</var>, the following requirements apply:

  <ul>

    <li>

    If at any time either <var>A</var> or <var>B</var> cease having rendered
    boxes, <var>A</var> and <var>B</var> cease being in the same
    {{Document}}, or <var>B</var> ceases being earlier than <var>A</var> in <a>tree order</a>, then, if <var>subject</var> is in the
    <a>pending dialog stack</a>, let <var>subject</var>'s mode become <a>centered
    alignment</a>, otherwise, let <var>subject</var>'s mode become <a>normal
    alignment</a>.

    </li>

    <li>

    <var>A</var>'s 'position' property must compute to the keyword '<a>absolute-anchored</a>' rather than whatever it would
    otherwise compute to (i.e., the 'position' property's specified value is ignored).

    <p class="note">
    The '<a>absolute-anchored</a>'
    keyword's requirements are described below.
  </p>

    </li>

    <li>

    The anchor points for <var>A</var> and <var>B</var> are defined as per the
    appropriate entry in the following list:

    <dl class="switch">

      <dt>If the computed value of 'anchor-point' is ''anchor-point/none'' on both <var>A</var> and <var>B</var>

      </dt><dd>
      The anchor points of <var>A</var> and <var>B</var> are the center points
      of their respective first boxes' border boxes.

      </dd><dt>If the computed value of 'anchor-point' is ''anchor-point/none'' on <var>A</var> and a specific
      point on <var>B</var>

      </dt><dd>
      The anchor point of <var>B</var> is the point given by its 'anchor-point'
      property.

      If the anchor point of <var>B</var> is the center point of <var>B</var>'s
      first box's border box, then <var>A</var>'s anchor point is the center point of its
      first box's margin box.

      Otherwise, <var>A</var>'s anchor point is on one of its margin edges. Consider
      four hypothetical half-infinite lines L1, L2, L3, and L4 that each start in the center of <var>B</var>'s first box's border box, and that extend respectively through the top left
      corner, top right corner, bottom right corner, and bottom left corner of <var>B</var>'s first box's border box. <var>A</var>'s anchor point is determined
      by the location of <var>B</var>'s anchor point relative to these four hypothetical
      lines, as follows:

      If the anchor point of <var>B</var> lies on L1 or L2, or inside the area bounded
      by L1 and L2 that also contains the points above <var>B</var>'s first box's border
      box, then let <var>A</var>'s anchor point be the horizontal center of <var>A</var>'s bottom margin edge.

      Otherwise, if the anchor point of <var>B</var> lies on L3 or L4, or inside the
      area bounded by L3 and L4 that also contains the points below <var>B</var>'s first
      box's border box, then let <var>A</var>'s anchor point be the horizontal center of
      <var>A</var>'s top margin edge.

      Otherwise, if the anchor point of <var>B</var> lies inside the area bounded by L4
      and L1 that also contains the points to the left of <var>B</var>'s first box's border
      box, then let <var>A</var>'s anchor point be the vertical center of <var>A</var>'s right margin edge.

      Otherwise, the anchor point of <var>B</var> lies inside the area bounded by L2 and
      L3 that also contains the points to the right of <var>B</var>'s first box's border
      box; let <var>A</var>'s anchor point be the vertical center of <var>A</var>'s left margin edge.

      </dd><dt>If the computed value of 'anchor-point' is a specific point on <var>A</var> and
      ''anchor-point/none'' on <var>B</var>

      </dt><dd>
      The anchor point of <var>A</var> is the point given by its 'anchor-point'
      property.

      If the anchor point of <var>A</var> is the center point of <var>A</var>'s
      first box's margin box, then <var>B</var>'s anchor point is the center point of its
      first box's border box.

      Otherwise, <var>B</var>'s anchor point is on one of its border edges. Consider
      four hypothetical half-infinite lines L1, L2, L3, and L4 that each start in the center of <var>A</var>'s first box's margin box, and that extend respectively through the top left
      corner, top right corner, bottom right corner, and bottom left corner of <var>A</var>'s first box's margin box. <var>B</var>'s anchor point is determined
      by the location of <var>A</var>'s anchor point relative to these four hypothetical
      lines, as follows:

      If the anchor point of <var>A</var> lies on L1 or L2, or inside the area bounded
      by L1 and L2 that also contains the points above <var>A</var>'s first box's margin
      box, then let <var>B</var>'s anchor point be the horizontal center of <var>B</var>'s bottom border edge.

      Otherwise, if the anchor point of <var>A</var> lies on L3 or L4, or inside the
      area bounded by L3 and L4 that also contains the points below <var>A</var>'s first
      box's margin box, then let <var>B</var>'s anchor point be the horizontal center of
      <var>B</var>'s top border edge.

      Otherwise, if the anchor point of <var>A</var> lies inside the area bounded by L4
      and L1 that also contains the points to the left of <var>A</var>'s first box's margin
      box, then let <var>B</var>'s anchor point be the vertical center of <var>B</var>'s right border edge.

      Otherwise, the anchor point of <var>A</var> lies inside the area bounded by L2 and
      L3 that also contains the points to the right of <var>A</var>'s first box's margin
      box; let <var>B</var>'s anchor point be the vertical center of <var>B</var>'s left border edge.

      </dd><dt>If the computed value of 'anchor-point' is a specific point on both <var>A</var>
      and <var>B</var>

      </dt><dd>
      The anchor points of <var>A</var> and <var>B</var> are the points given
      by their respective 'anchor-point' properties.

    </dd></dl>

    <p class="note">
    The rules above generally use <var>A</var>'s <em>margin</em> box, but
    <var>B</var>'s <em>border</em> box. This is because while <var>A</var> always
    has a margin box, and using the margin box allows for the dialog to be positioned offset from
    the box it is annotating, <var>B</var> sometimes does not have a margin box (e.g., if it
    is a table-cell), or has a margin box whose position may be not entirely clear (e.g., in the face
    of margin collapsing and 'clear' handling of in-flow blocks).
    </p>

    In cases where <var>B</var> does not have a border box but its border box is used by
    the algorithm above, user agents must use its first box's content area instead. (This is in
    particular an issue with boxes in tables that have 'border-collapse' set to ''collapse''.)
  </li>

    <li>

    When an element's 'position' property computes to '<dfn>absolute-anchored</dfn>', the 'float' property does not
    apply and must compute to ''anchor-point/none'', the 'display' property must compute to a value as described by
    the table in the section of CSS
    2.1 describing the <cite>relationships between 'display', 'position', and 'float'</cite>,
    and the element's box must be positioned using the rules for absolute positioning but with its
    static position set such that if the box is positioned in its static position, its anchor point
    is exactly aligned over the anchor point of the element to which it is <a>magically aligned</a>. Elements aligned in this way are <i>absolutely
    positioned</i>. For the purposes of determining the containing block of other elements, the
    '<a>absolute-anchored</a>' keyword must be treated
    like the ''absolute'' keyword.

    </li>

  </ul>

  <p class="note">
    The trivial example of an element that does not have a rendered box is one whose
  'display' property computes to ''anchor-point/none''. However, there are many other cases; e.g., table columns do
  not have boxes (their properties merely affect other boxes).
  </p>

  <p class="note">
    If an element to which another element is anchored changes rendering, the anchored
  element will be repositioned accordingly. (In other words, the requirements above are live,
  they are not just calculated once per anchored element.)
  </p>

  <p class="note">
    The '<a>absolute-anchored</a>'
  keyword is not a keyword that can be specified in CSS; the 'position' property can only compute to
  this value if the <{dialog}> element is positioned via the APIs described above.
  </p>

  User agents in visual interactive media should allow the user to pan the <a>viewport</a> to access all
  parts of a <{dialog}> element's border box, even if the element is larger than the
  <a>viewport</a> and the <a>viewport</a> would otherwise not have a scroll mechanism (e.g., because the viewport's
  'overflow' property is set to ''hidden'').

  <hr />

  The <dfn attribute for="HTMLDialogElement"><code>open</code></dfn> IDL attribute must
  <a>reflect</a> the <code>open</code> content attribute.

  </div>


<h5 id="anchor-points">Anchor points</h5>

  <p class="critical">This section will eventually be moved to a CSS specification; it is specified
  here only on an interim basis until an editor can be found to own this.</p>

<pre class="propdef">
Name: anchor-point
Value: [ none | &lt;position&gt; ]
Initial: none
Applies To: all elements
Inherited: no
Percentages: refer to width or height of box; see prose
Computed Value: The specified value, but with any lengths replaced by their corresponding absolute length
Media: visual
Animatable: no
Canonical Order: per grammar
</pre>

  The 'anchor-point' property specifies a point to which dialog boxes are to be aligned.

  If the value is a <dfn value for="anchor-point">&lt;position&gt;</dfn>, the anchor point is the point given by the value, which
  must be interpreted relative to the element's first rendered box's margin box. Percentages must be
  calculated relative to the element's first rendered box's margin box (specifically, its width for
  the horizontal position and its height for the vertical position). [[!CSS-VALUES]] [[!CSS-2015]]

  If the value is the keyword <dfn value for="anchor-point">none</dfn>, then no explicit anchor point is defined. The user agent
  will pick an anchor point automatically if necessary (as described in the definition of the
  <code>open()</code> method above).

</section>
