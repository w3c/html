
<section>

<!--

      LINKS

  This source produces section 4.8:
  https://w3c.github.io/html/links.html

  It covers:
  - An introduction to links created by <a> and <area> elements.
  - The API for <a> and <area>s
  - Steps user agents should take to allow users to follow hyperlinks
  - The download attribute, and the steps a user agent should follow when downloading a hyperlink
  - The different predefined types of links:
      alternate, author, bookmark, external, help, icon, license, nofollow, noopener,
      noreferrer, preconnect, prefetch, preload, prerender, search, stylesheet, tag
  - Sequential link types: 'next' and 'prev'
  - Other link types, covering extensions to the predefined set of link types

-->

<h3 id="links">Links</h3>

<h4 id="links-introduction">Introduction</h4>

  Links are a conceptual construct, created by <{a}>, <{area}>, and <{link}> elements. They
  <a>represent</a> a connection between two resources, one of which is the current {{Document}}.
  There are two kinds of links in HTML:

  <dl>
    <dt><dfn lt="external resource link|links to external resources|external resource|external resources">Links to external resources</dfn></dt>

    <dd>These are links to resources that are to be used to augment the current document,
    generally automatically processed by the user agent.</dd>

    <dt><dfn lt="hyperlink|hyperlinks">Hyperlinks</dfn></dt>

    <dd>These are links to other resources that are exposed to users by the user agent.
    The user can cause the user agent to <a>navigate</a> to those resources
    (for example to visit them in the browser or to download them).</dd>
  </dl>

  For <{link}> elements with an <{links/href}> attribute and a <{link/rel}> attribute, links
  must be created for the keywords of the <{link/rel}> attribute, as defined for those keywords
  in the <a>link types</a> section.

  Similarly, for <{a}> and <{area}> elements with an <{links/href}> attribute and a
  <{links/rel}> attribute, links must be created for the keywords of the <{links/rel}> attribute
  as defined for those keywords in the <a>link types</a> section. Unlike <{link}> elements,
  however, <{a}> and <{area}> elements with an <{links/href}> attribute that either do not have
  a <{links/rel}> attribute, or whose <{links/rel}> attribute has no keywords that are defined as
  specifying <a>hyperlinks</a>, must also create a <a>hyperlink</a>.
  This implied hyperlink has no special meaning (it has no <a>link type</a>)
  beyond linking the element's <a>node document</a> to the resource given by the element's
  <code>href</code> attribute.

  A <a>hyperlink</a> can have one or more
  <dfn lt="annotates|hyperlink annotations">hyperlink annotations</dfn>
  that modify the processing semantics of that hyperlink.

<h4 id="links-created-by-a-area-and-link-elements">Links created by <{a}>, <{area}> and <{link}> elements</h4>

  The <dfn element-attr for="a,area,links"><code>href</code></dfn> attribute on <{a}>, <{area}>
  and <{link}> elements must have a value that is a
  <a>valid URL potentially surrounded by spaces</a>.

  <p class="note">
    The <{links/href}> attribute on <{a}> and <{area}> elements is not required; when those
    elements do not have <{links/href}> attributes they do not create hyperlinks. If a <{link}>
    element lacks the <{links/href}> attribute, then it does not define a link.
  </p>

  The <dfn element-attr for="a,area,links"><code>target</code></dfn> attribute, if present, must be
  a <a>valid browsing context name or keyword</a>. It gives the name of the <a>browsing context</a>
  that will be used. User agents use this name when <a>following hyperlinks</a>.

  When an <{a}> or <{area}> element's <a>activation behavior</a> is
  invoked, the user agent may allow the user to indicate a preference regarding whether the
  hyperlink is to be used for <a>navigation</a> or whether the resource it
  specifies is to be downloaded.

  In the absence of a user preference, the default should be navigation if the element has no
  <{links/download}> attribute, and should be to download the specified resource if it does.

  Whether determined by the user's preferences or via the presence or absence of the attribute,
  if the decision is to use the hyperlink for <a>navigation</a> then the user agent must
  <a>follow the hyperlink</a>, and if the decision is to use the hyperlink to download a resource,
  the user agent must <a>download the hyperlink</a>. These terms are defined in subsequent sections
  below.

  The <dfn element-attr for="a,area,links"><code>download</code></dfn> attribute, if present,
  indicates that the author intends the hyperlink to be used for downloading the linked resource.
  The attribute may have a value; if any, it specifies the author's recommended default file
  name for labeling the resource in a local file system. The author's recommended default file name
  does not need to match the file name of the linked resource. There are no restrictions on
  allowed values, but authors are cautioned that most file systems have limitations with regard
  to what punctuation is supported in file names, and user agents are likely to adjust file names
  accordingly.

  <div class="example">
    The following example shows how an image with a generated file name can be given
    a human-friendly default file name by the author.

    <xmp highlight="html">
      <a href="/images/IMG-d5644aBUd89z6e8.jpg" download="arranged-cakes.jpg">
        Download photo of cakes!
      </a>
    </xmp>
  </div>


  The <dfn element-attr for="a,area,links"><code>ping</code></dfn> attribute, if present,
  gives the URLs of the resources that are interested in being notified if the user follows the
  <a>hyperlink</a>.
  The value must be a <a>set of space-separated tokens</a>, each of which must be a
  <a>valid non-empty URL</a> whose scheme is an HTTP(S) scheme. The value is used by the user
  agent for <a>hyperlink auditing</a>.

  The <dfn element-attr for="a,area,links"><code>rel</code></dfn> attribute on <{a}> and
  <{area}> elements controls what kinds of links the elements create. The attribute's value
  must be a <a>set of space-separated tokens</a> (keywords).
  The <a>allowed keywords and their meanings</a> are defined below.

  <{links/rel}>'s <a>supported tokens</a> are the keywords defined in <a>HTML link types</a>
  which are allowed on <{a}> and <{area}> elements, impact the processing model, and are supported
  by the user agent.
  The possible <a>supported tokens</a> for <{a}> and <{area}> elements are <{link/noreferrer}>,
  and <{link/noopener}>. <{links/rel}>'s <a>supported tokens</a> must only include the tokens
  from this list that the user agent implements the processing model for.

  The <{link/rel}> attribute has a different listing of <a>supported tokens</a> for the <{link}> element.

  Other specifications may add <a>HTML link types</a> as defined in <a>Other link types</a>, with
  the following additional requirements:

  * Such specifications may require that their link types be included in <{links/rel}>'s supported
      tokens.
  * Such specifications may specify that their link types are <a>body-ok</a>.

  The <{links/rel}> attribute has no default value. If the
  attribute is omitted or if none of the values in the attribute are recognized by the user agent,
  then the document has no particular relationship with the destination resource other than there
  being a hyperlink between the two.

  <!-- W3C START - DO NOT OVERWRITE -->

  <{link}> and <{a}> elements may also have a
  <dfn element-attr for="a,link,links"><code>rev</code></dfn> attribute, which is used to describe
  a <a>reverse link</a> relationship from the resource specified by the <{links/href}> to the
  current document. If present, the value of this attribute must be a <a>set of space-separated
  tokens</a>. Like the <{links/rel}> attribute, <a>link types</a> describes the <a>allowed
  keywords and their meanings</a> for the <{links/rev}> attribute. Both the <{links/rel}> and
  <{links/rev}> attributes may be present on the same element.

  <dfn lt="reverse link|Reverse links">Reverse links</dfn> are a way to express the reverse
  directional relationship of a link. In contrast to the <{links/rel}> attribute, whose value
  conveys a forward directional relationship ("how is the link related to me"), the <{links/rev}>
  attribute allows for similar relationships to be expressed in the reverse direction ("how am I
  related to this link"). These values can enable user agents to build a more comprehensive map of
  linked documents.

  <div class="example">
    Given two documents, each containing a chapter of a book, the links between them could be
    described with the <{link/rel}> and <{links/rev}> attributes as follows:

    Document with URL "chapter1.html"
    <xmp highlight="html">
      <link href="chapter2.html" rel="next" rev="prev">
    </xmp>

    Document with URL "chapter2.html"
    <xmp highlight="html">
      <link href="chapter1.html" rel="prev" rev="next">
      <link href="chapter3.html" rel="next" rev="prev">
    </xmp>

    From chapter1.html, the link to chapter2.html is the "<code>next</code>" chapter in the series
    in the forward direction, and the "<code>previous</code>" chapter in the reverse direction
    (from chapter2.html to chapter1.html).
  </div>

  <div class="example">
    The links in a table of contents document might be described using <{links/rel}> and
    <{links/rev}> as follows:

    <xmp highlight="html">
      <ol>
        <li><a href="chapter1.html" rev="toc" rel="next">chapter 1</a></li>
        <li><a href="chapter2.html" rev="toc"></a>chapter 2</li>
        <li><a href="chapter3.html" rev="toc"></a>chapter 3</li>
      </ol>
    </xmp>

    From the table of contents, the "<code>next</code>" logical path is to the first chapter,
    expressed using <{links/rel}>. Each chapter link has a "<code>toc</code>" <{links/rev}> value
    which indicates that the current document is the table of contents document for every chapter.
  </div>

  <!-- END W3C END -->

  The <dfn element-attr for="a,links"><code>hreflang</code></dfn> attribute on
  <{a}> elements that create <a>hyperlinks</a>, if present, gives
  the language of the linked resource. It is purely advisory. The value must be a valid BCP 47
  language tag. [[!BCP47]] User agents must not consider this attribute
  authoritative — upon fetching the resource, user agents must use only language information
  associated with the resource to determine its language, not metadata included in the link to the
  resource.

  The <dfn element-attr for="a,links"><code>as</code></dfn> attribute specifies the <a>destination</a> for a
  preload request for the resource given by the <code>href</code> attribute. If the attribute is present,
  the value must [=case-sensitively=] match one of the <a>potential destination</a> keywords. The default value
  is the empty string. The attribute may be omitted. The attribute must not be specified on <{link}> elements
  that do not have a <{links/rel}> attribute that contains the <{link/preload}> keyword. User agents must
  implement the processing model of the <{link/as}> attribute described in the Preload specification. [[!Preload]]

  The <dfn element-attr for="a,links"><code>type</code></dfn> attribute, if present, gives the
  <a>MIME type</a> of the linked resource. It is purely advisory. The value must be a
  <a>valid mime type</a>. User agents must not consider the <code>type</code> attribute authoritative — upon fetching the
  resource, user agents must not use metadata included in the link to the resource to determine its
  type.

  The <code>referrerpolicy</code> attribute is a <a>referrer policy attribute</a>.
  Its purpose is to set the <a>referrer policy</a> used when <span>following hyperlinks</span>.
  [[!REFERRERPOLICY]]

<h4 id="api-for-a-and-area-elements">API for <{a}> and <{area}> elements</h4>

  <pre class="idl" data-highlight="webidl">
    [NoInterfaceObject]
    interface HTMLHyperlinkElementUtils {
      stringifier attribute USVString href;
      readonly attribute USVString origin;
      attribute USVString protocol;
      attribute USVString username;
      attribute USVString password;
      attribute USVString host;
      attribute USVString hostname;
      attribute USVString port;
      attribute USVString pathname;
      attribute USVString search;
      attribute USVString hash;
    };
  </pre>

  <dl class="domintro">

    <dt><var>hyperlink</var> . <code>toString()</code></dt>
    <dt><var>hyperlink</var> . <code>href</code></dt>
    <dd>
    <p>Returns the hyperlink's URL.</p>
    <p>Can be set, to change the URL.</p>
    </dd>

    <dt><var>hyperlink</var> . <code>origin</code></dt>
    <dd>
    <p>Returns the hyperlink's URL's origin.</p>
    </dd>

    <dt><var>hyperlink</var> . <code>protocol</code></dt>
    <dd>
    <p>Returns the hyperlink's URL's scheme.</p>
    <p>Can be set, to change the URL's scheme.</p>
    </dd>

    <dt><var>hyperlink</var> . <code>username</code></dt>
    <dd>
    <p>Returns the hyperlink's URL's username.</p>
    <p>Can be set, to change the URL's username.</p>
    </dd>

    <dt><var>hyperlink</var> . <code>password</code></dt>
    <dd>
    <p>Returns the hyperlink's URL's password.</p>
    <p>Can be set, to change the URL's password.</p>
    </dd>

    <dt><var>hyperlink</var> . <code>host</code></dt>
    <dd>
    <p>Returns the hyperlink's URL's host and port (if different from the default port for the
    scheme).</p>
    <p>Can be set, to change the URL's host and port.</p>
    </dd>

    <dt><var>hyperlink</var> . <code>hostname</code></dt>
    <dd>
    <p>Returns the hyperlink's URL's host.</p>
    <p>Can be set, to change the URL's host.</p>
    </dd>

    <dt><var>hyperlink</var> . <code>port</code></dt>
    <dd>
    <p>Returns the hyperlink's URL's port.</p>
    <p>Can be set, to change the URL's port.</p>
    </dd>

    <dt><var>hyperlink</var> . <code>pathname</code></dt>
    <dd>
    <p>Returns the hyperlink's URL's path.</p>
    <p>Can be set, to change the URL's path.</p>
    </dd>

    <dt><var>hyperlink</var> . <code>search</code></dt>
    <dd>
    <p>Returns the hyperlink's URL's query (includes leading "<code>?</code>" if
    non-empty).</p>
    <p>Can be set, to change the URL's query (ignores leading "<code>?</code>").</p>
    </dd>

    <dt><var>hyperlink</var> . <code>hash</code></dt>
    <dd>
    <p>Returns the hyperlink's URL's fragment (includes leading "<code>#</code>" if
    non-empty).</p>
    <p>Can be set, to change the URL's fragment (ignores leading "<code>#</code>").</p>
    </dd>
  </dl>

  <p>An element implementing the <code>HTMLHyperlinkElementUtils</code> mixin has an associated url (null or a [=url/URL=]). It is initially null.

  <p>An element implementing the <code>HTMLHyperlinkElementUtils</code> mixin has an associated <dfn>set the url</dfn> algorithm, which sets this
  element's [=url/URL=] to the <a>resulting URL string</a>
  of <a>parsing</a> this element's <code>href</code> content attribute value relative to this element. If
  <a>parsing</a> was aborted with an error, set this element's [=url/URL=] to null.</p>

  <p>When elements implementing the <code>HTMLHyperlinkElementUtils</code> mixin are created, and
  whenever those elements have their <code>href</code> content
  attribute set, changed, or removed, the user agent must <a>set the url</a>.</p>

  <p class="note">This is only observable for <code>blob:</code> URLs as
  <a lt="url parser">parsing</a> them involves the <a>StructuredSerialize</a>
  abstract operation.</p>

  <p>An element implementing the <code>HTMLHyperlinkElementUtils</code> mixin has an associated <dfn>reinitialize url</dfn> algorithm, which runs these steps:</p>

  <ol>
   <li>If element's [=url/URL=] is non-null, its <a>scheme</a> is "<code>blob</code>", and its <a>non-relative flag</a> is set, terminate these steps.</li>

   <li><a>Set the url</a>.</li>
  </ol>

  <p>To <dfn>update <code>href</code></dfn>, set the element's <code>href</code> content attribute's value to the element's [=url/URL=], serialized.</p>

  <hr>

  <p>The <dfn attribute for="HTMLHyperlinkElementUtils"><code>href</code></dfn> attribute's getter must run these
  steps:</p>

  <ol>
   <li><a>Reinitialize url</a>.</li>

   <li>Let <var>url</var> be this element's [=url/URL=].</li>

   <li>If <var>url</var> is null and this element has no <code>href</code> content attribute, return the empty string.

   <li>Otherwise, if <var>url</var> is null, return this element's <code>href</code> content attribute's value.</li>

   <li>Return <var>url</var>, serialized.</li>
  </ol>

  <p>The <code>href</code> attribute's setter must set this element's
  <code>href</code> content attribute's value to the given value.

  <p>The <dfn attribute for="HTMLHyperlinkElementUtils"><code>origin</code></dfn> attribute's getter must run
  these steps:</p>

  <ol>
   <li><a>Reinitialize url</a>.</li>

   <li>If this element's [=url/URL=] is null, return the
   empty string.</li>

   <li>Return the <a>Unicode serialization</a>
   of this element's [=url/URL=]'s <a for="url">origin</a>.</li>
  </ol>

  <p class="note">It returns the Unicode rather than the ASCII serialization for
  compatibility with <code>MessageEvent</code>.</p>

  <p>The <dfn attribute for="HTMLHyperlinkElementUtils"><code>protocol</code></dfn> attribute's getter must
  run these steps:</p>

  <ol>
   <li><a>Reinitialize url</a>.</li>

   <li>If this element's [=url/URL=] is null, return "<code
  >:</code>".</li>

   <li>Return this element's [=url/URL=]'s [=url/scheme=], followed by "<code>:</code>".</li>
  </ol>

  <p>The <code>protocol</code> attribute's setter must run these
  steps:</p>

  <ol>
   <li><a>Reinitialize url</a>.</li>

   <li>If this element's [=url/URL=] is null, terminate these
   steps.</li>

   <li><a lt="basic url parser">Basic URL parse</a> the given value, followed by <code>:</code>",
   with this element's [=url/URL=] as
   <var>url</var> and <a>scheme start state</a> as <var>state override</var>.</li>

   <li><a>Update <code>href</code></a>.</li>
  </ol>

  <p>The <dfn attribute for="HTMLHyperlinkElementUtils"><code>username</code></dfn> attribute's getter must
  run these steps:</p>

  <ol>
   <li><a>Reinitialize url</a>.</li>

   <li>If this element's [=url/URL=] is null, return the
   empty string.</li>

   <li>Return this element's [=url/URL=]'s <a>username</a>.</li>
  </ol>

  <p>The <code>username</code> attribute's setter must run these
  steps:</p>

  <ol>
   <li><a>Reinitialize url</a>.</li>

   <li>Let <var>url</var> be this element's [=url/URL=].</li>

   <li>If <var>url</var> or <var>url</var>'s <a for="url">host</a> is null,
   or <var>url</var>'s <a>non-relative flag</a> is set, terminate these steps.</li>

   <li><a>set the username</a>, given <var>url</var> and the given value.</li>

   <li><a>Update <code>href</code></a>.</li>
  </ol>

  <p>The <dfn attribute for="HTMLHyperlinkElementUtils"><code>password</code></dfn> attribute's getter must
  run these steps:</p>

  <ol>
   <li><a>Reinitialize url</a>.</li>

   <li>Let <var>url</var> be this element's [=url/URL=].</li>

   <li>If <var>url</var> or <var>url</var>'s <a>password</a>
   is null, return the empty string.</li>

   <li>Return  <var>url</var>'s <a>password</a>.</li>
  </ol>

  <p>The <code>password</code> attribute's setter must run these
  steps:</p>

  <ol>
   <li><a>Reinitialize url</a>.</li>

   <li>Let <var>url</var> be this element's [=url/URL=].</li>

   <li>If <var>url</var> or <var>url</var>'s <a for="url">host</a> is null,
   or <var>url</var>'s <a>non-relative flag</a> is set, terminate these steps.</li>

   <li><a>Set the password</a>, given <var>url</var> and the given value.</li>

   <li><a>Update <code>href</code></a>.</li>
  </ol>

  <p>The <dfn attribute for="HTMLHyperlinkElementUtils"><code>host</code></dfn> attribute's getter must run these
  steps:</p>

  <ol>
   <li><a>Reinitialize url</a>.</li>

   <li>Let <var>url</var> be this element's [=url/URL=].</li>

   <li>If <var>url</var> or <var>url</var>'s <a for="url">host</a> is null,
   return the empty string.</li>

   <li>If <var>url</var>'s <a for="url">port</a> is null, return
   <var>url</var>'s <a for="url">host</a>, serialized.</li>

   <li>Return <var>url</var>'s <a for="url">host</a>, serialized, followed by "<code>:</code>" and <var>url</var>'s <a for="url">port</a>, serialized.</li>
  </ol>

  <p>The <code>host</code> attribute's setter must run these steps:</p>

  <ol>
   <li><a>Reinitialize url</a>.</li>

   <li>Let <var>url</var> be this element's [=url/URL=].</li>

   <li>If <var>url</var> is null or <var>url</var>'s <a>non-relative flag</a> is set,
   terminate these steps.</li>

   <li><a lt="basic url parser">Basic URL parse</a> the given value, with
   <var>url</var> as <var>url</var> and <a>host state</a> as <var>state
   override</var>.</li>

   <li><a>Update <code>href</code></a>.</li>
  </ol>

  <p>The <dfn attribute for="HTMLHyperlinkElementUtils"><code>hostname</code></dfn> attribute's getter must
  run these steps:</p>

  <ol>
   <li><a>Reinitialize url</a>.</li>

   <li>Let <var>url</var> be this element's [=url/URL=].</li>

   <li>If <var>url</var> or <var>url</var>'s <a for="url">host</a> is null,
   return the empty string.</li>

   <li>Return <var>url</var>'s <a for="url">host</a>, serialized.</li>
  </ol>

  <p>The <code>hostname</code> attribute's setter must run these
  steps:</p>

  <ol>
   <li><a>Reinitialize url</a>.</li>

   <li>Let <var>url</var> be this element's [=url/URL=].</li>

   <li>If <var>url</var> is null or <var>url</var>'s <a>non-relative flag</a> is set,
   terminate these steps.</li>

   <li><a lt="basic url parser">Basic URL parse</a> the given value, with
   <var>url</var> as <var>url</var> and <a>hostname state</a> as <var>state
   override</var>.</li>

   <li><a>Update <code>href</code></a>.</li>
  </ol>

  <p>The <dfn attribute for="HTMLHyperlinkElementUtils"><code>port</code></dfn> attribute's getter must run these
  steps:</p>

  <ol>
   <li><a>Reinitialize url</a>.</li>

   <li>Let <var>url</var> be this element's [=url/URL=].</li>

   <li>If <var>url</var> or <var>url</var>'s <a for="url">port</a> is null,
   return the empty string.</li>

   <li>Return <var>url</var>'s <a for="url">port</a>, serialized.</li>
  </ol>

  <p>The <code>port</code> attribute's setter must run these steps:</p>

  <ol>
   <li><a>Reinitialize url</a>.</li>

   <li>Let <var>url</var> be this element's [=url/URL=].</li>

   <li>If <var>url</var> or <var>url</var>'s <a for="url">host</a> is null,
   <var>url</var>'s <a>non-relative flag</a> is set, or <var>url</var>'s [=url/scheme=] is "<code>file</code>", terminate these
   steps.</li>

   <li><a lt="basic url parser">Basic URL parse</a> the given value, with
   <var>url</var> as <var>url</var> and <a>port state</a> as <var>state
   override</var>.</li>

   <li><a>Update <code>href</code></a>.</li>
  </ol>

  <p>The <dfn attribute for="HTMLHyperlinkElementUtils"><code>pathname</code></dfn> attribute's getter must
  run these steps:</p>

  <ol>
   <li><a>Reinitialize url</a>.</li>

   <li>Let <var>url</var> be this element's [=url/URL=].</li>

   <li>If <var>url</var> is null, return the empty string.</li>

   <li>If <var>url</var>'s <a>non-relative flag</a> is set, return the first string in
   <var>url</var>'s <a>path</a>.</li>

   <li>Return "<code>/</code>", followed by the strings in <var>url</var>'s <a>path</a> (including empty strings), separated from each other by
   "<code>/</code>".</li>
  </ol>

  <p>The <code>pathname</code> attribute's setter must run these
  steps:</p>

  <ol>
   <li><a>Reinitialize url</a>.</li>

   <li>Let <var>url</var> be this element's [=url/URL=].</li>

   <li>If <var>url</var> is null or <var>url</var>'s <a>non-relative flag</a> is set,
   terminate these steps.</li>

   <li>Set <var>url</var>'s <a>path</a> to the empty
   list.</li>

   <li><a lt="basic url parser">Basic URL parse</a> the given value, with
   <var>url</var> as <var>url</var> and <a>path start state</a> as <var>state
   override</var>.</li>

   <li><a>Update <code>href</code></a>.</li>
  </ol>

  <p>The <dfn attribute for="HTMLHyperlinkElementUtils"><code>search</code></dfn> attribute's getter must run
  these steps:</p>

  <ol>
   <li><a>Reinitialize url</a>.</li>

   <li>Let <var>url</var> be this element's [=url/URL=].</li>

   <li>If <var>url</var> is null, or <var>url</var>'s <a for="url">query</a> is either null or the empty string, return the empty
   string.</li>

   <li>Return "<code>?</code>", followed by <var>url</var>'s <a for="url">query</a>.</li>
  </ol>

  <p>The <code>search</code> attribute's setter must run these
  steps:</p>

  <ol>
   <li><a>Reinitialize url</a>.</li>

   <li>Let <var>url</var> be this element's [=url/URL=].</li>

   <li>If <var>url</var> is null, terminate these steps.</li>

   <li>If the given value is the empty string, set <var>url</var>'s <a for="url">query</a> to null.

   <li>
    <p>Otherwise, run these substeps:</p>

    <ol>
     <li>Let <var>input</var> be the given value with a single leading "<code>?</code>"
     removed, if any.</li>

     <li>Set <var>url</var>'s <a for="url">query</a> to the empty
     string.</li>

     <li><a lt="basic url parser">Basic URL parse</a> <var>input</var>, with
     <var>url</var> as <var>url</var> and <a>query state</a> as <var>state override</var>, and
     this element's <a>node document</a>'s <a>document's character encoding</a> as
     <var>encoding override</var>.</li>
    </ol>
   </li>

   <li><a>Update <code>href</code></a>.</li>
  </ol>

  <p>The <dfn attribute for="HTMLHyperlinkElementUtils"><code>hash</code></dfn> attribute's getter must run these
  steps:</p>

  <ol>
   <li><a>Reinitialize url</a>.</li>

   <li>Let <var>url</var> be this element's [=url/URL=].</li>

   <li>If <var>url</var> is null, or <var>url</var>'s <a for="url">fragment</a> is either null or the empty string, return the
   empty string.</li>

   <li>Return "<code>#</code>", followed by <var>url</var>'s <a for="url">fragment</a>.</li>
  </ol>

  <p>The <code>hash</code> attribute's setter must run these steps:</p>

  <ol>
   <li><a>Reinitialize url</a>.</li>

   <li>Let <var>url</var> be this element's [=url/URL=].</li>

   <li>If <var>url</var> is null or <var>url</var>'s [=url/scheme=] is "<code>javascript</code>", terminate these
   steps.</li>

   <li>If the given value is the empty string, set <var>url</var>'s <a for="url">fragment</a> to null.

   <li>
    <p>Otherwise, run these substeps:</p>

    <ol>
     <li>Let <var>input</var> be the given value with a single leading "<code>#</code>"
     removed, if any.</li>

     <li>Set <var>url</var>'s <a for="url">fragment</a> to the empty
     string.</li>

     <li><a lt="basic url parser">Basic URL parse</a> <var>input</var>, with
     <var>url</var> as <var>url</var> and <a>fragment state</a> as <var>state
     override</var>.</li>
    </ol>
   </li>

   <li><a>Update <code>href</code></a>.</li>
  </ol>

<h4 id="sec-following-hyperlinks">Following hyperlinks</h4>

  When a user
  <dfn lt="follow hyperlinks|following hyperlinks|follows a hyperlink|follow the hyperlinks|follow the hyperlink|following a hyperlink">follows a hyperlink</dfn>
  created by an element <var>subject</var>, optionally with a <var>hyperlink suffix</var>, the
  user agent must run the following steps:

  <ol>

    <li>Let <var>replace</var> be false.</li>

    <li>Let <var>source</var> be the <a>browsing context</a> that contains the
    {{Document}} object with which <var>subject</var> in question is
    associated.</li>

    <li>

    If the user indicated a specific <a>browsing context</a> when following the hyperlink,
    or if the user agent is configured to follow hyperlinks by navigating a particular browsing
    context, then let <var>target</var> be that <a>browsing context</a>. If this is a new
    <a>top-level browsing context</a> (e.g., when the user followed the hyperlink using "Open
    in New Tab"), then <var>source</var> must be set as the new <a>browsing context</a>'s
    <a>one permitted sandboxed navigator</a>.

    Otherwise, if <var>subject</var> is an <{a}> or <{area}> element
    that has a <code>target</code> attribute, then let <var>target</var> be the <a>browsing context</a> that is chosen by applying <a>the
    rules for choosing a browsing context given a browsing context name</a>, using the value of
    the <code>target</code> attribute as the browsing context name. If
    these rules result in the creation of a new <a>browsing context</a>, set <var>replace</var> to true.

    Otherwise, if <var>subject</var> is an <{a}> or <{area}> element
    with no <code>target</code> attribute, but the
    {{Document}} contains a <{base}> element with a <code>target</code> attribute, then let <var>target</var> be the
    <a>browsing context</a> that is chosen by applying <a>the rules for choosing a browsing
    context given a browsing context name</a>, using the value of the <code>target</code> attribute of the first such <{base}> element as
    the browsing context name. If these rules result in the creation of a new <a>browsing context</a>, set <var>replace</var> to true.

    Otherwise, let <var>target</var> be the <a>browsing context</a> that <var>subject</var> itself is in.

    </li>

    <li>If |subject|'s [=link types=] include the `noreferrer` or <{link/noopener}> keyword,
    and |replace| is true, then [=disowned its opener|disown target's opener=].</li>

    <li><a>Parse</a> the [=url/URL=] given by
    <var>subject</var>'s <{links/href}> attribute, relative to
    <var>subject</var>'s <a>node document</a>.</li>

    <li>

    If that is successful, let <var>URL</var> be the <a>resulting URL string</a>.

    Otherwise, if <a>parsing</a> the [=url/URL=] failed, the
    user agent may report the error to the user in a user-agent-specific manner, may <a>queue a
    task</a> to <a>navigate</a> the <var>target</var>
    <a>browsing context</a> to an error page to report the error, or may ignore the error and
    do nothing. In any case, the user agent must then abort these steps.

    </li>

    <li>If there is a <var>hyperlink suffix</var>, append it to <var>URL</var>.</li>

    <li><p>Let <var>resource</var> be a new [=request=] whose
    <a for="request">url</a> is <var>URL</var>
    and whose [=referrer policy=] is the current state of <var>subject</var>'s
    <code>referrerpolicy</code> content attribute.</p></li>

    <li><a>Queue a task</a> to <a>navigate</a> the
    <var>target</var> <a>browsing context</a> to <var>resource</var>. If <var>replace</var> is true,
    the navigation must be performed with <a>replacement enabled</a>. The <a>source browsing
    context</a> must be <var>source</var>.</li>

  </ol>

  The <a>task source</a> for the tasks mentioned above is the <a>DOM manipulation task source</a>.

<h4 id="downloading-resources">Downloading resources</h4>

  In some cases, resources are intended for later use rather than immediate viewing. To indicate
  that a resource is intended to be downloaded for use later, rather than immediately used, the
  <{links/download}> attribute can be specified on the <{a}> or <{area}> element that creates
  the <a>hyperlink</a> to that resource.

  The attribute can furthermore be given a value, to specify the file name that user agents are
  to use when storing the resource in a file system. This value can be overridden by the
  <a http-header><code>Content-Disposition</code></a> HTTP header's filename parameters.
  [[!RFC6266]]

  In cross-origin situations, the <{links/download}> attribute has to be combined with the
  <a http-header><code>Content-Disposition</code></a> HTTP header, specifically with the
  <code>attachment</code> disposition type, to avoid the user being warned of possibly
  nefarious activity. (This is to protect users from being made to download sensitive personal or
  confidential information without their full understanding.)

  <hr />

  When a user <dfn lt="download hyperlinks|downloads a hyperlink|download the hyperlink|download">downloads a hyperlink</dfn> created by an
  element <var>subject</var>, optionally with a <var>hyperlink suffix</var>, the user agent must
  run the following steps:

  <ol>

    <li>
      <a>Parse</a> the [=url/URL=] given by <var>subject</var>'s <{links/href}> attribute,
      relative to <var>subject</var>.
    </li>

    <li>If <a>parsing</a> the [=url/URL=] fails, the user agent
    may report the error to the user in a user-agent-specific manner, may
    <a>navigate</a> to an error page to report the error, or may
    ignore the error and do nothing. In either case, the user agent must abort these steps.
    </li>

    <li>Otherwise, let <var>URL</var> be the <a>resulting URL string</a>.</li>

    <li>If there is a <var>hyperlink suffix</var>, append it to <var>URL</var>.</li>

    <li>Return to whatever algorithm invoked these steps and continue
    these steps <a>in parallel</a>.</li>

    <li><a>Fetch</a> <var>URL</var> and handle the resulting resource
    <a>as a download</a>.</li>

  </ol>

  When a user agent is to handle a resource obtained from a fetch <dfn>as a download</dfn>, it
  should provide the user with a way to save the resource for later use, if a resource is
  successfully obtained; or otherwise should report any problems downloading the file to the user.

  If the user agent needs a file name for a resource being handled <a>as a download</a>, it
  should select one using the following algorithm.

  <p class="warning">
    This algorithm is intended to mitigate security dangers involved in downloading
    files from untrusted sites, and user agents are strongly urged to follow it.
  </p>

  <ol>

    <li>Let <var>filename</var> be the void value.</li>

    <li>If the resource has a <a http-header><code>Content-Disposition</code></a>
    header, that header specifies the <code>attachment</code> disposition type, and the
    header includes file name information, then let <var>filename</var> have the value
    specified by the header, and jump to the step labeled <i>sanitize</i> below. [[!RFC6266]]</li>

    <li>Let <var>interface origin</var> be the [=concept/origin=] of the
    {{Document}} in which the <a>download</a> or
    <a>navigate</a> action resulting in the download was initiated, if any.</li>

    <li>Let <var>resource origin</var> be the [=concept/origin=] of the URL of the
    resource being downloaded, unless that URL's [=url/scheme=] component is <code>data</code>,
    in which case let <var>resource origin</var> be
    the same as the <var>interface origin</var>, if any.</li>

    <li>If there is no <var>interface origin</var>, then let <var>trusted
    operation</var> be true. Otherwise, let <var>trusted operation</var> be true if
    <var>resource origin</var> is the <a>same origin</a> as <var>interface origin</var>,
    and false otherwise.</li>

    <li>If <var>trusted operation</var> is true and the resource has a <a http-header><code>Content-Disposition</code></a> header and that header includes file
    name information, then let <var>filename</var> have the value specified by the header,
    and jump to the step labeled <i>sanitize</i> below. [[!RFC6266]]</li>

    <li>If the download was not initiated from a <a>hyperlink</a> created by an <{a}> or <{area}>
    element, or if the element of the <a>hyperlink</a> from which it was initiated did not have a
    <{links/download}> attribute when the download was initiated, or if there was such an
    attribute but its value when the download was initiated was the empty string, then jump to
    the step labeled <i>no proposed file name</i>.</li>

    <li>Let <var>proposed filename</var> have the value of the <{links/download}> attribute of the
    element of the <a>hyperlink</a> that initiated the download at the time the download was
    initiated.</li>

    <li>If <var>trusted operation</var> is true, let <var>filename</var> have the value of
    <var>proposed filename</var>, and jump to the step labeled <i>sanitize</i> below.</li>

    <li>If the resource has a <a http-header><code>Content-Disposition</code></a> header and that
    header specifies the <code>attachment</code> disposition type, let <var>filename</var> have
    the value of <var>proposed filename</var>, and jump to the step labeled <i>sanitize</i>
    below. [[!RFC6266]]</li>

    <li><i>No proposed file name</i>: If <var>trusted operation</var> is true, or if the
    user indicated a preference for having the resource in question downloaded, let
    <var>filename</var> have a value derived from the [=url/URL=] of the resource in a
    user-agent-defined manner, and jump to the step labeled <i>sanitize</i> below.</li>

    <li>
      Act in a user-agent-defined manner to safeguard the user from a potentially hostile
      cross-origin download. If the download is not to be aborted, then let <var>filename</var> be
      set to the user's preferred file name or to a file name selected by the user agent, and jump
      to the step labeled <i>sanitize</i> below.

      <div class="warning">
        If the algorithm reaches this step, then a download was begun from a different origin than
        the resource being downloaded, and the origin did not mark the file as suitable for
        downloading, and the download was not initiated by the user. This could be because a
        <{links/download}> attribute was used to trigger the download, or because the resource in
        question is not of a type that the user agent supports.

        This could be dangerous, because, for instance, a hostile server could be trying to get a
        user to unknowingly download private information and then re-upload it to the hostile
        server, by tricking the user into thinking the data is from the hostile server.

        Thus, it is in the user's interests that the user be somehow notified that the resource in
        question comes from quite a different source, and to prevent confusion, any suggested file
        name from the potentially hostile <var>interface origin</var> should be ignored.

      </div>

    </li>

    <li><i>Sanitize</i>: Optionally, allow the user to influence <var>filename</var>. For
    example, a user agent could prompt the user for a file name, potentially providing the value of
    <var>filename</var> as determined above as a default value.</li>

    <li>

    Adjust <var>filename</var> to be suitable for the local file system.

    <p class="example">
      For example, this could involve removing characters that are not legal in
      file names, or trimming leading and trailing white space.
    </p>

    </li>

    <li>If the platform conventions do not in any way use <a>extensions</a> to determine the types
    of file on the file system, then return <var>filename</var> as the file name and abort these steps.</li>

    <li>Let <var>claimed type</var> be the type given by the resource's
    <a>Content-Type metadata</a>, if any is known. Let <var>named type</var> be the type given by
    <var>filename</var>'s <a>extension</a>, if any is known. For the purposes of this step, a
    <i>type</i> is a mapping of a <a>MIME type</a> to an <a>extension</a>.</li>

    <li>If <var>named type</var> is consistent with the user's preferences (e.g., because
    the value of <var>filename</var> was determined by prompting the user), then return
    <var>filename</var> as the file name and abort these steps.</li>

    <li>If <var>claimed type</var> and <var>named type</var> are the same type (i.e., the type
    given by the resource's <a>Content-Type metadata</a> is consistent with the type given by
    <var>filename</var>'s <a>extension</a>), then return <var>filename</var> as the file
    name and abort these steps.</li>

    <li>

    If the <var>claimed type</var> is known, then alter <var>filename</var> to add an
    <a>extension</a> corresponding to <var>claimed type</var>.

    Otherwise, if <var>named type</var> is known to be potentially dangerous (e.g., it
    will be treated by the platform conventions as a native executable, shell script, HTML
    application, or executable-macro-capable document) then optionally alter <var>filename</var>
    to add a known-safe <a>extension</a> (e.g., "<code>.txt</code>").

    <p class="note">
      This last step would make it impossible to download executables, which might not be
      desirable. As always, implementors are forced to balance security and usability in
      this matter.
    </p>

    </li>

    <li>Return <var>filename</var> as the file name.</li>

  </ol>

  For the purposes of this algorithm, a file <dfn>extension</dfn>
  consists of any part of the file name that platform conventions dictate will be used for
  identifying the type of the file. For example, many operating systems use the part of the file
  name following the last dot ("<code>.</code>") in the file name to determine the type of
  the file, and from that the manner in which the file is to be opened or executed.

  User agents should ignore any directory or path information provided by the resource itself,
  its [=url/URL=], and any <{links/download}> attribute, in
  deciding where to store the resulting file in the user's file system.

<h5 id="sec-hyperlink-auditing"><dfn>Hyperlink auditing</dfn></h5>

  If a <a>hyperlink</a> created by an <{a}> or <{area}> element has a <{links/ping}> attribute whose <{links/href}> attribute can be <a>parsed</a>
  relative to the element's <a>node document</a> without failure, and the user follows the hyperlink,
  then the user agent must take the <{links/ping}> attribute's value, <a lt="split a string on spaces">split that string on spaces</a>,
  parse each resulting token relative to the element's node document,
  then run these steps for each <a>resulting URL record</a> ping URL (ignoring tokens that fail to parse):

  * If <var>ping URL</var>'s <a>scheme</a> is not an <a>HTTP(S) scheme</a>, then return.
  * Optionally, return
    (for example the user agent may ignore any or all ping URLs in accordance with the user's express preferences).
  * Let <var>request</var> be a new <a>request</a>, whose <a for="/">URL</a> is <var>ping URL</var>, <a for="/">method</a> is post, <a for="request">body</a> is ping,
    <a>client</a> is the <a>environment settings object</a> of the <a>document</a> containing the
    <a>hyperlink</a>, <a>destination</a> is the empty string, <a>credentials mode</a> is include,
    <a for>referrer</a> is "no-referrer", and whose <a>use-URL-credentials flag</a> is set.
  * Let <var>target URL</var> be the <a>resulting URL string</a> obtained from <a>parsing</a> the value of the element's
    <{links/href}> attribute, and then:

    <dl class="switch">
    <dt>If the <a for="/">URL</a> of the <a>document</a> object containing the hyperlink being audited and the <var>ping URL</var> have the <a>same origin</a></dt>
    <dt>Or if the origins are different but the <a for="document">HTTPS state</a> of the <a>document</a> containing the hyperlink being audited is
    "none"</dt>
    <dd><var>request</var> must include a <a>ping-from</a> header with the <a for="/">URL</a> of the document containing the hyperlink as its value,
     and a <a>ping-to</a> HTTP header with the <var>target URL</var> as its value.</dd>
    <dt>Otherwise</dt>
    <dd><var>request</var> must include a <a>ping-to</a> HTTP header with <var>target URL</var> as its value.
    Note: <var>request</var> does not include a <a>ping-from</a> header.</dd>
    </dl>

  * <a>Fetch</a> <var>request</var>.

  This may be done <a>in parallel</a> with the primary fetch, and is independent of the result of that fetch.

  User agents should allow the user to alter this behavior.
  For example, in conjunction with a setting that disables the sending of HTTP <a>referrer</a> (sic) headers.
  Based on the user's preferences, user agents may <a>ignore</a> the <{links/ping}> attribute completely,
  or selectively ignore URLs (for example third party URLs); this is explicitly accounted for in the steps above.

  User agents must ignore any entity bodies returned in the responses.
  User agents may close the connection prematurely once they start receiving a response body.

  When the <{links/ping}> attribute is present, user agents should make it clear to the user
  that following the hyperlink will also cause secondary requests to be sent in the background.

  <div class="example">
  For example, a user agent could visually display the host names of the target ping URLs, and the hyperlink's actual URL,
  in a tooltip.
  </div>

    The functions of the <{links/ping}> attribute such as tracking which links are most popular,
    or allowing advertisers to track click-through rates, can be achieved with HTTP redirects,
    Javascript analytic software, and the like.

    Nevertheless authors should use the <{links/ping}> attribute for hyperlink auditing,
    as it provides several advantages, in particular to give users control over their privacy.

    * Because the final target URL is in the link,
        the user has more certainty about where they will navigate to.
    * User agents, or extensions, could reliably inform the user about tracking notifications,
        and allow the user to disable them on a case-by-case basis.
    * It optimizes the use of available bandwidth, and the target page loads faster.

  <p class="warning">Note that currently no browser is known to offer the user an interface
  to manage their privacy or even learn when hyperlink auditing is taking place.
  So unless users have extensions to do this, the privacy benefits are still hypothetical.</p>

<h4 id="sec-link-types"><dfn lt="allowed keywords and their meanings|link types|link type|html link types">Link types</dfn></h4>

  The following table summarizes the link types that are defined by this specification, by their
  corresponding keywords. This table is non-normative; the actual definitions for the link types
  are given in the next few sections.

  In this section, the term <i>referenced document</i> refers to the resource identified by the
  element representing the link, and the term <i>current document</i> refers to the resource within
  which the element representing the link finds itself.

  To determine which link types apply to a <{link}>, <{a}>, or <{area}> element, the element's
  <{links/rel}> attribute must be <a lt="split a string on spaces">split on spaces</a>. The
  resulting tokens are the keywords for the link types that apply to that element.

  Except where otherwise specified, a keyword must not be specified more than once per <{link/rel}>
  attribute.

  Some of the sections that follow the table below list synonyms for certain keywords. The indicated
  synonyms are to be handled as specified by user agents, but must not be used in documents (for
  example, the keyword "<code>copyright</code>").

  Keywords are always <a>ASCII case-insensitive</a>, and must be compared as such.

  <p class="example">So <code>rel="next"</code> is the same as <code>rel="NEXT"</code>.</p>

  Keywords that are <dfn>body-ok</dfn> affect whether <{link}> elements are
  <a>allowed in the body</a>. The <a>body-ok</a> keywords defined by this specification are
    <{link/dns-prefetch}>,
    <{link/preconnect}>,
    <{link/prefetch}>,
    <{link/preload}>,
    <{link/prerender}>, and
    <{link/stylesheet}>.

  <a>Other applicable specifications</a> may define <span>body-ok</span> keywords.

  <table>
    <thead>
    <tr>
      <th rowspan="2">Link type</th>
      <th colspan="2">Effect on...</th>
      <th rowspan="2"><a>body-ok</a></th>
      <th rowspan="2">Brief description</th>
    </tr>
    <tr>
      <th><code>link</code></th>
      <th><{a}> and <{area}></th>
    </tr>
    </thead>
    <tbody>

    <tr>
      <td><{link/alternate}></td>
      <td><a>hyperlink</a></td>
      <td><a>hyperlink</a></td>
      <td class="no"> · </td>
      <td>Gives alternate representations of the current document.</td>
    </tr>

    <tr>
      <td><{link/author}></td>
      <td><a>hyperlink</a></td>
      <td><a>hyperlink</a></td>
      <td class="no"> · </td>
      <td>Gives a link to the author of the current document or article.</td>
    </tr>

    <tr>
      <td><{link/bookmark}></td>
      <td><em>not allowed</em></td>
      <td><a>hyperlink</a></td>
      <td class="no"> · </td>
      <td>Gives the permalink for the nearest ancestor section.</td>
    </tr>

    <tr>
      <td><{link/canonical}></td>
      <td><em>not allowed</em></td>
      <td><a>hyperlink</a></td>
      <td class="no"> · </td>
      <td>Gives the preferred URL for the current document.</td>
    </tr>

    <tr>
      <td><{link/dns-prefetch}></td>
      <td><em>not allowed</em></td>
      <td><a>hyperlink</a></td>
      <td class="yes"> Yes </td>
      <td>Gives the origin for resources so the User Agent can resolve it as early as possible.</td>
    </tr>

    <tr>
      <td><{link/external}></td>
      <td><em>not allowed</em></td>
      <td>Annotation</td>
      <td class="no"> · </td>
      <td>Indicates that the referenced document is not part of the same site as the current document.</td>
    </tr>

    <tr>
      <td><{link/help}></td>
      <td><a>hyperlink</a></td>
      <td><a>hyperlink</a></td>
      <td class="no"> · </td>
      <td>Provides a link to context-sensitive help.</td>
    </tr>

    <tr>
      <td><{link/icon}></td>
      <td><a>External Resource</a></td>
      <td><em>not allowed</em></td>
      <td class="no"> · </td>
      <td>Imports an icon to represent the current document.</td>
    </tr>

    <tr>
      <td><{link/license}></td>
      <td><a>hyperlink</a></td>
      <td><a>hyperlink</a></td>
      <td class="no"> · </td>
      <td>Indicates that the main content of the current document is covered by the copyright license described by the referenced document.</td>
    </tr>

    <tr>
      <td><{link/next}></td>
      <td><a>hyperlink</a></td>
      <td><a>hyperlink</a></td>
      <td class="no"> · </td>
      <td>Indicates that the current document is a part of a series, and that the next document in the series is the referenced document.</td>
    </tr>

    <tr>
      <td><{link/nofollow}></td>
      <td><em>not allowed</em></td>
      <td><a>Annotation</a></td>
      <td class="no"> · </td>
      <td>Indicates that the current document's original author or publisher does not endorse the referenced document.</td>
    </tr>

    <tr>
      <td><{link/noopener}></td>
      <td><em>not allowed</em></td>
      <td><a>Annotation</a></td>
      <td class="no"> · </td>
      <td>Requires that any <a>browsing context</a> created by following the hyperlink to [=disowned its opener|disown its opener=].</td>
    </tr>

    <tr>
      <td><{link/noreferrer}></td>
      <td><em>not allowed</em></td>
      <td><a>Annotation</a></td>
      <td class="no"> · </td>
      <td>Requires that the user agent not send an HTTP <a http-header><code>Referer</code></a> (sic) header if the user follows the hyperlink.</td>
    </tr>

    <tr>
      <td><{link/preconnect}></td>
      <td><a>External Resource</a></td>
      <td><em>not allowed</em></td>
      <td class="yes"> Yes </td>
      <td>Specifies that the target resource should be preemptively cached and cache the target resource as it is likely to be required for a followup <a>navigation</a>.</td>
    </tr>

    <tr>
      <td><{link/prefetch}></td>
      <td><a>External Resource</a></td>
      <td><em>not allowed</em></td>
      <td class="yes"> Yes </td>
      <td>Specifies that the target resource should be preemptively cached and cache the target resource as it is likely to be required for a followup <a>navigation</a>.</td>
    </tr>

    <tr>
      <td><{link/preload}></td>
      <td><a>External Resource</a></td>
      <td><em>not allowed</em></td>
      <td class="yes"> Yes </td>
      <td>Specifies that the user agent must preemptively <a>fetch</a> and cache the target resource for current <a>navigation</a> according to the <a>potential destination</a> given by the <{link/as}> attribute (and the <a>priority</a> associated with the <a>corresponding</a> <a>destination</a>).</td>
    </tr>

    <tr>
      <td><{link/prerender}></td>
      <td><a>External Resource</a></td>
      <td><em>not allowed</em></td>
      <td class="yes"> Yes </td>
      <td>Specifies that the target resource should be preemptively cached and cache the target resource as it is likely to be required for a followup <a>navigation</a>.</td>
    </tr>

    <tr>
      <td><{link/prev}></td>
      <td><a>hyperlink</a></td>
      <td><a>hyperlink</a></td>
      <td class="no"> · </td>
      <td>Indicates that the current document is a part of a series, and that the previous document in the series is the referenced document.</td>
    </tr>

    <tr>
      <td><{link/search}></td>
      <td><a>hyperlink</a></td>
      <td><a>hyperlink</a></td>
      <td class="no"> · </td>
      <td>Gives a link to a resource that can be used to search through the current document and its related pages.</td>
    </tr>

    <tr>
      <td><{link/stylesheet}></td>
      <td><a>External Resource</a></td>
      <td><em>not allowed</em></td>
      <td class="yes"> Yes </td>
      <td>Imports a stylesheet.</td>
    </tr>

    <tr>
      <td><{link/tag}></td>
      <td><em>not allowed</em></td>
      <td><a>hyperlink</a></td>
      <td class="no"> · </td>
      <td>Gives a tag (identified by the given address) that applies to the current document.</td>
    </tr>

    </tbody>
  </table>

<h5 id="link-type-alternate">Link type "<dfn element-state for="link"><code>alternate</code></dfn>"</h5>

  The <{link/alternate}> keyword may be used with <{link}>, <{a}>, and <{area}> elements.

  The meaning of this keyword depends on the values of the other attributes.

  <dl class="switch">

    <dt>If the element is a <{link}> element and the <{link/rel}>
    attribute also contains the keyword <{link/stylesheet}></dt>

    <dd>

    The <{link/alternate}> keyword modifies the meaning of the <{link/stylesheet}> keyword in the way described for that keyword. The
    <{link/alternate}> keyword does not create a link of its own.

    <div class="example">
      A document does not need to have a single style sheet. It can have a default style and any
      number of alternatives for the reader to choose from. In the following example, a set of
      <{link}> elements provide some alternate style sheets:

      <xmp highlight="html">
        <!-- a persistent style sheet -->
        <link rel="stylesheet" href="default.css">

        <!-- some alternate style sheets -->
        <link rel="alternate stylesheet" href="contrast.css" title="High contrast">
        <link rel="alternate stylesheet" href="big.css" title="Big fonts">
        <link rel="alternate stylesheet" href="wide.css" title="Wide screen">
      </xmp>

      <p class="note">
        How the user can select the alternate style sheets will depend on the browser. Not all
        browsers offer a user interface for selecting style sheets.
      </p>
    </div>

    </dd>

    <dt>If the <{link/alternate}> keyword is used with the <code>type</code> attribute set to the value <code>application/rss+xml</code> or the value <code>application/atom+xml</code></dt>

    <dd>

    The keyword creates a <a>hyperlink</a> referencing a syndication feed (though not
    necessarily syndicating exactly the same content as the current page).

    The first <{link}> or <{a}> element in the document (in <a>tree order</a>) with the
    <{link/alternate}> keyword used with the <code>type</code> attribute set to the value
    <code>application/rss+xml</code> or the value <code>application/atom+xml</code>
    must be treated as the default syndication feed for the purposes of feed autodiscovery.

    <div class="example">
      The following <{link}> element gives the syndication feed for the current page:

      <xmp highlight="html">
        <link rel="alternate" type="application/atom+xml" href="data.xml">
      </xmp>

      The following extract offers various different syndication feeds:

      <xmp highlight="html">
        <p>You can access the planets database using Atom feeds:</p>
        <ul>
          <li><a href="recently-visited-planets.xml" rel="alternate" type="application/atom+xml">Recently Visited Planets</a></li>
          <li><a href="known-bad-planets.xml" rel="alternate" type="application/atom+xml">Known Bad Planets</a></li>
          <li><a href="unexplored-planets.xml" rel="alternate" type="application/atom+xml">Unexplored Planets</a></li>
        </ul>
      </xmp>
    </div>

    </dd>

    <dt>Otherwise</dt>

    <dd>

    The keyword creates a <a>hyperlink</a> referencing an alternate representation of the
    current document.

    The nature of the referenced document is given by the <code>hreflang</code>,
    and <code>type</code> attributes.

    If the <{link/alternate}> keyword is used with the <code>hreflang</code> attribute, and that
    attribute's value differs from the <a>document element</a>'s <a>language</a>, it indicates
    that the referenced document is a translation.

    If the <{link/alternate}> keyword is used with the <code>type</code> attribute, it indicates
    that the referenced document is a reformulation of the current document in the specified
    format.

    The <code>hreflang</code> and <code>type</code> attributes can be combined when specified
    with the <{link/alternate}> keyword.

    <div class="example">
      The following example shows how you can specify versions of the page that use alternative
      formats, are aimed at other languages, and that are intended for other media:

      <xmp highlight="html">
        <link rel="alternate" href="/en/html" hreflang="en" type="text/html" title="English HTML">
        <link rel="alternate" href="/fr/html" hreflang="fr" type="text/html" title="French HTML">
        <link rel="alternate" href="/en/html/print" hreflang="en" type="text/html" media="print" title="English HTML (for printing)">
        <link rel="alternate" href="/fr/html/print" hreflang="fr" type="text/html" media="print" title="French HTML (for printing)">
        <link rel="alternate" href="/en/pdf" hreflang="en" type="application/pdf" title="English PDF">
        <link rel="alternate" href="/fr/pdf" hreflang="fr" type="application/pdf" title="French PDF">
      </xmp>

    </div>

    This relationship is transitive — that is, if a document links to two other documents
    with the link type "<{link/alternate}>", then, in addition to implying
    that those documents are alternative representations of the first document, it is also implying
    that those two documents are alternative representations of each other.

    </dd>

  </dl>

<h5 id="link-type-author">Link type "<dfn element-state for="link"><code>author</code></dfn>"</h5>

  The <{link/author}> keyword may be used with <{link}>, <{a}>, and <{area}> elements.
  This keyword creates a <a>hyperlink</a>.

  For <{a}> and <{area}> elements, the <{link/author}> keyword indicates that the referenced
  document provides further information about the author of the nearest <{article}> element
  ancestor of the element defining the hyperlink, if there is one, or of the page as a whole,
  otherwise.

  For <{link}> elements, the <{link/author}> keyword indicates that the referenced document
  provides further information about the author for the page as a whole.

  <p class="note">
    The "referenced document" can be, and often is, a <code>mailto:</code> URL giving the e-mail address of the author. [[RFC6068]]
  </p>

  <strong>Synonyms</strong>: For historical reasons, user agents must also treat <{link}>, <{a}>,
  and <{area}> elements that have a <{links/rev}> attribute with the value "<code>made</code>" as
  having the <{link/author}> keyword specified as a link relationship.

<h5 id="link-type-bookmark">Link type "<dfn element-state for="link"><code>bookmark</code></dfn>"</h5>

  The <{link/bookmark}> keyword may be used with <{a}> and
  <{area}> elements. This keyword creates a <a>hyperlink</a>.

  The <{link/bookmark}> keyword gives a permalink for the nearest
  ancestor <{article}> element of the linking element in question, or of <a lt="associate section">the section the linking element is most closely associated with</a>, if
  there are no ancestor <{article}> elements.

  <div class="example">
    The following snippet has three permalinks. A user agent could determine which permalink
    applies to which part of the spec by looking at where the permalinks are given.

    <xmp highlight="html">
      <body>
        <h1>Example of permalinks</h1>
        <div id="a">
          <h2>First example</h2>
          <p><a href="a.html" rel="bookmark">This permalink applies to only the content from the first h2 to the second h2</a>. The div isn't exactly that section, but it roughly corresponds to it.</p>
        </div>
        <h2>Second example</h2>
        <article id="b">
          <p><a href="b.html" rel="bookmark">This permalink applies to the outer article element</a> (which could be, e.g., a blog post).</p>
          <article id="c">
            <p><a href="c.html" rel="bookmark">This permalink applies to the inner article element</a> (which could be, e.g., a blog comment).</p>
          </article>
        </article>
      </body>
    </xmp>
  </div>

<h5 id="link-type-canonical">Link type "<dfn element-state for="link"><code>canonical</code></dfn>"</h5>

  The <{link/canonical}> keyword may be used with the <{link}> element.
  This keyword creates a <a>hyperlink</a>

  The <{link/canonical}> keyword indicates that the URL given by the <{links/href}> attribute
  is the preferred URL for the current document. Indicating the preferred URL helps search engines
  reduce duplicate content, as described in more detail in The Canonical Link Relation specification [[!rfc6596]].

<h5 id="link-type-dns-prefetch">Link type "<dfn element-state for="link"><code>dns-prefetch</code></dfn>"</h5>

The <{link/dns-prefetch}> keyword may be used with <{link}>.This keyword is <a>body-ok</a>.

The <{link/dns-prefetch}> keyword is used to indicate an origin that will be used to fetch
required resources, and that the user agent SHOULD resolve as early as possible.

See [[resource-hints]] for full definition.


<h5 id="link-type-external">Link type "<dfn element-state for="link"><code>external</code></dfn>"</h5>

  The <{link/external}> keyword may be used with <{a}>, and <{area}> elements. This keyword
  creates a <a>hyperlink</a>. The <{link/external}> keyword indicates that the referenced document
  is not part of the same site as the current document. It is informational, and requires no
  specific browser behaviour.

<h5 id="link-type-help">Link type "<dfn element-state for="link"><code>help</code></dfn>"</h5>

  The <{link/help}> keyword may be used with <{link}>, <{a}>, and <{area}> elements.
  This keyword creates a <a>hyperlink</a>.

  For <{a}> and <{area}> elements, the <{link/help}> keyword indicates that the referenced
  document provides further help information for the parent of the element defining the
  <a>hyperlink</a>, and its children.

  <div class="example">
    In the following example, the form control has associated context-sensitive help. The user
    agent could use this information, for example, displaying the referenced document if the user
    presses the "Help" or "F1" key.

    <xmp highlight="html">
      <label>
        Topic:
        <input name="topic">
        <a href="help/topic.html" rel="help">(Help)</a>
      </label>
    </xmp>

  </div>

  For <{link}> elements, the <{link/help}> keyword indicates that
  the referenced document provides help for the page as a whole.

  For <{a}> and <{area}> elements, on some browsers, the <{link/help}> keyword causes the link to use a different cursor.

<h5 id="link-type-icon">Link type "<dfn element-state for="link"><code>icon</code></dfn>"</h5>

  The <{link/icon}> keyword may be used with <{link}> elements.
  This keyword creates an <a>external resource link</a>.

  The specified resource is an icon representing the page or site, and should be used by the user
  agent when representing the page in the user interface.

  Icons could be auditory icons, visual icons, or other kinds of icons. If multiple icons are
  provided, the user agent must select the most appropriate icon according to the
  <code>type</code>, <code>media</code>, and <code>sizes</code> attributes. If there are multiple
  equally appropriate icons, user agents must use the last one declared in <a>tree order</a> at
  the time that the user agent collected the list of icons. If the user agent tries to use an icon
  but that icon is determined, upon closer examination, to in fact be inappropriate (e.g., because
  it uses an unsupported format), then the user agent must try the next-most-appropriate icon as
  determined by the attributes.

  <p class="note">
    User agents are not required to update icons when the list of icons changes, but
    are encouraged to do so.
  </p>

  There is no default type for resources given by the <{link/icon}> keyword. However, for the
  purposes of <a>determining the type of the resource</a>, user agents must expect the resource
  to be an image.

  The <{link/sizes}> keyword represent icon sizes in raw pixels (as opposed to CSS pixels).

  <p class="note">
    An icon that is 50 CSS pixels wide intended for displays with a device pixel density of two
    device pixels per CSS pixel (2x, 192dpi) would have a width of 100 raw pixels. This feature
    does not support indicating that a different resource is to be used for small high-resolution
    icons vs large low-resolution icons (e.g., 50×50 2x vs 100×100 1x).
  </p>

  To parse and process the attribute's value, the user agent must first
  <a lt="split a string on spaces">split the attribute's value on spaces</a>, and must then parse
  each resulting keyword to determine what it represents.

  The <dfn attr-value for="link/sizes"><code>any</code></dfn> keyword represents that the
  resource contains a scalable icon, e.g., as provided by an SVG image.

  Other keywords must be further parsed as follows to determine what they represent:

  <ul>

    <li>If the keyword doesn't contain exactly one U+0078 LATIN SMALL LETTER X or U+0058 LATIN
    CAPITAL LETTER X character, then this keyword doesn't represent anything. Abort these steps for
    that keyword.</li>

    <li>Let <var>width string</var> be the string before the "<code>x</code>" or
    "<code>X</code>".</li>

    <li>Let <var>height string</var> be the string after the "<code>x</code>" or
    "<code>X</code>".</li>

    <li>If either <var>width string</var> or <var>height string</var> start with
    a U+0030 DIGIT ZERO (0) character or contain any characters other than <a>ASCII digits</a>,
    then this keyword doesn't represent anything. Abort these steps for that keyword.</li>

    <li>Apply the <a>rules for parsing non-negative integers</a> to <var>width
    string</var> to obtain <var>width</var>.</li>

    <li>Apply the <a>rules for parsing non-negative integers</a> to <var>height string</var>
    to obtain <var>height</var>.</li>

    <li>The keyword represents that the resource contains a bitmap icon with a width of
    <var>width</var> device pixels and a height of <var>height</var> device pixels.</li>

  </ul>

  The keywords specified on the <code>sizes</code> attribute must not
  represent icon sizes that are not actually available in the linked resource.

  In the absence of a <code>link</code> with the <{link/icon}> keyword, for {{Document}} objects
  obtained over HTTP or HTTPS, user agents may instead run these steps <a>in parallel</a>:

  <ol>
    <li>Let <var>request</var> be a new <a>request</a> whose
    [=url/URL=] is the <a>absolute URL</a> obtained by
    resolving the [=url/URL=] "<code>/favicon.ico</code>" against the document's
    [=Document/URL=], <a>client</a> is the {{Document}}
    object's <code>Window</code> object's <a>environment settings object</a>, <a for="request">type</a> is "<code>image</code>", <a>destination</a> is "<code>subresource</code>",
    <a>synchronous flag</a> is set, <a>credentials
    mode</a> is "<code>include</code>", and whose <a>use-URL-credentials flag</a>
    is set.</li>

    <li>Let <var>response</var> be the result of <a>fetching</a> <var>request</var>.</li>

    <li>Use <var>response</var>'s unsafe response as an icon as if it had been
    declared using the <{link/icon}> keyword.</li>
  </ol>

  <div class="example">
    The following snippet shows the top part of an application with several icons.

    <xmp highlight="html">
      <!DOCTYPE html>
      <html lang="en">
        <head>
          <title>Example App</title>
          <link rel="icon" href="favicon.png" sizes="16x16" type="image/png" >
          <link rel="icon" href="windows.ico" sizes="32x32 48x48" type="image/vnd.microsoft.icon">
          <link rel="icon" href="mac.icns"    sizes="128x128 512x512 8192x8192 32768x32768">
          <link rel="icon" href="favicon.svg" sizes="any" type="image/svg+xml">
        </head>
        <body>
          ...
    </xmp>

  </div>

  For historical reasons, the <{link/icon}> keyword may be preceded by the keyword
  "<code>shortcut</code>". If the "<code>shortcut</code>" keyword is present, the <{link/rel}>
  attribute's entire value must be an <a>ASCII case-insensitive</a> match for the string
  "<code>shortcut&nbsp;icon</code>" (with a single U+0020 SPACE character between the tokens and
  no other [=space characters=]).

<h5 id="link-type-license">Link type "<dfn element-state for="link"><code>license</code></dfn>"</h5>

  The <{link/license}> keyword may be used with <{link}>,
  <{a}>, and <{area}> elements. This keyword creates a <a>hyperlink</a>.

  The <{link/license}> keyword indicates that the referenced document provides the copyright
  license terms under which the main content of the current document is provided.

  This specification defines the main content of a document and content that is not deemed to be
  part of that main content via the <{main}> element. The distinction should be made clear to
  the user.

  <div class="example">
    Consider a photo sharing site. A page on that site might describe and show a photograph,
    and the page might be marked up as follows:

    <xmp highlight="html">
      ...
      <main>
        <figure>
          <img src="/pix/39627052_fd8dcd98b5.jpg">
          <figcaption>My Cats</figcaption>
        </figure>
        <p>One of them has six toes!</p>
        <p><small>This photograph is <a rel="license" href="https://creativecommons.org/licenses/by/4.0/">Creative Commons Licensed (CC BY 4.0)</a></small></p>
      </main>
      <footer>
        <p><small>© copyright Example Pictures. All Rights Reserved.</small></p>
      </footer>
      ...
    </xmp>

    In this case the <{link/license}> applies to just the photo (the primary content of the
    document), not document as a whole, nor the design of the page itself, which is
    covered by the copyright given at the bottom of the document, within the <{footer}>.
    This should be made clear in the text referencing the licensing link, and could also be made
    clearer in the styling (e.g., making the license link prominently positioned near the
    photograph, while having the page copyright in small text at the foot of the page, or adding
    a border to the <{main}> element.)

  </div>

  <strong>Synonyms</strong>: For historical reasons, user agents must also treat the keyword
  "<code>copyright</code>" like the <{link/license}> keyword.

<h5 id="link-type-nofollow">Link type "<dfn element-state for="link"><code>nofollow</code></dfn>"</h5>

  The <{link/nofollow}> keyword may be used with <{a}> and <{area}> elements. This keyword does
  not create a <a>hyperlink</a>, but <a>annotates</a> any other hyperlinks created by the element
  (the implied hyperlink, if no other keywords create one).

  The <{link/nofollow}> keyword indicates that the link is not endorsed by the original author or
  publisher of the page, or that the link to the referenced document was included primarily
  because of a commercial relationship between people affiliated with the two pages.

<h5 id="link-type-noopener">Link type "<dfn element-state for="link"><code>noopener</code></dfn>"</h5>

  The <{link/noopener}> keyword may be used with <{a}> and <{area}> elements. This keyword does
  not create a [=hyperlink=], but [=annotates=] any other hyperlinks created by the element (the
  implied hyperlink, if no other keywords create one).

  The keyword indicates that any newly created [=browsing context=] which results from following
  the [=hyperlink=] will have [=disowned its opener=], which means that its
  {{Window/opener|window.opener}} property will be `null`.

  <h5 id="link-type-noreferrer">Link type "<dfn element-state for="link"><code>noreferrer</code></dfn>"</h5>

  The <{link/noreferrer}> keyword may be used with <{a}> and <{area}> elements. This keyword does
  not create a <a>hyperlink</a>, but <a>annotates</a> any other hyperlinks created by the element
  (the implied hyperlink, if no other keywords create one).

  It indicates that no referrer information is to be leaked when following the link.

  If a user agent follows a link defined by an <{a}> or <{area}> element that has the
  <{link/noreferrer}> keyword, the user agent must set their
  <a>request</a>'s <a>referrer</a> to "<code>no-referrer</code>".

  <div class="note">
    For historical reasons, the <{link/noreferrer}> keyword implies the behavior associated with
    the <{link/noopener}> keyword when present on a hyperlink that
    [=creating a new browsing context|creates=] a new [=browsing context=].

    For example, the following two hyperlinks behave the same:

    <div class="example">
      <xmp highlight="html">
        <a href="..." rel="noreferrer" target="_blank">...</a>

        <a href="..." rel="noreferrer noopener" target="_blank">...</a>
      </xmp>
    </div>
  </div>

<h5 id="link-type-preconnect">Link type "<dfn element-state for="link"><code>preconnect</code></dfn>"</h5>

The <{link/preconnect}> keyword may be used with <{link}>.This keyword is <a>body-ok</a>.

The <{link/preconnect}> keyword is used to initiate an early connection, which includes the DNS lookup, TCP handshake,
  and optional TLS negotiation, allows the user agent to mask the
  high latency costs of establishing a connection.

See [[resource-hints]] for full definition.

<h5 id="link-type-prefetch">Link type "<dfn element-state for="link"><code>prefetch</code></dfn>"</h5>

The <{link/prefetch}> keyword may be used with <{link}>. This keyword creates an <a>external resource link</a>.
This keyword is <a>body-ok</a>.

The <{link/prefetch}> keyword is used to identify a resource that might be required
 by the next navigation, and that the user agent SHOULD fetch,
 such that the user agent can deliver a faster response once the
 resource is requested in the future.

See [[resource-hints]] for full definition.


<h5 id="link-type-preload">Link type "<dfn element-state for="link"><code>preload</code></dfn>"</h5>

  The <{link/preload}> keyword may be used with <{link}>. This keyword creates an <a>external resource link</a>. This keyword is <a>body-ok</a>.

  The <{link/preload}> keyword indicates that the user agent must preemptively fetch and cache the specified resource according to the <a>potential destination</a> given by the <{link/as}> attribute (and the <a>priority</a> associated with the <a>corresponding</a> <a>destination</a>), as it is highly likely that the user will require this resource for current navigation. User agents must implement the processing model of the <{link/preload}> keyword described in the Preload specification. [[!Preload]]

  There is no default type for resources given by the <{link/preload}> keyword.

<h5 id="link-type-prerender">Link type "<dfn element-state for="link"><code>prerender</code></dfn>"</h5>

The <{link/prerender}> keyword may be used with <{link}>. This keyword creates an <a>external resource link</a>.
This keyword is <a>body-ok</a>.

The <{link/prerender}> keyword identifies a resource that might be required
by the next navigation from the link context, and that the user agent ought
 to fetch and execute, such that the user agent can deliver a faster
 response once the resource is requested in the future.

See [[resource-hints]] for full definition.


<h5 id="link-type-search">Link type "<dfn element-state for="link"><code>search</code></dfn>"</h5>

  The <{link/search}> keyword may be used with <{link}>,
  <{a}>, and <{area}> elements. This keyword creates a <a>hyperlink</a>.

  The <{link/search}> keyword indicates that the referenced document
  provides an interface specifically for searching the document and its related resources.

  <p class="note">
    OpenSearch description documents can be used with <{link}> elements and
  the <{link/search}> link type to enable user agents to autodiscover search
  interfaces. [[!OPENSEARCH]]
  </p>

<h5 id="link-type-stylesheet">Link type "<dfn element-state for="link"><code>stylesheet</code></dfn>"</h5>

  The <{link/stylesheet}> keyword may be used with <{link}> elements. This keyword creates an
  <a>external resource link</a> that contributes to the styling processing model. This keyword is
  <a>body-ok</a>.

  The specified resource is a resource that describes how to present the document. Exactly how
  the resource is to be processed depends on the actual type of the resource.

  If the <{link/alternate}> keyword is also specified on the
  <{link}> element, then <dfn lt="an alternative stylesheet|the link is an alternative stylesheet">the link is an alternative stylesheet</dfn>; in this case,
  the <{link/title}> attribute must be specified on the <{link}>
  element, with a non-empty value.

  The default type for resources given by the <{link/stylesheet}> keyword is
  <code>text/css</code>.

    The appropriate times to <a>obtain</a> the resource are:

    * When the <a>external resource link</a> is created on a <{link}> element that is
        already <a>in a <code>Document</code></a>.
    * When the <a>external resource link</a>'s <{link}> element is
        <a for="document">inserted into a document</a>.
    * When the <{link/href}> attribute of the <{link}> element of an
        <a>external resource link</a> that is already <a>in a <code>Document</code></a> is changed.
    * When the <code>crossorigin</code> attribute of the <{link}> element of an
        <a>external resource link</a> that is already <a>in a <code>Document</code></a> is set,
        changed, or removed.
    * When the <code>type</code> attribute of the <{link}> element of an
        <a>external resource link</a> that is already <a>in a <code>Document</code></a> is set or
        changed to a value that does not or no longer matches the <a>Content-Type metadata</a> of
        the previous obtained external resource, if any.
    * When the <code>type</code> attribute of the <{link}> element of an
        <a>external resource link</a> that is already <a>in a <code>Document</code></a> but was
        previously not obtained due to the <code>type</code> attribute specifying an unsupported
        type is set, removed, or changed.
    * When the <a>external resource link</a> changes from being <a>an alternative stylesheet</a> to
        not being one, or vice versa.

    <strong>Quirk</strong>: If the document has been set to <a>quirks mode</a>, has the
    <a>same origin</a> as the [=url/URL=] of the external resource,
    and the <a>Content-Type metadata</a> of the external resource is not a
    supported style sheet type, the user agent must instead assume it to be <code>text/css</code>.

    Once a resource has been <a>obtained</a>, if its <a>Content-Type metadata</a> is <code>text/css</code>, the user
    agent must run these steps:

    1. Let <var>element</var> be the <{link}> element that created the
        <a>external resource link</a>.
    2. If <var>element</var> has an <a spec="cssom">associated CSS style sheet</a>,
        <a spec="cssom" lt="remove a CSS style sheet">remove the CSS style sheet</a> in question.
    3. If <var>element</var> no longer creates an <a>external resource link</a>
        that contributes to the styling processing model, or if, since the resource in question was
        <a>obtained</a>, it has become appropriate to <a>obtain</a> it again (meaning this algorithm
        is about to be invoked again for a newly obtained resource), then abort these steps.
    4. [=Create a CSS style sheet=] with the following properties:
        : [=cssstylesheet/type=]
        :: <code>text/css</code>

        : [=cssstylesheet/location=]
        :: The <a>resulting URL string</a> determined during the <a>obtain</a> algorithm.
            <p class="note">This is before any redirects get applied.</p>

        : [=cssstylesheet/owner node=]
        :: <var>element</var>

        : [=cssstylesheet/media=]
        :: The <{link/media}> attribute of <var>element</var>.
            <p class="note">
              This is a reference to the (possibly absent at this time) attribute, rather than a copy
              of the attribute's current value. The CSSOM specification defines what happens  when the
              attribute is dynamically set, changed, or removed.
            </p>

        : [=cssstylesheet/title=]
        :: The <{link/title}> attribute of <var>element</var>.
            <p class="note">
              This is similarly a reference to the attribute, rather than a copy of the attribute's
              current value.
            </p>

        : [=cssstylesheet/alternate flag=]
        :: Set if <a>the link is an alternative stylesheet</a>; unset otherwise.

        : [=cssstylesheet/origin-clean flag=]
        :: Set if the resource is <a>CORS-same-origin</a>; unset otherwise.

        : [=cssstylesheet/parent CSS style sheet=]
        : [=cssstylesheet/owner CSS rule=]
        :: null

        : [=cssstylesheet/disabled flag=]
        :: Left at its default value.

        : [=cssstylesheet/CSS rules=]
        :: Left uninitialized.

        The CSS <a>environment encoding</a> is the result of running the following steps: [[!CSS-SYNTAX-3]]

        1. If the element has a <code>charset</code> attribute,
            <a lt="getting an encoding">get an encoding</a> from that attribute's value. If that
            succeeds, return the resulting encoding and abort these steps. [[!ENCODING]]
        2. Otherwise, return the <a>document's character encoding</a>. [[!DOM]]

<h5 id="link-type-tag">Link type "<dfn element-state for="link"><code>tag</code></dfn>"</h5>

  The <{link/tag}> keyword may be used with <{a}> and
  <{area}> elements. This keyword creates a <a>hyperlink</a>.

  The <{link/tag}> keyword indicates that the <em>tag</em> that the
  referenced document represents applies to the current document.

  <p class="note">
    Since it indicates that the tag <em>applies to the current document</em>, it would
  be inappropriate to use this keyword in the markup of a <a>tag cloud</a>, which
  lists the popular tags across a set of pages.
  </p>

  <div class="example">
    This document is about some gems. It is <i>tagged</i> with
    "<code>https://en.wikipedia.org/wiki/Gemstone</code>" to unambiguously categorize it as applying
    to the "jewel" kind of gems.

    <xmp highlight="html">
      <body>
        <p>Recently I managed to dispose of a red gem that had been bothering me. I now have a much nicer blue sapphire.</p>
        <footer>
          Tags: <a rel="tag" href="https://en.wikipedia.org/wiki/Gemstone">Gemstone</a>
        </footer>
      </body>
    </xmp>
  </div>

  <div class="example">
    In this document there are two articles. The "<{link/tag}>" link applies
    to the whole page. It will do so wherever it is placed, including if it is within the
    <{article}> elements).

    <xmp highlight="html">
      <body>
        <article>
          <h1>801: Steinbock</h1>
          <p>The number 801 Gem 4/4 electro-diesel has an ibex and was rebuilt in 2002.</p>
        </article>
        <article>
          <h1>802: Murmeltier</h1>
          <p>The number 802 Gem 4/4 electro-diesel has a marmot and was rebuilt in 2003.</p>
        </article>
        <p class="topic"><a rel="tag" href="https://en.wikipedia.org/wiki/Rhaetian_Railway_Gem_4/4">Gem 4/4</a></p>
      </body>
    </xmp>

  </div>

<h5 id="sequential-link-types">Sequential link types</h5>

  Some documents form part of a sequence of documents.

  A sequence of documents is one where each document can have a <em>previous sibling</em> and a
  <em>next sibling</em>. A document with no previous sibling is the start of its sequence, a
  document with no next sibling is the end of its sequence.

  A document may be part of multiple sequences.

<h6 id="link-type-next">Link type "<dfn element-state for="link"><code>next</code></dfn>"</h6>

  The <{link/next}> keyword may be used with <{link}>,
  <{a}>, and <{area}> elements. This keyword creates a <a>hyperlink</a>.

  The <{link/next}> keyword indicates that the document is part of a
  sequence, and that the link is leading to the document that is the next logical document in the
  sequence.

<h6 id="link-type-prev">Link type "<dfn element-state for="link"><code>prev</code></dfn>"</h6>

  The <{link/prev}> keyword may be used with <{link}>,
  <{a}>, and <{area}> elements. This keyword creates a <a>hyperlink</a>.

  The <{link/prev}> keyword indicates that the document is part of a
  sequence, and that the link is leading to the document that is the previous logical document in
  the sequence.

  <strong>Synonyms</strong>: For historical reasons, user agents must also treat the keyword
  "<code>previous</code>" like the <{link/prev}> keyword.

<h5 id="sec-other-link-types"><dfn>Other link types</dfn></h5>

  <dfn for="link types" lt="extensions to the predefined set of link type|extensions to the predefined set of link types">Extensions to the predefined set of link types</dfn>
  may be registered in the HTML link extensions section of the
  <a>microformats wiki existing-rel-values page</a> [[!MFREL]], or filed as an issue on this specification.

  Proposed extension types should be specified with the following information:

  <dl>

    <dt>Keyword</dt>

    <dd>

    The actual value being defined. The value should not be confusingly similar to any other
    defined value (e.g., differing only in case).

    If the value contains a U+003A COLON character (:), it must also be an <a>absolute URL</a>.

    </dd>

    <dt>Effect on... <{link}></dt>

    <dd>

    One of the following:

    <dl>

      <dt>Not allowed</dt>

      <dd>The keyword must not be specified on <{link}> elements.</dd>

      <dt>Hyperlink</dt>

      <dd>The keyword may be specified on a <{link}> element; it creates a
      <a>hyperlink</a>.</dd>

      <dt>External Resource</dt>

      <dd>The keyword may be specified on a <{link}> element; it creates an <a>external
      resource link</a>.</dd>

    </dl>

    </dd>

    <dt>Effect on... <{a}> and <{area}></dt>

    <dd>

    One of the following:

    <dl>

      <dt>Not allowed</dt>

      <dd>The keyword must not be specified on <{a}> and <{area}> elements.</dd>

      <dt>Hyperlink</dt>

      <dd>The keyword may be specified on <{a}> and <{area}> elements; it creates a
      <a>hyperlink</a>.</dd>

      <dt>External Resource</dt>

      <dd>The keyword may be specified on <{a}> and <{area}> elements; it creates
      an <a>external resource link</a>.</dd>

      <dt>Hyperlink Annotation</dt>

      <dd>The keyword may be specified on <{a}> and <{area}> elements; it <a>annotates</a> other <a>hyperlinks</a>
      created by the element.</dd>

    </dl>

    </dd>

    <dt>Brief description</dt>

    <dd>A short non-normative description of what the keyword's meaning is.</dd>

    <dt>Specification</dt>

    <dd>A link to a more detailed description of the keyword's semantics and requirements. It
    could be another page on the Wiki, or a link to an external page.</dd>

    <dt>Synonyms</dt>

    <dd>A list of other keyword values that have exactly the same processing requirements. Authors
    should not use the values defined to be synonyms, they are only intended to allow user agents to
    support legacy content. Anyone may remove synonyms that are not used in practice; only names that
    need to be processed as synonyms for compatibility with legacy content are to be registered in
    this way.</dd>

    <dt>Status</dt>

    <dd>

    One of the following:

    <dl>

      <dt>Proposed</dt>

      <dd>The keyword has not received wide peer review and approval. Someone has proposed it and is,
      or soon will be, using it.</dd>

      <dt>Ratified</dt>

      <dd>The keyword has received wide peer review and approval. It has a specification that
      unambiguously defines how to handle pages that use the keyword, including when they use it in
      incorrect ways.</dd>

      <dt>Discontinued</dt>

      <dd>The keyword has received wide peer review and it has been found wanting. Existing pages are
      using this keyword, but new pages should avoid it. The "brief description" and "specification"
      entries will give details of what authors should use instead, if anything.</dd>

    </dl>

    If a keyword is found to be redundant with existing values, it should be removed and listed
    as a synonym for the existing value.

    If a keyword is registered in the "proposed" state for a period of a month or more without
    being used or specified, then it may be removed from the registry.

    If a keyword is added with the "proposed" status and found to be redundant with existing
    values, it should be removed and listed as a synonym for the existing value. If a keyword is
    added with the "proposed" status and found to be harmful, then it should be changed to
    "discontinued" status.

    Anyone can change the status at any time, but should only do so in accordance with the
    definitions above.

    </dd>

  </dl>

  Conformance checkers may use the information given on the <a>microformats wiki existing-rel-values page</a> to
  establish if a value is allowed or not: values defined in this
  specification or marked as "proposed" or "ratified" must be accepted
  when used on the elements for which they apply as described in the
  "Effect on..." field, whereas values marked as "discontinued" or
  values not containing a U+003A COLON character but not listed in
  either this specification or on the aforementioned page must be
  reported as invalid. The remaining values must be accepted as valid
  if they are absolute URLs containing US-ASCII characters only and
  rejected otherwise. Conformance checkers may cache this
  information (e.g., for performance reasons or to avoid the use of
  unreliable network connectivity).

  <p class="note">
    Note: Even URL-valued link types are compared
  ASCII-case-insensitively. Validators might choose to warn about
  characters U+0041 (LATIN CAPITAL LETTER A) through
  U+005A (LATIN CAPITAL LETTER Z) (inclusive) in the pre-case-folded
  form of link types that contain a colon.
  </p>

  When an author uses a new type not defined by either this specification or the Wiki page,
  conformance checkers should offer to add the value to the Wiki, with the details described above,
  with the "proposed" status.

  Types defined as extensions in the <a>microformats
  wiki existing-rel-values page</a> with the status "proposed" or "ratified" may be used with the
  <{links/rel}> attribute on <{link}>, <{a}>, and <{area}>
  elements in accordance to the "Effect on..." field. [[!MFREL]]

</section>
