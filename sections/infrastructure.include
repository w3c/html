<section>

<!--

    Infrastructure

  This section produces Chapter 2: Common Infrastructure
  https://w3c.github.io/html/infrastructure.html

  It covers:
  - Terminology
  - How Conformance Requirements are described
  - Case sensitivity and comparing strings
  - Common "micro" syntaxes
  - URLs and Fetching resources, including referrer and nonce attributes
  - Reflection of attributes
  - DOM collections
  - De/serialising to pass structured objects

-->

<h2 id="infrastructure">Common infrastructure</h2>

  <h3 id="infrastructure-terminology">Terminology</h3>

  This specification refers to both HTML and XML attributes and IDL attributes, often in the same
  context. When it is not clear which is being referred to, they are referred to as
  <a>content attributes</a> for HTML and XML attributes, and
  <dfn lt="IDL attribute|IDL attributes">IDL attributes</dfn> for those defined on IDL interfaces.
  Similarly, the term "properties" is used for both JavaScript object properties and CSS properties.
  When these are ambiguous they are qualified as
  <dfn lt="object property|object properties">object properties</dfn> and
  <dfn lt="CSS property|CSS properties">CSS properties</dfn> respectively.

  Generally, when the specification states that a feature applies to
  <a href="#syntax">the HTML syntax</a> or <a href="#xhtml">the XHTML syntax</a>, it also includes
  the other. When a feature specifically only applies to one of the two languages, it is called out
  by explicitly stating that it does not apply to the other format, as in "for HTML, ... (this does
  not apply to XHTML)".

  This specification uses the term <dfn lt="document|documents">document</dfn> to refer to any use
  of HTML, ranging from short static documents to long essays or reports with rich multimedia, as
  well as to fully-fledged interactive applications. The term is used to refer both to {{Document}}
  objects and their descendant DOM trees, and to serialized byte streams using the
  <a href="#syntax">HTML syntax</a> or <a href="#xhtml">XHTML syntax</a>, depending on context.

  In the context of the DOM structures, the terms <dfn export>HTML document</dfn>
  and <a>XML document</a> are used as defined in the DOM specification, and refer specifically to
  two different modes that {{Document}} objects can find themselves in. [[!DOM]] (Such uses are
  always hyperlinked to their definition.)

  In the context of byte streams, the term <a>HTML document</a> refers to resources labeled as
  <code>[[#text-html|text/html]]</code>, and the term <dfn export>XML document</dfn> refers to
  resources labeled with an <a>XML MIME type</a>.

  The term <dfn lt="XHTML document|XHTML documents">XHTML document</dfn> is used to refer to both
  <a>Documents</a> in the <a>XML document</a> mode that contains element nodes in the
  <a>HTML namespace</a>, and byte streams labeled with an <a>XML MIME type</a> that contain
  elements from the <a>HTML namespace</a>, depending on context.

  <hr />

  For simplicity, terms such as <dfn>shown</dfn>, <dfn>displayed</dfn>, and <dfn>visible</dfn>
  might sometimes be used when referring to the way a document is rendered to the user.
  These terms are not meant to imply a visual medium; they must be considered to apply to other
  media in equivalent ways.

  When an algorithm B says to return to another algorithm A, it implies that A called B. Upon
  returning to A, the implementation must continue from where it left off in calling B. Some
  algorithms run <dfn>in parallel</dfn>; this means that the algorithm's subsequent steps are to
  be run, one after another, at the same time as other logic in the specification (e.g., at
  the same time as the <a>event loop</a>). This specification does not define the precise
  mechanism by which this is achieved, be it time-sharing cooperative multitasking, fibers,
  threads, processes, using different hyperthreads, cores, CPUs, machines, etc. By contrast,
  an operation that is to run <dfn>immediately</dfn> must interrupt the currently running task,
  run itself, and then resume the previously running task.

  The term "transparent black" refers to the color with red, green, blue, and alpha channels all
  set to zero.

<h4 id="resources">Resources</h4>

  The specification uses the term <dfn export>supported</dfn> when referring to whether a user
  agent has an implementation capable of decoding the semantics of an external resource. A format
  or type is said to be <i>supported</i> if the implementation can process an external resource
  of that format or type without critical aspects of the resource being ignored. Whether a
  specific resource is <i>supported</i> can depend on what features of the resource's format
  are in use.

  <p class="example">
    For example, a PNG image would be considered to be in a supported format if its pixel data
    could be decoded and rendered, even if, unbeknownst to the implementation, the image also
    contained animation data.
  </p>

  <p class="example">
    An MPEG-4 video file would not be considered to be in a supported format if the compression
    format used was not supported, even if the implementation could determine the dimensions of the
    movie from the file's metadata.
  </p>

  What some specifications, in particular the HTTP specification, refer to as a
  <i>representation</i> is referred to in this specification as a <dfn for="http">resource</dfn>.
  [[!HTTP]]

  The term <dfn lt="mime type|mime types">MIME type</dfn> is used to refer to what is sometimes
  called an <i>Internet media type</i> in protocol literature. The term
  <dfn for="media type|media-type">media type</dfn> in this specification is used to refer to the
  type of media intended for presentation, as used by the CSS specifications. [[!RFC2046]]
  [[!MEDIAQ]]

  A string is a <dfn export>valid MIME type</dfn> if it matches the <code>[=media-type=]</code>
  rule. In particular, a <a>valid MIME type</a> may include MIME type parameters. [[!HTTP]]

  A string is a <dfn export>valid MIME type with no parameters</dfn> if it matches the
  <code>[=media-type=]</code> rule, but does not contain any U+003B SEMICOLON characters (;).
  In other words, if it consists only of a type and subtype,
  with no MIME Type parameters. [[!HTTP]]

  The term <dfn export>HTML MIME type</dfn> is used to refer to the <a>MIME type</a>
  <code>[[#text-html|text/html]]</code>.

  A resource's <dfn lt="critical subresource|critical subresources">critical subresources</dfn> are
  those that the resource needs to have available to be correctly processed. Which resources are
  considered critical or not is defined by the specification that defines the resource's format.

<h4 id="xml">XML compatibility</h4>

  To ease migration from HTML to XHTML, user agents conforming to this specification will place
  elements in HTML in the <code>http://www.w3.org/1999/xhtml</code> namespace, at least for the
  purposes of the DOM and CSS. The term "<dfn lt="html element|html elements">HTML elements</dfn>",
  when used in this specification, refers to any element in that namespace, and thus refers to both
  HTML and XHTML elements.

  Except where otherwise stated, all elements defined or mentioned in this specification are in the
  <a>HTML namespace</a> ("<code>http://www.w3.org/1999/xhtml</code>"), and all attributes defined
  or mentioned in this specification have no namespace.

  The term <dfn export>element type</dfn> is used to refer to the set of elements that have
  a given local name and namespace. For example, <{button}> elements are elements with the element
  type <{button}>, meaning they have the local name "<{button}>" and (implicitly as
  defined above) the <a>HTML namespace</a>.

  Attribute names are said to be <dfn>XML-compatible</dfn> if they match the
  <code>[=xml/Name=]</code> production defined in XML and they contain no U+003A COLON
  characters (:). [[!XML]]

  The term <dfn export>XML MIME type</dfn> is used to refer to the <a>MIME types</a>
  <code>text/xml</code>, <code>application/xml</code>, and any <a>MIME type</a> whose subtype ends
  with the four characters "<code>+xml</code>". [[!RFC7303]]

<h4 id="dom-trees">DOM trees</h4>

  When it is stated that some element or attribute is <dfn export>ignored</dfn>, or treated
  as some other value, or handled as if it was something else, this refers only to the processing
  of the node after it is in the DOM. A user agent must not mutate the DOM in such situations.

  A content attribute is said to <dfn export>change</dfn> value only if its new value is different
  than its previous value; setting an attribute to a value it already has does not change it.

  The term <dfn export>empty</dfn>, when used for an attribute value, {{Text}} node,
  or string  means that the length of the text is zero (i.e., not even containing spaces or
  <a>control characters</a>).

  An element's <dfn export>child text content</dfn> is the concatenation of the <a>data</a>
  of all the {{Text}} nodes that are children of the element (ignoring any other nodes such as
  comments or elements), in <a>tree order</a>.

  A <a lt="insert">node <var>A</var> is inserted</a> into a node <var>B</var> when the
  <a>insertion steps</a> are invoked with <var>A</var> as the argument and
  <var>A</var>'s new parent is <var>B</var>. Similarly,
  a <dfn export>node <var>A</var> is removed</dfn> from a node
  <var>B</var> when the <a>removing steps</a> are invoked with <var>A</var> as the
  <var>removedNode</var> argument and <var>B</var> as the <var>oldParent</var> argument.

  A <dfn for="document" lt="inserted into|inserted into the document|inserted into a document">node
  is inserted into a document</dfn>
  when the <a>insertion steps</a> are invoked with it as the argument and it is now
  <a>in a document tree</a>. Analogously, a
  <dfn for="document" lt="remove an element from a document|removed from a document|removed from the document|removed from">node is removed from a document</dfn>
  when the <a>removing steps</a> are invoked with it as the argument and it is now no longer
  in a <a>document tree</a>.

<h4 id="scripting">Scripting</h4>

  The construction "a <code>Foo</code> object", where <code>Foo</code> is actually an interface,
  is sometimes used instead of the more accurate "an object implementing the interface
  <code>Foo</code>".

  An IDL attribute is said to be <dfn for="values">getting</dfn> when its value is being retrieved
  (e.g., by author script), and is said to be <dfn for="values">setting</dfn> when a new value is
  assigned to it.

  If a DOM object is said to be <dfn export>live</dfn>, then the attributes and methods on
  that object must operate on the actual underlying data, not a snapshot of the data.

  In the contexts of events, the terms <i>fire</i> and <i>dispatch</i> are used as defined in the
  DOM specification:
  <dfn lt="fire|firing|fired|fires|fire a simple event|fires a simple event|fire an event">firing</dfn>
  an event means to create and <a>dispatch</a> it, and
  <dfn lt="dispatch|dispatching|dispatched|dom event dispatch logic|event dispatching">dispatching</dfn>
  an event means to follow the steps that propagate the event through the tree.
  The term <dfn lt="trusted|trusted event">trusted event</dfn> is used to refer to events
  whose {{Event/isTrusted}} attribute is initialized to true. [[!DOM]]

<h4 id="plugins">Plugins</h4>

  The term <dfn id="concept-plugin" lt="plugin">plugin</dfn> refers to a user-agent defined set of
  content handlers that can be used by the user agent. The content handlers can take part in the
  user agent's rendering of a {{Document}} object, but that neither act as
  <a>child browsing contexts</a> of the {{Document}} nor introduce any {{Node}} objects to the
  {{Document}}'s DOM.

  Typically such content handlers are provided by third parties, though a user agent can also
  designate built-in content handlers as <a>plugins</a>.

  A user agent must not consider the types <code>text/plain</code> and
  <code>application/octet-stream</code> as having a registered <a>plugin</a>.

  <p class="example">
    One example of a plugin would be a PDF viewer that is instantiated in a
    <a>browsing context</a> when the user navigates to a PDF file. This would count as a plugin
    regardless of whether the party that implemented the PDF viewer component was the same as
    that which implemented the user agent itself. However, a PDF viewer application that launches
    separate from the user agent (as opposed to using the same interface) is not a plugin by this
    definition.
  </p>

  <p class="note">
    This specification does not define a mechanism for interacting with <a>plugins</a>, as it is
    expected to be user-agent- and platform-specific. Some user agents might opt to support a
    plugin mechanism such as the Netscape Plugin API; others might use remote content converters
    or have built-in support for certain types. Indeed, this specification doesn't require user
    agents to support <a>plugins</a> at all. [[NPAPI]]
  </p>

  A plugin can be <dfn export>secured</dfn> if it honors the semantics of the
  <{iframe/sandbox}> attribute.

  <p class="example">
    For example, a secured plugin would prevent its contents from creating pop-up windows when the
    plugin is instantiated inside a sandboxed <{iframe}>.
  </p>

  <p class="warning">
    Browsers should take extreme care when interacting with external content intended for
    <a>plugins</a>. When third-party software is run with the same privileges as the user agent
    itself, vulnerabilities in the third-party software become as dangerous as if they were
    vulnerabilities of the user agent itself.
  </p>

  Since different users having different sets of <a>plugins</a> provides a fingerprinting vector
  that increases the chances of users being uniquely identified, user agents are encouraged to
  support the exact same set of <a>plugins</a> for each user.
  <a class="fingerprint" href="#fingerprinting-vector"><img height="21" src="images/fingerprint.png" width="15" alt="(This is a fingerprinting vector.)" /></a>

<h4 id="encoding-terminology">Character encodings</h4>

  A <dfn export>character encoding</dfn>, or just <i>encoding</i> where that is not ambiguous,
  is  a defined way to convert between byte streams and Unicode strings, as defined in the
  WHATWG Encoding specification. An <a>encoding</a> has an <dfn export>encoding name</dfn>
  and one or more <dfn export>encoding labels</dfn>, referred to as the encoding's <i>name</i>
  and <i>labels</i> in the Encoding specification. [[!ENCODING]]

  A <dfn export>UTF-16 encoding</dfn> is <a>UTF-16BE</a> or <a>UTF-16LE</a>. [[!ENCODING]]

  An <dfn export>ASCII-compatible encoding</dfn> is any <a>encoding</a> that is not a
  <a>UTF-16 encoding</a>. [[!ENCODING]]

  <p class="note">
    Since support for encodings that are not defined in the WHATWG Encoding specification is
    prohibited, <a>UTF-16 encodings</a> are the only encodings that this specification needs
    to treat as not being <a>ASCII-compatible encodings</a>.
  </p>

  The term <dfn export>code unit</dfn> is used as defined in the Web IDL specification:
  a 16 bit unsigned integer, the smallest atomic component of a <code>DOMString</code>.
  (This is a narrower definition than the one used in Unicode, and is not the same as a
  <i>code point</i>.) [[!WEBIDL]]

  The term <dfn export>Unicode code point</dfn> means a <i>Unicode scalar value</i> where
  possible, and an isolated surrogate code point when not. When a conformance requirement is defined
  in terms of characters or Unicode code points, a pair of <a>code units</a> consisting of a high surrogate
  followed by a low surrogate must be treated as the single code point represented by the surrogate
  pair, but isolated surrogates must each be treated as the single code point with the value of the
  surrogate. [[!UNICODE]]

  In this specification, the term <dfn export>character</dfn>, when not qualified
  as <em>Unicode</em> character, is synonymous with the term <a>Unicode code point</a>.

  The term <dfn export>Unicode character</dfn> is used to mean a <i>Unicode scalar value</i>
  (i.e. any Unicode code point that is not a surrogate code point). [[!UNICODE]]

  The <dfn export>code-unit length</dfn> of a string is the number of <a>code units</a> in
  that string.

  <p class="note">
    This complexity results from the historical decision to define the DOM API in terms of 16 bit
    (UTF-16) <a>code units</a>, rather than in terms of <a>Unicode characters</a>.
  </p>

<h3 id="conformance-requirements">Conformance requirements</h3>

  All diagrams, examples, and notes in this specification are non-normative, as are all sections
  explicitly marked non-normative. Everything else in this specification is normative.

  The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT",
  "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in the normative parts of this document
  are to be interpreted as described in RFC2119. The key word "OPTIONALLY" in the normative parts of
  this document is to be interpreted with the same normative meaning as "MAY" and "OPTIONAL". For
  readability, these words do not appear in all uppercase letters in this specification.
  [[!RFC2119]]

  Requirements phrased in the imperative as part of algorithms (such as "strip any leading space
  characters" or "return false and abort these steps") are to be interpreted with the meaning of
  the key word ("must", "should", "may", etc) used in introducing the algorithm.

  <div class="example">
    For example, were the spec to say:

    <pre>
      To eat an orange, the user must:
      1. Peel the orange.
      2. Separate each slice of the orange.
      3. Eat the orange slices.
    </pre>

    ...it would be equivalent to the following:

    <pre>
      To eat an orange:
      1. The user must peel the orange.
      2. The user must separate each slice of the orange.
      3. The user must eat the orange slices.
    </pre>

    Here the key word is "must".

    The former (imperative) style is generally preferred in this specification for stylistic
    reasons.
  </div>

  Conformance requirements phrased as algorithms or specific steps may be implemented in any
  manner, so long as the end result is equivalent. (In particular, the algorithms defined in this
  specification are intended to be easy to follow, and not intended to be performant.)

<h4 id="conformance-classes">Conformance classes</h4>

  This specification describes the conformance criteria for user agents (relevant
  to implementors) and documents (relevant to authors and authoring tool
  implementors).

  <dfn lt="conforming document|conforming documents">Conforming documents</dfn> are those that comply with all the conformance criteria for
  documents. For readability, some of these conformance requirements are phrased as conformance
  requirements on authors; such requirements are implicitly requirements on documents: by
  definition, all documents are assumed to have had an author. (In some cases, that author may
  itself be a user agent — such user agents are subject to additional rules, as explained
  below.)

  <p class="example">
    For example, if a requirement states that "authors must not use the <code>foobar</code>
    element", it would imply that documents are not allowed to contain elements named
    <code>foobar</code>.
  </p>

  <p class="note impl">
    There is no implied relationship between document conformance requirements and implementation
    conformance requirements. User agents are not free to handle non-conformant documents as they
    please; the processing model described in this specification applies to implementations
    regardless of the conformity of the input documents.
  </p>

  User agents fall into several (overlapping) categories with different conformance requirements.

  : Web browsers and other interactive user agents
  :: Web browsers that support <a href="#xhtml">the XHTML syntax</a> must process elements and attributes from the
      <a>HTML namespace</a> found in XML documents as described in this specification, so that users
      can interact with them, unless the semantics of those elements have been overridden by other
      specifications.

      <p class="example">
        A conforming XHTML processor would, upon finding an XHTML <{script}> element in an
        XML document, execute the script contained in that element. However, if the element is found
        within a transformation expressed in XSLT (assuming the user agent also supports XSLT), then
        the processor would instead treat the <{script}> element as an opaque element that
        forms part of the transform.
      </p>

      Web browsers that support <a href="#syntax">the HTML syntax</a> must process documents labeled with an
      <a>HTML MIME type</a> as described in this specification, so that users can interact with
      them.

      User agents that support scripting must also be conforming implementations of the IDL
      fragments in this specification, as described in the Web IDL specification. [[!WEBIDL]]

      <p class="note">
        Unless explicitly stated, specifications that override the semantics of HTML elements do not
        override the requirements on DOM objects representing those elements. For example, the
        <{script}> element in the example above would still implement the
        {{HTMLScriptElement}} interface.
      </p>

  : Non-interactive presentation user agents
  :: User agents that process HTML and XHTML documents purely to render non-interactive versions
      of them must comply to the same conformance criteria as Web browsers, except that they are
      exempt from requirements regarding user interaction.

      <p class="note">
        Typical examples of non-interactive presentation user agents are printers (static user agents) and
        overhead displays (dynamic user agents). It is expected that most static non-interactive
        presentation user agents will also opt to <a>lack scripting support</a>.
      </p>

      <p class="example">
        A non-interactive but dynamic presentation user agent would still execute scripts, allowing forms
        to be dynamically submitted, and so forth. However, since the concept of "focus" is
        irrelevant when the user cannot interact with the document, the user agent would not need to support
        any of the focus-related DOM APIs.
      </p>

  : <dfn for="rendering" lt="support the suggested default rendering|supporting the suggested default rendering|Visual user agents that support the suggested default rendering">Visual user agents that support the suggested default rendering</dfn>
  :: User agents, whether interactive or not, may be designated (possibly as a user option) as
      <a>supporting the suggested default rendering</a> defined by this specification.

      This is not required. In particular, even user agents that do implement the suggested default
      rendering are encouraged to offer settings that override this default to improve the
      experience for the user, e.g., changing the color contrast, using different focus styles, or
      otherwise making the experience more accessible and usable to the user.

      User agents that are designated as <a>supporting the suggested default rendering</a> must, while so
      designated, implement the rules in [[#rendering]]. That section defines
      the behavior that user agents are <em>expected</em> to implement.

  : <dfn lt="lack scripting support|User agents with no scripting support|do not support scripting">User agents with no scripting support</dfn>
  :: Implementations that do not support scripting (or which have their scripting features disabled
      entirely) are exempt from supporting the events and DOM interfaces mentioned in this
      specification. For the parts of this specification that are defined in terms of an events
      model or in terms of the DOM, such user agents must still act as if events and the DOM were
      supported.

        <p class="note">
          Scripting can form an integral part of an application. Web browsers that do not support
          scripting, or that have scripting disabled, might be unable to fully convey the author's
          intent.
        </p>

  : Conformance checkers
  :: Conformance checkers must verify that a document conforms to the applicable conformance
      criteria described in this specification. Automated conformance checkers are exempt from
      detecting errors that require interpretation of the author's intent (for example, while a
      document is non-conforming if the content of a <{blockquote}> element is not a quote,
      conformance checkers running without the input of human judgement do not have to check that
      <{blockquote}> elements only contain quoted material).

      Conformance checkers must check that the input document conforms when parsed without a
      <a>browsing context</a> (meaning that no scripts are run, and that the parser's
      <a>scripting flag</a> is disabled), and should also check that the input document conforms
      when parsed with a <a>browsing context</a> in which scripts execute, and that the scripts
      never cause non-conforming states to occur other than transiently during script execution
      itself. (This is only a "SHOULD" and not a "MUST" requirement because it has been proven to be
      impossible. [[COMPUTABLE]])

      The term "HTML validator" can be used to refer to a conformance checker that itself conforms
      to the applicable requirements of this specification.

      <div class="note">
        XML DTDs cannot express all the conformance requirements of this specification. Therefore, a
        validating XML processor and a DTD cannot constitute a conformance checker. Also, since
        neither of the two authoring formats defined in this specification are applications of SGML,
        a validating SGML system cannot constitute a conformance checker either.

        To put it another way, there are three types of conformance criteria:

        1. Criteria that can be expressed in a DTD.
        2. Criteria that cannot be expressed by a DTD, but can still be checked by a machine.
        3. Criteria that can only be checked by a human.

        A conformance checker must check for the first two. A simple DTD-based validator only checks
        for the first class of errors and is therefore not a conforming conformance checker
        according to this specification.
      </div>

  : Data mining tools
  :: Applications and tools that process HTML and XHTML documents for reasons other than to either
      render the documents or check them for conformance should act in accordance with the semantics
      of the documents that they process.

      <p class="example">
        A tool that generates <a lt="outline">document outlines</a> but increases the nesting level for each
        paragraph and does not increase the nesting level for each section would not be conforming.
      </p>

  : Authoring tools and markup generators
  :: Authoring tools and markup generators must generate <a lt="conforming document">conforming documents</a>. Conformance
      criteria that apply to authors also apply to authoring tools, where appropriate.

      Authoring tools are exempt from the strict requirements of using elements only for their
      specified purpose, but only to the extent that authoring tools are not yet able to determine
      author intent. However, authoring tools must not automatically misuse elements or encourage
      their users to do so.

      <p class="example">
        For example, it is not conforming to use an <{address}> element for arbitrary
        contact information; that element can only be used for marking up contact information for
        the author of the document or section. However, since an authoring tool is likely unable to
        determine the difference, an authoring tool is exempt from that requirement. This does not
        mean, though, that authoring tools can use <{address}> elements for any block of
        italics text (for instance); it just means that the authoring tool doesn't have to verify,
        if a user inserts contact information for a section or something else.
      </p>

      <p class="note">
        In terms of conformance checking, an editor has to output documents that conform to the same
        extent that a conformance checker will verify.
      </p>

      When an authoring tool is used to edit a non-conforming document, it may preserve the
      conformance errors in sections of the document that were not edited during the editing session
      (i.e., an editing tool is allowed to round-trip erroneous content). However, an authoring tool
      must not claim that the output is conformant if errors have been so preserved.

      Authoring tools are expected to come in two broad varieties: tools that work from structure
      or semantic data, and tools that work on a What-You-See-Is-What-You-Get media-specific editing
      basis (WYSIWYG).

      The former is the preferred mechanism for tools that author HTML, since the structure in the
      source information can be used to make informed choices regarding which HTML elements and
      attributes are most appropriate.

      However, WYSIWYG tools are legitimate. WYSIWYG tools should use elements they know are
      appropriate, and should not use elements that they do not know to be appropriate. This might
      in certain extreme cases mean limiting the use of flow elements to just a few elements, like
      <{div}>, <{b}>, <{i}>, and <{span}> and making liberal use of the <{global/style}>
      attribute.

      All authoring tools, whether WYSIWYG or not, should make a best effort attempt at enabling
      users to create well-structured, semantically rich, media-independent content.

  <dfn lt="hardware limitations|practical concerns"></dfn>User agents may impose implementation-specific limits on otherwise unconstrained inputs, e.g., to
  prevent denial of service attacks, to guard against running out of memory, or to work around
  platform-specific limitations.
  <a class="fingerprint" href="#fingerprinting-vector"><img height="21" src="images/fingerprint.png" width="15" alt="(This is a fingerprinting vector.)" /></a>

  For compatibility with existing content and prior specifications, this specification describes
  two authoring formats: one based on XML (referred to as <a href="#xhtml">the XHTML syntax</a>), and one using a
  <a href="#writing-html-documents">custom format</a> inspired by SGML (referred to as <a href="#syntax">the HTML syntax</a>). Implementations
  must support at least one of these two formats, although supporting both is encouraged.

  Some conformance requirements are phrased as requirements on elements, attributes, methods or
  objects. Such requirements fall into two categories: those describing content model restrictions,
  and those describing implementation behavior. Those in the former category are requirements on
  documents and authoring tools. Those in the second category are requirements on user agents.
  Similarly, some conformance requirements are phrased as requirements on authors; such requirements
  are to be interpreted as conformance requirements on the documents that authors produce. (In other
  words, this specification does not distinguish between conformance criteria on authors and
  conformance criteria on documents.)

<h4 id="conformance-requirements-dependencies">Dependencies</h4>

  This specification relies on several other underlying specifications.

  : Unicode and Encoding
  :: The Unicode character set is used to represent textual data, and the Encoding specification defines
      requirements around <a>character encodings</a>. [[!UNICODE]]

      <p class="note">This specification [=character encoding|introduces terminology=] based on the
      terms defined in those specifications, as described earlier.</p>

      The following terms are used as defined in the Encoding specification: [[!ENCODING]]

      <ul class="brief">
        * <dfn export>Getting an encoding</dfn>
        * <dfn lt="getting an output encoding">Get an output encoding</dfn>
        * The generic <a for="/">decode</a> algorithm which takes a byte stream and an encoding and returns
            a character stream
        * The <dfn export>UTF-8 decode</dfn> algorithm which takes a byte stream and returns a character
            stream, additionally stripping one leading UTF-8 Byte Order Mark (BOM), if any
        * The <dfn export>UTF-8 decode without BOM</dfn> algorithm which is identical to <a>UTF-8 decode</a>
            except that it does not strip one leading UTF-8 Byte Order Mark (BOM)
        * The <dfn export>UTF-8 decode without BOM or fail</dfn> algorithm which is identical to
            <a>UTF-8 decode without BOM</a> except that it returns failure upon encountering an error
        * The <a lt="encode code point">encode</a> algorithm which takes a character stream and an
            encoding and returns a byte stream
        * The <dfn export>UTF-8 encode</dfn> algorithm which takes a character stream and returns a byte stream.
      </ul>

  : XML and related specifications
  :: Implementations that support <a href="#xhtml">the XHTML syntax</a> must support some version of XML, as
      well as its corresponding namespaces specification, because that syntax uses an XML
      serialization with namespaces. [[!XML]] [[!XML-NAMES]]

      The attribute with the tag name <{xml/space|xml:space}> in the <a>XML namespace</a>
      is defined by the XML specification. [[!XML]]

      This specification also references the <a><code>&lt;?xml-stylesheet?></code></a>
      processing instruction, defined in the
      <cite>Associating Style Sheets with XML documents</cite> specification. [[!XML-STYLESHEET]]

      This specification also non-normatively mentions the <dfn interface><code>XSLTProcessor</code></dfn>
      interface and its <dfn method for="XSLTProcessor"><code>transformToFragment()</code></dfn> and
      <dfn method for="XSLTProcessor"><code>transformToDocument()</code></dfn> methods. [[XSLTP]]
  : URLs
  :: The following terms are defined in the WHATWG URL specification: [[!URL]]

      <ul class="brief">
        * [=host-concept/host=]
        * [=url/domain=]
        * [=url/URL=]
        * [=url/Origin=] of URLs
        * [=Absolute URL=]
        * [=Relative URL=]
        * [=Relative schemes=]
        * The <a>URL parser</a> and <a>basic URL parser</a> as well as these parser states:
            * <a>scheme start state</a>
            * <a>host state</a>
            * <a>hostname state</a>
            * <a>port state</a>
            * <a>path start state</a>
            * <a>query state</a>
            * <a>fragment state</a>
        * <a>URL record</a>, as well as its individual components:
            * [=url/scheme=]
            * <a>username</a>
            * <a>password</a>
            * <a for="url">host</a>
            * <a for="url">port</a>
            * <a>path</a>
            * <a for="url">query</a>
            * <a for="url">fragment</a>
        * A <a>network scheme</a>
        * The <a>URL serializer</a>
        * The <a>host parser</a>
        * The <a>host serializer</a>
        * <a>Host equals</a>
        * <a>serialize an integer</a>
        * <a>Default encode set</a>
        * <a>Percent encode</a>
        * <a>UTF-8 percent encode</a>
        * <a>Percent decode</a>
        * <a>set the username</a>
        * <a>set the password</a>
        * The <a>domain to Unicode</a> algorithm
        * <a>non-relative flag</a>
        * <a lt="url parse error">Parse errors</a> from the <a>URL parser</a>
      </ul>

      A number of schemes and protocols are referenced by this specification also:

      * The <dfn scheme lt="about:|about:blank"><a scheme><code>about:</code></a></dfn> scheme [[!RFC6694]]
      * The <dfn scheme><a scheme><code>blob:</code></a></dfn> scheme [[!FILEAPI]]
      * The <dfn scheme lt="data: url|data:|data url"><code>data:</code></dfn> scheme [[!RFC2397]]
      * The <dfn scheme><code>http:</code></dfn> scheme [[!HTTP]]
      * The <dfn scheme><code>https:</code></dfn> scheme [[!HTTP]]
      * The <dfn scheme><code>mailto:</code></dfn> scheme [[!RFC6068]]
      * The <dfn scheme><code>sms:</code></dfn> scheme [[!RFC5724]]
      * The <dfn scheme><code>urn:</code></dfn> scheme [[!RFC8141]]

      <dfn export>Media fragment syntax</dfn> is defined in the <cite>Media Fragments URI</cite>
      specification. [[!MEDIA-FRAGS]]

  : HTTP and related specifications
  :: The following terms are defined in the HTTP specifications: [[!HTTP]]

      * <a http-header><code>Accept</code></a> header
      * <a http-header><code>Accept-Language</code></a> header
      * <a http-header><code>Cache-Control</code></a> header
      * <a http-header><code>Content-Disposition</code></a> header
      * <a http-header><code>Content-Language</code></a> header
      * <a http-header><code>Content-Length</code></a> header
      * <a http-header><code>Last-Modified</code></a> header
      * <a http-header><code>Referer</code></a header

      The following terms are defined in the Cookie specification: [[!COOKIES]]

      * <dfn export>cookie-string</dfn>
      * <a>receives a set-cookie-string</a>
      * <a><code>Cookie</code> header</a>

      The following term is defined in the Web Linking specification: [[!RFC8288]]

      * <a><code>Link</code> header</a>

  : Fetch
  :: The following terms are defined in the WHATWG Fetch specification: [[!FETCH]]

      * <a scheme><code>about:blank</code></a>
      * <a>HTTPS state value</a>
      * <a>referrer policy</a>
      * <a>CORS protocol</a>
      * <a>default <code>User-Agent</code> value</a>
      * <a>extract a MIME type</a>
      * <a>fetch</a>
      * <a>ok status</a>
      * <a><code>Origin</code> header</a>
      * <a>process response</a>
      * <a for="header list">set</a>
      * <a>terminate</a>
      * the <a><code>RequestCredentials</code></a> enumeration
      * <a>response</a> and its associated:
        * <a for="response">type</a>
        * <a for="response">url</a>
        * <a for="response">url list</a>
        * <a>status</a>
        * [=response/header list=]
        * [=response/body=]
        * <a>internal response</a>
        * [=response/CSP list=]
        * [=response/HTTPS state=]
      * <a>request</a> and its associated:
        * <a for="request">url</a>
        * <a for="request">method</a>
        * <a for="request">header list</a>
        * <a for="request">body</a>
        * <a for="request">client</a>
        * <a for="request">target browsing context</a>
        * <a for="request">initiator</a>
        * <a for="request">type</a>
        * <a for="request">destination</a>
        * <a for="request">origin</a>
        * <a>omit-<code>Origin</code>-header flag</a>
        * <a>same-origin data-URL flag</a>
        * <a for="request">referrer</a>
        * <a>synchronous flag</a>
        * <a for="request">mode</a>
        * <a for="request">credentials mode</a>
        * <a for="request">use-URL-credentials flag</a>
        * <a>unsafe-request flag</a>
        * <a for="request">cache mode</a>
        * <a for="request">redirect mode</a>
        * <a>cryptographic nonce metadata</a>
        * <a for="request">referrer policy</a>
        * <a>parser metadata</a>

  :: The following terms are defined in <cite>Referrer Policy</cite> [[!REFERRERPOLICY]]

     * <a for="request">referrer policy</a>
     * The <dfn>`Referrer-Policy`</dfn> HTTP header
     * The <dfn>parse a referrer policy from a <code>`Referrer-Policy`</code> header</dfn> algorithm
     * The "<dfn><code>no-referrer</code></dfn>",
             "<dfn><code>no-referrer-when-downgrade</code></dfn>", and
             "<dfn><code>unsafe-url</code></dfn>" referrer policies

  : Web IDL
  :: The IDL fragments in this specification must be interpreted as required for conforming IDL
      fragments, as described in the Web IDL specification. [[!WEBIDL]]

      The following terms are defined in the Web IDL specification:

      * <a>array index property name</a>
      * <a>supported property indices</a>
      * <a>Determine the value of an indexed property</a>
      * <a>Support named properties</a>
      * <a>Supported property names</a>
      * <a>Determine the value of a named property</a>
      * <a>perform a security check</a>
      * <a>Platform object</a>
      * <a>Primary interface</a>
      * <a>Global environment associated with</a> a platform object
      * <a>Read only</a> (when applied to arrays)
      * <a>Callback this value</a>
      * <a>Converting</a> between WebIDL types and JS types
      * <a>invoke the Web IDL callback function</a>

      The Web IDL specification also defines the following types that are used in Web IDL fragments
      in this specification:

      * <a><code>ArrayBufferView</code></a>
      * <a type><code>boolean</code></a>
      * <a type><code>DOMString</code></a>
      * <a type><code>USVString</code></a>
      * <a type><code>double</code></a>
      * <a type><code>Error</code></a>
      * <a><code>Function</code></a>
      * <a type><code>long</code></a>
      * <a><code>object</code></a>
      * <a type><code>unrestricted double</code></a>
      * <a type><code>unsigned long</code></a>

      The term <dfn export>throw</dfn> in this specification is used as defined in the WebIDL
      specification. The following exception names are defined by WebIDL and used by this
      specification:

      * {{IndexSizeError}}
      * {{HierarchyRequestError}}
      * {{WrongDocumentError}}
      * {{InvalidCharacterError}}
      * {{NoModificationAllowedError}}
      * {{NotFoundError}}
      * {{NotSupportedError}}
      * {{InvalidStateError}}
      * {{SyntaxError}}
      * {{InvalidModificationError}}
      * {{NamespaceError}}
      * {{InvalidAccessError}}
      * {{SecurityError}}
      * {{NetworkError}}
      * {{AbortError}}
      * {{URLMismatchError}}
      * {{QuotaExceededError}}
      * {{TimeoutError}}
      * {{InvalidNodeTypeError}}
      * {{DataCloneError}}
      * {{NotAllowedError}}

      When this specification requires a user agent to <dfn lt="date object|a new date object">create a {{Date}} object</dfn>
      representing a particular time (which could be the special value Not-a-Number), the
      milliseconds component of that time, if any, must be truncated to an integer, and the time
      value of the newly created {{Date}} object must represent the resulting truncated
      time.

      <p class="example">
        For instance, given the time 23045 millionths of a second after 01:00 UTC on
        January 1st 2000, i.e., the time 2000-01-01T00:00:00.023045Z, then the {{Date}} object
        created representing that time would represent the same time as that created representing the
        time 2000-01-01T00:00:00.023Z, 45 millionths earlier. If the given time is NaN, then the result
        is a {{Date}} object that represents a time value NaN (indicating that the object does
        not represent a specific instant of time).
      </p>

  : JavaScript
  :: Some parts of the language described by this specification only support JavaScript as the
      underlying scripting language. [[!ECMA-262]]

      <p class="note">
        The term "JavaScript" is used to refer to ECMA262, rather than the official term ECMAScript,
        since the term JavaScript is more widely known. Similarly, the <a>MIME type</a> used to
        refer to JavaScript in this specification is <code>text/javascript</code>, since that is the
        most commonly used type, <a lt="willful violation">despite it being an officially obsoleted type</a> according to
        RFC 4329. [[RFC4329]]
      </p>

      The following terms are defined in the JavaScript specification and used in this
      specification [[!ECMA-262]]:

       * <a>automatic semicolon insertion</a>
       * <a>early error</a>
       * <a>Directive Prologue</a>
       * <a>JavaScript execution context</a>
       * <a>JavaScript execution context stack</a>
       * <a>running JavaScript execution context</a>
       * <a>JavaScript realm</a>
       * The <a>current Realm Record</a>
       * <a>Use Strict Directive</a>
       * <a>Well-Known Symbols</a>, including:
          * <dfn dfn>@@hasInstance</dfn>
          * <dfn dfn>@@isConcatSpreadable</dfn>
          * <dfn dfn>@@toPrimitive</dfn>
          * <dfn dfn>@@toStringTag</dfn>
       * <a>Well-Known Intrinsic Objects</a>, including:
          * <a>%ArrayBuffer%</a>
          * <a>%ArrayPrototype%</a>
          * <a>%ObjProto_toString%</a>
          * <a>%ObjProto_valueOf%</a>
       * The <a>FunctionBody</a> production
       * The <a>Module</a> production
       * The <a>Pattern</a> production
       * The <a for="ecma">Script</a> production
       * The <a for="ecma">Type</a> notation
       * The <a for="ecma">List</a> and <a for="ecma">Record</a> specification types
       * The <a>Property Descriptor</a> specification type
       * The <a>Source Text Module Record</a> specification type and its <a>ModuleEvaluation</a>
          and <a>ModuleDeclarationInstantiation</a> methods
       * The <a>ArrayCreate</a> abstract operation
       * The <a>Call</a> abstract operation
       * The <a>Construct</a> abstract operation
       * The <a>CopyDataBlockBytes</a> abstract operation
       * The <a>CreateByteDataBlock</a> abstract operation
       * The <a>CreateDataProperty</a> abstract operation
       * The <a>DetachArrayBuffer</a> abstract operation
       * The <a>EnqueueJob</a> abstract operation
       * The <a>FunctionCreate</a> abstract operation
       * The <a for="ecma">Get</a> abstract operation
       * The <a>GetActiveScriptOrModule</a> abstract operation
       * The <a>GetFunctionRealm</a> abstract operation
       * The <a>HasOwnProperty</a> abstract operation
       * The <a>HostEnsureCanCompileStrings</a> abstract operation
       * The <a>HostPromiseRejectionTracker</a> abstract operation
       * The <a>HostResolveImportedModule</a> abstract operation
       * The <a>InitializeHostDefinedRealm</a> abstract operation
       * The <a>IsAccessorDescriptor</a> abstract operation
       * The <a>IsCallable</a> abstract operation
       * The <a>IsConstructor</a> abstract operation
       * The <a>IsDataDescriptor</a> abstract operation
       * The <a>IsDetachedBuffer</a> abstract operation
       * The <a>NewObjectEnvironment</a> abstract operation
       * The <a>OrdinaryGetPrototypeOf</a> abstract operation
       * The <a>OrdinarySetPrototypeOf</a> abstract operation
       * The <a>OrdinaryIsExtensible</a> abstract operation
       * The <a>OrdinaryPreventExtensions</a> abstract operation
       * The <a>OrdinaryGetOwnProperty</a> abstract operation
       * The <a>OrdinaryDefineOwnProperty</a> abstract operation
       * The <a>OrdinaryGet</a> abstract operation
       * The <a>OrdinarySet</a> abstract operation
       * The <a>OrdinaryDelete</a> abstract operation
       * The <a>OrdinaryOwnPropertyKeys</a> abstract operation
       * The <a>ParseModule</a> abstract operation
       * The <a>ParseScript</a> abstract operation
       * The <a>RunJobs</a> abstract operation
       * The <a>SameValue</a> abstract operation
       * The <a>ScriptEvaluation</a> abstract operation
       * The <a>ToBoolean</a> abstract operation
       * The <a>ToString</a> abstract operation
       * The <a>ToUint32</a> abstract operation
       * The <a>TypedArrayCreate</a> abstract operation
       * The <a>Abstract Equality Comparison</a> algorithm
       * The <a>Strict Equality Comparison</a> algorithm
       * The {{ArrayBuffer}} object
       * The {{Date}} object
       * The {{SyntaxError}} object
       * The {{TypeError}} object
       * The {{RangeError}} object
       * The {{RegExp}} object
       * The <a>typeof</a> operator
       * <a>The TypedArray Constructors</a> table

  : DOM
  :: The Document Object Model (DOM) is a representation — a model — of a document and
      its content. The DOM is not just an API; the conformance criteria of HTML implementations are
      defined, in this specification, in terms of operations on the DOM. [[!DOM]]

      Implementations must support DOM and the events defined in UI Events, because this
      specification is defined in terms of the DOM, and some of the features are defined as
      extensions to the DOM interfaces. [[!DOM]] [[!UIEVENTS]]

      In particular, the following features are defined in the DOM specification: [[!DOM]]

      * {{Attr}} interface
      * {{Comment}} interface
      * {{DOMImplementation}} interface
      * {{Document}} interface
      * {{XMLDocument}} interface
      * {{DocumentFragment}} interface
      * {{DocumentType}} interface
      * {{DOMException}} interface
      * {{ChildNode}} interface
      * {{Element}} interface
      * {{Node}} interface
      * {{NodeList}} interface
      * {{ProcessingInstruction}} interface
      * {{Text}} interface
      * {{HTMLCollection}} interface
      * {{NodeList/item()}} method
      * The terms <a lt="collection">collections</a> and <a>represented by the collection</a>
      * {{DOMTokenList}} interface
      * {{createDocument()}} method
      * {{createHTMLDocument()}} method
      * {{createElement()}} method
      * {{createElementNS()}} method
      * {{getElementById()}} method
      * {{Element/getElementsByClassName()}} method
      * {{appendChild()}} method
      * {{cloneNode()}} method
      * {{importNode()}} method
      * {{Element/id}} attribute
      * {{Node/textContent}} attribute
      * The <dfn export>tree</dfn> concept
      * The <dfn export>tree order</dfn> concept
      * The <dfn export>root</dfn> concept
      * The <dfn export>inclusive ancestor</dfn> concept
      * The <dfn export>document element</dfn> concept
      * The <dfn export>in a document </dfn> concept
      * The <a>pre-insert</a>, <a>insert</a>, <a>append</a>,
        <a>remove</a>, <a>replace</a>, and <a>adopt</a> algorithms
        for nodes
      * The <a>insertion steps</a>, <a>removing steps</a>, and <a>adopting steps</a> hooks
      * The <a lt="element attribute">attribute list</a> concept.
      * The <a lt="cd data">data</a> of a text node.
      * {{Event}} interface
      * {{EventTarget}} interface
      * {{EventInit}} dictionary type
      * {{Event/target}} attribute
      * {{currentTarget}} attribute
      * {{isTrusted}} attribute
      * {{initEvent()}} method
      * {{addEventListener()}} method
      * The {{Event/type}} of an event
      * The concept of an <a>event listener</a> and the <a lt="event listener">event listeners</a> associated with
        an <code>EventTarget</code>
      * The concept of a <dfn export>target override</dfn>
      * The <a>encoding</a> (herein the <i>character encoding</i>) and <a>content type</a>
        of a {{Document}}
      * The distinction between <a>XML documents</a> and <a>HTML documents</a>
      * The terms <dfn export>quirks mode</dfn>, <dfn export>limited-quirks mode</dfn>, and
        <dfn export>no-quirks mode</dfn>
      * The algorithm to <a lt="clone a node">clone</a> a {{Node}}, and the concept of
        <a>cloning steps</a> used by that algorithm
      * The concept of <dfn export>base URL change steps</dfn> and the definition of what happens when an
        element is <dfn export>affected by a base URL change</dfn>
      * The concept of an element's <a lt="id">unique identifier (ID)</a>
      * The term <dfn lt="supported tokens|supported token">supported tokens</dfn>
      * The concept of a DOM <a>range</a>, and the terms <a lt="range start">start</a>, <a lt="range end">end</a>, and
        <a lt="range bp">boundary point</a> as applied to ranges.
      * The <a>create an element</a> algorithm
      * {{MutationObserver}} interface and <dfn export>mutation observers</dfn> in
        general

      <p class="example">
        For example, to <i>throw a {{TimeoutError}} exception</i>, a user agent would
        construct a <a>DOMException</a> object whose type was the string
        "{{TimeoutError}}" (and whose code was the number 23, for legacy reasons) and
        actually throw that object as an exception.
      </p>

      The following features are defined in the UI Events specification: [[!UIEVENTS]]

      * {{MouseEvent}} interface and the following interface members:
         * The {{MouseEvent/relatedTarget}} attribute
         * The {{MouseEvent/button}} attribute
         * The {{MouseEvent/ctrlKey}} attribute
         * The {{MouseEvent/shiftKey}} attribute
         * The {{MouseEvent/altKey}} attribute
         * The {{MouseEvent/metaKey}} attribute
         * The {{MouseEvent/getModifierState()}} method
      * {{MouseEventInit}} dictionary type
      * The {{FocusEvent}} interface and its
        {{FocusEvent/relatedTarget}} attribute
      * The {{UIEvent}} interface's {{UIEvent/view}} and {{UIEvent/detail}} attributes
      * <a event>click</a> event
      * <a event>dblclick</a> event
      * <a event>mousedown</a> event
      * <a event>mouseenter</a> event
      * <a event>mouseleave</a> event
      * <a event>mousemove</a> event
      * <a event>mouseout</a> event
      * <a event>mouseover</a> event
      * <a event>mouseup</a> event
      * <a event>wheel</a> event
      * <a event>keydown</a> event
      * <a event>keyup</a> event
      * <a event>keypress</a> event

      The following features are defined in the Touch Events specification: [[!TOUCH-EVENTS]]

      * {{Touch}} interface
      * <a>Touch point</a> concept

      This specification sometimes uses the term <dfn event for="global">name</dfn> to refer to the event's
      <code>type</code>; as in, "an event named <code>click</code>" or "if the event name is
      <code>keypress</code>". The terms "name" and "type" for events are synonymous.

      The following features are defined in the DOM Parsing and Serialization specification:
      [[!DOM-PARSING]]

      * {{Element/innerHTML}}
      * {{Element/outerHTML}}

      The {{Selection}} interface is defined in the <cite>Selection API</cite> specification. [[!SELECTION-API]]

      <p class="note">
        User agents are also encouraged to implement the features described in the
        <cite>HTML Editing APIs</cite> and <cite><code>UndoManager</code> and DOM Transaction</cite>
        specifications. [[EDITING]] [[UNDO]]
      </p>

      The following parts of the Fullscreen specification are referenced from this specification, in
      part to define the rendering of <{dialog}> elements, and also to define how the
      Fullscreen API interacts with the sandboxing features in HTML: [[!FULLSCREEN]]

      * The <a>top layer</a> concept
      * {{Element/requestFullscreen()}}
      * The <a>fullscreen enabled flag</a>
      * The <a>fully exit fullscreen</a> algorithm

      The <cite>High Resolution Time</cite> specification provides the {{DOMHighResTimeStamp}}
      typedef and the {{Performance}} object's {{Performance/now()}} method. [[!HR-TIME-2]]

  : File API
  :: This specification uses the following features defined in the File API specification:
      [[!FILEAPI]]

      * {{Blob}} interface and its {{Blob/type}} attribute
      * {{File}} interface and its <a>name</a> and <dfn>lastModified</dfn> attributes
      * {{FileList}} interface
      * The concept of a {{Blob}}'s <a>snapshot state</a>
      * The concept of <dfn lt="error occurs during reading of the object|read errors">read errors</dfn>
      * <a href="https://w3c.github.io/FileAPI/#BlobURLStore">Blob URL Store</a>

  : Indexed Database API
  :: This specification uses
     <dfn><a href="https://w3c.github.io/IndexedDB/#cleanup-indexed-database-transactions">cleanup Indexed Database transactions</a></dfn>
     defined by the Indexed Database API specification. [[!INDEXEDDB]]

  : Media Source Extensions
  :: The following terms are defined in the Media Source Extensions specification: [[!MEDIA-SOURCE]]

      * {{MediaSource}} interface
      * <dfn lt="detach from a media element">Detaching from a media element</dfn>

  : Media Capture and Streams
  :: The following term is defined in the Media Capture and Streams specification: [[!MEDIACAPTURE-STREAMS]]

      * {{MediaStream}} interface

  : XMLHttpRequest
  :: This specification references the XMLHttpRequest specification to describe how the two
      specifications interact and to use its {{ProgressEvent}} features. The following
      features and terms are defined in the XMLHttpRequest specification: [[!XHR]]

      * {{XMLHttpRequest}} interface
      * {{XMLHttpRequest/responseXML|XMLHttpRequest.responseXML}} attribute
      * {{ProgressEvent}} interface
      * <a attribute lt="lengthcomputable"><code>ProgressEvent.lengthComputable</code></a> attribute
      * <a attribute lt="loaded"><code>ProgressEvent.loaded</code></a> attribute
      * <a attribute lt="total"><code>ProgressEvent.total</code></a> attribute
      * <a>Fire a progress event named <var>e</var></a>

  : Server-Sent Events
  :: This specification references {{EventSource}} which is specified in the
      Server-Sent Events specification [[!EVENTSOURCE]]

  : Media Queries
  :: Implementations must support the Media Queries language. [[!MEDIAQ]]
  :: <<media-condition>>

  : CSS modules
  :: While support for CSS as a whole is not required of implementations of this specification
      (though it is encouraged, at least for Web browsers), some features are defined in terms of
      specific CSS requirements.

      In particular, some features require that a string be
      <dfn export>parsed as a CSS &lt;color&gt; value</dfn>. When parsing a CSS value, user agents are
      required by the CSS specifications to apply some error handling rules. These apply to this
      specification also. [[!CSS3COLOR]] [[!CSS-2015]]

      <p class="example">
        For example, user agents are required to close all open constructs upon finding the end of a
        style sheet unexpectedly. Thus, when parsing the string "<code>rgb(0,0,0</code>" (with a
        missing close-parenthesis) for a color value, the close parenthesis is implied by this error
        handling rule, and a value is obtained (the color ''black''). However, the similar construct
        "<code>rgb(0,0,</code>" (with both a missing parenthesis and a missing "blue" value) cannot
        be parsed, as closing the open construct does not result in a viable value.
      </p>

      The following terms and features are defined in the CSS specification: [[!CSS-2015]]

      * <dfn export>viewport</dfn>
      * <dfn export>replaced element</dfn>
      * <dfn export>intrinsic dimensions</dfn>

      The term <dfn export>named color</dfn> is defined in the CSS Color specification. [[!CSS3COLOR]]

      The terms <dfn for="css">intrinsic width</dfn> and <dfn for="css">intrinsic height</dfn> refer to the width
      dimension and the height dimension, respectively, of <a>intrinsic dimensions</a>.

      The term <dfn export>paint source</dfn> is used as defined in the
      <cite>CSS Image Values and Replaced Content</cite> specification to define the interaction of
      certain HTML elements with the CSS 'element()' function. [[!CSS3-IMAGES]]

      The term <dfn export>default object size</dfn> is also defined in the
      <cite>CSS Image Values and Replaced Content</cite> specification. [[!CSS3-IMAGES]]

      Implementations that support scripting must support the CSS Object Model. The following
      features and terms are defined in the CSSOM specifications: [[!CSSOM]] [[!CSSOM-VIEW]]

      * {{Screen}}
      * {{LinkStyle}}
      * {{CSSStyleDeclaration}}
      * {{CSSStyleDeclaration/cssText}} attribute of {{CSSStyleDeclaration}}
      * {{StyleSheet}}
      * [=create a CSS style sheet=]
      * <a spec="cssom">remove a CSS style sheet</a>
      * <a spec="cssom">associated CSS style sheet</a>
      * <a>CSS style sheets</a> and their properties:
            [=cssstylesheet/type=],
            [=cssstylesheet/location=],
            [=cssstylesheet/parent CSS style sheet=],
            [=cssstylesheet/owner node=],
            [=cssstylesheet/owner CSS rule=],
            [=cssstylesheet/media=],
            [=cssstylesheet/title=],
            [=cssstylesheet/alternate flag=],
            [=cssstylesheet/disabled flag=],
            [=cssstylesheet/CSS rules=],
            [=cssstylesheet/origin-clean flag=]
      * <a>Alternative style sheet sets</a> and the <a>preferred style sheet set</a>
      * <a>Serializing a CSS value</a>
      * <a>run the resize steps</a>
      * <a>run the scroll steps</a>
      * <a>evaluate media queries and report changes</a>
      * <a spec="cssom-view">Scroll an element into view</a>
      * <a spec="cssom-view">Scroll to the beginning of the document</a>
      * The <a event><code>resize</code></a> event
      * The <a event><code>scroll</code></a> event
      * <a>The <em>features</em> argument of <code>window.open</code></a>

      The following features and terms are defined in the <cite>CSS Syntax</cite> specifications:
      [[!CSS-SYNTAX-3]]

      * <a lt="consume a component value">Parse a comma-separated list of component values</a>
      * <a>component value</a>
      * <a>environment encoding</a>
      * <<whitespace-token>>

      The following terms are defined in the <cite>Selectors</cite> specification: [[!SELECTORS4]]

      * <a>type selector</a>
      * <a>attribute selector</a>
      * <a>pseudo-class</a>

      The feature <<length>> is defined in the <cite>CSS Values and Units</cite>
      specification. [[!CSS-VALUES]]

      The term <a>style attribute</a> is defined in the <cite>CSS Style Attributes</cite>
      specification. [[!CSS-STYLE-ATTR]]

      The term <a>used value</a> is defined in the <cite>CSS Cascading and Inheritance</cite>
      specification. [[!CSS-CASCADE-4]]

      The <code>CanvasRenderingContext2D</code> object's use of fonts depends on the features
      described in the CSS <cite>Fonts</cite> and <cite>Font Loading</cite> specifications,
      including in particular <a interface><code>FontFace</code></a> objects and the
      <a spec="css-font-loading-3">font source</a> concept. [[!CSS-FONTS-3]] [[CSS-FONT-LOADING-3]]

      The following interface is defined in the Geometry Interfaces Module specification:
      [[!GEOMETRY-1]]

      * {{DOMMatrix}} interface

  : SVG
  :: The <code>CanvasRenderingContext2D</code> object's use of fonts depends on the features
      described in the CSS <cite>Fonts</cite> and <cite>Font Loading</cite> specifications,
      including in particular <a interface><code>FontFace</code></a> objects and the
      <a spec="css-font-loading-3">font source</a> concept. [[!CSS-FONTS-3]] [[CSS-FONT-LOADING-3]]

      The following interface is defined in the SVG specification: [[!SVG11]]

      * {{SVGMatrix}}

  : WebGL
  :: The following interface is defined in the WebGL specification: [[!WEBGL-1]]

      * {{WebGLRenderingContext}}


  : WebGL2
  :: The following interface is defined in the WebGL2 specification: [[!webgl-2]]

      * {{WebGL2RenderingContext}}


  : WebVTT
  :: Implementations may support <dfn export>WebVTT</dfn> as a text track format for subtitles, captions,
      chapter titles, metadata, etc, for media resources. [[WEBVTT]]

      The following terms, used in this specification, are defined in the WebVTT specification:

      * <dfn export>WebVTT file</dfn>
      * <dfn export>WebVTT file using cue text</dfn>
      * <dfn export>WebVTT file using chapter title text</dfn>
      * <dfn export>WebVTT file using only nested cues</dfn>
      * <dfn export>WebVTT parser</dfn>
      * The <dfn export>rules for updating the display of WebVTT text tracks</dfn>
      * The <dfn export>rules for interpreting WebVTT cue text</dfn>
      * The WebVTT <dfn export>text track cue writing direction</dfn>

  : The WebSocket protocol
  :: The following terms are defined in the WebSocket protocol specification: [[!RFC6455]]

      * <dfn export>establish a WebSocket connection</dfn>
      * <dfn export>the WebSocket connection is established</dfn>
      * <dfn export>validate the server's response</dfn>
      * <dfn export>extensions in use</dfn>
      * <dfn export>subprotocol in use</dfn>
      * <dfn export>headers to send appropriate cookies</dfn>
      * <dfn export>cookies set during the server's opening handshake</dfn>
      * <dfn export>a WebSocket message has been received</dfn>
      * <dfn export>send a WebSocket Message</dfn>
      * <dfn export>fail the WebSocket connection</dfn>
      * <dfn export>close the WebSocket connection</dfn>
      * <dfn export>start the WebSocket closing handshake</dfn>
      * <dfn export>the WebSocket closing handshake is started</dfn>
      * <dfn export>the WebSocket connection is closed</dfn> (possibly <i>cleanly</i>)
      * <dfn export>the WebSocket connection close code</dfn>
      * <dfn export>the WebSocket connection close reason</dfn>
      * <dfn export><code>Sec-WebSocket-Protocol</code></dfn> field

  : ARIA
  :: The <dfn element-attr for="aria"><code>role</code></dfn> attribute is defined in the ARIA specification, as are the
      following roles: [[!wai-aria-1.1]]

      <ul class="brief category-list">
        <li><a attr-value for="aria/role"><code>alert</code></a>
        <li><a attr-value for="aria/role"><code>alertdialog</code></a>
        <li><a attr-value for="aria/role"><code>application</code></a>
        <li><a attr-value for="aria/role"><code>article</code></a>
        <li><a attr-value for="aria/role"><code>banner</code></a>
        <li><a attr-value for="aria/role"><code>button</code></a>
        <li><a attr-value for="aria/role"><code>cell</code></a>
        <li><a attr-value for="aria/role"><code>checkbox</code></a>
        <li><a attr-value for="aria/role"><code>columnheader</code></a>
        <li><a attr-value for="aria/role"><code>combobox</code></a>
        <li><a attr-value for="aria/role"><code>complementary</code></a>
        <li><a attr-value for="aria/role"><code>contentinfo</code></a>
        <li><a attr-value for="aria/role"><code>definition</code></a>
        <li><a attr-value for="aria/role"><code>dialog</code></a>
        <li><a attr-value for="aria/role"><code>directory</code></a>
        <li><a attr-value for="aria/role"><code>document</code></a>
        <li><a attr-value for="aria/role"><code>feed</code></a>
        <li><a attr-value for="aria/role"><code>figure</code></a>
        <li><a attr-value for="aria/role"><code>form</code></a>
        <li><a attr-value for="aria/role"><code>grid</code></a>
        <li><a attr-value for="aria/role"><code>gridcell</code></a>
        <li><a attr-value for="aria/role"><code>group</code></a>
        <li><a attr-value for="aria/role"><code>heading</code></a>
        <li><a attr-value for="aria/role"><code>img</code></a>
        <li><a attr-value for="aria/role"><code>link</code></a>
        <li><a attr-value for="aria/role"><code>list</code></a>
        <li><a attr-value for="aria/role"><code>listbox</code></a>
        <li><a attr-value for="aria/role"><code>listitem</code></a>
        <li><a attr-value for="aria/role"><code>log</code></a>
        <li><a attr-value for="aria/role"><code>main</code></a>
        <li><a attr-value for="aria/role"><code>marquee</code></a>
        <li><a attr-value for="aria/role"><code>math</code></a>
        <li><a attr-value for="aria/role"><code>menubar</code></a>
        <li><a attr-value for="aria/role"><code>navigation</code></a>
        <li><a attr-value for="aria/role"><code>none</code></a>
        <li><a attr-value for="aria/role"><code>note</code></a>
        <li><a attr-value for="aria/role"><code>option</code></a>
        <li><a attr-value for="aria/role"><code>presentation</code></a>
        <li><a attr-value for="aria/role"><code>progressbar</code></a>
        <li><a attr-value for="aria/role"><code>radio</code></a>
        <li><a attr-value for="aria/role"><code>radiogroup</code></a>
        <li><a attr-value for="aria/role"><code>region</code></a>
        <li><a attr-value for="aria/role"><code>row</code></a>
        <li><a attr-value for="aria/role"><code>rowgroup</code></a>
        <li><a attr-value for="aria/role"><code>rowheader</code></a>
        <li><a attr-value for="aria/role"><code>scrollbar</code></a>
        <li><a attr-value for="aria/role"><code>search</code></a>
        <li><a attr-value for="aria/role"><code>searchbox</code></a>
        <li><a attr-value for="aria/role"><code>separator</code></a>
        <li><a attr-value for="aria/role"><code>slider</code></a>
        <li><a attr-value for="aria/role"><code>spinbutton</code></a>
        <li><a attr-value for="aria/role"><code>status</code></a>
        <li><a attr-value for="aria/role"><code>switch</code></a>
        <li><a attr-value for="aria/role"><code>tab</code></a>
        <li><a attr-value for="aria/role"><code>table</code></a>
        <li><a attr-value for="aria/role"><code>tablist</code></a>
        <li><a attr-value for="aria/role"><code>tabpanel</code></a>
        <li><a attr-value for="aria/role"><code>term</code></a>
        <li><a attr-value for="aria/role"><code>textbox</code></a>
        <li><a attr-value for="aria/role"><code>timer</code></a>
        <li><a attr-value for="aria/role"><code>toolbar</code></a>
        <li><a attr-value for="aria/role"><code>tooltip</code></a>
        <li><a attr-value for="aria/role"><code>tree</code></a>
        <li><a attr-value for="aria/role"><code>treegrid</code></a>
        <li><a attr-value for="aria/role"><code>treeitem</code></a>
      </ul>

      In addition, the following <dfn element-attr for="aria"><code>aria-*</code></dfn> content
      attributes are defined in the ARIA specification: [[!wai-aria-1.1]]

      <ul class="brief category-list">
        <li><{aria/aria-activedescendant}>
        <li><{aria/aria-atomic}>
        <li><{aria/aria-autocomplete}>
        <li><{aria/aria-busy}>
        <li><{aria/aria-checked}>
        <li><{aria/aria-colcount}>
        <li><{aria/aria-colindex}>
        <li><{aria/aria-colspan}>
        <li><{aria/aria-controls}>
        <li><{aria/aria-current}>
        <li><{aria/aria-describedby}>
        <li><{aria/aria-details}>
        <li><{aria/aria-dialog}>
        <li><{aria/aria-disabled}>
        <li><{aria/aria-dropeffect}>
        <li><{aria/aria-errormessage}>
        <li><{aria/aria-expanded}>
        <li><{aria/aria-flowto}>
        <li><{aria/aria-grabbed}>
        <li><{aria/aria-haspopup}>
        <li><{aria/aria-hidden}>
        <li><{aria/aria-invalid}>
        <li><{aria/aria-keyshortcuts}>
        <li><{aria/aria-label}>
        <li><{aria/aria-labelledby}>
        <li><{aria/aria-level}>
        <li><{aria/aria-live}>
        <li><{aria/aria-multiline}>
        <li><{aria/aria-multiselectable}>
        <li><{aria/aria-orientation}>
        <li><{aria/aria-owns}>
        <li><{aria/aria-placeholder}>
        <li><{aria/aria-posinset}>
        <li><{aria/aria-pressed}>
        <li><{aria/aria-readonly}>
        <li><{aria/aria-relevant}>
        <li><{aria/aria-required}>
        <li><{aria/aria-roledescription}>
        <li><{aria/aria-rowcount}>
        <li><{aria/aria-rowindex}>
        <li><{aria/aria-rowspan}>
        <li><{aria/aria-selected}>
        <li><{aria/aria-setsize}>
        <li><{aria/aria-sort}>
        <li><{aria/aria-valuemax}>
        <li><{aria/aria-valuemin}>
        <li><{aria/aria-valuenow}>
        <li><{aria/aria-valuetext}>
      </ul>

  : Content Security Policy
  :: The following terms are defined in <cite>Content Security Policy</cite>: [[!CSP3]]

      * <a>Content Security Policy</a>
      * <a>Content Security Policy directive</a>
      * The <a>Content Security Policy syntax</a>
      * <a>enforce the policy</a>
      * The <a>parse a serialized Content Security Policy</a> algorithm
      * The <a>Initialize a global object's CSP list</a> algorithm
      * The <a>Initialize a Document's CSP list</a> algorithm
      * The <a>Should element's inline behavior be blocked by Content Security Policy?</a> algorithm
      * The <a><code>report-uri</code></a>, <a><code>frame-ancestors</code></a>, and
         <a><code>sandbox</code></a> <a>directives</a>
      * The <a>EnsureCSPDoesNotBlockStringCompilation</a> abstract algorithm
      * The <a>Is base allowed for Document?</a> algorithm
      * The <a for="/">Should element be blocked <i lang="la">a priori</i> by Content Security Policy?</a> algorithm

  :: The following terms are defined in <cite>Content Security Policy: Document Features</code> <!-- [[!CSPDOCUMENT]] when published -->

      * The <a><code>frame-ancestors</code> directive</a>
      * The <a><code>sandbox</code> directive</a>

  : Service Workers
  :: The following terms are defined in <cite>Service Workers</cite>: [[!SERVICE-WORKERS]]

      * <dfn export>client message queue</dfn>
      * <dfn export>match service worker registration</dfn>
      * <dfn export><code>ServiceWorkerContainer</code></dfn>

  : Secure Contexts
  :: The following term is defined in <cite>Secure Contexts</cite>: [[!SECURE-CONTEXTS]]

      * <dfn export>Is environment settings object a secure context?</dfn>

  : Payment Request API
  :: The following term is defined in the <cite>Payment Request API</cite> specification: [[!PAYMENT-REQUEST]]

      * <a>PaymentRequest</a> interface

  : MathML
  :: While support for MathML as a whole is not required by this specification (though it is
      encouraged, at least for Web browsers), certain features depend upon small parts of MathML
      being implemented. [[!MATHML]]

      The following features are defined in the MathML specification:

      * <dfn export>MathML <code>annotation-xml</code></dfn> element
      * <dfn export>MathML <code>math</code></dfn> element
      * <dfn export>MathML <code>merror</code></dfn> element
      * <dfn export>MathML <code>mi</code></dfn> element
      * <dfn export>MathML <code>mn</code></dfn> element
      * <dfn export>MathML <code>mo</code></dfn> element
      * <dfn export>MathML <code>ms</code></dfn> element
      * <dfn export>MathML <code>mtext</code></dfn> element

  : SVG
  :: While support for SVG as a whole is not required by this specification (though it is
      encouraged, at least for Web browsers), certain features depend upon parts of SVG being
      implemented.

      Also, the SVG specifications do not reflect implementation reality. Implementations implement
      subsets of SVG 1.1 and SVG Tiny 1.2. Although it is hoped that the in-progress SVG 2
      specification is a more realistic target for implementations, until that specification is
      ready, user agents that implement SVG must do so with the following <a>willful violations</a>
      and additions. [[!SVG11]] [[!SVGTINY12]] [[!SVG2]]

      User agents that implement SVG must not implement the following features from SVG 1.1:

      * The <code>tref</code> element
      * The <code>cursor</code> element (use CSS's <code>cursor</code> property instead)
      * The font-defining SVG elements: <code>font</code>, <code>glyph</code>,
          <code>missing-glyph</code>, <code>hkern</code>, <code>vkern</code>,
          <code>font-face</code>, <code>font-face-src</code>, <code>font-face-uri</code>,
          <code>font-face-format</code>, and <code>font-face-name</code> (use CSS's
          <code>@font-face</code> instead)
      * The <code>externalResourcesRequired</code> attribute
      * The <code>enable-background</code> property
      * The <code>contentScriptType</code> and <code>contentStyleType</code> attributes (use the
          <code>type</code> attribute on the SVG <a element for="svg"><code>script</code></a> and
          <{global/style}> elements instead)

      User agents that implement SVG must implement the following features from SVG Tiny 1.2:

      * The <code>non-scaling-stroke</code> value for the <code>vector-effect</code> property
      * The <{global/class}> attribute is allowed on all SVG elements
      * The <{global/tabindex}> attribute is allowed on visible SVG elements
      * The ARIA accessibility attributes are allowed on all SVG elements

      The following features are defined in the SVG specifications:

      * {{SVGScriptElement}} interface
      * SVG <{desc}> element
      * SVG <{foreignObject}> element
      * SVG <a element for="svg"><code>script</code></a> element
      * SVG <{svg}> element
      * SVG <a element for="svg"><code>title</code></a> element

  : Filter Effects
  :: The following feature is defined in the <cite>Filter Effects</cite> specification:

      * <dfn>&lt;filter-function-list&gt;</dfn>

  <hr />


  This specification does not <em>require</em> support of any particular network protocol, style
  sheet language, scripting language, or any of the DOM specifications beyond those required in the
  list above. However, the language described by this specification is biased towards CSS as the
  styling language, JavaScript as the scripting language, and HTTP as the network protocol, and
  several features assume that those languages and protocols are in use.

  A user agent that implements the HTTP protocol must implement the Web Origin Concept
  specification and the HTTP State Management Mechanism specification (Cookies) as well. [[!HTTP]]
  [[!ORIGIN]] [[!COOKIES]]

  <p class="note">
    This specification might have certain additional requirements on character encodings, image
    formats, audio formats, and video formats in the respective sections.
  </p>

<h4 id="conformance-requirements-extensibility">Extensibility</h4>

  Vendor-specific proprietary user agent extensions to this specification are strongly discouraged.
  Documents must not use such extensions, as doing so reduces interoperability and fragments the
  user base, allowing only users of specific user agents to access the content in question.

  If such extensions are nonetheless needed, e.g., for experimental purposes, then vendors are
  strongly urged to use one of the following extension mechanisms:

  * For markup-level features that can be limited to the XML serialization and need not be
    supported in the HTML serialization, vendors should use the namespace mechanism to define
    custom namespaces in which the non-standard elements and attributes are supported.

  * For markup-level features that are intended for use with <a href="#syntax">the HTML syntax</a>,
    extensions should be limited to new attributes of the form
    "<code>x-<var>vendor</var>-<var>feature</var></code>", where <var>vendor</var> is a short
    string that identifies the vendor responsible for the extension, and <var>feature</var> is
    the name of the feature. New element names should not be created. Using attributes for such
    extensions exclusively allows extensions from multiple vendors to co-exist on the same
    element, which would not be possible with elements. Using the
    "<code>x-<var>vendor</var>-<var>feature</var></code>" form allows extensions to be made
    without risk of conflicting with future additions to the specification.

    <div class="example">
      For instance, a browser named "FerretBrowser" could use "ferret" as a vendor prefix,
      while a browser named "Mellblom Browser" could use "mb". If both of these browsers
      invented extensions that turned elements into scratch-and-sniff areas, an author
      experimenting with these features could write:

      <xmp highlight="html">
        <span x-ferret-smellovision x-ferret-smellcode="LEM01"
              x-mb-outputsmell x-mb-smell="lemon juice">
          This smells of lemons!
        </span>
      </xmp>
    </div>

  Attribute names beginning with the two characters "<code>x-</code>" are reserved for
  user agent use and are guaranteed to never be formally added to the HTML language. For
  flexibility, attributes names containing underscores (the U+005F LOW LINE character) are also
  reserved for experimental purposes and are guaranteed to never be formally added to the HTML
  language.

  <p class="note">Pages that use such attributes are by definition non-conforming.</p>

  For DOM extensions, e.g., new methods and IDL attributes, the new members should be prefixed by
  vendor-specific strings to prevent clashes with future versions of this specification.

  For events, experimental event types should be prefixed with vendor-specific strings.

  <div class="example">
    For example, if a user agent called "Pleasold" were to add an event to indicate when
    the user is going up in an elevator, it could use the prefix "<code>pleasold</code>" and
    thus name the event "<code>pleasoldgoingup</code>", possibly with an event handler attribute
    named "<code>onpleasoldgoingup</code>".
  </div>

  All extensions must be defined so that the use of extensions neither contradicts nor causes the
  non-conformance of functionality defined in the specification.

  <div class="example">
    For example, while strongly discouraged from doing so, an implementation "Foo Browser" could
    add a new IDL attribute "<code>fooTypeTime</code>" to a control's DOM interface that returned
    the time it took the user to select the current value of a control (say). On the other hand,
    defining a new control that appears in a form's <code>elements</code> array would be in
    violation of the above requirement, as it would violate the definition of
    <code>elements</code> given in this specification.
  </div>

  When adding new <a>reflecting</a> IDL attributes corresponding to content attributes of the form
  "<code>x-<var>vendor</var>-<var>feature</var></code>", the IDL attribute should be named
  "<code><var>vendor</var><var>Feature</var></code>" (i.e., the "<code>x</code>" is dropped from
  the IDL attribute's name).

<hr />

  When vendor-neutral extensions to this specification are needed, either this specification can be
  updated accordingly, or an extension specification can be written that overrides the requirements
  in this specification. When someone applying this specification to their activities decides that
  they will recognize the requirements of such an extension specification, it becomes an
  <a>applicable specification</a> for the purposes of conformance requirements in this
  specification.

  <p class="note">
    Someone could write a specification that defines any arbitrary byte stream as conforming, and
    then claim that their random junk is conforming. However, that does not mean that their random
    junk actually is conforming for everyone's purposes: if someone else decides that the
    specification does not apply to their work, then they can quite legitimately say that the
    aforementioned random junk is just that, junk, and not conforming at all. As far as conformance
    goes, what matters in a particular community is what that community <em>agrees</em> is
    applicable.
  </p>

  <dfn export>applicable specification</dfn>.

  The conformance terminology for documents depends on the nature of the changes introduced by such
  applicable specifications, and on the content and intended interpretation of the document.
  Applicable specifications MAY define new document content (e.g., a foobar element), MAY prohibit
  certain otherwise conforming content (e.g., prohibit use of &lt;table>s), or MAY change the
  semantics, DOM mappings, or other processing rules for content defined in this specification.
  Whether a document is or is not a <a lt="conforming document">conforming HTML document</a> does not depend on the use of
  applicable specifications: if the syntax and semantics of a given <a lt="conforming document">conforming HTML document</a>
  is unchanged by the use of applicable specification(s), then that document remains a
  <a lt="conforming document">conforming HTML document</a>. If the semantics or processing of a given (otherwise conforming)
  document is changed by use of applicable specification(s), then it is not a
  <a lt="conforming document">conforming HTML document</a>. For such cases, the applicable specifications SHOULD define
  conformance terminology.

  <p class="note">
    As a suggested but not required convention, such specifications might define conformance
    terminology such as: "Conforming HTML+XXX document", where XXX is a short name
    for the applicable specification. (Example: "Conforming HTML+AutomotiveExtensions document").
  </p>

  <p class="note">a consequence of the rule given above is that certain syntactically correct HTML
    documents may not be <a lt="conforming document">conforming HTML documents</a> in the presence of applicable
    specifications. (Example: the applicable specification defines &lt;table> to be a piece of
    furniture — a document written to that specification and containing a &lt;table> element
    is NOT a <a lt="conforming document">conforming HTML document</a>, even if the element happens to be syntactically
    correct HTML.)
  </p>

  <hr />

  User agents must treat elements and attributes that they do not understand as semantically
  neutral; leaving them in the DOM (for DOM processors), and styling them according to CSS (for CSS
  processors), but not inferring any meaning from them.

  When support for a feature is disabled (e.g., as an emergency measure to mitigate a security
  problem, or to aid in development, or for performance reasons), user agents must act as if they
  had no support for the feature whatsoever, and as if the feature was not mentioned in this
  specification. For example, if a particular feature is accessed via an attribute in a Web IDL
  interface, the attribute itself would be omitted from the objects that implement that interface
  — leaving the attribute on the object but making it return null or throw an exception is
  insufficient.

<h4 id="interactions-with-xpath-and-xslt">Interactions with XPath and XSLT</h4>

  Implementations of XPath 1.0 that operate on <a>HTML documents</a> parsed or created in the
  manners described in this specification (e.g., as part of the <code>document.evaluate()</code> API)
  must act as if the following edit was applied to the XPath 1.0 specification.

  First, remove this paragraph:

  <blockquote cite="https://www.w3.org/TR/1999/REC-xpath-19991116#node-tests">
    A <a>QName</a> in the node test is expanded into an <a>expanded-name</a> using the namespace
    declarations from the expression context. This is the same way expansion is done for element
    type names in start and end-tags except that the default namespace declared with
    <{xmlns/xmlns}> is not used: if the <a>QName</a> does not have a prefix, then the namespace
    URI is null (this is the same way attribute names are expanded). It is an error if the
    <a>QName</a> has a prefix for which there is no namespace declaration in the expression context.
  </blockquote>

  Then, insert in its place the following:

  <blockquote cite="https://www.w3.org/Bugs/Public/show_bug.cgi?id=7059#c37">
    A QName in the node test is expanded into an expanded-name using the namespace declarations from
    the expression context. If the QName has a prefix, then there must be a namespace declaration
    for this prefix in the expression context, and the corresponding namespace URI is the one that
    is associated with this prefix. It is an error if the QName has a prefix for which there is no
    namespace declaration in the expression context.

    If the QName has no prefix and the principal node type of the axis is element, then the default
    element namespace is used. Otherwise if the QName has no prefix, the namespace URI is null. The
    default element namespace is a member of the context for the XPath expression. The value of the
    default element namespace when executing an XPath expression through the DOM3 XPath API is
    determined in the following way:

    1. If the context node is from an HTML DOM, the default element namespace is
        "http://www.w3.org/1999/xhtml".
    2. Otherwise, the default element namespace URI is null.

    <p class="note">
      This is equivalent to adding the default element namespace feature of XPath 2.0 to XPath 1.0,
      and using the HTML namespace as the default element namespace for HTML documents. It is
      motivated by the desire to have implementations be compatible with legacy HTML content while
      still supporting the changes that this specification introduces to HTML regarding the
      namespace used for HTML elements, and by the desire to use XPath 1.0 rather than XPath 2.0.
    </p>
  </blockquote>

  <p class="note">
    This change is a <a>willful violation</a> of the XPath 1.0 specification, motivated by
    desire to have implementations be compatible with legacy content while still supporting the
    changes that this specification introduces to HTML regarding which namespace is used for HTML
    elements. [[!XPATH]]
  </p>

  <hr />

  XSLT 1.0 processors outputting to a DOM when the output method is "html" (either explicitly or via
  the defaulting rule in XSLT 1.0) are affected as follows:

  If the transformation program outputs an element in no namespace, the processor must, prior to
  constructing the corresponding DOM element node, change the namespace of the element to the
  <a>HTML namespace</a>, <a lt="Converting a string to ASCII lowercase">ASCII-lowercase</a> the
  element's local name, and <a lt="Converting a string to ASCII lowercase">ASCII-lowercase</a> the
  names of any non-namespaced attributes on the element.

  <p class="note">
    This requirement is a <a>willful violation</a> of the XSLT 1.0 specification, required because
    this specification changes the namespaces and case-sensitivity rules of HTML in a manner that
    would otherwise be incompatible with DOM-based XSLT transformations. (Processors that serialize
    the output are unaffected.) [[XSLT]]
  </p>

  <hr />

  This specification does not specify precisely how XSLT processing interacts with the
  <a>HTML parser</a> infrastructure (for example, whether an XSLT processor acts as if it puts any
  elements into a <a>stack of open elements</a>). However, XSLT processors must <a>stop parsing</a>
  if they successfully complete, and must set the <a>current document readiness</a> first to
  "<code>interactive</code>" and then to "<code>complete</code>" if they are aborted.

  <hr />

  This specification does not specify how XSLT interacts with the <a>navigation</a> algorithm, how
  it fits in with the <a>event loop</a>, nor how error pages are to be handled (e.g., whether XSLT
  errors are to replace an incremental XSLT output, or are rendered inline, etc).

  <p class="note">
    There are also additional non-normative comments regarding the interaction of XSLT and HTML
    <a href="#interaction-of-script-elements-and-xslt">in the <code>script</code> element section</a>,
    and of XSLT, XPath, and HTML <a href="#interaction-of-template-elements-with-xslt-and-xpath">in the
    <code>template</code> element section</a>.
  </p>

<h3 id="case-sensitivity-and-string-comparison">Case-sensitivity and string comparison</h3>

  Comparing two strings in a <dfn lt="case-sensitive|case-sensitively">case-sensitive</dfn> manner means comparing them exactly, code
  point for code point.

  Comparing two strings in an <dfn export>ASCII case-insensitive</dfn> manner means comparing them exactly,
  code point for code point, except that the characters in the range U+0041 to U+005A (i.e., LATIN
  CAPITAL LETTER A to LATIN CAPITAL LETTER Z) and the corresponding characters in the range U+0061
  to U+007A (i.e., LATIN SMALL LETTER A to LATIN SMALL LETTER Z) are considered to also match.

  Except where otherwise stated, string comparisons must be performed in a <a>case-sensitive</A>
  manner.

  <dfn lt="ASCII uppercase|converting a string to ASCII uppercase">Converting a string to ASCII uppercase</dfn> means replacing all characters in the range
  U+0061 to U+007A (i.e., LATIN SMALL LETTER A to LATIN SMALL LETTER Z) with the corresponding
  characters in the range U+0041 to U+005A (i.e., LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z).

  <dfn lt="ASCII lowercase|converting a string to ASCII lowercase">Converting a string to ASCII lowercase</dfn> means replacing all characters in the range
  U+0041 to U+005A (i.e., LATIN CAPITAL LETTER A to LATIN CAPITAL LETTER Z) with the corresponding
  characters in the range U+0061 to U+007A (i.e., LATIN SMALL LETTER A to LATIN SMALL LETTER Z).

  A string <var>pattern</var> is a <dfn export>prefix match</dfn> for a string <var>s</var> when
  <var>pattern</var> is not longer than <var>s</var> and truncating <var>s</var> to
  <var>pattern</var>'s length leaves the two strings as matches of each other.

<h3 id="common-microsyntaxes">Common microsyntaxes</h3>

  There are various places in HTML that accept particular data types, such as dates or numbers. This
  section describes what the conformance criteria for content in those formats is, and how to parse
  them.

  <p class="note">
    Implementors are strongly urged to carefully examine any third-party libraries they might
    consider using to implement the parsing of syntaxes described below. For example, date
    libraries are likely to implement error handling behavior that differs from what is required
    in this specification, since error-handling behavior is often not defined in specifications
    that describe date syntaxes similar to those used in this specification, and thus
    implementations tend to vary greatly in how they handle errors.
  </p>

<h4 id="common-parser-idioms">Common parser idioms</h4>

  The <dfn export>space characters</dfn>, for the purposes of this specification, are U+0020 SPACE, U+0009
  CHARACTER TABULATION (tab), U+000A LINE FEED (LF), U+000C FORM FEED (FF), and U+000D CARRIAGE
  RETURN (CR).

  The <dfn lt="white_space|white_space characters">White_Space characters</dfn> are those that have the Unicode property "White_Space" in
  the Unicode <code>PropList.txt</code> data file. [[!UNICODE]]

  <p class="note">
    This should not be confused with the "White_Space" value (abbreviated "WS") of the "Bidi_Class"
    property in the <code>Unicode.txt</code> data file.
  </p>

  The <dfn export>control characters</dfn> are those whose Unicode "General_Category" property has the
  value "Cc" in the Unicode <code>UnicodeData.txt</code> data file. [[!UNICODE]]

  The <dfn export>uppercase ASCII letters</dfn> are the characters in the range U+0041 LATIN CAPITAL LETTER
  A to U+005A LATIN CAPITAL LETTER Z.

  The <dfn export>lowercase ASCII letters</dfn> are the characters in the range U+0061 LATIN SMALL LETTER A
  to U+007A LATIN SMALL LETTER Z.

  The <dfn export>ASCII letters</dfn> are the characters that are either [=uppercase ASCII letters=] or
  [=lowercase ASCII letters=].

  The <dfn export>ASCII digits</dfn> are the characters in the range U+0030 DIGIT ZERO (0) to U+0039 DIGIT
  NINE (9).

  The <dfn export>alphanumeric ASCII characters</dfn> are those that are either
  <a>uppercase ASCII letters</a>, <a>lowercase ASCII letters</a>, or <a>ASCII digits</a>.

  The <dfn export>ASCII hex digits</dfn> are the characters in the ranges U+0030 DIGIT ZERO (0) to U+0039
  DIGIT NINE (9), U+0041 LATIN CAPITAL LETTER A to U+0046 LATIN CAPITAL LETTER F, and U+0061 LATIN
  SMALL LETTER A to U+0066 LATIN SMALL LETTER F.

  The <dfn export>uppercase ASCII hex digits</dfn> are the characters in the ranges U+0030 DIGIT ZERO (0)
  to U+0039 DIGIT NINE (9) and U+0041 LATIN CAPITAL LETTER A to U+0046 LATIN CAPITAL LETTER F only.

  The <dfn export>lowercase ASCII hex digits</dfn> are the characters in the ranges U+0030 DIGIT ZERO (0)
  to U+0039 DIGIT NINE (9) and U+0061 LATIN SMALL LETTER A to U+0066 LATIN SMALL LETTER F only.

  Some of the micro-parsers described below follow the pattern of having an <var>input</var>
  variable that holds the string being parsed, and having a <var>position</var> variable pointing at
  the next character to parse in <var>input</var>.

  For parsers based on this pattern, a step that requires the user agent to <dfn>collect a sequence
  of characters</dfn> means that the following algorithm must be run, with <var>characters</var>
  being the set of characters that can be collected:

  1. Let <var>input</var> and <var>position</var> be the same variables as those of the same name in
      the algorithm that invoked these steps.
  2. Let <var>result</var> be the empty string.
  3. While <var>position</var> doesn't point past the end of <var>input</var> and the character at
      <var>position</var> is one of the <var>characters</var>, append that character to the end of
      <var>result</var> and advance <var>position</var> to the next character in <var>input</var>.
  4. Return <var>result</var>.

  The step <dfn>skip white space</dfn> means that the user agent must
  <a>collect a sequence of characters</a> that are [=space characters=]. The collected characters
  are not used.

  When a user agent is to <dfn lt="stripped line breaks|strip line breaks">strip line breaks</dfn> from a string, the user agent must remove
  any U+000A LINE FEED (LF) and U+000D CARRIAGE RETURN (CR) characters from that string.

  When a user agent is to <dfn lt="strip leading and trailing white space|stripping leading and trailing white space|leading and trailing white space stripped">strip leading and trailing white space</dfn> from a string, the
  user agent must remove all [=space characters=] that are at the start or end of the string.

  When a user agent is to <dfn lt="stripping and collapsing white space|strip and collapse white space">strip and collapse white space</dfn> in a string, it must replace any
  sequence of one or more consecutive [=space characters=] in that string with a single U+0020
  SPACE character, and then <a>strip leading and trailing white space</a> from that string.

  When a user agent has to <dfn lt="strictly splitting the string|strictly split a string|strictly split">strictly split a string</dfn> on a particular delimiter character
  <var>delimiter</var>, it must use the following algorithm:

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>position</var> be a pointer into <var>input</var>, initially
      pointing at the start of the string.
  3. Let <var>tokens</var> be an ordered list of tokens, initially empty.
  4. While <var>position</var> is not past the end of <var>input</var>:
      1. <a>Collect a sequence of characters</a> that are not the <var>delimiter</var> character.
      2. Append the string collected in the previous step to <var>tokens</var>.
      3. Advance <var>position</var> to the next character in <var>input</var>.
  5. Return <var>tokens</var>.

  <p class="note">
    For the special cases of splitting a string <a lt="split a string on spaces">on spaces</a> and <a lt="split a string on commas">on commas</a>, this
    algorithm does not apply (those algorithms also perform <a lt="strip leading and trailing white space">white space trimming</a>).
  </p>

<h4 id="sec-boolean-attributes">Boolean attributes</h4>

  A number of attributes are <dfn lt="boolean attribute|boolean attributes">boolean attributes</dfn>. The presence of a boolean attribute on
  an element represents the true value, and the absence of the attribute represents the false value.

  If the attribute is present, its value must either be the empty string or a value that is an
  <a>ASCII case-insensitive</a> match for the attribute's canonical name, with no leading or
  trailing white space.

  <p class="note">
    A boolean attribute without a value assigned to it (e.g. checked) is implicitly equivalent to
    one that has the empty string assigned to it (i.e. checked=""). As a consequence, it represents the true value.
  </p>

  <p class="note">
    The values "true" and "false" are not allowed on <a>boolean attributes</a>. To represent a false value,
    the attribute has to be omitted altogether.
  </p>

  <div class="example">
    Here is an example of a checkbox that is checked and disabled. The <code>checked</code> and
    <code>disabled</code> attributes are the <a>boolean attributes</a>.

    <pre highlight="html">
      &lt;label>&lt;input type="checkbox" <mark>checked</mark> name="cheese" <mark>disabled</mark>> Cheese&lt;/label>
    </pre>

    This could be equivalently written as this:

    <pre highlight="html">
      &lt;label>&lt;input type="checkbox" <mark>checked="checked"</mark> name="cheese" <mark>disabled="disabled"</mark>> Cheese&lt;/label>
    </pre>

    You can also mix styles:

    <xmp highlight="html">
      <label><input type='checkbox' checked name=cheese disabled=""> Cheese</label>
    </xmp>
  </div>

<h4 id="keywords-and-enumerated-attributes">Keywords and enumerated attributes</h4>

  Some attributes are defined as taking one of a finite set of keywords. Such attributes are called
  <dfn export>enumerated attributes</dfn>. The keywords are each defined to map to a particular
  <em>state</em> (several keywords might map to the same state, in which case some of the keywords
  are synonyms of each other; additionally, some of the keywords can be said to be non-conforming,
  and are only in the specification for historical reasons). In addition, two default states can be
  given. The first is the <dfn><i>invalid value default</i></dfn>, the second is the
  <dfn><i>missing value default</i></dfn>.

  If an enumerated attribute is specified, the attribute's value must be an
  <a>ASCII case-insensitive</a> match for one of the given keywords that are not said to be
  non-conforming, with no leading or trailing white space.

  When the attribute is specified, if its value is an <a>ASCII case-insensitive</a> match for one of
  the given keywords then that keyword's state is the state that the attribute represents. If the
  attribute value matches none of the given keywords, but the attribute has an
  <i>invalid value default</i>, then the attribute represents that state. Otherwise, if the
  attribute value matches none of the keywords but there is a <i>missing value default</i> state
  defined, then <em>that</em> is the state represented by the attribute. Otherwise, there is no
  default, and invalid values mean that there is no state represented.

  When the attribute is <em>not</em> specified, if there is a <i>missing value default</i> state
  defined, then that is the state represented by the (missing) attribute. Otherwise, the absence of
  the attribute means that there is no state represented.

  <p class="note">The empty string can be a valid keyword.</p>

<h4 id="numbers">Numbers</h4>

<h5 id="signed-integers">Signed integers</h5>

  A string is a <dfn lt="valid integer|valid integers">valid integer</dfn> if it consists of one or more <a>ASCII digits</a>,
  optionally prefixed with a U+002D HYPHEN-MINUS character (-).

  A <a>valid integer</a> without a U+002D HYPHEN-MINUS (-) prefix represents the number that is
  represented in base ten by that string of digits. A <a>valid integer</a> <em>with</em> a U+002D
  HYPHEN-MINUS (-) prefix represents the number represented in base ten by the string of digits that
  follows the U+002D HYPHEN-MINUS, subtracted from zero.

  The <dfn lt="parse token as an integer|parse it as an integer|rules for parsing integers|rules for parsing integer|rules for parsing signed integers">rules for parsing integers</dfn> are as given in the following algorithm. When
  invoked, the steps must be followed in the order given, aborting at the first step that returns
  a value. This algorithm will return either an integer or an error.

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the
      start of the string.
  3. Let <var>sign</var> have the value "positive".
  4. <a>Skip white space</a>.
  5. If <var>position</var> is past the end of <var>input</var>, return an error.
  6. If the character indicated by <var>position</var> (the first character) is a U+002D
      HYPHEN-MINUS character (-):
      1. Let <var>sign</var> be "negative".
      2. Advance <var>position</var> to the next character.
      3. If <var>position</var> is past the end of <var>input</var>, return an error.

      Otherwise, if the character indicated by <var>position</var> (the first character) is a
      U+002B PLUS SIGN character (+):

      1. Advance <var>position</var> to the next character. (The "<code>+</code>" is ignored, but
          it is not conforming.)
      2. If <var>position</var> is past the end of <var>input</var>, return an error.
  7. If the character indicated by <var>position</var> is not an <a>ASCII digit</a>, then return
      an error.
  8. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>, and interpret the
      resulting sequence as a base-ten integer. Let <var>value</var> be that integer.
  9. If <var>sign</var> is "positive", return <var>value</var>, otherwise return the result of
      subtracting <var>value</var> from zero.


<h5 id="non-negative-integers">Non-negative integers</h5>

  A string is a <dfn export>valid non-negative integer</dfn> if it consists of one or more
  <a>ASCII digits</a>.

  A <a>valid non-negative integer</a> represents the number that is represented in base ten by that
  string of digits.

  The <dfn lt="parse that attribute's value|rules for parsing non-negative integers">rules for parsing non-negative integers</dfn> are as given in the following algorithm.
  When invoked, the steps must be followed in the order given, aborting at the first step that
  returns a value. This algorithm will return either zero, a positive integer, or an error.

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>value</var> be the result of parsing <var>input</var> using the
      <a>rules for parsing integers</a>.
  3. If <var>value</var> is an error, return an error.
  4. If <var>value</var> is less than zero, return an error.
  5. Return <var>value</var>.

<h5 id="floating-point-numbers">Floating-point numbers</h5>

  A string is a <dfn export>valid floating-point number</dfn> if it consists of:

  1. Optionally, a U+002D HYPHEN-MINUS character (-).
  2. One or both of the following, in the given order:
      1. A series of one or more <a>ASCII digits</a>.
      2. Both of the following, in the given order:
          1. A single U+002E FULL STOP character (.).
          2. A series of one or more <a>ASCII digits</a>.
  3. Optionally:
      1. Either a U+0065 LATIN SMALL LETTER E character (e) or a U+0045 LATIN CAPITAL LETTER E
          character (E).
      2. Optionally, a U+002D HYPHEN-MINUS character (-) or U+002B PLUS SIGN character (+).
      3. A series of one or more <a>ASCII digits</a>.

  A <a>valid floating-point number</a> represents the number obtained by multiplying the significand
  by ten raised to the power of the exponent, where the significand is the first number, interpreted
  as base ten (including the decimal point and the number after the decimal point, if any, and
  interpreting the significand as a negative number if the whole string starts with a U+002D
  HYPHEN-MINUS character (-) and the number is not zero), and where the exponent is the number after
  the E, if any (interpreted as a negative number if there is a U+002D HYPHEN-MINUS character (-)
  between the E and the number and the number is not zero, or else ignoring a U+002B PLUS SIGN
  character (+) between the E and the number if there is one). If there is no E, then the exponent
  is treated as zero.

  <p class="note">The Infinity and Not-a-Number (NaN) values are not <a>valid floating-point numbers</a>.</p>

  The <dfn lt="best floating-point number">best representation of the number <var>n</var> as a floating-point number</dfn> is the
  string obtained from running <a>ToString</a>(<var>n</var>). The abstract operation <a>ToString</a>
  is not uniquely determined. When there are multiple possible strings that could be obtained from
  <a>ToString</a> for a particular value, the user agent must always return the same string for that
  value (though it may differ from the value used by other user agents).

  The <dfn export>rules for parsing floating-point number values</dfn> are as given in the following
  algorithm. This algorithm must be aborted at the first step that returns something. This
  algorithm will return either a number or an error.

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
      of the string.
  3. Let <var>value</var> have the value 1.
  4. Let <var>divisor</var> have the value 1.
  5. Let <var>exponent</var> have the value 1.
  6. <a>Skip white space</a>.
  7. If <var>position</var> is past the end of <var>input</var>, return an error.
  8. If the character indicated by <var>position</var> is a U+002D HYPHEN-MINUS character (-):
      1. Change <var>value</var> and <var>divisor</var> to -1.
      2. Advance <var>position</var> to the next character.
      3. If <var>position</var> is past the end of <var>input</var>, return an error.

      Otherwise, if the character indicated by <var>position</var> (the first character) is a
      U+002B PLUS SIGN character (+):

      1. Advance <var>position</var> to the next character. (The "<code>+</code>" is ignored, but
          it is not conforming.)
      2. If <var>position</var> is past the end of <var>input</var>, return an error.

  9. If the character indicated by <var>position</var> is a U+002E FULL STOP (.), and that is not
      the last character in <var>input</var>, and the character after the character indicated by
      <var>position</var> is an <a>ASCII digit</a>, then set
      <var>value</var> to zero and jump to the step labeled <i>fraction</i>.
  10. If the character indicated by <var>position</var> is not an <a>ASCII digit</a>, then return
      an error.
  11. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>, and interpret the
      resulting sequence as a base-ten integer. Multiply <var>value</var> by that integer.
  12. If <var>position</var> is past the end of <var>input</var>, jump to the step labeled
      <i>conversion</i>.
  13. <i>Fraction</i>: If the character indicated by <var>position</var> is a U+002E FULL STOP
      (.), run these substeps:
      1. Advance <var>position</var> to the next character.
      2. If <var>position</var> is past the end of <var>input</var>, or if the character indicated
          by <var>position</var> is not an <a>ASCII digit</a>, U+0065 LATIN SMALL LETTER E (e), or
          U+0045 LATIN CAPITAL LETTER E (E), then jump to the step labeled <i>conversion</i>.
      3. If the character indicated by <var>position</var> is a U+0065 LATIN SMALL LETTER E
          character (e) or a U+0045 LATIN CAPITAL LETTER E character (E), skip the remainder of
          these substeps.
      4. <i>Fraction loop</i>: Multiply <var>divisor</var> by ten.
      5. Add the value of the character indicated by <var>position</var>, interpreted as a
          base-ten digit (0..9) and divided by <var>divisor</var>, to <var>value</var>.
      6. Advance <var>position</var> to the next character.
      7. If <var>position</var> is past the end of <var>input</var>, then jump to the step labeled
          <i>conversion</i>.
      8. If the character indicated by <var>position</var> is an <a>ASCII digit</a>, jump back to
          the step labeled <i>fraction loop</i> in these substeps.
  14. If the character indicated by <var>position</var> is a U+0065 LATIN SMALL LETTER E character
      (e) or a U+0045 LATIN CAPITAL LETTER E character (E), run these substeps:
      1. Advance <var>position</var> to the next character.
      2. If <var>position</var> is past the end of <var>input</var>, then jump to the step labeled
          <i>conversion</i>.
      3. If the character indicated by <var>position</var> is a U+002D HYPHEN-MINUS character (-):
          1. Change <var>exponent</var> to -1.
          2. Advance <var>position</var> to the next character.
          3. If <var>position</var> is past the end of <var>input</var>, then jump to the step
              labeled <i>conversion</i>.

          Otherwise, if the character indicated by <var>position</var> is a U+002B PLUS SIGN character
          (+):

          1. Advance <var>position</var> to the next character.
          2. If <var>position</var> is past the end of <var>input</var>, then jump to the step
              labeled <i>conversion</i>.
      4. If the character indicated by <var>position</var> is not an <a>ASCII digit</a>, then jump
          to the step labeled <i>conversion</i>.
      5. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>, and interpret the
          resulting sequence as a base-ten integer. Multiply <var>exponent</var> by that integer.
      6. Multiply <var>value</var> by ten raised to the <var>exponent</var>th power.
  15. <i>Conversion</i>: Let <var>S</var> be the set of finite IEEE 754 double-precision
      floating-point values except -0, but with two special values added: 2<sup>1024</sup>
      and -2<sup>1024</sup>.
  16. Let <var>rounded-value</var> be the number in <var>S</var> that is closest to
      <var>value</var>, selecting the number with an even significand if there are two equally
      close values. (The two special values 2<sup>1024</sup> and -2<sup>1024</sup> are
      considered to have even significands for this purpose.)
  17. If <var>rounded-value</var> is 2<sup>1024</sup> or -2<sup>1024</sup>, return an error.
  18. Return <var>rounded-value</var>.

<h5 id="percentages-and-dimensions">Percentages and lengths</h5>

  The <dfn export>rules for parsing dimension values</dfn> are as given in the following algorithm. When
  invoked, the steps must be followed in the order given, aborting at the first step that returns
  a value. This algorithm will return either a number greater than or equal to 0.0, or an error;
  if a number is returned, then it is further categorized as either a percentage or a length.

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
      of the string.
  3. <a>Skip white space</a>.
  4. If <var>position</var> is past the end of <var>input</var>, return an error.
  5. If the character indicated by <var>position</var> is a U+002B PLUS SIGN character (+),
      advance <var>position</var> to the next character.
  6. If <var>position</var> is past the end of <var>input</var>, return an error.
  7. If the character indicated by <var>position</var> is not an <a>ASCII digit</a>, then return
      an error.
  8. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>, and interpret the
      resulting sequence as a base-ten integer. Let <var>value</var> be that number.
  9. If <var>position</var> is past the end of <var>input</var>, return <var>value</var> as a
      length.
  10. If the character indicated by <var>position</var> is a U+002E FULL STOP character (.):
      1. Advance <var>position</var> to the next character.
      2. If <var>position</var> is past the end of <var>input</var>, or if the character indicated
          by <var>position</var> is not an <a>ASCII digit</a>, then return <var>value</var> as a
          length.
      3. Let <var>divisor</var> have the value 1.
      4. <i>Fraction loop</i>: Multiply <var>divisor</var> by ten.
      5. Add the value of the character indicated by <var>position</var>, interpreted as a
          base-ten digit (0..9) and divided by <var>divisor</var>, to <var>value</var>.
      6. Advance <var>position</var> to the next character.
      7. If <var>position</var> is past the end of <var>input</var>, then return <var>value</var>
          as a length.
      8. If the character indicated by <var>position</var> is an <a>ASCII digit</a>, return to the
          step labeled <i>fraction loop</i> in these substeps.
  11. If <var>position</var> is past the end of <var>input</var>, return <var>value</var> as a
      length.
  12. If the character indicated by <var>position</var> is a U+0025 PERCENT SIGN character (%),
      return <var>value</var> as a percentage.
  13. Return <var>value</var> as a length.

<h5 id="non-zero-percentages-and-lengths">Non-zero percentages and lengths</h5>

  The <dfn export>rules for parsing non-zero dimension values</dfn> are as given in the following
  algorithm. When invoked, the steps must be followed in the order given, aborting at the first
  step that returns a value. This algorithm will return either a number greater than 0.0, or an
  error; if a number is returned, then it is further categorized as either a percentage or a
  length.

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>value</var> be the result of parsing <var>input</var> using the
      <a>rules for parsing dimension values</a>.
  3. If <var>value</var> is an error, return an error.
  4. If <var>value</var> is zero, return an error.
  5. If <var>value</var> is a percentage, return <var>value</var> as a percentage.
  6. Return <var>value</var> as a length.

<h5 id="lists-of-floating-point-numbers">Lists of floating-point numbers</h5>

  A <dfn export>valid list of floating-point numbers</dfn> is a number of
  <a>valid floating-point numbers</a> separated by U+002C COMMA characters, with no other characters
  (e.g. no [=space characters=]). In addition, there might be restrictions on the number of
  floating-point numbers that can be given, or on the range of values allowed.

  The <dfn export>rules for parsing a list of floating-point numbers</dfn> are as follows:

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start of
      the string.
  3. Let <var>numbers</var> be an initially empty list of floating-point numbers. This list will be
      the result of this algorithm.
  4. <a>Collect a sequence of characters</a> that are [=space characters=], U+002C COMMA, or
      U+003B SEMICOLON characters. This skips past any leading delimiters.
  5. While <var>position</var> is not past the end of <var>input</var>:
      1. <a>Collect a sequence of characters</a> that are not [=space characters=], U+002C COMMA,
          U+003B SEMICOLON, <a>ASCII digits</a>, U+002E FULL STOP, or U+002D HYPHEN-MINUS
          characters. This skips past leading garbage.
      2. <a>Collect a sequence of characters</a> that are not [=space characters=], U+002C COMMA,
          or U+003B SEMICOLON characters, and let <var>unparsed number</var> be the result.
      3. Let <var>number</var> be the result of parsing <var>unparsed number</var> using the
          <a>rules for parsing floating-point number values</a>.
      4. If <var>number</var> is an error, set <var>number</var> to zero.
      5. Append <var>number</var> to <var>numbers</var>.
      6. <a>Collect a sequence of characters</a> that are [=space characters=], U+002C COMMA, or
          U+003B SEMICOLON characters. This skips past the delimiter.
  6. Return <var>numbers</var>.

<h5 id="lists-of-dimensions">Lists of dimensions</h5>

  The <dfn export>rules for parsing a list of dimensions</dfn> are as follows. These rules return a list
  of zero or more pairs consisting of a number and a unit, the unit being one of
  <i>percentage</i>, <i>relative</i>, and <i>absolute</i>.

  1. Let raw input be the string being parsed.
  2. If the last character in <var>raw input</var> is a U+002C COMMA character (,), then remove
      that character from <var>raw input</var>.
  3. <a lt="split a string on commas">Split the string <var>raw input</var> on commas</a>. Let <var>raw tokens</var> be the
      resulting list of tokens.
  4. Let <var>result</var> be an empty list of number/unit pairs.
  5. For each token in <var>raw tokens</var>, run the following substeps:
      1. Let <var>input</var> be the token.
      2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the
          start of the string.
      3. Let <var>value</var> be the number 0.
      4. Let <var>unit</var> be <i>absolute</i>.
      5. If position is past the end of input, set unit to relative and jump to the last substep.
      6. If the character at <var>position</var> is an <a>ASCII digit</a>, <a>collect a sequence
          of characters</a> that are <a>ASCII digits</a>, interpret the resulting sequence as an
          integer in base ten, and increment <var>value</var> by that integer.
      7. If the character at <var>position</var> is a U+002E FULL STOP character (.), run these
          substeps:
          1. <a>Collect a sequence of characters</a> consisting of [=space characters=] and
              <a>ASCII digits</a>. Let <var>s</var> be the resulting sequence.
          2. Remove all [=space characters=] in <var>s</var>.
          3. If <var>s</var> is not the empty string, run these subsubsteps:
              1. Let <var>length</var> be the number of characters in <var>s</var> (after the
                  spaces were removed).
              2. Let <var>fraction</var> be the result of interpreting <var>s</var> as a base-ten
                  integer, and then dividing that number by 10<sup><var>length</var></sup>.
              3. Increment <var>value</var> by <var>fraction</var>.
      8. <a>Skip white space</a>.
      9. If the character at <var>position</var> is a U+0025 PERCENT SIGN character (%), then set
          <var>unit</var> to <i>percentage</i>.

          Otherwise, if the character at <var>position</var> is a U+002A ASTERISK character (*),
          then set <var>unit</var> to <i>relative</i>.

      10. Add an entry to <var>result</var> consisting of the number given by <var>value</var> and
          the unit given by <var>unit</var>.
  6. Return the list <var>result</var>.

<h4 id="dates-and-times">Dates and times</h4>

  <div class="note">
    This specification <em>encodes</em> dates and times according to a common subset of the [[ISO8601]]
    standard for dates.

    This means that encoded dates will look like 1582-03-01, 0033-03-27, or 2016-03-01, and date-times will look like
    1929-11-13T19:00Z, 0325-06-03T00:21+10:30. The format is approximately YYYY-MM-DDTHH:MM:SS.DD±HH:MM, although some
    parts are optional, for example to express a month and day as in a birthday, a time without time-zone information,
    and the like.

    Times are expressed using the 24-hour clock, and it is an error to express leap seconds.

    Dates are expressed in the <a>proleptic Gregorian calendar</a> between the proleptic year 0001, and the year 9999 inclusive.
    Other years cannot be encoded.

    The <a>proleptic Gregorian calendar</a> is the calendar most common globally since around 1950, and is
    likely to be understood by almost everyone for dates between the years 1950 and 9999, and for many
    people for dates in the last few decades or centuries.

    The Gregorian calendar was adopted officially in different countries at different times, between
    the years 1582 when it was proposed by Pope Gregory XIII as a replacement for the Julian calendar, and
    1949 when it was adopted by the People's republic of China.

    For most practical purposes, dealing with the present, recent past, or the next few thousand years,
    this will work without problems. For dates before the adoption of the Gregorian Calendar - for example
    prior to 1917 in Russia or Turkey, prior to 1752 in Britain or the then British colonies of America,
    or prior to 1582 in Spain, the Spanish colonies in America, and the rest of the world, dates will not
    match those written at the time.

    The use of the Gregorian calendar as an underlying encoding is a somewhat arbitrary choice. Many other
    calendars were or are in use, and the interested reader should look for information on the Web.

    See also the discussion of <a href="#date-time-and-number-formats">date, time, and number formats</a>
    in forms (for authors), <a href="#implementation-notes-regarding-localization-of-form-controls">implementation
    notes regarding localization of form controls</a>, and the <{time}> element.
  </div>

  In the algorithms below, the
  <dfn>number of days in month <var>month</var> of year <var>year</var></dfn> is: <em>31</em> if
  <var>month</var> is 1, 3, 5, 7, 8, 10, or 12; <em>30</em> if <var>month</var> is 4, 6, 9, or 11;
  <em>29</em> if <var>month</var> is 2 and <var>year</var> is a number divisible by 400, or if
  <var>year</var> is a number divisible by 4 but not by 100; and <em>28</em> otherwise. This takes
  into account leap years in the Gregorian calendar. [[GREGORIAN]]

  When <a>ASCII digits</a> are used in the date and time syntaxes defined in this section, they
  express numbers in base ten.

  <p class="note">
    While the formats described here are intended to be subsets of the corresponding ISO8601
    formats, this specification defines parsing rules in much more detail than ISO8601.
    Implementors are therefore encouraged to carefully examine any date parsing libraries before
    using them to implement the parsing rules described below; ISO8601 libraries might not parse
    dates and times in exactly the same manner. [[ISO8601]]
  </p>

  Where this specification refers to the <dfn export>proleptic Gregorian calendar</dfn>, it means the
  modern Gregorian calendar, extrapolated backwards to year 0001. A date in the
  <a>proleptic Gregorian calendar</a>, sometimes explicitly referred to as a
  <dfn export>proleptic-Gregorian date</dfn>, is one that is described using that calendar even if that
  calendar was not in use at the time (or place) in question. [[GREGORIAN]]

<h5 id="months">Months</h5>

  A <dfn>month</dfn> consists of a specific <a>proleptic-Gregorian date</a> with no time-zone
  information and no date information beyond a year and a month. [[GREGORIAN]]

  A string is a <dfn export>valid month string</dfn> representing a year <var>year</var> and month
  <var>month</var> if it consists of the following components in the given order:

  1. Four <a>ASCII digits</a>, representing <var>year</var>, where
      <var>year</var>&nbsp;&gt;=&nbsp;1
  2. A U+002D HYPHEN-MINUS character (-)
  3. Two <a>ASCII digits</a>, representing the month <var>month</var>, in the range
      1&nbsp;≤&nbsp;<var>month</var>&nbsp;≤&nbsp;12

  <p class="example">
    For example, February 2005 is encoded 2005-02, and March of the year 33AD (as a proleptic
    gregorian date) is encoded <code>0033-03</code>. The expression <code>325-03</code> does
    <em>not</em> mean March in the year 325, it is an error, because it does not have 4 digits for
    the year.
  </p>

  The rules to <dfn lt="parsing a month string|parse a month string|parsing a month">parse a month string</dfn> are as follows. This will return either a year and
  month, or nothing. If at any point the algorithm says that it "fails", this means that it is
  aborted at that point and returns nothing.

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
      of the string.
  3. <a>Parse a month component</a> to obtain <var>year</var> and <var>month</var>. If this
      returns nothing, then fail.
  4. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
  5. Return <var>year</var> and <var>month</var>.

  The rules to <dfn export>parse a month component</dfn>, given an <var>input</var> string and a
  <var>position</var>, are as follows. This will return either a year and a month, or nothing. If
  at any point the algorithm says that it "fails", this means that it is aborted at that point and
  returns nothing.

  1. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
      sequence is not at least four characters long, then fail. Otherwise, interpret the resulting
      sequence as a base-ten integer. Let that number be the <var>year</var>.
  2. If <var>year</var> is not a number greater than zero, then fail.
  3. If <var>position</var> is beyond the end of <var>input</var> or if the character at
      <var>position</var> is not a U+002D HYPHEN-MINUS character, then fail. Otherwise, move
      <var>position</var> forwards one character.
  4. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
      sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting
      sequence as a base-ten integer. Let that number be the <var>month</var>.
  5. If <var>month</var> is not a number in the range
      1&nbsp;≤&nbsp;<var>month</var>&nbsp;≤&nbsp;12, then fail.
  6. Return <var>year</var> and <var>month</var>.

<h5 id="sec-dates">Dates</h5>

  A <dfn for="dates" lt="date|dates">date</dfn> consists of a specific <a>proleptic-Gregorian date</a> with no time-zone
  information, consisting of a year, a month, and a day. [[GREGORIAN]]

  A string is a <dfn export>valid date string</dfn> representing a year <var>year</var>, month
  <var>month</var>, and day <var>day</var> if it consists of the following components in the given
  order:

  1. A <a>valid month string</a>, representing <var>year</var> and <var>month</var>
  2. A U+002D HYPHEN-MINUS character (-)
  3. Two <a>ASCII digits</a>, representing <var>day</var>, in the range
      1&nbsp;≤&nbsp;<var>day</var>&nbsp;≤&nbsp;<var>maxday</var> where <var>maxday</var> is
      the <a lt="number of days in month month of year year">number of days in the month <var>month</var> and year <var>year</var></a>

  <p class="example">
    For example, 29 February 2016 is encoded 2016-02-29, and 3 March of the year 33AD (as a
    proleptic gregorian date) is encoded <code>0033-03-03</code>. The expression
    <code>325-03-03</code> does <em>not</em> mean 3 March in the year 325, it is an error, because
    it does not have 4 digits for the year.
  </p>

  The rules to <dfn lt="parsing a date string|parse a date string|parsing a date">parse a date string</dfn> are as follows. This will return either a date, or
  nothing. If at any point the algorithm says that it "fails", this means that it is aborted at
  that point and returns nothing.

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
      of the string.
  3. <a>Parse a date component</a> to obtain <var>year</var>, <var>month</var>, and
      <var>day</var>. If this returns nothing, then fail.
  4. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
  5. Let <var>date</var> be the date with year <var>year</var>, month <var>month</var>, and day
      <var>day</var>.
  6. Return <var>date</var>.

  The rules to <dfn export>parse a date component</dfn>, given an <var>input</var> string and a
  <var>position</var>, are as follows. This will return either a year, a month, and a day, or
  nothing. If at any point the algorithm says that it "fails", this means that it is aborted at
  that point and returns nothing.

  1. <a>Parse a month component</a> to obtain <var>year</var> and <var>month</var>. If this
      returns nothing, then fail.
  2. Let <var>maxday</var> be the
      <a>number of days in month <var>month</var> of year <var>year</var></a>.
  3. If <var>position</var> is beyond the end of <var>input</var> or if the character at
      <var>position</var> is not a U+002D HYPHEN-MINUS character, then fail. Otherwise, move
      <var>position</var> forwards one character.
  4. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
      sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting
      sequence as a base-ten integer. Let that number be the <var>day</var>.
  5. If <var>day</var> is not a number in the range
      1&nbsp;≤&nbsp;<var>day</var>&nbsp;≤&nbsp;<var>maxday</var>, then fail.
  6. Return <var>year</var>, <var>month</var>, and <var>day</var>.

<h5 id="yearless-dates">Yearless dates</h5>

  A <dfn export>yearless date</dfn> consists of a Gregorian month and a
  day within that month, but with no associated year. [[GREGORIAN]]

  A string is a <dfn export>valid yearless date string</dfn> representing a month <var>month</var> and a
  day <var>day</var> if it consists of the following components in the given order:

  1. Optionally, two U+002D HYPHEN-MINUS characters (-)
  2. Two <a>ASCII digits</a>, representing the month <var>month</var>, in the range
      1&nbsp;≤&nbsp;<var>month</var>&nbsp;≤&nbsp;12
  3. A U+002D HYPHEN-MINUS character (-)
  4. Two <a>ASCII digits</a>, representing <var>day</var>, in the range
      1&nbsp;≤&nbsp;<var>day</var>&nbsp;≤&nbsp;<var>maxday</var> where <var>maxday</var> is
      the <a lt="number of days in month month of year year">number of days</a> in the month <var>month</var> and any arbitrary leap year (e.g., 4 or
      2000)

  <p class="note">
    In other words, if the <var>month</var> is "<code>02</code>", meaning February, then the day can
    be 29, as if the year was a leap year.
  </p>

  <p class="example">
  For example, 29 February is encoded <code>02-29</code>, and 3 March is encoded <code>03-03</code>.
  </p>


  The rules to <dfn lt="parsing a yearless date string|parse a yearless date string">parse a yearless date string</dfn> are as follows. This will return either a
  month and a day, or nothing. If at any point the algorithm says that it "fails", this means that
  it is aborted at that point and returns nothing.

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
      of the string.
  3. <a>Parse a yearless date component</a> to obtain <var>month</var> and <var>day</var>. If this
      returns nothing, then fail.
  4. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
  5. Return <var>month</var> and <var>day</var>.

  The rules to <dfn export>parse a yearless date component</dfn>, given an <var>input</var> string and a
  <var>position</var>, are as follows. This will return either a month and a day, or nothing. If
  at any point the algorithm says that it "fails", this means that it is aborted at that point and
  returns nothing.

  1. <a>Collect a sequence of characters</a> that are U+002D HYPHEN-MINUS characters (-). If the
      collected sequence is not exactly zero or two characters long, then fail.
  2. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
      sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting
      sequence as a base-ten integer. Let that number be the <var>month</var>.
  3. If <var>month</var> is not a number in the range
      1&nbsp;≤&nbsp;<var>month</var>&nbsp;≤&nbsp;12, then fail.
  4. Let <var>maxday</var> be the <a lt="number of days in month month of year year">number of days</a> in month <var>month</var> of any arbitrary
      leap year (e.g., 4 or 2000).
  5. If <var>position</var> is beyond the end of <var>input</var> or if the character at
      <var>position</var> is not a U+002D HYPHEN-MINUS character, then fail. Otherwise, move
      <var>position</var> forwards one character.
  6. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
      sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting
      sequence as a base-ten integer. Let that number be the <var>day</var>.
  7. If <var>day</var> is not a number in the range
      1&nbsp;≤&nbsp;<var>day</var>&nbsp;≤&nbsp;<var>maxday</var>, then fail.
  8. Return <var>month</var> and <var>day</var>.

<h5 id="times">Times</h5>

  A <dfn>time</dfn> consists of a specific time with no time-zone information, consisting of an
  hour, a minute, a second, and a fraction of a second.

  A string is a <dfn export>valid time string</dfn> representing an hour <var>hour</var>, a minute
  <var>minute</var>, and a second <var>second</var> if it consists of the following components in
  the given order:

  1. Two <a>ASCII digits</a>, representing <var>hour</var>, in the range
      0&nbsp;≤&nbsp;<var>hour</var>&nbsp;≤&nbsp;23
  2. A U+003A COLON character (:)
  3. Two <a>ASCII digits</a>, representing <var>minute</var>, in the range
      0&nbsp;≤&nbsp;<var>minute</var>&nbsp;≤&nbsp;59
  4. If <var>second</var> is non-zero, or optionally if <var>second</var> is zero:
      1. A U+003A COLON character (:)
      2. Two <a>ASCII digits</a>, representing the integer part of <var>second</var>, in the
          range 0&nbsp;≤&nbsp;<var>s</var>&nbsp;≤&nbsp;59
      3. If <var>second</var> is not an integer, or optionally if <var>second</var> is an integer:
          1. A 002E FULL STOP character (.)
          2. One, two, or three <a>ASCII digits</a>, representing the fractional part of
              <var>second</var>

  <p class="note">
    The <var>second</var> component cannot be 60 or 61; leap seconds cannot be represented.
  </p>

  <p class="example">
  Times are encoded using the 24 hour clock, with optional seconds, and optional decimal fractions
  of seconds. Thus 7.45pm is encoded as <code>19:45</code>. Note that parsing that time will return
  19:45:00, or 7.45pm and zero seconds. <code>19:45:45.456</code> is 456 thousandths of
  a second after 7.45pm and 45 seconds.
  </p>

  The rules to <dfn lt="parsing a time string|parse a time string|parsing a time">parse a time string</dfn> are as follows. This will return either a time, or
  nothing. If at any point the algorithm says that it "fails", this means that it is aborted at
  that point and returns nothing.

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
      of the string.
  3. <a>Parse a time component</a> to obtain <var>hour</var>, <var>minute</var>, and
      <var>second</var>. If this returns nothing, then fail.
  4. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
  5. Let <var>time</var> be the time with hour <var>hour</var>, minute <var>minute</var>, and
      second <var>second</var>.
  6. Return <var>time</var>.

  The rules to <dfn export>parse a time component</dfn>, given an <var>input</var> string and a
  <var>position</var>, are as follows. This will return either an hour, a minute, and a second, or
  nothing. If at any point the algorithm says that it "fails", this means that it is aborted at
  that point and returns nothing.

  1. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the
      collected sequence is not exactly two characters long, then fail. Otherwise, interpret the
      resulting sequence as a base-ten integer. Let that number be the <var>hour</var>.
  2. If <var>hour</var> is not a number in the range
      0&nbsp;≤&nbsp;<var>hour</var>&nbsp;≤&nbsp;23, then fail.
  3. If <var>position</var> is beyond the end of <var>input</var> or if the
      character at <var>position</var> is not a U+003A COLON character, then fail. Otherwise,
      move <var>position</var> forwards one character.
  4. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
      sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting
      sequence as a base-ten integer. Let that number be the <var>minute</var>.
  5. If <var>minute</var> is not a number in the range
      0&nbsp;≤&nbsp;<var>minute</var>&nbsp;≤&nbsp;59, then fail.
  6. Let <var>second</var> be a string with the value "0".
  7. If <var>position</var> is not beyond the end of <var>input</var> and the character at
      <var>position</var> is a U+003A COLON, then run these substeps:
      1. Advance <var>position</var> to the next character in <var>input</var>.
      2. If <var>position</var> is beyond the end of <var>input</var>, or at the last character in
          <var>input</var>, or if the next <em>two</em> characters in <var>input</var> starting at
          <var>position</var> are not both <a>ASCII digits</a>, then fail.
      3. <a>Collect a sequence of characters</a> that are either <a>ASCII digits</a> or U+002E
          FULL STOP characters. If the collected sequence is three characters long, or if it is
          longer than three characters long and the third character is not a U+002E FULL STOP
          character, or if it has more than one U+002E FULL STOP character, then fail. Otherwise,
          let  <var>second</var> be the collected string.

  8. Interpret <var>second</var> as a base-ten number (possibly with a fractional part). Let
      <var>second</var> be that number instead of the string version.
  9. If <var>second</var> is not a number in the range
      0&nbsp;≤&nbsp;<var>second</var>&nbsp;&lt;&nbsp;60, then fail.
  10. Return <var>hour</var>, <var>minute</var>, and <var>second</var>.

<h5 id="floating-dates-and-times">Floating dates and times</h5>

  A <dfn export>floating date and time</dfn> consists of a specific <a>proleptic-Gregorian date</a>,
  consisting of a year, a month, and a day, and a time, consisting of an hour, a minute, a second,
  and a fraction of a second, but expressed without a time zone. [[GREGORIAN]]

  A string is a <dfn export>valid floating date and time string</dfn> representing a date and time if it
  consists of the following components in the given order:

  1. A <a>valid date string</a> representing the date
  2. A U+0054 LATIN CAPITAL LETTER T character (T) or a U+0020 SPACE character
  3. A <a>valid time string</a> representing the time

  A string is a <dfn export>valid normalized floating date and time string</dfn> representing a date and
  time if it consists of the following components in the given order:

  1. A <a>valid date string</a> representing the date
  2. A U+0054 LATIN CAPITAL LETTER T character (T)
  3. A <a>valid time string</a> representing the time, expressed as the shortest possible string for
      the given time (e.g., omitting the seconds component entirely if the given time is zero seconds
      past the minute)

  The rules to <dfn lt="parsing a floating date and time string|parse a floating date and time string|parsing a floating date and time">parse a floating date and time string</dfn> are as follows. This will return
  either a date and time, or nothing. If at any point the algorithm says that it "fails", this
  means that it is aborted at that point and returns nothing.

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
      of the string.
  3. <a>Parse a date component</a> to obtain <var>year</var>, <var>month</var>, and
      <var>day</var>. If this returns nothing, then fail.
  4. If <var>position</var> is beyond the end of <var>input</var> or if the character at
      <var>position</var> is neither a U+0054 LATIN CAPITAL LETTER T character (T) nor a U+0020
      SPACE character, then fail. Otherwise, move <var>position</var> forwards one character.
  5. <a>Parse a time component</a> to obtain <var>hour</var>, <var>minute</var>, and
      <var>second</var>. If this returns nothing, then fail.
  6. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
  7. Let <var>date</var> be the date with year <var>year</var>, month <var>month</var>, and day
      <var>day</var>.
  8. Let <var>time</var> be the time with hour <var>hour</var>, minute <var>minute</var>, and
      second <var>second</var>.
  9. Return <var>date</var> and <var>time</var>.

<h5 id="time-zones">Time zones</h5>

  A <dfn lt="time zone|time-zone offset">time-zone offset</dfn> consists of a signed number of hours and minutes.

  A string is a <dfn export>valid time-zone offset string</dfn> representing a time-zone offset if it
  consists of either:

  * A U+005A LATIN CAPITAL LETTER Z character (Z), allowed only if the time zone is UTC
  * Or, the following components, in the given order:
    1. Either a U+002B PLUS SIGN character (+) or, if the time-zone offset is not zero, a U+002D
        HYPHEN-MINUS character (-), representing the sign of the time-zone offset
    2. Two <a>ASCII digits</a>, representing the hours component <var>hour</var> of the
        time-zone offset, in the range 0&nbsp;≤&nbsp;<var>hour</var>&nbsp;≤&nbsp;23
    3. Optionally, a U+003A COLON character (:)
    4. Two <a>ASCII digits</a>, representing the minutes component <var>minute</var> of the
        time-zone offset, in the range 0&nbsp;≤&nbsp;<var>minute</var>&nbsp;≤&nbsp;59

  <p class="note">
    This format allows for time-zone offsets from -23:59 to +23:59. In practice, however, right now
    the range of offsets of actual time zones is -12:00 to +14:00, and the minutes component of
    offsets of actual time zones is always either 00, 30, or 45. There is no guarantee that this
    will remain so forever, however; time zones are changed by countries at will and do not follow a
    standard.
  </p>

  <p class="note">
    See also the usage notes and examples in the <a>global date and time</a> section below for
    details on using time-zone offsets with historical times that predate the formation of formal
    time zones.
  </p>

  The rules to <dfn lt="parsing a time-zone offset string|parse a time-zone offset string">parse a time-zone offset string</dfn> are as follows. This will return either
  a time-zone offset, or nothing. If at any point the algorithm says that it "fails", this means
  that it is aborted at that point and returns nothing.

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
      of the string.
  3. <a>Parse a time-zone offset component</a> to obtain <var>timezone<sub>hours</sub></var> and
      <var>timezone<sub>minutes</sub></var>. If this returns nothing, then fail.
  4. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
  5. Return the time-zone offset that is <var>timezone<sub>hours</sub></var> hours and
      <var>timezone<sub>minutes</sub></var> minutes from UTC.

  The rules to <dfn export>parse a time-zone offset component</dfn>, given an <var>input</var> string and
  a <var>position</var>, are as follows. This will return either time-zone hours and time-zone
  minutes, or nothing. If at any point the algorithm says that it "fails", this means that it is
  aborted at that point and returns nothing.

  1. If the character at <var>position</var> is a U+005A LATIN CAPITAL LETTER Z character (Z), then:
      1. Let <var>timezone<sub>hours</sub></var> be 0.
      2. Let <var>timezone<sub>minutes</sub></var> be 0.
      3. Advance <var>position</var> to the next character in <var>input</var>.

      Otherwise, if the character at <var>position</var> is either a U+002B PLUS SIGN (+) or a
      U+002D HYPHEN-MINUS (-), then:

      1. If the character at <var>position</var> is a U+002B PLUS SIGN (+), let <var>sign</var> be
          "positive". Otherwise, it's a U+002D HYPHEN-MINUS (-); let <var>sign</var> be
          "negative".
      2. Advance <var>position</var> to the next character in <var>input</var>.
      3. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. Let <var>s</var> be
          the collected sequence.
      4. If <var>s</var> is exactly two characters long, then run these substeps:
          1. Interpret <var>s</var> as a base-ten integer. Let that number be the
              <var>timezone<sub>hours</sub></var>.
          2. If <var>position</var> is beyond the end of <var>input</var> or if the character at
              <var>position</var> is not a U+003A COLON character, then fail. Otherwise, move
              <var>position</var> forwards one character.
          3. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the
              collected sequence is not exactly two characters long, then fail. Otherwise,
              interpret the resulting sequence as a base-ten integer. Let that number be the
              <var>timezone<sub>minutes</sub></var>.

          If <var>s</var> is exactly four characters long, then run these substeps:

          1. Interpret the first two characters of <var>s</var> as a base-ten integer. Let that
              number be the <var>timezone<sub>hours</sub></var>.
          2. Interpret the last two characters of <var>s</var> as a base-ten integer. Let that
              number be the <var>timezone<sub>minutes</sub></var>.

          Otherwise, fail.

      5. If <var>timezone<sub>hours</sub></var> is not a number in the range
          0&nbsp;≤&nbsp;<var>timezone<sub>hours</sub></var>&nbsp;≤&nbsp;23, then fail.
      6. If <var>sign</var> is "negative", then negate <var>timezone<sub>hours</sub></var>.
      7. If <var>timezone<sub>minutes</sub></var> is not a number in the range
          0&nbsp;≤&nbsp;<var>timezone<sub>minutes</sub></var>&nbsp;≤&nbsp;59, then fail.
      8. If <var>sign</var> is "negative", then negate <var>timezone<sub>minutes</sub></var>.

      Otherwise, fail.

  2. Return <var>timezone<sub>hours</sub></var> and <var>timezone<sub>minutes</sub></var>.

<h5 id="global-dates-and-times">Global dates and times</h5>

  A <dfn export>global date and time</dfn> consists of a specific <a>proleptic-Gregorian date</a>,
  consisting of a year, a month, and a day, and a time, consisting of an hour, a minute, a second,
  and a fraction of a second, expressed with a time-zone offset, consisting of a signed number of
  hours and minutes. [[GREGORIAN]]

  A string is a <dfn export>valid global date and time string</dfn> representing a date, time, and a
  time-zone offset if it consists of the following components in the given order:

  1. A <a>valid date string</a> representing the date
  2. A U+0054 LATIN CAPITAL LETTER T character (T) or a U+0020 SPACE character
  3. A <a>valid time string</a> representing the time
  4. A <a>valid time-zone offset string</a> representing the time-zone offset

  Times in dates before the formation of UTC in the mid twentieth century must be expressed and
  interpreted in terms of UT1 (contemporary Earth mean solar time at the 0&deg; longitude), not UTC
  (the approximation of UT1 that ticks in SI seconds). Time before the formation of time zones must
  be expressed and interpreted as UT1 times with explicit time zones that approximate the
  contemporary difference between the appropriate local time and the time observed at the location
  of Greenwich, London.

  <div class="example">
    The following are some examples of dates written as <a>valid global date and time strings</a>.

    : "<code>0037-12-13 00:00Z</code>"
    :: Midnight "London time" (UTC) on the birthday of the Roman Emperor Nero. See below
        for further discussion on which date this actually corresponds to.

    : "<code>1979-10-14T12:00:00.001-04:00</code>"
    :: One millisecond after noon on October 14th 1979, in the time zone in use on the east coast of
        the USA during daylight saving time.

    : "<code>8592-01-01T02:09+02:09</code>"
    :: Midnight UTC on the 1st of January, 8592. The time zone associated with that time is two
        hours and nine minutes ahead of UTC, which is not currently a real time zone, but is
        nonetheless allowed.

    Several things are notable about these dates:

    * Years with fewer than four digits have to be zero-padded. The date "37-12-13" is not a
        valid date.
    * If the "<code>T</code>" is replaced by a space, it must be a single space character. The
        string "<code>2001-12-21&nbsp;&nbsp;12:00Z</code>" (with two spaces between the components)
        would not be parsed successfully.
    * To unambiguously identify a date it has to be first converted to the Gregorian calendar
        (e.g., from the Hijri, Jewish, Julian or other calendar).
        For example, the Roman Emperor Nero was born on the 15th of December 37
        in the Julian Calendar, which is the 13th of December 37 in the <a>proleptic Gregorian calendar</a>.
    * The time and time-zone offset components are not optional.
    * Dates before the year one or after the year 9999 in the Gregorian calendar
        cannot be represented as a datetime in this version of HTML.
    * Time-zone offsets for a place may vary, for example due to daylight savings time.
  </div>

  <p class="note">
    The zone offset is not a complete time zone specification. When working with real date and time
    values, consider using a separate field for time zone, perhaps using IANA time zone IDs.
    [[TIMEZONE]]
  </p>

  A string is a <dfn export>valid normalized global date and time string</dfn> representing a
  date, time, and a time-zone offset if it consists of the following components in the given order:

  1. A <a>valid date string</a> representing the date converted to the UTC time zone
  2. A U+0054 LATIN CAPITAL LETTER T character (T)
  3. A <a>valid time string</a> representing the time converted to the UTC time zone and expressed
      as the shortest possible string for the given time (e.g., omitting the seconds component
      entirely if the given time is zero seconds past the minute)
  4. A U+005A LATIN CAPITAL LETTER Z character (Z)

  The rules to <dfn lt="parse a global date and time string|parsing a date and time">parse a global date and time string</dfn> are as follows. This will return
  either a time in UTC, with associated time-zone offset information for round-tripping or display
  purposes, or nothing. If at any point the algorithm says that it "fails", this means that it is
  aborted at that point and returns nothing.

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
      of the string.
  3. <a>Parse a date component</a> to obtain <var>year</var>, <var>month</var>, and
      <var>day</var>. If this returns nothing, then fail.
  4. If <var>position</var> is beyond the end of <var>input</var> or if the character at
      <var>position</var> is neither a U+0054 LATIN CAPITAL LETTER T character (T) nor a U+0020
      SPACE character, then fail. Otherwise, move <var>position</var> forwards one character.
  5. <a>Parse a time component</a> to obtain <var>hour</var>, <var>minute</var>, and
      <var>second</var>. If this returns nothing, then fail.
  6. If <var>position</var> is beyond the end of <var>input</var>, then fail.
  7. <a>Parse a time-zone offset component</a> to obtain <var>timezone<sub>hours</sub></var> and
      <var>timezone<sub>minutes</sub></var>. If this returns nothing, then fail.
  8. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
  9. Let <var>time</var> be the moment in time at year <var>year</var>, month <var>month</var>,
      day <var>day</var>, hours <var>hour</var>, minute <var>minute</var>, second
      <var>second</var>, subtracting <var>timezone<sub>hours</sub></var> hours and
      <var>timezone<sub>minutes</sub></var> minutes. That moment in time is a moment in the UTC
      time zone.
  10. Let <var>timezone</var> be <var>timezone<sub>hours</sub></var> hours and
      <var>timezone<sub>minutes</sub></var> minutes from UTC.
  11. Return <var>time</var> and <var>timezone</var>.

<h5 id="weeks">Weeks</h5>

  A <dfn>week</dfn> consists of a week-year number and a week number representing a seven-day period
  starting on a Monday. Each week-year in this calendaring system has either 52 or 53 such seven-day
  periods, as defined below. The seven-day period starting on the Gregorian date Monday December
  29th 1969 (1969-12-29) is defined as week number 1 in week-year 1970. Consecutive weeks are
  numbered sequentially. The week before the number 1 week in a week-year is the last week in the
  previous week-year, and vice versa. [[GREGORIAN]]

  A week-year with a number <var>year</var> has 53 weeks if it corresponds to either a year
  <var>year</var> in the <a>proleptic Gregorian calendar</a> that has a Thursday as its first
  day (January 1st), or a year <var>year</var> in the <a>proleptic Gregorian calendar</a> that has
  a Wednesday as its first day (January 1st) and where <var>year</var> is a number divisible by 400,
  or a number divisible by 4 but not by 100. All other week-years have 52 weeks.

  The <dfn>week number of the last day</dfn> of a week-year with 53 weeks is 53; the week number of
  the last day of a week-year with 52 weeks is 52.

  <p class="note">
    The week-year number of a particular day can be different than the number of the year that
    contains that day in the <a>proleptic Gregorian calendar</a>. The first week in a week-year
    <var>y</var> is the week that contains the first Thursday of the Gregorian year <var>y</var>.

  <p class="note">
    For modern purposes, a <a>week</a> as defined here is equivalent to ISO weeks as defined in
    ISO 8601. [[ISO8601]]

    A string is a <dfn export>valid week string</dfn> representing a week-year <var>year</var> and week
    <var>week</var> if it consists of the following components in the given order:
  </p>

  1. Four <a>ASCII digits</a>, representing <var>year</var>, where
      <var>year</var>&nbsp;&gt;=&nbsp;1
  2. A U+002D HYPHEN-MINUS character (-)
  3. A U+0057 LATIN CAPITAL LETTER W character (W)
  4. Two <a>ASCII digits</a>, representing the week <var>week</var>, in the range
      1&nbsp;≤&nbsp;<var>week</var>&nbsp;≤&nbsp;<var>maxweek</var>, where <var>maxweek</var>
      is the <a>week number of the last day</a> of week-year <var>year</var>

  The rules to <dfn lt="parsing a week string|parse a week string|parsing a week">parse a week string</dfn> are as follows. This will return either a week-year
  number and week number, or nothing. If at any point the algorithm says that it "fails", this
  means that it is aborted at that point and returns nothing.

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
      of the string.
  3. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
      sequence is not at least four characters long, then fail. Otherwise, interpret the resulting
      sequence as a base-ten integer. Let that number be the <var>year</var>.
  4. If <var>year</var> is not a number greater than zero, then fail.
  5. If <var>position</var> is beyond the end of <var>input</var> or if the character at
      <var>position</var> is not a U+002D HYPHEN-MINUS character, then fail. Otherwise, move
      <var>position</var> forwards one character.
  6. If <var>position</var> is beyond the end of <var>input</var> or if the character at
      <var>position</var> is not a U+0057 LATIN CAPITAL LETTER W character (W), then fail.
      Otherwise, move <var>position</var> forwards one character.
  7. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. If the collected
      sequence is not exactly two characters long, then fail. Otherwise, interpret the resulting
      sequence as a base-ten integer. Let that number be the <var>week</var>.
  8. Let <var>maxweek</var> be the <a>week number of the last day</a> of year <var>year</var>.
  9. If <var>week</var> is not a number in the range
      1&nbsp;≤&nbsp;<var>week</var>&nbsp;≤&nbsp;<var>maxweek</var>, then fail.
  10. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
  11. Return the week-year number <var>year</var> and the week number <var>week</var>.

<h5 id="durations">Durations</h5>

  A <dfn>duration</dfn> consists of a number of seconds.

  <p class="note">
    Since months and seconds are not comparable (a month is not a precise number of seconds, but is
    instead a period whose exact length depends on the precise day from which it is measured) a
    <a>duration</a> as defined in this specification cannot include months (or years, which are
    equivalent to twelve months). Only durations that describe a specific number of seconds can be
    described.
  </p>

  A string is a <dfn export>valid duration string</dfn> representing a <a>duration</a> <var>t</var> if it
  consists of either of the following:

  * A literal U+0050 LATIN CAPITAL LETTER P character followed by one or more of the following
    subcomponents, in the order given, where the number of days, hours, minutes, and seconds
    corresponds to the same number of seconds as in <var>t</var>:

    1. One or more <a>ASCII digits</a> followed by a U+0044 LATIN CAPITAL LETTER D character,
        representing a number of days.
    2. A U+0054 LATIN CAPITAL LETTER T character followed by one or more of the following
        subcomponents, in the order given:
        1. One or more <a>ASCII digits</a> followed by a U+0048 LATIN CAPITAL LETTER H
            character, representing a number of hours.
        2. One or more <a>ASCII digits</a> followed by a U+004D LATIN CAPITAL LETTER M
            character, representing a number of minutes.
        3. The following components:
            1. One or more <a>ASCII digits</a>, representing a number of seconds.
            2. Optionally, a U+002E FULL STOP character (.) followed by one, two, or three
                <a>ASCII digits</a>, representing a fraction of a second.
            3. A U+0053 LATIN CAPITAL LETTER S character.

    <p class="note">
      This, as with a number of other date- and time-related microsyntaxes defined in this
      specification, is based on one of the formats defined in ISO 8601. [[ISO8601]]
    </p>

  * One or more <a>duration time components</a>, each with a different
    <a>duration time component scale</a>, in any order; the sum of the represented seconds being
    equal to the number of seconds in <var>t</var>.

    A <dfn export>duration time component</dfn> is a string consisting of the following components:

      1. Zero or more [=space characters=].
      2. One or more <a>ASCII digits</a>, representing a number of time units, scaled by the
          <a>duration time component scale</a> specified (see below) to represent a number of
          seconds.
      3. If the <a>duration time component scale</a> specified is 1 (i.e., the units are seconds),
         then, optionally, a U+002E FULL STOP character (.) followed by one, two, or three
         <a>ASCII digits</a>, representing a fraction of a second.
      4. Zero or more [=space characters=].
      5. One of the following characters, representing the
          <dfn export>duration time component scale</dfn> of the time unit used in the numeric part of
          the <a>duration time component</a>:

          : U+0057 LATIN CAPITAL LETTER W character
          : U+0077 LATIN SMALL LETTER W character
          :: Weeks. The scale is 604800.

          : U+0044 LATIN CAPITAL LETTER D character
          : U+0064 LATIN SMALL LETTER D character
          :: Days. The scale is 86400.

          : U+0048 LATIN CAPITAL LETTER H character
          : U+0068 LATIN SMALL LETTER H character
          :: Hours. The scale is 3600.

          : U+004D LATIN CAPITAL LETTER M character
          : U+006D LATIN SMALL LETTER M character
          :: Minutes. The scale is 60.

          : U+0053 LATIN CAPITAL LETTER S character
          : U+0073 LATIN SMALL LETTER S character
          :: Seconds. The scale is 1.

      6. Zero or more [=space characters=].

      <p class="note">
        This is not based on any of the formats in ISO 8601. It is intended to be a more
        human-readable alternative to the ISO 8601 duration format.
      </p>

  The rules to <dfn lt="parsing a duration string|parse a duration string">parse a duration string</dfn> are as follows. This will return either a
  <a>duration</a> or nothing. If at any point the algorithm says that it "fails", this means that
  it is aborted at that point and returns nothing.

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
      of the string.
  3. Let <var>months</var>, <var>seconds</var>, and <var>component count</var> all be zero.
  4. Let <var>M-disambiguator</var> be <i>minutes</i>.
      <p class="note">
        This flag's other value is <i>months</i>. It is used to disambiguate the "M" unit in
        ISO8601 durations, which use the same unit for months and minutes. Months are not allowed,
        but are parsed for future compatibility and to avoid misinterpreting ISO8601 durations
        that would be valid in other contexts.
      </p>
  5. <a>Skip white space</a>.
  6. If <var>position</var> is past the end of <var>input</var>, then fail.
  7. If the character in <var>input</var> pointed to by <var>position</var> is a U+0050 LATIN
      CAPITAL LETTER P character, then advance <var>position</var> to the next character, set
      <var>M-disambiguator</var> to <i>months</i>, and <a>skip white space</a>.
  8. Run the following substeps in a loop, until a step requiring the loop to be broken or the
      entire algorithm to fail is reached:
      1. Let <var>units</var> be undefined. It will be assigned one of the following values:
          <i>years</i>, <i>months</i>, <i>weeks</i>, <i>days</i>, <i>hours</i>, <i>minutes</i>,
          and <i>seconds</i>.
      2. Let <var>next character</var> be undefined. It is used to process characters from the
          <var>input</var>.
      3. If <var>position</var> is past the end of <var>input</var>, then break the loop.
      4. If the character in <var>input</var> pointed to by <var>position</var> is a U+0054 LATIN
          CAPITAL LETTER T character, then advance <var>position</var> to the next character, set
          <var>M-disambiguator</var> to <i>minutes</i>, <a>skip white space</a>, and return to the
          top of the loop.
      5. Set <var>next character</var> to the character in <var>input</var> pointed to by
          <var>position</var>.
      6. If <var>next character</var> is a U+002E FULL STOP character (.), then let <var>N</var>
          equal zero. (Do not advance <var>position</var>. That is taken care of below.)

          Otherwise, if <var>next character</var> is an <a>ASCII digit</a>, then <a>collect a
          sequence of characters</a> that are <a>ASCII digits</a>, interpret the resulting
          sequence as a base-ten integer, and let <var>N</var> be that number.

          Otherwise <var>next character</var> is not part of a number; fail.

      7. If <var>position</var> is past the end of <var>input</var>, then fail.
      8. Set <var>next character</var> to the character in <var>input</var> pointed to by
          <var>position</var>, and this time advance <var>position</var> to the next character.
          (If <var>next character</var> was a U+002E FULL STOP character (.) before, it will still
          be that character this time.)
      9. If <var>next character</var> is a U+002E FULL STOP character (.), then run these
          substeps:
          1. <a>Collect a sequence of characters</a> that are <a>ASCII digits</a>. Let
              <var>s</var> be the resulting sequence.
          2. If <var>s</var> is the empty string, then fail.
          3. Let <var>length</var> be the number of characters in <var>s</var>.
          4. Let <var>fraction</var> be the result of interpreting <var>s</var> as a base-ten
              integer, and then dividing that number by 10<sup><var>length</var></sup>.
          5. Increment <var>N</var> by <var>fraction</var>.
          6. <a>Skip white space</a>.
          7. If <var>position</var> is past the end of <var>input</var>, then fail.
          8. Set <var>next character</var> to the character in <var>input</var> pointed to by
              <var>position</var>, and advance <var>position</var> to the next character.
          9. If <var>next character</var> is neither a U+0053 LATIN CAPITAL LETTER S character nor
              a U+0073 LATIN SMALL LETTER S character, then fail.
          10. Set <var>units</var> to <i>seconds</i>.

          Otherwise, run these substeps:

          1. If <var>next character</var> is a <a>space character</a>, then
              <a>skip white space</a>, set <var>next character</var> to the character in
              <var>input</var> pointed to by <var>position</var>, and advance <var>position</var>
              to the next character.
          2. If <var>next character</var> is a U+0059 LATIN CAPITAL LETTER Y character, or a
              U+0079 LATIN SMALL LETTER Y character, set <var>units</var> to <i>years</i> and set
              <var>M-disambiguator</var> to <i>months</i>.

              If <var>next character</var> is a U+004D LATIN CAPITAL LETTER M character or a
              U+006D LATIN SMALL LETTER M character, and <var>M-disambiguator</var> is
              <i>months</i>, then set <var>units</var> to <i>months</i>.

              If <var>next character</var> is a U+0057 LATIN CAPITAL LETTER W character or a
              U+0077 LATIN SMALL LETTER W character, set <var>units</var> to <i>weeks</i> and set
              <var>M-disambiguator</var> to <i>minutes</i>.

              If <var>next character</var> is a U+0044 LATIN CAPITAL LETTER D character or a
              U+0064 LATIN SMALL LETTER D character, set <var>units</var> to <i>days</i> and set
              <var>M-disambiguator</var> to <i>minutes</i>.

              If <var>next character</var> is a U+0048 LATIN CAPITAL LETTER H character or a
              U+0068 LATIN SMALL LETTER H character, set <var>units</var> to <i>hours</i> and set
              <var>M-disambiguator</var> to <i>minutes</i>.

              If <var>next character</var> is a U+004D LATIN CAPITAL LETTER M character or a
              U+006D LATIN SMALL LETTER M character, and <var>M-disambiguator</var> is
              <i>minutes</i>, then set <var>units</var> to <i>minutes</i>.

              If <var>next character</var> is a U+0053 LATIN CAPITAL LETTER S character or a
              U+0073 LATIN SMALL LETTER S character, set <var>units</var> to <i>seconds</i> and
              set <var>M-disambiguator</var> to <i>minutes</i>.

              Otherwise if <var>next character</var> is none of the above characters, then fail.

      10. Increment <var>component count</var>.
      11. Let <var>multiplier</var> be 1.
      12. If <var>units</var> is <i>years</i>, multiply <var>multiplier</var> by 12 and set
          <var>units</var> to <i>months</i>.
      13. If <var>units</var> is <i>months</i>, add the product of <var>N</var> and
          <var>multiplier</var> to <var>months</var>.

          Otherwise, run these substeps:

          1. If <var>units</var> is <i>weeks</i>, multiply <var>multiplier</var> by 7 and set
              <var>units</var> to <i>days</i>.
          2. If <var>units</var> is <i>days</i>, multiply <var>multiplier</var> by 24 and set
              <var>units</var> to <i>hours</i>.
          3. If <var>units</var> is <i>hours</i>, multiply <var>multiplier</var> by 60 and set
              <var>units</var> to <i>minutes</i>.
          4. If <var>units</var> is <i>minutes</i>, multiply <var>multiplier</var> by 60 and set
              <var>units</var> to <i>seconds</i>.
          5. Forcibly, <var>units</var> is now <i>seconds</i>. Add the product of <var>N</var> and
              <var>multiplier</var> to <var>seconds</var>.
      14. <a>Skip white space</a>.

  9. If <var>component count</var> is zero, fail.
  10. If <var>months</var> is not zero, fail.
  11. Return the <a>duration</a> consisting of <var>seconds</var> seconds.

<h5 id="vaguer-moments-in-time">Vaguer moments in time</h5>

  A string is a <dfn export>valid date string with optional time</dfn> if it is also one of the following:

  * A <a>valid date string</a>
  * A <a>valid global date and time string</a>

  <hr />

  The rules to <dfn export>parse a date or time string</dfn> are as follows. The algorithm will return
  either a <a for="dates">date</a>, a <a>time</a>, a <a>global date and time</a>, or nothing. If at any point
  the algorithm says that it "fails", this means that it is aborted at that point and returns
  nothing.

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
      of the string.
  3. Set <var>start position</var> to the same position as <var>position</var>.
  4. Set the <var>date present</var> and <var>time present</var> flags to true.
  5. <a>Parse a date component</a> to obtain <var>year</var>, <var>month</var>, and
      <var>day</var>. If this fails, then set the <var>date present</var> flag to false.
  6. If <var>date present</var> is true, and <var>position</var> is not beyond the end of
      <var>input</var>, and the character at <var>position</var> is either a U+0054 LATIN CAPITAL
      LETTER T character (T) or a U+0020 SPACE character, then advance <var>position</var> to the
      next character in <var>input</var>.

      Otherwise, if <var>date present</var> is true, and either <var>position</var> is beyond the
      end of <var>input</var> or the character at <var>position</var> is neither a U+0054 LATIN
      CAPITAL LETTER T character (T) nor a U+0020 SPACE character, then set
      <var>time present</var> to false.

      Otherwise, if <var>date present</var> is false, set <var>position</var> back to the same
      position as <var>start position</var>.

  7. If the <var>time present</var> flag is true, then <a>parse a time component</a> to obtain
      <var>hour</var>, <var>minute</var>, and <var>second</var>. If this returns nothing, then
      fail.
  8. If the <var>date present</var> and <var>time present</var> flags are both true, but
      <var>position</var> is beyond the end of <var>input</var>, then fail.
  9. If the <var>date present</var> and <var>time present</var> flags are both true,
      <a>parse a time-zone offset component</a> to obtain <var>timezone<sub>hours</sub></var> and
      <var>timezone<sub>minutes</sub></var>. If this returns nothing, then fail.
  10. If <var>position</var> is <em>not</em> beyond the end of <var>input</var>, then fail.
  11. If the <var>date present</var> flag is true and the <var>time present</var> flag is false,
      then let <var>date</var> be the date with year <var>year</var>, month <var>month</var>, and
      day <var>day</var>, and return <var>date</var>.

      Otherwise, if the <var>time present</var> flag is true and the <var>date present</var> flag
      is false, then let <var>time</var> be the time with hour <var>hour</var>, minute
      <var>minute</var>, and second <var>second</var>, and return <var>time</var>.

      Otherwise, let <var>time</var> be the moment in time at year <var>year</var>, month
      <var>month</var>, day <var>day</var>, hours <var>hour</var>, minute <var>minute</var>,
      second <var>second</var>, subtracting <var>timezone<sub>hours</sub></var> hours and
      <var>timezone<sub>minutes</sub></var> minutes, that moment in time being a moment in the UTC
      time zone; let <var>timezone</var> be <var>timezone<sub>hours</sub></var> hours and
      <var>timezone<sub>minutes</sub></var> minutes from UTC; and return <var>time</var> and
      <var>timezone</var>.

<h4 id="colors">Colors</h4>

  A <dfn export>simple color</dfn> consists of three 8-bit numbers in the range 0..255, representing the
  red, green, and blue components of the color respectively, in the sRGB color space. [[!SRGB]]

  A string is a <dfn export>valid simple color</dfn> if it is exactly seven characters long, and the first
  character is a U+0023 NUMBER SIGN character (#), and the remaining six characters are all
  <a>ASCII hex digits</a>, with the first two digits representing the red component, the middle two
  digits representing the green component, and the last two digits representing the blue component,
  in hexadecimal.

  A string is a <dfn export>valid lowercase simple color</dfn> if it is a <a>valid simple color</a> and
  doesn't use any characters in the range U+0041 LATIN CAPITAL LETTER A to U+0046 LATIN CAPITAL
  LETTER F.

  The <dfn export>rules for parsing simple color values</dfn> are as given in the following algorithm.
  When invoked, the steps must be followed in the order given, aborting at the first step that
  returns a value. This algorithm will return either a <a>simple color</a> or an error.

  1. Let <var>input</var> be the string being parsed.
  2. If <var>input</var> is not exactly seven characters long, then return an error.
  3. If the first character in <var>input</var> is not a U+0023 NUMBER SIGN character (#), then
      return an error.
  4. If the last six characters of <var>input</var> are not all <a>ASCII hex digits</a>, then
      return an error.
  5. Let <var>result</var> be a <a>simple color</a>.
  6. Interpret the second and third characters as a hexadecimal number and let the result be the
      red component of <var>result</var>.
  7. Interpret the fourth and fifth characters as a hexadecimal number and let the result be the
      green component of <var>result</var>.
  8. Interpret the sixth and seventh characters as a hexadecimal number and let the result be the
      blue component of <var>result</var>.
  9. Return <var>result</var>.

  The <dfn export>rules for serializing simple color values</dfn> given a <a>simple color</a> are as
  given in the following algorithm:

  1. Let <var>result</var> be a string consisting of a single U+0023 NUMBER SIGN character (#).
  2. Convert the red, green, and blue components in turn to two-digit hexadecimal numbers using
      <a>lowercase ASCII hex digits</a>, zero-padding if necessary, and append these numbers to
      <var>result</var>, in the order red, green, blue.
  3. Return <var>result</var>, which will be a <a>valid lowercase simple color</a>.

  <hr />

  Some obsolete legacy attributes parse colors in a more complicated manner, using the <dfn>rules
  for parsing a legacy color value</dfn>, which are given in the following algorithm. When
  invoked, the steps must be followed in the order given, aborting at the first step that returns
  a value. This algorithm will return either a <a>simple color</a> or an error.

  1. Let <var>input</var> be the string being parsed.
  2. If <var>input</var> is the empty string, then return an error.
  3. <a>Strip leading and trailing white space</a> from <var>input</var>.
  4. If <var>input</var> is an <a>ASCII case-insensitive</a> match for the string
      "<code>transparent</code>", then return an error.
  5. If <var>input</var> is an <a>ASCII case-insensitive</a> match for one of the
      <a>named colors</a>, then return the <a>simple color</a> corresponding to that keyword.
      [[!CSS3COLOR]]

      <p class="note"><a>CSS2 System Colors</a> are not recognized.</p>

  6. If <var>input</var> is four characters long, and the first character in <var>input</var> is a
      U+0023 NUMBER SIGN character (#), and the last three characters of <var>input</var> are all
      <a>ASCII hex digits</a>, then run these substeps:
      1. Let <var>result</var> be a <a>simple color</a>.
      2. Interpret the second character of <var>input</var> as a hexadecimal digit; let the red
          component of <var>result</var> be the resulting number multiplied by 17.
      3. Interpret the third character of <var>input</var> as a hexadecimal digit; let the green
          component of <var>result</var> be the resulting number multiplied by 17.
      4. Interpret the fourth character of <var>input</var> as a hexadecimal digit; let the blue
          component of <var>result</var> be the resulting number multiplied by 17.
      5. Return <var>result</var>.

  7. Replace any characters in <var>input</var> that have a Unicode code point greater than U+FFFF
      (i.e., any characters that are not in the basic multilingual plane) with the two-character
      string "<code>00</code>".
  8. If <var>input</var> is longer than 128 characters, truncate <var>input</var>, leaving only
      the first 128 characters.
  9. If the first character in <var>input</var> is a U+0023 NUMBER SIGN character (#), remove it.
  10. Replace any character in <var>input</var> that is not an <a>ASCII hex digit</a> with the
      character U+0030 DIGIT ZERO (0).
  11. While <var>input</var>'s length is zero or not a multiple of three, append a U+0030 DIGIT
      ZERO (0) character to <var>input</var>.
  12. Split <var>input</var> into three strings of equal length, to obtain three components. Let
      <var>length</var> be the length of those components (one third the length of
      <var>input</var>).
  13. If <var>length</var> is greater than 8, then remove the leading <var>length</var>-8
      characters in each component, and let <var>length</var> be 8.
  14. While <var>length</var> is greater than two and the first character in each component is a
      U+0030 DIGIT ZERO (0) character, remove that character and reduce <var>length</var> by one.
  15. If <var>length</var> is <em>still</em> greater than two, truncate each component, leaving
      only the first two characters in each.
  16. Let <var>result</var> be a <a>simple color</a>.
  17. Interpret the first component as a hexadecimal number; let the red component of
      <var>result</var> be the resulting number.
  18. Interpret the second component as a hexadecimal number; let the green component of
      <var>result</var> be the resulting number.
  19. Interpret the third component as a hexadecimal number; let the blue component of
      <var>result</var> be the resulting number.
  20. Return <var>result</var>.

<h4 id="space-separated-tokens">Space-separated tokens</h4>

  A <dfn export>set of space-separated tokens</dfn> is a string containing zero or more words (known as
  tokens) separated by one or more [=space characters=], where words consist of any string of one
  or more characters, none of which are [=space characters=].

  A string containing a <a>set of space-separated tokens</a> may have leading or trailing
  [=space characters=].

  An <dfn export>unordered set of unique space-separated tokens</dfn> is a
  <a>set of space-separated tokens</a> where none of the tokens are duplicated.

  An <dfn export>ordered set of unique space-separated tokens</dfn> is a
  <a>set of space-separated tokens</a> where none of the tokens are duplicated but where the order
  of the tokens is meaningful.

  <a lt="set of space-separated tokens">Sets of space-separated tokens</a> sometimes have a defined set of allowed values. When a set
  of allowed values is defined, the tokens must all be from that list of allowed values; other
  values are non-conforming. If no such set of allowed values is provided, then all values are
  conforming.

  <p class="note">
    How tokens in a <a>set of space-separated tokens</a> are to be compared (e.g., case-sensitively
    or not) is defined on a per-set basis.
  </p>

  When a user agent has to <dfn export>split a string on spaces</dfn>, it must use the following
  algorithm:

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
      of the string.
  3. Let <var>tokens</var> be an ordered list of tokens, initially empty.
  4. <a>Skip white space</a>
  5. While <var>position</var> is not past the end of <var>input</var>:
      1. <a>Collect a sequence of characters</a> that are not [=space characters=].
      2. Append the string collected in the previous step to <var>tokens</var>.
      3. <a>Skip white space</a>
  6. Return <var>tokens</var>.

<h4 id="comma-separated-tokens">Comma-separated tokens</h4>

  A <dfn export>set of comma-separated tokens</dfn> is a string containing zero or more tokens each
  separated from the next by a single U+002C COMMA character (,), where tokens consist of any string
  of zero or more characters, neither beginning nor ending with [=space characters=], nor
  containing any U+002C COMMA characters (,), and optionally surrounded by [=space characters=].

  <p class="example">
    For instance, the string "<code>&nbsp;a&nbsp;,b, ,d&nbsp;d&nbsp;</code>" consists of four tokens:
    "a", "b", the empty string, and "d&nbsp;d". Leading and trailing white space around each token
    doesn't count as part of the token, and the empty string can be a token.
  </p>

  <a lt="set of comma-separated tokens">Sets of comma-separated tokens</a> sometimes have further restrictions on what consists a valid
  token. When such restrictions are defined, the tokens must all fit within those restrictions;
  other values are non-conforming. If no such restrictions are specified, then all values are
  conforming.

  When a user agent has to <dfn export>split a string on commas</dfn>, it must use the following algorithm:

  1. Let <var>input</var> be the string being parsed.
  2. Let <var>position</var> be a pointer into <var>input</var>, initially pointing at the start
      of the string.
  3. Let <var>tokens</var> be an ordered list of tokens, initially empty.
  4. <i>Token</i>: If <var>position</var> is past the end of <var>input</var>, jump to the last
      step.
  5. <a>Collect a sequence of characters</a> that are not U+002C COMMA characters (,). Let
      <var>s</var> be the resulting sequence (which might be the empty string).
  6. <a>Strip leading and trailing white space</a> from <var>s</var>.
  7. Append <var>s</var> to <var>tokens</var>.
  8. If <var>position</var> is not past the end of <var>input</var>, then the character at
      <var>position</var> is a U+002C COMMA character (,); advance <var>position</var> past that
      character.
  9. Jump back to the step labeled <i>token</i>.
  10. Return <var>tokens</var>.

<h4 id="syntax-references">References</h4>

  A <dfn export>valid hash-name reference</dfn> to an element of type <var>type</var> is a
  string consisting of a U+0023 NUMBER SIGN character (#) followed by a string which exactly matches
  the value of the <code>name</code> attribute of an element with type <var>type</var> in
  the document.

  The <dfn export>rules for parsing a hash-name reference</dfn> to an element of type <var>type</var>,
  are as follows:

  1. If the string being parsed does not contain a U+0023 NUMBER SIGN character, or if the first
      such character in the string is the last character in the string, then return null and abort
      these steps.
  2. Let <var>s</var> be the string from the character immediately after the first U+0023 NUMBER
      SIGN character in the string being parsed up to the end of that string.
  3. Return the first element of type <var>type</var> in <a>tree order</a> that has an
      <{global/id}> attribute or a <code>name</code> attribute whose value is <var>s</var>.

<h4 id="mq">Media queries</h4>

  A string is a <dfn export>valid media query list</dfn> if it matches the
  <code>&lt;media-query-list&gt;</code> production of the Media Queries specification. [[!MEDIAQ]]

  A string <dfn lt="match the environment|matches the environment">matches the environment</dfn> of the user if it is the empty string, a string
  consisting of only [=space characters=], or is a media query list that matches the user's
  environment according to the definitions given in the Media Queries specification. [[!MEDIAQ]]

<h3 id="infrastructure-urls">URLs</h3>

<h4 id="urls-terminology">Terminology</h4>

  A <dfn export>valid URL</dfn> is a string that conforms to the
  <a data-lt="valid url string">authoring requirements for a valid url string</a>. [[!URL]]

  <div class="note">
    Typically, this means an absolute URL of the form
    <code><var>scheme</var>://<var>host(port)</var>/<var>path</var></code>
    or a relative URL which is a <var>path</var> with optional fragment and query sections,
    but this depends on the <var>scheme</var> used.

    A <var>host(port)</var> is typically a domain or IP address, otionally followed by ":" and
    a number. Not all URL schemes require or even allow a host.

    A <var>path</var> is typically a series of one or more Unicode strings separated by
    "/" characters.

    The following are all valid URLs:

    <ul class="example">
      <li><samp>this</samp> (relative URL)</li>
      <li><samp>that/over#there</samp> (relative URL with fragment)</li>
      <li><samp>https://example.com:8899/some/thing.there?perhaps</samp> (absolute https: URL)</li>
      <li><samp>irc://irc.w3.org/#html</samp> (absolute irc: url)</li>
      <li><samp>data:text/html;charset=utf-8;base64,PCFET0NUWVBFIGh0bWw+DQo8dGl0bGU+aGVsbG88L3RpdGxlPg==</samp>
      (a data: URL)</li>
      <li><samp>mailto:user@</samp> (a mailto: URL)</li>
      <li>The empty string</li>
    </ul>
  </div>

  A string is a <dfn export>valid non-empty URL</dfn> if it is a <a>valid URL</a> but it is not
  the empty string.

  A string is a <dfn export>valid URL potentially surrounded by spaces</dfn> if, after
  <a>stripping leading and trailing white space</a> from it, it is a <a>valid URL</a>.

  A string is a <dfn export>valid non-empty URL potentially surrounded by spaces</dfn> if, after
  <a>stripping leading and trailing white space</a> from it, it is a <a>valid non-empty URL</a>.

  This specification defines the URL <dfn scheme><code>about:legacy-compat</code></dfn> as a
  reserved, though unresolvable,
  <a scheme><code>about:</code></a> URL, for use in [=DOCTYPE=]s in <a>HTML documents</a>
  when needed for compatibility with XML tools. [[!RFC6694]]

  This specification defines the URL <dfn export><code>about:html-kind</code></dfn> as a reserved,
  though unresolvable, <code data-x="about protocol">about:</code> URL, that is used as an
  identifier for kinds of media tracks. [[!RFC6694]]

  This specification defines the URL <dfn scheme><code>about:srcdoc</code></dfn> as a reserved,
  though unresolvable, <a scheme><code>about:</code></a> URL, that is used as the document's
  [=Document/URL=] of <a lt="an iframe srcdoc document">`iframe` `srcdoc` documents</a>.
  [[!RFC6694]]

  The <dfn export>fallback base URL</dfn> of a {{Document}} object is the <a>absolute URL</a>
  obtained by running these substeps:

  1. If <var>document</var> is
      <a>an `iframe` `srcdoc` document</a>,
      then return the <a>document base URL</a> of the <var>Document</var>'s
      <a>browsing context</a>'s <a>browsing context container</a>'s <a>node document</a>.
  2. If <var>document</var>'s [=url/URL=] is <code>about:blank</code>, and the
      <var>Document</var>'s <a>browsing context</a> has a <a>creator browsing context</a>, then
      return the <a>creator base URL</a>.
  3. Return <var>document</var>'s [=url/URL=].

  The <dfn export>document base URL</dfn> of a {{Document}} object is the <a>absolute URL</a>
  obtained by running these substeps:

  1. If there is no <{base}> element that has an <{base/href}> attribute in the
      {{Document}}, then the <a>document base URL</a> is the {{Document}}'s
      <a>fallback base URL</a>; abort these steps.
  2. Otherwise, the <a>document base URL</a> is the <a>frozen base URL</a> of the first
      <{base}> element in the {{Document}} that has an <{base/href}>
      attribute, in <a>tree order</a>.

<h4 id="parsing-urls">Parsing URLs</h4>

  Parsing a URL is the process of taking a URL string and obtaining the <a>URL record</a> that it
  implies. While this process is defined in the WHATWG URL specification, this specification defines a
  wrapper for convenience. [[URL]]

  <p class="note">This wrapper is only useful when the character encoding for the URL parser has to
  match that of the document or environment settings object for legacy reasons. When that is not the
  case the <a>URL parser</a> can be used directly.</p>

  To <dfn lt="reparsed|parse a URL|parse|parsing|parsing of relative urls|parsing relative urls">parse a URL</dfn>
  <var>url</var>, relative to either a <var>document</var> or
  <var>environment settings object</var>, the user agent must use the following steps. Parsing a URL
  either results in failure or a <a>resulting URL string</a> and <a>resulting URL record</a>.

  1. Let <var>encoding</var> be <var>document</var>'s <a>character encoding</a>, if
      <var>document</var> was given, and <var>environment settings object</var>'s
      <a>API URL character encoding</a> otherwise.
  2. Let <var>baseURL</var> be <var>document</var>'s <a lt='document base URL'>base URL</a>, if <var>document</var> was
      given, and <var>environment settings object</var>'s <a>API base URL</a> otherwise.
  3. Let <var>urlRecord</var> be the result of applying the <a>URL parser</a> to <var>url</var>,
      with <var>baseURL</var> and <var>encoding</var>.
  4. If <var>urlRecord</var> is failure, then abort these steps with an error.
  5. Let <var>urlString</var> be the result of applying the <a>URL serializer</a> to
      <var>urlRecord</var>.
  6. Return <var>urlString</var> as the <dfn export>resulting URL string</dfn> and <var>urlRecord</var> as
      the <dfn lt="resulting URL record|resulting URL records">resulting URL record</dfn>.

<h4 id="dynamic-changes-to-base-urls">Dynamic changes to base URLs</h4>

  When a document's <a>document base URL</a> changes, all elements in that document are
  <a>affected by a base URL change</a>.

  The following are <a>base URL change steps</a>, which run when an element is
  <a>affected by a base URL change</a> (as defined by the DOM specification):

  <dl class="switch">
    <dt>If the element creates a <a>hyperlink</a></dt>
    <dd>
      If the [=url/URL=] identified by the hyperlink is being shown to the user, or if any
      data derived from that [=url/URL=] is affecting the display, then the <{links/href}>
      attribute should be <a>reparsed</a> relative to the element's <a>node document</a> and the UI
      updated appropriately.

      <p class="example">
        For example, the CSS '':link''/'':visited'' <a>pseudo-classes</a> might have been affected.
      </p>
    </dd>

    <dt>
      If the element is a <{q}>, <{blockquote}>, <{ins}>, or
      <{del}> element with a <code>cite</code> attribute
    </dt>
    <dd>
      If the [=url/URL=] identified by the <code>cite</code> attribute is being shown to
      the user, or if any data derived from that [=url/URL=] is affecting the display, then
      the [=url/URL=] should be <a>reparsed</a> relative to the element's
      <a>node document</a> and the UI updated appropriately.
    </dd>

    <dt>Otherwise</dt>
    <dd>
      The element is not directly affected.

      <p class="example">
        For instance, changing the base URL doesn't affect the image displayed by <code>img</code>
        elements, although subsequent accesses of the <code>src</code> IDL attribute from script
        will return a new <a>absolute URL</a> that might no longer correspond to the image being
        shown.
      </p>
    </dd>
  </dl>

<h3 id="fetching-resources">Fetching resources</h3>

<h4 id="fetching-resources-terminology">Terminology</h4>

  User agents can implement a variety of transfer protocols, but this specification mostly defines
  behavior in terms of HTTP. [[!HTTP]]

  The <dfn lt="or equivalent|HTTP GET method">HTTP GET method</dfn> is equivalent to the default retrieval action of the protocol.
  For example, RETR in FTP. Such actions are idempotent and safe, in HTTP terms.

  The <dfn export>HTTP response codes</dfn> are equivalent to statuses in other protocols that have the
  same basic meanings. For example, a "file not found" error is equivalent to a 404 code, a server
  error is equivalent to a 5xx code, and so on.

  The <dfn export>HTTP headers</dfn> are equivalent to fields in
  other protocols that have the same basic meaning. For example, the HTTP authentication headers
  are equivalent to the authentication aspects of the FTP protocol.

  A <dfn export>referrer source</dfn> is either a {{Document}} or a [=url/URL=].

  To <dfn lt="creating a potential-cors request|create a potential-CORS request">create a potential-CORS request</dfn>, given a <var>url</var>,
  <var>corsAttributeState</var>, and an optional <i>same-origin fallback flag</i>, run these steps:

  1. Let <var>mode</var> be "<code>no-cors</code>" if <var>corsAttributeState</var> is
      <a state for="cors">No CORS</a>, and "<code>cors</code>" otherwise.

  2. If <i>same-origin fallback flag</i> is set and <var>mode</var> is "<code>no-cors</code>", set
      <var>mode</var> to "<code>same-origin</code>".

  3. Let <var>credentialsMode</var> be "<code>include</code>".

  4. If <var>corsAttributeState</var> is <a>Anonymous</a>, set <var>credentialsMode</var> to
      "<code>same-origin</code>".

  5. Let <var>request</var> be a new <a>request</a> whose [=url/URL=] is <var>url</var>,
      <a>destination</a> is "<code>subresource</code>", <a>mode</a> is <var>mode</var>,
      <a>credentials mode</a> is <var>credentialsMode</var>, and whose
      <a>use-URL-credentials flag</a> is set.

<h4 id="fetching-resources-processing-model">Processing model</h4>

  When a user agent is to <a>fetch</a> a resource or [=url/URL=], optionally
  <strong>from</strong> an origin <i>origin</i>, optionally <strong>using</strong> a specific
  <a>referrer source</a> as an <i>override referrer source</i>, and optionally with any of a
  <i>synchronous flag</i>, a <i>manual redirect flag</i>, a <i>force same-origin flag</i>, and a
  <i>block cookies flag</i>, the following steps must be run. (When a <em>URL</em> is to be
  fetched, the URL identifies a resource to be obtained.)

  1. If there is a specific <i>override referrer source</i>, and it is a [=url/URL=], then let
      <var>referrer</var> be the <i>override referrer source</i>, and jump to the step labeled
      <i>clean referrer</i>.

  2. Let <var>document</var> be the appropriate {{Document}} as given by the following
      list:
      <dl class="switch">
        <dt>If there is a specific <i>override referrer source</i></dt>
        <dd>The <i>override referrer source</i>.</dd>

        <dt>When <a>navigating</a></dt>
        <dd>The <a>active document</a> of the <a>source browsing context</a>.</dd>

        <dt>When fetching resources for an element</dt>
        <dd>The element's {{Document}}.</dd>
      </dl>
  3. While <var>document</var> is <a>an `iframe` `srcdoc` document</a>, let
      <var>document</var> be <var>document</var>'s <a>browsing context</a>'s
      <a>browsing context container</a>'s {{Document}} instead.
  4. If the [=concept/origin=] of <var>Document</var> is not a scheme/host/port tuple, then
      set <var>referrer</var> to the empty string and jump to the step labeled
      <var>Clean referrer</var>.
  5. Let <var>referrer</var> be |document|'s [=Document/URL=].
  6. <var>Clean referrer</var>: Apply the <a>URL parser</a> to <var>referrer</var> and let
      <var>parsed referrer</var> be the <a>resulting URL record</a>.
  7. Let <var>referrer</var> be the result of applying the <a>URL serializer</a> to
      <var>parsed referrer</var>, with the <i>exclude fragment flag</i> set.
  8. If <var>referrer</var> is not the empty string, is not a <a scheme lt="data:"><code>data:</code> URL</a>, and
      is not the [=url/URL=] "<code>about:blank</code>", then generate the <i>address of the
      resource from which Request-URIs are obtained</i> as required by HTTP for the
      <a http-header><code>Referer</code></a> (sic) header from <var>referrer</var>. [[!HTTP]]

      Otherwise, the <a http-header><code>Referer</code></a> (sic) header must be omitted, regardless of its value.
  9. If the algorithm was not invoked with the <i>synchronous flag</i>, perform the remaining
      steps <a>in parallel</a>.
  10. If the {{Document}} with which any <a>tasks</a> <a>queued</a> by this algorithm
      would be associated doesn't have an associated <a>browsing context</a>, then abort these
      steps.
  11. This is the <i>main step</i>.

      If the resource is identified by an <a>absolute URL</a>, and the resource is to be obtained
      using an idempotent action (such as an <a>HTTP GET</a> <a>or equivalent</a>), and it is already
      being downloaded for other reasons (e.g., another invocation of this algorithm), and this
      request would be identical to the previous one (e.g., same <a http-header><code>Accept</code></a> and
      <a http-header><code>Origin</code></a> headers), and the user agent is configured such that it is to reuse the
      data from the existing download instead of initiating a new one, then use the results of the
      existing download instead of starting a new one.

      Otherwise, if the resource is identified by an <a>absolute URL</a> with a scheme that does
      not define a mechanism to obtain the resource (e.g., it is a <code>mailto:</code> URL) or
      that the user agent does not support, then act as if the resource was an HTTP 204 No Content
      response with no other metadata.

      Otherwise, if the resource is identified by the [=url/URL=]
      <code>about:blank</code>, then the resource is immediately available and consists
      of the empty string, with no metadata.

      Otherwise, at a time convenient to the user and the user agent, download (or otherwise
      obtain) the resource, applying the semantics of the relevant specifications (e.g., performing
      an HTTP GET or POST operation, or reading the file from disk, or expanding
      <a scheme lt="data:"><code>data:</code> URLs</a>, etc).

      For the purposes of the <a http-header><code>Referer</code></a> (sic) header, use the
      <i>address of the resource from which Request-URIs are obtained</i> generated in the earlier
      step.

      For the purposes of the <code>Origin</code> header, if the <a>fetching algorithm</a> was
      explicitly initiated from an <i>origin</i>, then
      <i>the origin that initiated the HTTP request</i> is <i>origin</i>. Otherwise, this is
      <i>a request from a "privacy-sensitive" context</i>. [[!ORIGIN]]
  12. If the algorithm was not invoked with the <i>block cookies flag</i>, and there are cookies
      to be set, update the cookies. [[!COOKIES]]
          <a class="fingerprint" href="#fingerprinting-vector"><img height="21" src="images/fingerprint.png" width="15" alt="(This is a fingerprinting vector.)" /></a>
  13. If the fetched resource is an HTTP redirect <a>or equivalent</a>, then:

      <dl class="switch">
        <dt>
          If the <i>force same-origin flag</i> is set and the [=url/URL=] of the target of the
          redirect does not have the <a>same origin</a> as the [=url/URL=] for which the
          <a>fetch</a> algorithm was invoked
        </dt>
        <dd>
          Abort these steps and return failure from this algorithm, as if the remote host could
          not be contacted.
        </dd>

        <dt>If the <i>manual redirect flag</i> is set</dt>
        <dd>
          Continue, using the fetched resource (the redirect) as the result of the algorithm. If
          the calling algorithm subsequently requires the user agent to
          <dfn export>transparently follow the redirect</dfn>, then the user agent must resume this
          algorithm from the <i>main step</i>, but using the target of the redirect as the
          resource to fetch, rather than the original resource.
        </dd>

        <dt>Otherwise</dt>
        <dd>
          First, apply any relevant requirements for redirects (such as showing any appropriate
          prompts). Then, redo <i>main step</i>, but using the target of the redirect as the
          resource to fetch, rather than the original resource. For HTTP requests, the new request
          must include the same headers as the original request, except for headers for which
          other requirements are specified (such as the <code>Host</code> header). [[!HTTP]]

          <p class="note">
            The HTTP specification requires that 301, 302, and 307 redirects, when applied to
            methods other than the safe methods, not be followed without user confirmation. That
            would be an appropriate prompt for the purposes of the requirement in the paragraph
            above. [[!HTTP]]
        </dd>
      </dl>
  14. If the algorithm was not invoked with the <i>synchronous flag</i>: When the resource is
      available, or if there is an error of some description, <a>queue a task</a> that uses the
      resource as appropriate. If the resource can be processed incrementally, as, for instance,
      with a progressively interlaced JPEG or an HTML file, additional tasks may be queued to
      process the data as it is downloaded. The <a>task source</a> for these <a>tasks</a> is the
      <a>networking task source</a>.

      Otherwise, return the resource or error information to the calling algorithm.

  If the user agent can determine the actual length of the resource being <a>fetched</a> for an
  instance of this algorithm, and if that length is finite, then that length is the file's
  <dfn>size</dfn>. Otherwise, the subject of the algorithm (that is, the resource being fetched)
  has no known <a>size</a>. (For example, the HTTP <a http-header><code>Content-Length</code></a> header might
  provide this information.)

  The user agent must also keep track of the <dfn export>number of bytes downloaded</dfn> for each
  instance of this algorithm. This number must exclude any out-of-band metadata, such as HTTP
  headers.

  <p class="note">
    The <a>navigation</a> processing model handles redirects itself, overriding the redirection
    handling that would be done by the <a>fetching algorithm</a>.
  </p>

  <p class="note">
    Whether the <a href="#content-type-sniffing">type sniffing rules</a> apply to the fetched resource depends on the algorithm
    that invokes the rules — they are not always applicable.
  </p>

  <h4 id="encrypted-http-and-related-security-concerns">Encrypted HTTP and related security concerns</h4>

  Anything in this specification that refers to HTTP also applies to HTTP-over-TLS, as represented
  by <a for="url">URLs</a> representing the <code>https</code> scheme. [[!HTTP]]

  <p class="warning">
    User agents should report certificate errors to the user and must either refuse to download
    resources sent with erroneous certificates or must act as if such resources were in fact
    served with no encryption.
  </p>

  User agents should warn the user that there is a potential problem whenever the user visits a
  page that the user has previously visited, if the page uses less secure encryption on the second
  visit.

  Not doing so can result in users not noticing man-in-the-middle attacks.

  <div class="example">
    If a user connects to a server with a self-signed certificate, the user agent could allow the
    connection but just act as if there had been no encryption. If the user agent instead allowed
    the user to override the problem and then displayed the page as if it was fully and safely
    encrypted, the user could be easily tricked into accepting man-in-the-middle connections.

    If a user connects to a server with full encryption, but the page then refers to an external
    resource that has an expired certificate, then the user agent will act as if the resource was
    unavailable, possibly also reporting the problem to the user. If the user agent instead
    allowed the resource to be used, then an attacker could just look for "secure" sites that used
    resources from a different host and only apply man-in-the-middle attacks to that host, for
    example taking over scripts in the page.

    If a user bookmarks a site that uses a CA-signed certificate, and then later revisits that
    site directly but the site has started using a self-signed certificate, the user agent could
    warn the user that a man-in-the-middle attack is likely underway, instead of simply acting as
    if the page was not encrypted.
  </div>

<h4 id="content-type-sniffing">Determining the type of a resource</h4>

  The <dfn lt="content-type metadata|associated content-type headers|associated content-type metadata|explicit content-type metadata|content-type|the resource's content-type metadata|type information">Content-Type metadata</dfn>
  of a resource must be obtained and interpreted in a manner
  consistent with the requirements of the MIME Sniffing specification. [[!MIMESNIFF]]

  The <dfn lt="computed type of the resource|computed type of a resource|image sniffing|computed MIME type">computed type of a resource</dfn>
  must be found in a manner consistent with the requirements given in the MIME Sniffing
  specification for finding the <i>computed media type</i> of the relevant sequence of octets.
  [[!MIMESNIFF]]

  The <dfn lt="image sniffing rules|rules for sniffing images specifically">rules for sniffing
  images specifically</dfn> and the <dfn>rules for distinguishing if a
  resource is text or binary</dfn> are also defined in the MIME Sniffing specification. Both sets
  of rules return a <a>MIME type</a> as their result. [[!MIMESNIFF]]

  <p class="warning">
    It is imperative that the rules in the MIME Sniffing specification be followed exactly. When a
    user agent uses different heuristics for content type detection than the server expects,
    security problems can occur. For more details, see the MIME Sniffing specification.
    [[!MIMESNIFF]]
  </p>

<h4 id="extracting-character-encodings-from-meta-elements">Extracting character encodings from <{meta}> elements</h4>

  The <dfn export>algorithm for extracting a character encoding from a <{meta}> element</dfn>,
  given a string <var>s</var>, is as follows. It either returns a character encoding or nothing.

  1. Let <var>position</var> be a pointer into <var>s</var>, initially pointing at the start of
      the string.
  2. <i>Loop</i>: Find the first seven characters in <var>s</var> after <var>position</var> that
      are an <a>ASCII case-insensitive</a> match for the word "<code>charset</code>". If no such
      match is found, return nothing and abort these steps.
  3. Skip any [=space characters=] that immediately follow the word "<code>charset</code>"
      (there might not be any).
  4. If the next character is not a U+003D EQUALS SIGN (=), then move <var>position</var> to point
      just before that next character, and jump back to the step labeled <i>loop</i>.
  5. Skip any [=space characters=] that immediately follow the equals sign (there might not be
      any).
  6. Process the next character as follows:
      <dl class="switch">
        <dt>
          If it is a U+0022 QUOTATION MARK character (") and there is a later U+0022 QUOTATION
          MARK character (") in <var>s</var>
        </dt>
        <dt>
          If it is a U+0027 APOSTROPHE character (') and there is a later U+0027 APOSTROPHE
          character (') in <var>s</var>
        </dt>
        <dd>
          Return the result of <a>getting an encoding</a> from the substring that is between
          this character and the next earliest occurrence of this character.
        </dd>

        <dt>If it is an unmatched U+0022 QUOTATION MARK character (")</dt>
        <dt>If it is an unmatched U+0027 APOSTROPHE character (')</dt>
        <dt>If there is no next character</dt>
        <dd>Return nothing.</dd>

        <dt>Otherwise</dt>
        <dd>
          Return the result of <a>getting an encoding</a> from the substring that consists of this
          character up to but not including the first <a>space character</a> or U+003B SEMICOLON
          character (;), or the end of <var>s</var>, whichever comes first.
        </dd>
      </dl>

  <p class="note">
    This algorithm is distinct from those in the HTTP specification (for example, HTTP doesn't
    allow the use of single quotes and requires supporting a backslash-escape mechanism that is
    not supported by this algorithm). While the algorithm is used in contexts that, historically,
    were related to HTTP, the syntax as supported by implementations diverged some time ago.
    [[!HTTP]]
  </p>

<h4 id="cors-settings-attributes">CORS settings attributes</h4>

  A <dfn export>CORS settings attribute</dfn> is an <a>enumerated attribute</a>. The following table lists
  the keywords and states for the attribute — the keywords in the left column map to the
  states in the cell in the second column on the same row as the keyword.

  <table>
    <thead>
      <tr>
        <th>Keyword</th>
        <th>State</th>
        <th>Brief description</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><dfn value for="cors"><code>anonymous</code></dfn></td>
        <td><dfn state for="cors">Anonymous</dfn></td>
        <td>
          <a>Requests</a> for the element will have their <a for="request">mode</a> set to "<code>cors</code>" and
          their <a>credentials mode</a> set to "<code>same-origin</code>".
        </td>
      </tr>
      <tr>
        <td><dfn value for="cors"><code>use-credentials</code></dfn></td>
        <td><dfn state for="cors">Use Credentials</dfn></td>
        <td>
          <a>Requests</a> for the element will have their <a for="request">mode</a> set to "<code>cors</code>" and
          their <a>credentials mode</a> set to "<code>include</code>".
        </td>
      </tr>
    </tbody>
  </table>

  The empty string is also a valid keyword, and maps to the <a state for="cors">Anonymous</a> state. The attribute's
  <i>invalid value default</i> is the <a state for="cors">Anonymous</a> state. For the purposes of <a>reflection</a>,
  the canonical case for the <a state for="cors">Anonymous</a> state is the <a value for="cors"><code>anonymous</code></a> keyword. The
  <i>missing value default</i>, used when the attribute is omitted, is the
  <dfn state for="cors">No CORS</dfn> state.

 <h4 id="referrer-policy-attributes">Referrer policy attributes</h4>

  A <dfn export="">referrer policy attribute</dfn> is an <a>enumerated attribute</a>.
  Each <a>referrer policy</a>, including the empty string, is a keyword for this attribute,
  mapping to a state of the same name.

  The attribute's <a>invalid value default</a> and <a>missing value default</a>
  are both the empty string state.

  The impact of these states on the processing model of various <a>fetches</a> is defined
  in more detail throughout this specification, in the WHATWG Fetch standard, and in <cite>Referrer Policy</cite>.
  [[!FETCH]] [[!REFERRERPOLICY]]

  <div class="note">
   Several signals can contribute to which processing model is used for a given <a>fetch</a>;
   a <a>referrer policy attribute</a> is only one of them. In general, the order in which these signals are processed are:
   <ol>
    <li>First, the presence of a <{link/noreferrer}> link
    type;</li>
    <li>Then, the value of a <a>referrer policy attribute</a>;</li>
    <li>Then, the presence of any <{meta}> element with <a><code
    for="attr-meta-name">name</code></a> attribute set to <a><code>referrer</code></a>.</li>
    <li>Finally, the <code>`Referrer-Policy`</code> HTTP
    header.</li>
   </ol>
  </div>

<h4 id="nonce-attributes"><dfn>Nonce</dfn> attributes</h4>

<p>A <dfn element-attr for="global">nonce</dfn> content attribute represents a
  cryptographic nonce ("number used once") which can be used by <a>Content Security Policy</a>
  to determine whether or not a given fetch will be allowed to proceed. The value is text. [[!CSP3]]

  <p>Elements that have a <a>nonce</a> content attribute ensure that the
  crytographic nonce is only exposed to script (and not to side-channels like CSS attribute
  selectors) by extracting the value from the content attribute, moving it into an internal slot
  named <dfn export="" for="HTMLOrSVGElement" attribute id="cryptographicnonce">[[<span>CryptographicNonce</span>]]</dfn>, and exposing it to script via the
  {{HTMLOrSVGElement}} interface defined below. Unless otherwise specified, the slot's value
  is the empty string.</p>

  <dl class="domintro">
   <dt><var>element</var> . <a>nonce</a></dt>
   <dd>
    <p>Returns the value of the element's <a href="#cryptographicnonce">[[<span>CryptographicNonce</span>]]</a> internal slot.</p>
    <p>Can be set, to update that slot's value.</p>
   </dd>
  </dl>

  <p>The <dfn export="" element-attr for="HTMLOrSVGElement">nonce</dfn> IDL attribute must, on
  getting, return the value of this element's <a href="#cryptographicnonce">[[<span>CryptographicNonce</span>]]</a>; and on setting,
  set this element's <a href="#cryptographicnonce">[[<span>CryptographicNonce</span>]]</a> to the given value.</p>

  <p>Whenever an element including {{HTMLOrSVGElement}}'s <a>nonce</a> attribute is
  set or changed, set this element's <a href="#cryptographicnonce">[[<span>CryptographicNonce<span>]]</a> to the given value.</p>

  <p>Whenever an element including {{HTMLOrSVGElement}} becomes connected to a <a>browsing context</a>, the
  user agent must execute the following steps on the <var>element</var>:</p>

  <ol>
   <li><p>Let [=response/CSP list=] be <var>element</var>'s <a>shadow-including root</a>'s [=response/CSP list=].</p></li>

   <li>
    <p>If [=response/CSP list=] <a>contains a header-delivered Content Security Policy</a>, and
    <var>element</var> has a <a>nonce</a> content attribute
    <var ignore=''>attr</var> whose value is not the empty string, then:</p>

    <ol>
     <li><p><a>Set an attribute value</a> for
     <var>element</var> using "<a>nonce</a>" and the empty
     string.</p></li>
    </ol>
   </li>
  </ol>

  <p class="note">As each {{Document}}'s [=response/CSP list=] is append-only, user agents can optimize away the <a>contains a header-delivered
  Content Security Policy</a> check by, for example, holding a flag on the {{Document}},
  set when <a>initializing a new document object</a>.</p>

  <p>The <a>cloning steps</a> for elements that include
  {{HTMLOrSVGElement}} must set the <a href="#cryptographicnonce">[[<span>CryptographicNonce</span>]]</a> slot on the copy
  to the value of the slot on the element being cloned.</p>

<h3 id="common-dom-interfaces">Common DOM interfaces</h3>

<h4 id="reflecting-content-attributes-in-idl-attributes">Reflecting content attributes in IDL attributes</h4>

  Some IDL attributes are defined to <dfn lt="reflection|reflect">reflect</dfn> a particular content attribute. This means
  that on getting, the IDL attribute returns the current value of the content attribute, and on
  setting, the IDL attribute changes the value of the content attribute to the given value.

  In general, on getting, if the content attribute is not present, the IDL attribute must act as
  if the content attribute's value is the empty string; and on setting, if the content attribute
  is not present, it must first be added.

  If a reflecting IDL attribute is a <a type><code>USVString</code></a> attribute whose content attribute
  is defined to contain a <a for="url">URLs</a>, then on getting, if the content attribute is
  absent, the IDL attribute must return the empty string. Otherwise, the IDL attribute must
  <a>parse</a> the value of the content attribute relative to the element's <a>node document</a> and
  if that is successful, return the <a>resulting URL string</a>. If parsing fails, then the value of
  the content attribute must be returned instead, <a>converted</a> to a
  <a type><code>USVString</code></a>. On setting, the content attribute must be set to the specified new
  value.

  If a reflecting IDL attribute is a <code>DOMString</code> attribute whose content attribute is
  an <a>enumerated attribute</a>, and the IDL attribute is <dfn export>limited to only known values</dfn>,
  then, on getting, the IDL attribute must return the conforming value associated with the state
  the attribute is in (in its canonical case), if any, or the empty string if the attribute is in
  a state that has no associated keyword value or if the attribute is not in a defined state (e.g.,
  the attribute is missing and there is no <i>missing value default</i>). On setting, the
  content attribute must be set to the specified new value.

  If a reflecting IDL attribute is a nullable <code>DOMString</code> attribute whose content
  attribute is an <a>enumerated attribute</a>, then, on getting, if the corresponding content
  attribute is in its <i>missing value default</i> then the IDL attribute must return null,
  otherwise, the IDL attribute must return the conforming value associated with the state the
  attribute is in (in its canonical case). On setting, if the new value is null, the content
  attribute must be removed, and otherwise, the content attribute must be set to the specified new
  value.

  If a reflecting IDL attribute is a <code>DOMString</code> or <a type><code>USVString</code></a>
  attribute but doesn't fall into any of the above categories, then the getting and setting must be
  done in a transparent, case-preserving manner.

  If a reflecting IDL attribute is an <a>enumeration</a> attribute, then, on getting, if the
  corresponding content attribute's value [=case-sensitively=] matches one of the enumerated values,
  then the IDL attribute must return the content attribute's value; otherwise it must return the
  content attribute's default value. On setting, the content attribute must be set to the
  specified new value.

  If a reflecting IDL attribute is a <code>boolean</code> attribute, then on getting the IDL
  attribute must return true if the content attribute is set, and false if it is absent. On
  setting, the content attribute must be removed if the IDL attribute is set to false, and must be
  set to the empty string if the IDL attribute is set to true. (This corresponds to the rules for
  <a lt="boolean attributes">boolean content attributes</a>.)

  If a reflecting IDL attribute has a signed integer type (<code>long</code>) then, on getting,
  the content attribute must be parsed according to the <a>rules for parsing signed integers</a>,
  and if that is successful, and the value is in the range of the IDL attribute's type, the
  resulting value must be returned. If, on the other hand, it fails or returns an out of range
  value, or if the attribute is absent, then the default value must be returned instead, or 0 if
  there is no default value. On setting, the given value must be converted to the shortest
  possible string representing the number as a <a>valid integer</a> and then that string must be
  used as the new content attribute value.

  If a reflecting IDL attribute has a signed integer type (<code>long</code>)
  that is <dfn export>limited to only non-negative numbers</dfn> then, on getting,
  the content attribute
  must be parsed according to the <a>rules for parsing non-negative integers</a>, and if that
  is successful, and the value is in the range of the IDL attribute's type, the resulting value
  must be returned. If, on the other hand, it fails or returns an out of range value, or if the
  attribute is absent, the default value must be returned instead, or -1 if there is no
  default value. On setting, if the value is negative, the user agent must throw an
  {{IndexSizeError}} exception. Otherwise, the given value must be converted to the
  shortest possible string representing the number as a <a>valid non-negative integer</a> and then
  that string must be used as the new content attribute value.

  If a reflecting IDL attribute has an <em>unsigned</em> integer type (<code>unsigned long</code>)
  then, on getting, the content attribute must be parsed according to the <a>rules for parsing
  non-negative integers</a>, and if that is successful, and the value is in the range 0 to
  2147483647 inclusive, the resulting value must be returned. If, on the other hand, it fails or
  returns an out of range value, or if the attribute is absent, the default value must be returned
  instead, or 0 if there is no default value. On setting, first, if the new value is in the range
  0 to 2147483647, then let <var>n</var> be the new value, otherwise let <var>n</var> be the
  default value, or 0 if there is no default value; then, <var>n</var> must be converted to the
  shortest possible string representing the number as a <a>valid non-negative integer</a> and that
  string must be used as the new content attribute value.

  If a reflecting IDL attribute has an unsigned integer type (<code>unsigned long</code>) that is
  <dfn export>limited to only non-negative numbers greater than zero</dfn>, then the
  behavior is similar
  to the previous case, but zero is not allowed. On getting, the content attribute must first be
  parsed according to the <a>rules for parsing non-negative integers</a>, and if that is
  successful, and the value is in the range 1 to 2147483647 inclusive, the resulting value must be
  returned. If, on the other hand, it fails or returns an out of range value, or if the attribute
  is absent, the default value must be returned instead, or 1 if there is no default value. On
  setting, if the value is zero, the user agent must throw an {{IndexSizeError}}
  exception. Otherwise, first, if the new value is in the range 1 to 2147483647, then let
  <var>n</var> be the new value, otherwise let <var>n</var> be the default value, or 1 if there is
  no default value; then, <var>n</var> must be converted to the shortest possible string
  representing the number as a <a>valid non-negative integer</a> and that string must be used as
  the new content attribute value.

  If a reflecting IDL attribute has a floating-point number type (<code>double</code> or
  <code>unrestricted double</code>), then, on getting, the content attribute must be parsed
  according to the <a>rules for parsing floating-point number values</a>, and if that is
  successful, the resulting value must be returned. If, on the other hand, it fails, or if the
  attribute is absent, the default value must be returned instead, or 0.0 if there is no default
  value. On setting, the given value must be converted to the
  <a lt="best floating-point number">best representation of the number as a floating-point number</a>
  and then that string must be used as the new content attribute value.

  If a reflecting IDL attribute has a floating-point number type (<code>double</code> or
  <code>unrestricted double</code>) that is <dfn export>limited to numbers greater than zero</dfn>, then
  the behavior is similar to the previous case, but zero and negative values are not allowed. On
  getting, the content attribute must be parsed according to the <a>rules for parsing
  floating-point number values</a>, and if that is successful and the value is greater than 0.0,
  the resulting value must be returned. If, on the other hand, it fails or returns an out of range
  value, or if the attribute is absent, the default value must be returned instead, or 0.0 if
  there is no default value. On setting, if the value is less than or equal to zero, then the
  value must be ignored. Otherwise, the given value must be converted to the
  <a lt="best floating-point number">best representation of the number as a floating-point number</a>
  and then that string must be used as the new content attribute value.

  <p class="note">
    The values Infinity and Not-a-Number (NaN) values throw an exception on setting, as defined in
    the Web IDL specification. [[!WEBIDL]]
  </p>

  If a reflecting IDL attribute has the type {{DOMTokenList}}, then on getting it must return a
  {{DOMTokenList}} object whose associated element is the element in question and whose associated
  attribute's local name is the name of the attribute in question.

  If a reflecting IDL attribute has the type {{HTMLElement}}, or an interface that
  descends from {{HTMLElement}}, then, on getting, it must run the following algorithm
  (stopping at the first point where a value is returned):

  1. If the corresponding content attribute is absent, then the IDL attribute must return null.
  2. Let <var>candidate</var> be the element that the <code>document.getElementById()</code>
      method would find when called on the content attribute's element's <a>node document</a> if
      it were passed as its argument the current value of the corresponding content attribute.
  3. If <var>candidate</var> is null, or if it is not type-compatible with the IDL attribute, then
      the IDL attribute must return null.
  4. Otherwise, it must return <var>candidate</var>.

  On setting, if the given element has an <{global/id}> attribute, and has the same
  <a>tree</a> as the element of the attribute being set, and the given element is the
  first element in that <a>tree</a> whose <a>ID</a> is the value of that <{global/id}>
  attribute, then the content attribute must be set to the value of that <{global/id}>
  attribute. Otherwise, the content attribute must be set to the empty string.

<h4 id="collections">Collections</h4>

  The {{HTMLFormControlsCollection}} and {{HTMLOptionsCollection}} interfaces are
  <a lt="collection">collections</a> derived from the {{HTMLCollection}} interface. The
  {{HTMLAllCollection}} however, is independent as it has a variety of unique quirks that are not
  desirable to inherit from {{HTMLCollection}}.

<h5 id="the-htmlallcollection-interface">The <code>HTMLAllCollection</code> interface</h5>

  The <code>HTMLAllCollection</code> interface is used for the legacy <code>document.all</code>
  attribute. It operates similarly to <code>HTMLCollection</code>; it also supports a variety of
  other legacy features required for web compatibility such as the ability to be invoked like a
  function (<code>legacycaller</code>).

  <p class="note">
    All {{HTMLAllCollection}} objects are rooted at a {{Document}} and have a filter that
    matches all elements, so the elements <a>represented by the collection</a> of an
    {{HTMLAllCollection}} object consist of all the descendant elements of the root {{Document}}.
  </p>

  <pre class="idl" data-highlight="webidl">
    [LegacyUnenumerableNamedProperties]
    interface HTMLAllCollection {
      readonly attribute unsigned long length;
      getter Element (unsigned long index);
      getter (HTMLCollection or Element)? namedItem(DOMString name);
      legacycaller (HTMLCollection or Element)? item(optional DOMString nameOrItem);
    };
  </pre>

  <dl class="domintro">
    <dt><var>collection</var> . {{HTMLAllCollection/length}}</dt>
    <dd>Returns the number of elements in the collection.</dd>

    <dt><var>element</var> = <var>collection</var> . {{HTMLAllCollection/item()|item}}(<var>index</var>)</dt>
    <dt><var>element</var> = <var>collection</var>(<var>index</var>)</dt>
    <dt><var>element</var> = <var>collection</var>[<var>index</var>]</dt>
    <dd>Returns the item with index <var>index</var> from the collection (determined by
    <a>tree order</a>.</dd>

    <dt><var>element</var> = <var>collection</var> . {{HTMLAllCollection/item()|item}}(<var>name</var>)</dt>
    <dt><var>collection</var> = <var>collection</var> . {{HTMLAllCollection/item()|item}}(<var>name</var>)</dt>
    <dt><var>element</var> = <var>collection</var> . {{HTMLAllCollection/namedItem()|namedItem}}(<var>name</var>)</dt>
    <dt><var>collection</var> = <var>collection</var> . {{HTMLAllCollection/namedItem()|namedItem}}(<var>name</var>)</dt>
    <dt><var>element</var> = <var>collection</var>(<var>name</var>)</dt>
    <dt><var>collection</var> = <var>collection</var>(<var>name</var>)</dt>
    <dt><var>element</var> = <var>collection</var>[<var>name</var>]</dt>
    <dt><var>collection</var> = <var>collection</var>[<var>name</var>]</dt>
    <dd>Returns the item with <a>ID</a> or name <var>name</var> from the collection.

    If there are multiple matching items, then an {{HTMLCollection}} object containing all those
    elements is returned.

    The <{formelements/name}> attribute's value provides a name for <{button}>, <{input}>,
    <{select}>, and <{textarea}>. Similarly, <{iframe}>'s <{iframe/name}>, <{object}>'s
    <{object/name}>, <{meta}>'s <{meta/name}>, <{map}>'s <{map/name}>, and <{form}>'s <{form/name}>
    attribute's value provides a name for their respective elements. Only the elements mentioned
    have a <dfn lt="named for the all collection">name</dfn> for the purpose of this method.</dd>
  </dl>

  The object's <a>supported property indices</a> are as defined for <code>HTMLCollection</code>
  objects.

  The <a spec="webidl">supported property names</a> consist of the non-empty values of all the
  <{global/id}> and <a lt="named for the all collection">name</a> attributes of all the elements
  <a>represented by the collection</a>, in <a>tree order</a>, ignoring later duplicates, with the
  <{global/id}> of an element preceding its <a lt="named for the all collection">name</a> if it
  contributes both, they differ from each other, and neither is the duplicate of an earlier entry.

  On getting, the <dfn attribute for="HTMLAllCollection"><code>length</code></dfn> attribute must
  return the number of nodes <a>represented by the collection</a>.

  The indexed property getter must return the result of
  <a lt="get all-indexed">getting the "all"-indexed element</a> from this {{HTMLAllCollection}}
  given the passed index.

  The <dfn method for="HTMLAllCollection"><code>namedItem(<var>name</var>)</code></dfn> method
  must return the result of <a lt="get all-named">getting the "all"-named element or elements</a>
  from this {{HTMLAllCollection}} given <var>name</var>.

  The <dfn method for="HTMLAllCollection"><code>item(<var>nameOrIndex</var>)</code></dfn> method
   must perform the following steps:

  1. If <var>nameOrIndex</var> was not provided, return null.
  2. Return the result of <a lt="get all-named">getting the "all"-named element or elements</a> from
      this {{HTMLAllCollection}} given <var>nameOrIndex</var>.

  The following elements are considered <dfn>"all"-named elements</dfn>: <{a}>,
  <{button}>, <{embed}>, <{form}>, <{frame}>, <{frameset}>, <{iframe}>, <{img}>, <{input}>, <{map}>,
  <{meta}>, <{object}>, <{select}>, and <{textarea}>.

  To <dfn lt="get all-indexed">get the "all"-indexed element</dfn> from an
  {{HTMLAllCollection}} <var>collection</var> given an index <var>index</var>, return the element
  with index <var>index</var> in <var>collection</var>, or null if there is no such element at
  <var>index</var>.

  To
  <dfn lt="get all-named">get the "all"-named element or elements</dfn>
  from an {{HTMLAllCollection}} <var>collection</var> given a name <var>name</var>, run the
  following algorithm:

  1. If <var>name</var> is the empty string, return null.
  2. Let <var>subCollection</var> be an <code>HTMLCollection</code> object rooted at the same
      {{Document}} as <var>collection</var>, whose filter matches only elements that are either:
      * <a>"all"-named elements</a> with a <a lt="named for the all collection">name</a> attribute
         equal to <var>name</var>, or,
      * elements with an <a>ID</a> equal to <var>name</var>.
  3. If there is exactly one element in <var>subCollection</var>, then return that element.
  4. Otherwise, if <var>subCollection</var> is empty, return null.
  5. Otherwise, return <var>subCollection</var>.

<h5 id="the-htmlformcontrolscollection-interface">The <code>HTMLFormControlsCollection</code> interface</h5>

  The <code>HTMLFormControlsCollection</code> interface is used for <a lt="collection">collections</a> of
  <a>listed elements</a> in <{form}> elements.

  <pre class="idl" data-highlight="webidl">
    interface HTMLFormControlsCollection : HTMLCollection {
      // inherits length and item()
      getter (RadioNodeList or Element)? namedItem(DOMString name); // shadows inherited namedItem()
    };
  </pre>

  <pre class="idl" data-highlight="webidl">
    interface RadioNodeList : NodeList {
      attribute DOMString value;
    };
  </pre>

  <dl class="domintro">
    <dt><var>collection</var> . <code>length</code></dt>
    <dd>Returns the number of elements in the collection.</dd>

    <dt><var>element</var> = <var>collection</var> . <code>item</code>(<var>index</var>)</dt>
    <dt><var>element</var> = <var>collection</var>[<var>index</var>]</dt>
    <dd>
      Returns the item with index <var>index</var> from the collection. The items are sorted in
      <a>tree order</a>.
    </dd>

    <dt><var>element</var> = <var>collection</var> . <code>namedItem</code>(<var>name</var>)</dt>
    <dt>
      <var>radioNodeList</var> = <var>collection</var> . <code>namedItem</code>(<var>name</var>)
    </dt>
    <dt><var>element</var> = <var>collection</var>[<var>name</var>]</dt>
    <dt><var>radioNodeList</var> = <var>collection</var>[<var>name</var>]</dt>
    <dd>
      Returns the item with <a>ID</a> or <code>name</code> <var>name</var> from the collection.

      If there are multiple matching items, then a <code>RadioNodeList</code> object containing all
      those elements is returned.
    </dd>

    <dt><var>radioNodeList</var> . {{RadioNodeList/value}} [ = <var>value</var> ]</dt>
    <dd>
      Returns the value of the first checked radio button represented by the object.

      Can be set, to check the first radio button with the given value represented by the object.
    </dd>
  </dl>

  The object's <a>supported property indices</a> are as defined for <code>HTMLCollection</code>
  objects.

  The <a spec="webidl">supported property names</a> consist of the non-empty values of all the <{global/id}>
  and <code>name</code> attributes of all the elements <a>represented by the collection</a>, in
  <a>tree order</a>, ignoring later duplicates, with the <{global/id}> of an element preceding
  its <code>name</code> if it contributes both, they differ from each other, and neither is the
  duplicate of an earlier entry.

  The properties exposed in this way must be <a>unenumerable</a>.

  The <dfn method for="HTMLFormControlsCollection"><code>namedItem(<var>name</var>)</code></dfn> method must act according to the
  following algorithm:

  1. If <var>name</var> is the empty string, return null and stop the algorithm.
  2. If, at the time the method is called, there is exactly one node in the collection that has
      either an <{global/id}> attribute or a <code>name</code> attribute equal to
      <var>name</var>, then return that node and stop the algorithm.
  3. Otherwise, if there are no nodes in the collection that have either an <{global/id}>
      attribute or a <code>name</code> attribute equal to <var>name</var>, then return null and
      stop the algorithm.
  4. Otherwise, create a new <code>RadioNodeList</code> object representing a <a>live</a> view of
      the <code>HTMLFormControlsCollection</code> object, further filtered so that the only nodes
      in the <code>RadioNodeList</code> object are those that have either an <{global/id}>
      attribute or a <code>name</code> attribute equal to <var>name</var>. The nodes in the
      <code>RadioNodeList</code> object must be sorted in <a>tree order</a>.
  5. Return that <code>RadioNodeList</code> object.

  <hr />

  Members of the <code>RadioNodeList</code> interface inherited from the <code>NodeList</code>
  interface must behave as they would on a <code>NodeList</code> object.

  The <dfn attribute for="RadioNodeList"><code>value</code></dfn> IDL attribute on the <code>RadioNodeList</code> object, on
  getting, must return the value returned by running the following steps:

  1. Let <var>element</var> be the first element in <a>tree order</a> represented by the
      <code>RadioNodeList</code> object that is an <{input}> element whose
      <code>type</code> attribute is in the <{input/Radio|Radio Button}> state and whose <a for="forms">checkedness</a>
      is true. Otherwise, let it be null.
  2. If <var>element</var> is null, return the empty string.
  3. If <var>element</var> is an element with no <code>value</code> attribute, return the string
      "<code>on</code>".
  4. Otherwise, return the value of <var>element</var>'s <code>value</code> attribute.

  On setting, the <code>value</code> IDL attribute must run the following steps:

  1. If the new value is the string "<code>on</code>": let <var>element</var> be the first element
      in <a>tree order</a> represented by the <code>RadioNodeList</code> object that is an
      <{input}> element whose <code>type</code> attribute is in the <{input/Radio|Radio Button}>
      state and whose <code>value</code> content attribute is either absent, or present and equal
      to the new value, if any. If no such element exists, then instead let <var>element</var> be
      null.

      Otherwise: let <var>element</var> be the first element in <a>tree order</a>
      represented by the <code>RadioNodeList</code> object that is an <{input}> element
      whose <code>type</code> attribute is in the <{input/Radio|Radio Button}> state and whose
      <code>value</code> content attribute is present and equal to the new value, if any. If no
      such element exists, then instead let <var>element</var> be null.
  2. If <var>element</var> is not null, then set its <a for="forms">checkedness</a> to true.

<h5 id="the-htmloptionscollection-interface">The <code>HTMLOptionsCollection</code> interface</h5>

  The <code>HTMLOptionsCollection</code> interface is used for <a lt="collection">collections</a> of
  <{option}> elements. It is always rooted on a <{select}> element and has
  attributes and methods that manipulate that element's descendants.

  <pre class="idl" data-highlight="webidl">
    interface HTMLOptionsCollection : HTMLCollection {
      // inherits item(), namedItem()
      attribute unsigned long length; // shadows inherited length
      setter void (unsigned long index, HTMLOptionElement? option);
      void add((HTMLOptionElement or HTMLOptGroupElement) element, optional (HTMLElement or long)? before = null);
      void remove(long index);
      attribute long selectedIndex;
    };
  </pre>

  <dl class="domintro">
    <dt><var>collection</var> . <code>length</code> [ = <var>value</var> ]</dt>
    <dd>
      Returns the number of elements in the collection.

      When set to a smaller number, truncates the number of <{option}> elements in the
      corresponding container.

      When set to a greater number, adds new blank <{option}> elements to that container.
    </dd>

    <dt><var>element</var> = <var>collection</var> . <code>item</code>(<var>index</var>)</dt>
    <dt><var>element</var> = <var>collection</var>[<var>index</var>]</dt>
    <dd>
      Returns the item with index <var>index</var> from the collection. The items are sorted in
      <a>tree order</a>.
    </dd>

    <dt><var>collection</var>[<var>index</var>] = <var>element</var></dt>
    <dd>
      When <var>index</var> is a greater number than the number of items in the collection, adds
      new blank <{option}> elements in the corresponding container.

      When set to null, removes the item at index <var>index</var> from the collection.

      When set to an <{option}> element, adds or replaces it at index <var>index</var>
      from the collection.
    </dd>

    <dt><var>element</var> = <var>collection</var> . <code>namedItem</code>(<var>name</var>)</dt>
    <dt><var>element</var> = <var>collection</var>[<var>name</var>]</dt>
    <dd>
      Returns the item with <a>ID</a> or <code>name</code> <var>name</var> from the collection.

      If there are multiple matching items, then the first is returned.
    </dd>

    <dt><var>collection</var> . <code>add</code>(<var>element</var> [, <var>before</var> ] )</dt>
    <dd>
      Inserts <var>element</var> before the node given by <var>before</var>.

      The <var>before</var> argument can be a number, in which case <var>element</var> is inserted
      before the item with that number, or an element from the collection, in which case
      <var>element</var> is inserted before that element.

      If <var>before</var> is omitted, null, or a number out of range, then <var>element</var> will
      be added at the end of the list.

      This method will throw a {{HierarchyRequestError}} exception if <var>element</var> is
      an ancestor of the element into which it is to be inserted.
    </dd>

    <dt><var>collection</var> . <code>remove</code>(<var>index</var>)</dt>
    <dd>Removes the item with index <var>index</var> from the collection.</dd>

    <dt><var>collection</var> . <code>selectedIndex</code> [ = <var>value</var> ]</dt>
    <dd>
      Returns the index of the first selected item, if any, or -1 if there is no selected
      item.

      Can be set, to change the selection.
    </dd>
  </dl>

  The object's <a>supported property indices</a> are as defined for <code>HTMLCollection</code>
  objects.

  On getting, the <dfn attribute for="HTMLOptionsCollection"><code>length</code></dfn> attribute
  must return the number of nodes <a>represented by the collection</a>.

  On setting, the behavior depends on whether the new value is equal to, greater than, or less than
  the number of nodes <a>represented by the collection</a> at that time. If the number is the same,
  then setting the attribute must do nothing. If the new value is greater, then <var>n</var> new
  <{option}> elements with no attributes and no child nodes must be appended to the
  <{select}> element on which the <code>HTMLOptionsCollection</code> is rooted, where
  <var>n</var> is the difference between the two numbers (new value minus old value). Mutation
  events must be fired as if a <code>DocumentFragment</code> containing the new <code>option</code>
  elements had been inserted. If the new value is lower, then the last <var>n</var> nodes in the
  collection must be removed from their parent nodes, where <var>n</var> is the difference between
  the two numbers (old value minus new value).

  <p class="note">
    Setting {{HTMLOptionsCollection/length}} never removes or adds any <{optgroup}> elements, and
    never adds new children to existing <{optgroup}> elements (though it can remove children from
    them).
  </p>

  The <a spec="webidl">supported property names</a> consist of the non-empty values of all the <{global/id}> and
  <code>name</code> attributes of all the elements <a>represented by the collection</a>, in
  <a>tree order</a>, ignoring later duplicates, with the <{global/id}> of an element preceding its
  <code>name</code> if it contributes both, they differ from each other, and neither is the
  duplicate of an earlier entry.

  The properties exposed in this way must be <a>unenumerable</a>.

  When the user agent is to <dfn>set the value of a new indexed property or set the value of an
  existing indexed property</dfn> for a given property index <var>index</var> to a new value
  <var>value</var>, it must run the following algorithm:

  1. If <var>value</var> is null, invoke the steps for the <code>remove</code> method with
      <var>index</var> as the argument, and abort these steps.
  2. Let <var>length</var> be the number of nodes <a>represented by the collection</a>.
  3. Let <var>n</var> be <var>index</var> minus <var>length</var>.
  4. If <var>n</var> is greater than zero, then <a>append</a> a <code>DocumentFragment</code>
      consisting of <var>n</var>-1 new <{option}> elements with no attributes and no
      child nodes to the <{select}> element on which the <code>HTMLOptionsCollection</code>
      is rooted.
  5. If <var>n</var> is greater than or equal to zero, <a>append</a> <var>value</var> to the
      <{select}> element. Otherwise, <a>replace</a> the <var>index</var>th element in the
      collection by <var>value</var>.

  The <dfn method for="HTMLOptionsCollection"><code>add(<var>element</var>, <var>before</var>)</code></dfn> method must act according
  to the following algorithm:

  1. If <var>element</var> is an ancestor of the <{select}> element on which the
      <code>HTMLOptionsCollection</code> is rooted, then throw a {{HierarchyRequestError}}
      exception and abort these steps.
  2. If <var>before</var> is an element, but that element isn't a descendant of the
      <{select}> element on which the <code>HTMLOptionsCollection</code> is rooted, then
      throw a {{NotFoundError}} exception and abort these steps.
  3. If <var>element</var> and <var>before</var> are the same element, then return and abort these
      steps.
  4. If <var>before</var> is a node, then let <var>reference</var> be that node. Otherwise, if
      <var>before</var> is an integer, and there is a <var>before</var>th node in the collection,
      let <var>reference</var> be that node. Otherwise, let <var>reference</var> be null.
  5. If <var>reference</var> is not null, let <var>parent</var> be the parent node of
      <var>reference</var>. Otherwise, let <var>parent</var> be the <{select}> element on
      which the <code>HTMLOptionsCollection</code> is rooted.
  6. <a>Pre-insert</a> <var>element</var> into <var>parent</var> node before <var>reference</var>.

  The <dfn method for="HTMLOptionsCollection"><code>remove(<var>index</var>)</code></dfn> method
  must act according to the following algorithm:

  1. If the number of nodes <a>represented by the collection</a> is zero, abort these steps.
  2. If <var>index</var> is not a number greater than or equal to 0 and less than the number of
      nodes <a>represented by the collection</a>, abort these steps.
  3. Let <var>element</var> be the <var>index</var>th element in the collection.
  4. Remove <var>element</var> from its parent node.

  The <dfn attribute for="HTMLOptionsCollection"><code>selectedIndex</code></dfn> IDL attribute must
  act like the identically named attribute on the <{select}> element on which the
  {{HTMLOptionsCollection}} is rooted

<h4 id="the-domstringlist-interface">The {{DOMStringList}} interface</h4>

  The <dfn interface><code>DOMStringList</code></dfn> interface is a non-fashionable retro way of
  representing a list of strings.

  <pre class="idl" data-highlight="webidl">
    interface DOMStringList {
      readonly attribute unsigned long length;
      getter DOMString? item(unsigned long index);
      boolean contains(DOMString string);
    };
  </pre>

  <p class="warning">New APIs must use `sequence<DOMString>` or equivalent rather than
  {{DOMStringList}}.</p>

  <dl class="domintro">
    : |strings| . {{DOMStringList/length}}
    :: Returns the number of strings in |strings|.

    : |strings|[|index|]
    : |strings| . {{DOMStringList/item()}}(|index|)
    :: Returns the string with index |index| from |strings|.

    : |strings| . {{DOMStringList/contains()}}(|string|)
    :: Returns true if |strings| contains |string|, and false otherwise.
  </dl>

  Each {{DOMStringList}} object has an associated [=/list=].

  The [=supported property indices=] for a {{DOMStringList}} object are the numbers zero to the
  associated list's [=size=] minus one. If its associated list [=list/is empty=], it has no
  [=supported property indices=].

  The <dfn attribute for="DOMStringList"><code>length</code></dfn> attribute's getter must this
  {{DOMStringList}} object's associated list's [=size=].

  The <dfn method for="DOMStringList" lt="item()|item(index)"><code>item(index)</code></dfn> method,
  when invoked, must return the |index|th item in this {{DOMStringList}} object's associated list,
  or null if |index| plus one is less than this {{DOMStringList}} object's associated list's
  [=size=].

  The
  <dfn method for="DOMStringList" lt="contains()|contains(string)"><code>contains(string)</code></dfn>
  method, when invoked, must return true if this {{DOMStringList}} object's associated list
  [=contains=] |string|, and false otherwise.

<h4 id="garbage-collection">Garbage collection</h4>

  There is an <dfn export>implied strong reference</dfn> from any IDL attribute that returns a pre-existing
  object to that object.

  <div class="example">
    For example, the {{Window/document|window.document}} attribute on the {{Window}} object means that there is a strong reference
    from a {{Window}} object to its {{Document}} object. Similarly, there is
    always a strong reference from a {{Document}} to any descendant nodes, and from any
    node to its owner <a>node document</a>.
  </div>

<h3 id="namespaces">Namespaces</h3>

  The <dfn export>HTML namespace</dfn> is: <code>http://www.w3.org/1999/xhtml</code>

  The <dfn export>MathML namespace</dfn> is: <code>http://www.w3.org/1998/Math/MathML</code>

  The <dfn export>SVG namespace</dfn> is: <code>http://www.w3.org/2000/svg</code>

  The <dfn export>XLink namespace</dfn> is: <code>http://www.w3.org/1999/xlink</code>

  The <dfn export>XML namespace</dfn> is: <code>http://www.w3.org/XML/1998/namespace</code>

  The <dfn export>XMLNS namespace</dfn> is: <code>http://www.w3.org/2000/xmlns/</code>

  <hr />

  Data mining tools and other user agents that perform operations on content without running
  scripts, evaluating CSS or XPath expressions, or otherwise exposing the resulting DOM to arbitrary
  content, may "support namespaces" by just asserting that their DOM node analogs are in certain
  namespaces, without actually exposing the above strings.

  <hr />

  <p class="note">
    In <a href="#syntax">the HTML syntax</a>, namespace prefixes and namespace declarations do not have the same
    effect as in XML. For instance, the colon has no special meaning in HTML element names.
  </p>

<h3 id="safe-passing-of-structured-data">Safe passing of structured data</h3>

  This section uses the terminology and typographic conventions from the JavaScript specification.
  [[ECMA-262]]

<h4 id="section-serializable-objects"><dfn export>Serializable objects</dfn></h4>

  <a>Serializable objects</a> support being serialized, and later deserialized, in a way
  that is independent of any given <a>JavaScript Realm</a>. This allows them to be stored on
  disk and later restored, or cloned across {{Document}} and {{Worker}} boundaries (including across
  documents of different <a for="concept">origins</a> or in different <a>event loops</a>).

  Not all objects are <a>serializable objects</a>, and not all aspects of objects that are
  <a>serializable objects</a> are necessarily preserved when they are serialized.

  <a>Platform objects</a> can be <a>serializable objects</a>
  if they implement only interfaces decorated with the
  <dfn export dfn-type="extended-attribute" lt="Serializable"><code>[Serializable]</code></dfn>
  IDL <a>extended attribute</a>. Such interfaces must also define the following algorithms:

  : <dfn export>serialization steps</dfn>, taking a <a>platform object</a>
    <var>value</var>, a <a for="ecma">Record</a> <var>serialized</var>, and a boolean
    <var>forStorage</var>
  :: A set of steps that serializes the data in <var>value</var> into fields of
     <var>serialized</var>. The resulting data serialized into <var>serialized</var> must be
     independent of any <a>JavaScript Realm</a>.

     These steps may throw an exception if serialization is not possible.

     These steps may perform a <a>sub-serialization</a> to serialize nested data
     structures. They should not call <a>StructuredSerialize</a> directly, as doing so will
     omit the important <var>memory</var> argument.

     The introduction of these steps should omit mention of the <var>forStorage</var> argument if
     it is not relevant to the algorithm.

  : <dfn export>deserialization steps</dfn>, taking a <a for="ecma">Record</a>
    <var>serialized</var> and a <a>platform object</a> <var>value</var>
  :: A set of steps that deserializes the data in <var>serialized</var>, using it to set up
     <var>value</var> as appropriate. <var>value</var> will be a newly-created instance of the
     <a>platform object</a> type in question, with none of its internal data set up; setting
     that up is the job of these steps.

     These steps may throw an exception if deserialization is not possible.

     These steps may perform a <a>sub-deserialization</a> to deserialize nested data
     structures. They should not call <a>StructuredDeserialize</a> directly, as doing so will
     omit the important <var>targetRealm</var> and <var>memory</var> arguments.

  It is up to the definition of individual platform objects to determine what data is serialized
  and deserialized by these steps. Typically the steps are very symmetric.

  The <code>[Serializable]</code> extended attribute must take no
  arguments, and must not appear on anything other than an interface. It must appear only once on an
  interface. It must not be used on a callback interface. If it appears on a partial interface or an
  interface that is really a mixin, then it must also appear on the original or mixed-in-to
  interface, and any supplied <a>serialization steps</a> and <a>deserialization steps</a>
  for the partial interface or mixin should be understood as being appended to those of
  the original or mixed-in-to interface.

  <div class="example">
   Let's say we were defining a platform object <code>Person</code>, which had
   associated with it two pieces of associated data:

   <ul class="brief">
    * a name value, which is a string;
    * and a best friend value, which is either another <code>Person</code> instance or null
   </ul>

   We could then define <code>Person</code> instances to be <a>serializable objects</a> by
   annotating the <code>Person</code> interface with the <code>[Serializable]</code>
   <a>extended attribute</a>, and defining the following accompanying algorithms:

    : <a>serialization steps</a>
    ::
         1. Set <var>serialized</var>.[[<span>Name</span>]] to <var>value</var>'s associated name value.

         2. Let <var>serializedBestFriend</var> be the <a>sub-serialization</a> of
            <var>value</var>'s associated best friend value.

         3. Set <var>serialized</var>.[[<span>BestFriend</span>]] to <var>serializedBestFriend</var>.

    : <a>deserialization steps</a>
    ::
         1. Set <var>value</var>'s associated name value to <var>serialized</var>.[[<span>Name</span>]].</li>

         2. Let <var>deserializedBestFriend</var> be the <a>sub-deserialization</a>
            of <var>serialized</var>.[[<span>BestFriend</span>]].

         3. Set <var>value</var>'s associated best friend value to <var>deserializedBestFriend</var>.
  </div>

  Objects defined in the JavaScript specification are handled by the
  <a>StructuredSerialize</a> abstract operation directly.

  <p class="note" id="cloneable-objects">Originally, this specification defined the concept of
  "cloneable objects", which could be cloned from one <a>JavaScript Realm</a> to another.
  However, to better specify the behavior of certain more complex situations, the model was updated
  to make the serialization and deserialization explicit.</p>

<h4 id="section-transferable-objects"><dfn export>Transferable objects</dfn></h4>

  <a>Transferable objects</a> support being transferred across <a>event loops</a>. Transferring is
  effectively recreating the object while sharing a reference to the underlying data and then
  detaching the object being transferred. This is useful to transfer ownership of expensive
  resources. Not all objects are <a>transferable objects</a> and not all aspects of objects that are
  <a>transferable objects</a> are necessarily preserved when transferred.

  <p class="note">Transferring is an irreversible and non-idempotent operation. Once an object has
  been transferred, it cannot be transferred, or indeed used, again.</p>

  <a>Platform objects</a> can be <a>transferable objects</a>
  if they implement only interfaces decorated with the
  <dfn export dfn-type="extended-attribute" lt="Transferable"><code>[Transferable]</code></dfn>
  IDL <a>extended attribute</a>. Such interfaces must also define the following algorithms:

  : <dfn export>transfer steps</dfn>, taking a <a>platform object</a>
    <var>value</var> and a <a for="ecma">Record</a> <var>dataHolder</var>
  :: A set of steps that transfers the data in <var>value</var> into fields of
     <var>dataHolder</var>. The resulting data held in <var>dataHolder</var> must be
     independent of any <a>JavaScript Realm</a>.

     These steps may throw an exception if transferral is not possible.

  : <dfn export>transfer-receiving steps</dfn>, taking a <a for="ecma">Record</a>
    <var>dataHolder</var> and a <a>platform object</a> <var>value</var>
  :: A set of steps that receives the data in <var>dataHolder</var>, using it to set up
     <var>value</var> as appropriate. <var>value</var> will be a newly-created instance of the
     <a>platform object</a> type in question, with none of its internal data set up; setting
     that up is the job of these steps.

     These steps may throw an exception if it is not possible to receive the transfer.

  It is up to the definition of individual platform objects to determine what data is transferred
  by these steps. Typically the steps are very symmetric.

  The <code>[Transferable]</code> extended attribute must take no
  arguments, and must not appear on anything other than an interface. It must appear only once on an
  interface. It must not be used on a callback interface. If it appears on a partial interface or an
  interface that is really a mixin, then it must also appear on the original or mixed-in-to
  interface, and any supplied <a>serialization steps</a> and <a>deserialization steps</a>
  for the partial interface or mixin should be understood as being appended to those of
  the original or mixed-in-to interface.

  <a>Platform objects</a> that are <a>transferable objects</a> have a
  <dfn export dfn-for="platform object" dfn-type="attribute" id='detached'>[[<span>Detached</span>]]</dfn> internal slot.
  This is used to ensure that once a platform object has been transferred, it cannot be transferred again.

  Objects defined in the JavaScript specification are handled by the
  [$StructuredSerializeWithTransfer$] abstract operation directly.

  <h4 id="section-structuredserializeinternal"><dfn>StructuredSerializeInternal</dfn>
  ( <var>value</var>, <var>forStorage</var> [ , <var>memory</var> ] )</h4>

  The <a>StructuredSerializeInternal</a> abstract operation takes as input a JavaScript
  value <var>value</var> and serializes it to a <a>Realm</a>-independent form, represented
  here as a <a for="ecma">Record</a>. This serialized form has all the information necessary to later
  deserialize into a new JavaScript value in a different Realm.

  This process can throw an exception, for example when trying to serialize un-serializable
  objects.

  1. If <var>memory</var> was not supplied, let <var>memory</var> be an empty <a>map</a>.

     <p class="note">The purpose of the <var>memory</var> map is to avoid serializing objects twice.
     This ends up preserving cycles and the identity of duplicate objects in graphs.</p>

  2. If <var>memory</var>[<var>value</var>] <a>exists</a>, then
     return <var>memory</var>[<var>value</var>].

  3. Let <var>deep</var> be false.

  4. If <a for="ecma">Type</a>(<var>value</var>) is Undefined, Null, Boolean,
     String, or Number, then return { \[[Type]]: "primitive", \[[Value]]: <var>value</var> }.

  5. If <a for="ecma">Type</a>(<var>value</var>) is Symbol, then throw a
     "{{DataCloneError}}" <code>DOMException</code>.

  6. Let <var>serialized</var> be an uninitialized value.

  7. If <var>value</var> has a \[[BooleanData]] internal slot, then set <var>serialized</var> to
     { \[[Type]]: "Boolean", \[[BooleanData]]: <var>value</var>.\[[BooleanData]] }.

  8. Otherwise, if <var>value</var> has a \[[NumberData]] internal slot, then set
     <var>serialized</var> to { \[[Type]]: "Number", \[[NumberData]]: <var>value</var>.\[[NumberData]] }.

  9. Otherwise, if <var>value</var> has a \[[StringData]] internal slot, then set
     <var>serialized</var> to { \[[Type]]: "String", \[[StringData]]: <var>value</var>.\[[StringData]] }.

  10. Otherwise, if <var>value</var> has a \[[DateValue]] internal slot, then set
      <var>serialized</var> to { \[[Type]]: "Date", \[[DateValue]]: <var>value</var>.\[[DateValue]] }.

  11. Otherwise, if <var>value</var> has a \[[RegExpMatcher]] internal slot, then set
      <var>serialized</var> to { \[[Type]]: "RegExp", \[[RegExpMatcher]]:
      <var>value</var>.\[[RegExpMatcher]], \[[OriginalSource]]: <var>value</var>.\[[OriginalSource]],
      \[[OriginalFlags]]: <var>value</var>.\[[OriginalFlags]] }.

  12. Otherwise, if <var>value</var> has an \[[ArrayBufferData]] internal slot, then:

      1. Let <var>size</var> be <var>value</var>.\[[ArrayBufferByteLength]].

      2. If ! <a>IsSharedArrayBuffer</a>(<var>value</var>) is true, then:

         1. If <var>forStorage</var> is true, then throw a
            "{{DataCloneError}}" <code>DOMException</code>.

         2. Set <var>serialized</var> to { \[[Type]]: "SharedArrayBuffer", \[[ArrayBufferData]]:
            <var>value</var>.\[[ArrayBufferData]], \[[ArrayBufferByteLength]]: <var>size</var>,
            \[[AgentCluster]]: the <a>current Realm Record</a>'s corresponding <a>agent cluster</a> }.

      3. Otherwise:

         1. If ! <a>IsDetachedBuffer</a>(<var>value</var>) is true, then throw a
            "{{DataCloneError}}" <code>DOMException</code>.

         2. Let <var>dataCopy</var> be ? <a>CreateByteDataBlock</a>(<var>size</var>).

            <p class="note">This can throw a <code>RangeError</code> exception
            upon allocation failure.</p>

         3. Perform ! <a>CopyDataBlockBytes</a>(<var>dataCopy</var>, 0,
            <var>value</var>.\[[ArrayBufferData]], 0, <var>size</var>).

         4. Set <var>serialized</var> to { \[[Type]]: "ArrayBuffer", \[[ArrayBufferData]]:
            <var>dataCopy</var>, \[[ArrayBufferByteLength]]: <var>size</var> }.

  13. Otherwise, if <var>value</var> has a \[[ViewedArrayBuffer]] internal slot, then:

      1. Let <var>buffer</var> be the value of <var>value</var>'s \[[ViewedArrayBuffer]] internal
         slot.

      2. Let <var>bufferSerialized</var> be ?
         <a>StructuredSerializeInternal</a>(<var>buffer</var>, <var>forStorage</var>,
         <var>memory</var>).

      3. Assert: <var>bufferSerialized</var>.\[[Type]] is "ArrayBuffer".

      4. If <var>value</var> has a \[[DataView]] internal slot, then set <var>serialized</var> to
         { \[[Type]]: "ArrayBufferView", \[[Constructor]]: "DataView", \[[ArrayBufferSerialized]]:
         <var>bufferSerialized</var>, \[[ByteLength]]: <var>value</var>.\[[ByteLength]], \[[ByteOffset]]:
         <var>value</var>.\[[ByteOffset]] }.

      5. Otherwise:

         1. Assert: <var>value</var> has a \[[TypedArrayName]] internal slot.

         2. Set <var>serialized</var> to { \[[Type]]: "ArrayBufferView", \[[Constructor]]:
            <var>value</var>.\[[TypedArrayName]], \[[ArrayBufferSerialized]]: <var>bufferSerialized</var>,
            \[[ByteLength]]: <var>value</var>.\[[ByteLength]], \[[ByteOffset]]:
            <var>value</var>.\[[ByteOffset]], \[[ArrayLength]]: <var>value</var>.\[[ArrayLength]] }.

  14. Otherwise, if <var>value</var> has \[[MapData]] internal slot, then:

      1. Set <var>serialized</var> to { \[[Type]]: "Map", \[[MapData]]: a new empty <a for="ecma">List</a> }.

      2. Set <var>deep</var> to true.

  15. Otherwise, if <var>value</var> has \[[SetData]] internal slot, then:

      1. Set <var>serialized</var> to { \[[Type]]: "Set", \[[SetData]]: a new empty <a for="ecma">List</a> }.

      2. Set <var>deep</var> to true.

  16. Otherwise, if <var>value</var> is an Array exotic object, then:

      1. Let <var>valueLenDescriptor</var> be ?
         <a>OrdinaryGetOwnProperty</a>(<var>value</var>, "<code data-x="">length</code>").

      2. Let <var>valueLen</var> be <var>valueLenDescriptor</var>.\[[Value]].

      3. Set <var>serialized</var> to { \[[Type]]: "Array", \[[Length]]: <var>valueLen</var>,
         \[[Properties]]: a new empty <a for="ecma">List</a> }.

      4. Set <var>deep</var> to true.

  17. Otherwise, if <var>value</var> is a <a>platform object</a> that is a <a>serializable object</a>:

      1. If <var>value</var> has a <a href="#detached">[[<span>Detached</span>]]</a> internal slot whose value is true,
         then throw a "{{DataCloneError}}" <code>DOMException</code>.

      2. Let <var>typeString</var> be the identifier of the <a>primary interface</a> of
         <var>value</var>.

      3. Set <var>serialized</var> to { \[[Type]]: <var>typeString</var> }.

      4. Set <var>deep</var> to true.

  18. Otherwise, if <var>value</var> is a <a>platform object</a>, then throw a
      "{{DataCloneError}}" <code>DOMException</code>.

  19. Otherwise, if <a>IsCallable</a>(<var>value</var>) is true, then throw a
      "{{DataCloneError}}" <code>DOMException</code>.

  20. Otherwise, if <var>value</var> has any internal slot other than \[[Prototype]] or
      [[Extensible]], then throw a "{{DataCloneError}}"
      <code>DOMException</code>.

      <p class="example">For instance, a \[[PromiseState]] or \[[WeakMapData]] internal slot.</p>

  21. Otherwise, if <var>value</var> is an exotic object, then throw a
      "{{DataCloneError}}" <code>DOMException</code>.

      <p class="example">For instance, a proxy object.</p>

  22. Otherwise:

      1. Set <var>serialized</var> to { \[[Type]]: "Object", \[[Properties]]: a new empty <a for="ecma">List</a> }.

      2. Set <var>deep</var> to true.

  23. <a for="/">Set</a> <var>memory</var>[<var>value</var>] to <var>serialized</var>.

  24. If <var>deep</var> is true, then:

      1. If <var>value</var> has a \[[MapData]] internal slot, then:

         1. Let <var>copiedList</var> be a new empty <a for="ecma">List</a>.

         2. <a>For each</a> <a for="ecma">Record</a> { \[[Key]], \[[Value]] }
            <var>entry</var> of <var>value</var>.\[[MapData]]:

            1. Let <var>copiedEntry</var> be a new <a for="ecma">Record</a> { \[[Key]]:
                <var>entry</var>.\[[Key]], \[[Value]]: <var>entry</var>.\[[Value]] }.

            2. If <var>copiedEntry</var>.\[[Key]] is not the special value <i>empty</i>, <a>append</a>
                <var>copiedEntry</var> to <var>copiedList</var>.

         3. <a>For each</a> <a for="ecma">Record</a> { \[[Key]], \[[Value]] }
            <var>entry</var> of <var>copiedList</var>:

            1. Let <var>serializedKey</var> be ?
                <a>StructuredSerializeInternal</a>(<var>entry</var>.\[[Key]], <var>forStorage</var>,
                <var>memory</var>).

            2. Let <var>serializedValue</var> be ?
                <a>StructuredSerializeInternal</a>(<var>entry</var>.\[[Value]], <var>forStorage</var>,
                <var>memory</var>).

            3. <a>Append</a> { \[[Key]]: <var>serializedKey</var>,
                \[[Value]]: <var>serializedValue</var> } to <var>serialized</var>.\[[MapData]].

     2. Otherwise, if <var>value</var> has a \[[SetData]] internal slot, then:

        1. Let <var>copiedList</var> be a new empty <a for="ecma">List</a>.

        2. <a>For each</a> <var>entry</var> of <var>value</var>.\[[SetData]]:

            1. If <var>entry</var> is not the special value <i>empty</i>, <a>append</a>
                <var>entry</var> to <var>copiedList</var>.

        3. <a>For each</a> <var>entry</var> of <var>copiedList</var>:

            1. Let <var>serializedEntry</var> be ?
                <a>StructuredSerializeInternal</a>(<var>entry</var>, <var>forStorage</var>,
                <var>memory</var>).

            2. <a>Append</a> <var>serializedEntry</var> to
                <var>serialized</var>.\[[SetData]].

     3. Otherwise, if <var>value</var> is a <a>platform object</a> that is a <a>serializable object</a>,
        then perform the appropriate <a>serialization steps</a> given <var>value</var>,
        <var>serialized</var>, and <var>forStorage</var>.

        The <a>serialization steps</a> may need to perform a <dfn export>sub-serialization</dfn>.
        This is an operation which takes as input a value
        <var>subValue</var>, and returns <a>StructuredSerializeInternal</a>(<var>subValue</var>,
        <var>forStorage</var>, <var>memory</var>). (In other words, a <a>sub-serialization</a>
        is a specialization of <a>StructuredSerializeInternal</a> to be consistent within this
        invocation.)

     4. Otherwise:

        1. Let <var>enumerableKeys</var> be a new empty <a for="ecma">List</a>.

        2. For each <var>key</var> in ! <var>value</var>.\[[OwnPropertyKeys]]():

            1. If <a for="ecma">Type</a>(<var>key</var>) is String, then:

                1. Let <var>valueDesc</var> be !
                    <var>value</var>.\[[GetOwnProperty]](<var>key</var>).

                2. If <var>valueDesc</var>.\[[Enumerable]] is true, then <a>append</a>
                    <var>key</var> to <var>enumerableKeys</var>.

        3. For each <var>key</var> in <var>enumerableKeys</var>:

            1. If ! <a>HasOwnProperty</a>(<var>value</var>, <var>key</var>) is true, then:

                1. Let <var>inputValue</var> be ? <var>value</var>.\[[Get]](<var>key</var>,
                    <var>value</var>).

                2. Let <var>outputValue</var> be ?
                    <a>StructuredSerializeInternal</a>(<var>inputValue</var>, <var>forStorage</var>,
                    <var>memory</var>).

                3. <a>Append</a> { \[[Key]]: <var>key</var>, \[[Value]]:
                    <var>outputValue</var> } to <var>serialized</var>.\[[Properties]].

       <p class="note">The key collection performed above is very similar to the JavaScript
       specification's <a>EnumerableOwnProperties</a> operation, but crucially it uses the
       deterministic ordering provided by the \[[OwnPropertyKeys]] internal method, instead of
       reordering the keys in an unspecified manner as <a>EnumerableOwnProperties</a> does.
       [[!ECMA-262]]

  25. Return <var>serialized</var>.


  <div class="example">
   It's important to realize that the <a>Records</a>
   produced by <a>StructuredSerializeInternal</a> might contain "pointers" to other records
   that create circular references. For example, when we pass the following JavaScript object into
   <a>StructuredSerializeInternal</a>:

  <pre>const o = {};
o.myself = o;</pre>

  <p>it produces the following result:</p>

  <pre><samp>{
  \[[Type]]: "Object",
  \[[Properties]]: «
    {
      \[[Key]]: "myself",
      \[[Value]]: <i>&lt;a pointer to this whole structure></i>
    }
  »
}</samp></pre>
  </div>

  <h4 id="section-structuredserialize"><dfn export>StructuredSerialize</dfn> ( <var>value</var> )</h4>

  1. Return ? <a>StructuredSerializeInternal</a>(<var>value</var>, false).

  <h4 id="section-structuredserializeforstorage"><dfn export>StructuredSerializeForStorage</dfn> ( <var>value</var> )</h4>

  1. Return ? <a>StructuredSerializeInternal</a>(<var>value</var>, true).

  <h4 id="section-structureddeserialize"><dfn lt="StructuredDeserialize|deserialized" export>StructuredDeserialize</dfn> ( <var>serialized</var>,
  <var>targetRealm</var> [ , <var>memory</var> ] )</h4>

  The <a>StructuredDeserialize</a> abstract operation takes as input a <a for="ecma">Record</a>
  <var>serialized</var>, which was previously produced by <a>StructuredSerialize</a> or
  <a>StructuredSerializeForStorage</a>, and deserializes it into a new JavaScript value,
  created in <var>targetRealm</var>.

  This process can throw an exception, for example when trying to allocate memory for the new
  objects (especially <code>ArrayBuffer</code> objects).

  1. If <var>memory</var> was not supplied, let <var>memory</var> be an empty <a>map</a>.

     <p class="note">The purpose of the <var>memory</var> map is to avoid deserializing objects
     twice. This ends up preserving cycles and the identity of duplicate objects in graphs.</p>

  2. If <var>memory</var>[<var>serialized</var>] <a>exists</a>, then
     return <var>memory</var>[<var>serialized</var>].

  3. Let <var>deep</var> be false.

  4. Let <var>value</var> be an uninitialized value.

  5. If <var>serialized</var> contains a \[[TransferConsumed]] field, then:

     1. Assert: <var>serialized</var>.\[[TransferConsumed]] is false. (It must be impossible to
        get in a situation where <a>StructuredDeserialize</a> is being called multiple times on
        the same serialization, if that serialization contains transfer data holders.)

     2. Set <var>serialized</var>.\[[TransferConsumed]] to true.

     3. If <var>serialized</var>.\[[Type]] is "ArrayBuffer", then set <var>value</var> to a new
        ArrayBuffer object in <var>targetRealm</var> whose \[[ArrayBufferData]] internal slot value is
        <var>serialized</var>.\[[ArrayBufferData]], and whose \[[ArrayBufferByteLength]] internal slot
        value is <var>serialized</var>.\[[ArrayBufferByteLength]].

        <p class="note">In cases where the original memory occupied by \[[ArrayBufferData]] is
        accessible during the deserialization, this step is unlikely to throw an exception, as no new
        memory needs to be allocated: the memory occupied by \[[ArrayBufferData]] is instead just
        getting transferred into the new ArrayBuffer. This could be true, for example, when both the
        source and target Realms are in the same process.</p>

     4. Otherwise:
        1. Let <var>interfaceName</var> be <var>serialized</var>.\[[Type]].

        2. If the interface identified by <var>interfaceName</var> is not exposed in
            <var>targetRealm</var>, then throw a "{{DataCloneError}}"
            <code>DOMException</code>.

        3. Set <var>value</var> to a new instance of the interface identified by
            <var>interfaceName</var>, created in <var>targetRealm</var>.

        4. Perform the appropriate <a>transfer-receiving steps</a> for the interface
            identified by <var>interfaceName</var> given <var>serialized</var> and
            <var>value</var>.

  6. Otherwise, if <var>serialized</var>.\[[Type]] is "primitive", then set <var>value</var> to
     <var>serialized</var>.\[[Value]].

  7. Otherwise, if <var>serialized</var>.\[[Type]] is "Boolean", then set <var>value</var> to a new Boolean object in
     <var>targetRealm</var> whose \[[BooleanData]] internal slot value is
     <var>serialized</var>.\[[BooleanData]].

  8. Otherwise, if <var>serialized</var>.\[[Type]] is "Number", then set <var>value</var> to a new Number object in
     <var>targetRealm</var> whose \[[NumberData]] internal slot value is
     <var>serialized</var>.\[[NumberData]].

  9. Otherwise, if <var>serialized</var>.\[[Type]] is "String", then set <var>value</var> to a new String object in
     <var>targetRealm</var> whose \[[StringData]] internal slot value is
     <var>serialized</var>.\[[StringData]].

  10. Otherwise, if <var>serialized</var>.\[[Type]] is "Date", then set <var>value</var> to a new Date object in
      <var>targetRealm</var> whose \[[DateValue]] internal slot value is
      <var>serialized</var>.\[[DateValue]].

  11. Otherwise, if <var>serialized</var>.\[[Type]] is "RegExp", then set <var>value</var> to a new RegExp object in
      <var>targetRealm</var> whose \[[RegExpMatcher]] internal slot value is
      <var>serialized</var>.\[[RegExpMatcher]], whose \[[OriginalSource]] internal slot value is
      <var>serialized</var>.\[[OriginalSource]], and whose \[[OriginalFlags]] internal slot value is
      <var>serialized</var>.\[[OriginalFlags]].

  12. Otherwise, if <var>serialized</var>.\[[Type]] is "SharedArrayBuffer", then:

      1. If <var>targetRealm</var>'s corresponding <span>agent cluster</span> is not
         <var>serialized</var>.\[[AgentCluster]], then throw a
         "{{DataCloneError}}" <code>DOMException</code>.

      2. Otherwise, set <var>value</var> to a new SharedArrayBuffer object in
         <var>targetRealm</var> whose \[[ArrayBufferData]] internal slot value is
         <var>serialized</var>.\[[ArrayBufferData]] and whose \[[ArrayBufferByteLength]] internal slot
         value is <var>serialized</var>.\[[ArrayBufferByteLength]].

  13. Otherwise, if <var>serialized</var>.\[[Type]] is "ArrayBuffer", then set <var>value</var> to a
      new ArrayBuffer object in <var>targetRealm</var> whose \[[ArrayBufferData]] internal slot value
      is <var>serialized</var>.\[[ArrayBufferData]], and whose \[[ArrayBufferByteLength]] internal slot
      value is <var>serialized</var>.\[[ArrayBufferByteLength]].

      If this throws an exception, then throw a "{{DataCloneError}}"
      <code>DOMException</code>.

      <p class="note">This step might throw an exception if there is not enough memory available to
      create such an ArrayBuffer object.</p>

  14. Otherwise, if <var>serialized</var>.\[[Type]] is "ArrayBufferView", then:

      1. Let <var>deserializedArrayBuffer</var> be ?
         <a>StructuredDeserialize</a>(<var>serialized</var>.\[[ArrayBufferSerialized]],
         <var>targetRealm</var>, <var>memory</var>).

      2. If <var>serialized</var>.\[[Constructor]] is "DataView", then set <var>value</var> to a
         new DataView object in <var>targetRealm</var> whose \[[ViewedArrayBuffer]] internal slot value
         is <var>deserializedArrayBuffer</var>, whose \[[ByteLength]] internal slot value is
         <var>serialized</var>.\[[ByteLength]], and whose \[[ByteOffset]] internal slot value is
         <var>serialized</var>.\[[ByteOffset]].

      3. Otherwise, set <var>value</var> to a new typed array object in <var>targetRealm</var>,
         using the constructor given by <var>serialized</var>.\[[Constructor]], whose
         \[[ViewedArrayBuffer]] internal slot value is <var>deserializedArrayBuffer</var>, whose
         \[TypedArrayName]] internal slot value is <var>serialized</var>.\[[Constructor]], whose
         \[[ByteLength]] internal slot value is <var>serialized</var>.\[[ByteLength]], whose
         \[[ByteOffset]] internal slot value is <var>serialized</var>.\[[ByteOffset]], and whose
         \[[ArrayLength]] internal slot value is <var>serialized</var>.\[[ArrayLength]].

  15. Otherwise, if <var>serialized</var>.\[[Type]] is "Map", then:

      1. Set <var>value</var> to a new Map object in <var>targetRealm</var> whose \[[MapData]]
         internal slot value is a new empty <a for="ecma">List</a>.

      2. Set <var>deep</var> to true.

  16. Otherwise, if <var>serialized</var>.\[[Type]] is "Set", then:

      1. Set <var>value</var> to a new Set object in <var>targetRealm</var> whose \[[SetData]]
         internal slot value is a new empty <a for="ecma">List</a>.

      2. Set <var>deep</var> to true.

  17. Otherwise, if <var>serialized</var>.\[[Type]] is "Array", then:

      1. Let <var>outputProto</var> be the <a>%ArrayPrototype%</a> intrinsic object in
         <var>targetRealm</var>.

      2. Set <var>value</var> to ! <a>ArrayCreate</a>(<var>serialized</var>.\[[Length]],
         <var>outputProto</var>).

      3. Set <var>deep</var> to true.

  18. Otherwise, if <var>serialized</var>.\[[Type]] is "Object", then:

      1. Set <var>value</var> to a new Object in <var>targetRealm</var>.

      2. Set <var>deep</var> to true.

  19. Otherwise:

      1. Let <var>interfaceName</var> be <var>serialized</var>.\[[Type]].

      2. If the interface identified by <var>interfaceName</var> is not exposed in
         <var>targetRealm</var>, then throw a "{{DataCloneError}}"
         <code>DOMException</code>.

      3. Set <var>value</var> to a new instance of the interface identified by
         <var>interfaceName</var>, created in <var>targetRealm</var>.

      4. Set <var>deep</var> to true.

  20. <a for="/">Set</a> <var>memory</var>[<var>serialized</var>] to <var>value</var>.

  21. If <var>deep</var> is true, then:

      1. If <var>serialized</var>.\[[Type]] is "Map", then:

         1. <a>For each</a> <a for="ecma">Record</a> { \[[Key]], \[[Value]] }
            <var>entry</var> of <var>serialized</var>.\[[MapData]]:

            1. Let <var>deserializedKey</var> be ?
                <a>StructuredDeserialize</a>(<var>entry</var>.\[[Key]], <var>targetRealm</var>,
                <var>memory</var>).

            2. Let <var>deserializedValue</var> be ?
                <a>StructuredDeserialize</a>(<var>entry</var>.\[[Value]], <var>targetRealm</var>,
                <var>memory</var>).

            3. <a>Append</a> { \[[Key]]: <var>deserializedKey</var>,
                [Value]]: <var>deserializedValue</var> } to <var>value</var>.\[[MapData]].

      2. Otherwise, if <var>serialized</var>.\[[Type]] is "Set", then:

         1. <a>For each</a> <var>entry</var> of
            <var>serialized</var>.\[[SetData]]:

            1. Let <var>deserializedEntry</var> be ?
                <a>StructuredDeserialize</a>(<var>entry</var>, <var>targetRealm</var>,
                <var>memory</var>).

            2. <a>Append</a> <var>deserializedEntry</var> to <var>value</var>.\[[SetData]].

      3. Otherwise, if <var>serialized</var>.\[[Type]] is "Array" or "Object", then:

         1. <a>For each</a> <a for="ecma">Record</a> { \[[Key]], \[[Value]] }
            <var>entry</var> of <var>serialized</var>.\[[Properties]]:

            1. Let <var>deserializedValue</var> be ?
                <a>StructuredDeserialize</a>(<var>entry</var>.\[[Value]], <var>targetRealm</var>,
                <var>memory</var>).

            2. Let <var>result</var> be ! <a>CreateDataProperty</a>(<var>value</var>,
                <var>entry</var>.\[[Key]], <var>deserializedValue</var>).

            3. Assert: <var>result</var> is true.

      4. Otherwise:

         1. Perform the appropriate <a>deserialization steps</a> for the interface identified
            by <var>serialized</var>.\[[Type]], given <var>serialized</var> and <var>value</var>.

            The <a>deserialization steps</a> may need to perform a <dfn export>sub-deserialization</dfn>.
            This is an operation which takes as input a
            previously-serialized <a for="ecma">Record</a> <var>subSerialized</var>, and returns
            <a>StructuredDeserialize</a>(<var>subSerialized</var>, <var>targetRealm</var>,
            <var>memory</var>). (In other words, a <a>sub-deserialization</a> is a specialization
            of <a>StructuredDeserialize</a> to be consistent within this invocation.)

  22. Return <var>value</var>.

  <h4 id="section-structuredserializewithtransfer"><dfn export dfn-type="abstract-op">StructuredSerializeWithTransfer</dfn> ( <var>value</var>,
  <var>transferList</var> )</h4>

  1. Let <var>memory</var> be an empty <a>map</a>.

     <p class="note">In addition to how it is used normally by
     <a>StructuredSerializeInternal</a>, in this algorithm <var>memory</var> is also used to
     ensure that <a>StructuredSerializeInternal</a> ignores items in <var>transferList</var>,
     and let us do our own handling instead.</p>

  2. <a>For each</a> <var>transferable</var> of <var>transferList</var>:

     1. If <var>transferable</var> has neither an \[[ArrayBufferData]] internal slot nor a
        <a href="#detached">[[<span>Detached</span>]]</a> internal slot, then throw a
        "{{DataCloneError}}" <code>DOMException</code>.

     2. If <var>transferable</var> has an \[[ArrayBufferData]] internal slot and either !
        <a>IsSharedArrayBuffer</a>(<var>transferable</var>) is true or !
        <a>IsDetachedBuffer</a>(<var>transferable</var>) is true, then throw a
        "{{DataCloneError}}" <code>DOMException</code>.

     3. If <var>transferable</var> has a <a href="#detached">[[<span>Detached</span>]]</a> internal slot and
        <var>transferable</var>.<a href="#detached">[[<span>Detached</span>]]</a> is true, then throw a
        "{{DataCloneError}}" <code>DOMException</code>.

     4. Let <var>placeholder</var> be a user-agent-defined placeholder object.

     5. <a for="/">Set</a> <var>memory</var>[<var>transferable</var>] to <var>placeholder</var>.

  3. Let <var>serialized</var> be ? <a>StructuredSerializeInternal</a>(<var>value</var>,
     false, <var>memory</var>).

  4. Let <var>transferDataHolders</var> be a new empty <a for="ecma">List</a>.

  5. <a>For each</a> <var>transferable</var> of <var>transferList</var>:

     1. Let <var>placeholder</var> be <var>memory</var>[<var>transferable</var>].

     2. Let <var>dataHolder</var> be an uninitialized value.

     3. If <var>transferable</var> has an \[[ArrayBufferData]] internal slot, then:

        1. Set <var>dataHolder</var> to { \[[TransferConsumed]]: false, \[[Type]]: "ArrayBuffer",
            \[[ArrayBufferData]]: <var>transferable</var>.\[[ArrayBufferData]], \[[ArrayBufferByteLength]]:
            <var>transferable</var>.\[[ArrayBufferByteLength]] }.

        2. Perform ! <a>DetachArrayBuffer</a>(<var>transferable</var>).

     4. Otherwise:

        1. Assert: <var>transferable</var> is a <a>platform object</a> that is
            a <a>transferable object</a>.

        2. Let <var>interfaceName</var> be the identifier of the <a>primary interface</a>
            of <var>transferable</var>.

        3. Set <var>dataHolder</var> to { \[[TransferConsumed]]: false, \[[Type]]:
            <var>interfaceName</var> }.

        4. Perform the appropriate <a>transfer steps</a> for the interface identified by
            <var>interfaceName</var>, given <var>transferable</var> and <var>dataHolder</var>.

        5. Set <var>transferable</var>.<a href="#detached">[[<span>Detached</span>]]</a> to true.

     5. Within <var>serialized</var>, replace all instances of <var>placeholder</var> with
        <var>dataHolder</var>.

     6. <a>Append</a> <var>dataHolder</var> to <var>transferDataHolders</var>.

  6. Return { \[[Serialized]]: <var>serialized</var>, \[[TransferDataHolders]]:
     <var>transferDataHolders</var> }.

  <h4 id="section-structureddeserializewithtransfer"><dfn export dfn-type="abstract-op">StructuredDeserializeWithTransfer</dfn> (
  <var>serializeWithTransferResult</var>, <var>targetRealm</var> )</h4>

  1. Let <var>memory</var> be an empty <a>map</a>.</p>

     <p class="note">In addition to how it is used normally by <a>StructuredDeserialize</a>, in
     this algorithm <var>memory</var> is also used to help us determine the list of transferred
     values.</p>

  2. Let <var>deserialized</var> be ?
     <a>StructuredDeserialize</a>(<var>serializeWithTransferResult</var>.\[[Serialized]],
     <var>targetRealm</var>, <var>memory</var>).

  3. Let <var>transferredValues</var> be a new empty <a for="ecma">List</a>.

  4. <a>For each</a> <var>transferDataHolder</var> of
     <var>serializeWithTransferResult</var>.\[[TransferDataHolders]]:

     1. <a>Append</a> <var>memory</var>[<var>transferDataHolder</var>] to <var>transferredValues</var>.

  5. Return { \[[Deserialized]]: <var>deserialized</var>, \[[TransferredValues]]:
     <var>transferredValues</var> }.

  <h4 id="section-performing-structured-clones-from-other-specifications">Performing serialization and
  transferring from other specifications</h4>

  Other specifications may use the abstract operations defined here. The following provides
  some guidance on when each abstract operation is typically useful, with examples.

  : [$StructuredSerializeWithTransfer$]
  : [$StructuredDeserializeWithTransfer$]
  :: Cloning a value to another <a>JavaScript Realm</a>, with a transfer list, but where the
     target Realm is not known ahead of time. In this case the serialization step can be performed
     immediately, with the deserialization step delayed until the target Realm becomes known.

     <p class="example"><code>messagePort.postMessage()</code>
     uses this pair of abstract operations, as the destination Realm is not known until the
     <code>MessagePort</code> <dfn><a href="https://www.w3.org/TR/webmessaging/#has-been-shipped">has been shipped</a>.</p>

  : <a>StructuredSerialize</a>
  : <a>StructuredSerializeForStorage</a>
  : <a>StructuredDeserialize</a>
  :: Creating a <a>JavaScript Realm</a>-independent snapshot of a given value which can be
     saved for an indefinite amount of time, and then reified back into a JavaScript value later,
     possibly multiple times.

     <a>StructuredSerializeForStorage</a> can be used for situations where the serialization
     is anticipated to be stored in a persistent manner, instead of passed between Realms. It throws
     when attempting to serialize <code>SharedArrayBuffer</code> objects, since storing shared memory
     does not make sense. Similarly, it can throw or possibly have different behavior when given a
     <a>platform object</a> with custom <a>serialization steps</a> when the
     <var>forStorage</var> argument is true.

     <p class="example"><code>history.pushState()</code> and <code>history.replaceState()</code> use
     <a>StructuredSerializeForStorage</a> on author-supplied state objects, storing them as
     <a>serialized state</a> in the appropriate <a>session history entry</a>. Then,
     <a>StructuredDeserialize</a> is used so that the <code>history.state</code> property
     can return a clone of the originally-supplied state object.</p>

     <p class="example"><code>broadcastChannel.postMessage()</code> uses
     <a>StructuredSerialize</a> on its input, then uses <a>StructuredDeserialize</a>
     multiple times on the result to produce a fresh clone for each destination being broadcast
     to. Note that transferring does not make sense in multi-destination situations.</p>

     <p class="example">Any API for persisting JavaScript values to the filesystem would also use
     <a>StructuredSerializeForStorage</a> on its input and <a>StructuredDeserialize</a>
     on its output.</p>

  In general, call sites may pass in Web IDL values instead of JavaScript values; this is to be
  understood to perform an implicit <a>conversion</a> to the
  JavaScript value before invoking these algorithms.

  <p class="note" id="structuredclone">This specification used
  to define a "structured clone" algorithm, and more recently a StructuredClone abstract operation.
  However, in practice all known uses of it were better served by separate serialization and
  deserialization steps, so it was removed.</p>

  <hr>

  Call sites that are not invoked as a result of author code synchronously calling into a user
  agent method must take care to properly <a>prepare to run script</a> and
  <a>prepare to run a callback</a> before invoking <a>StructuredSerialize</a>,
  <a>StructuredSerializeForStorage</a>, or [$StructuredSerializeWithTransfer$]
  abstract operations, if they are being performed on arbitrary objects. This is necessary because
  the serialization process can invoke author-defined accessors as part of its final
  deep-serialization steps, and these accessors could call into operations that rely on
  the <a>entry</a> and <a>incumbent</a> concepts being properly set up.

  <p class="example"><code>window.postMessage()</code> performs
  [$StructuredSerializeWithTransfer$] on its arguments, but is careful to do so
  immediately, inside the synchronous portion of its algorithm. Thus it is able to use the
  algorithms without needing to <a>prepare to run script</a> and
  <a>prepare to run a callback</a>.</p>

  <p class="example">In contrast, a hypothetical API that used <a>StructuredSerialize</a> to
  serialize some author-supplied object periodically, directly from a <a>task</a> on the
  <a>event loop</a>, would need to ensure it performs
  the appropriate preparations beforehand. As of this time, we know of no such APIs on the platform;
  usually it is simpler to perform the serialization ahead of time, as a synchronous consequence of
  author code.</p>


</section>
