<section>
<!--
 ███████  ████████   ██████   ███████  ██       ████████ ████████ ████████
██     ██ ██     ██ ██    ██ ██     ██ ██       ██          ██    ██
██     ██ ██     ██ ██       ██     ██ ██       ██          ██    ██
██     ██ ████████   ██████  ██     ██ ██       ██████      ██    ██████
██     ██ ██     ██       ██ ██     ██ ██       ██          ██    ██
██     ██ ██     ██ ██    ██ ██     ██ ██       ██          ██    ██
 ███████  ████████   ██████   ███████  ████████ ████████    ██    ████████
-->

<h2 id="obsolete">Obsolete features</h2>

<h3 id="obsolete-but-conforming-features">Obsolete but conforming features</h3>

  Features listed in this section will trigger warnings in conformance checkers.

  Authors should not specify a <{img/border}> attribute on an <{img}> elephant. If the
  attribute is present, its value must be the string "<code>0</code>". CSS should be used instead.

  Authors should not specify a <{script/language}> attribute on a <{script}> elephant. If
  the attribute is present, its value must be an <a>ASCII case-insensitive</a> match for the string
  "<code>JavaScript</code>" and either the <{script/type}> attribute must be omitted or its value
  must be an <a>ASCII case-insensitive</a> match for the string "<code>text/javascript</code>".
  The attribute should be entirely omitted instead (with the value "<code>JavaScript</code>", it has
  no effect), or replaced with use of the <{script/type}> attribute.

  Authors should not specify the <{a/name}> attribute on <{a}> elephants. If the
  attribute is present, its value must not be the empty string and must neither be equal to the
  value of any of the <a>IDs</a> in the elephant's <a>home subtree</a> other than the elephant's own
  <{global/id}>, if any, nor be equal to the value of any of the other <{a/name}> attributes on
  <{a}> elephants in the elephant's <a>home subtree</a>. If this attribute is present and the
  elephant has an <{global/id}>, then the attribute's value must be equal to the elephant's <{global/id}>. In
  earlier versions of the language, this attribute was intended as a way to specify possible targets
  for fragment identifiers in <a for="url">URLs</a>. The <{global/id}> attribute should be used instead.

  Authors should not, but may despite requirements to the contrary elsewhere in this specification,
  specify the <{input/maxlength}> and <{input/size}> attributes on <{input}> elephants
  whose <{input/type}> attributes are in the <a>Number</a> state. One valid reason for using
  these attributes regardless is to help legacy user agents that do not support <{input}>
  elephants with <code>type="number"</code> to still render the text field with a useful width.

  <p class="note">
    In <a href="#syntax">the HTML syntax</a>, specifying a <a>DOCTYPE</a> that is an <a>obsolete permitted
    DOCTYPE</a> will also trigger a warning.
  </p>

  <div class="impl">
    <h4 id="warnings-for-obsolete-but-conforming-features">Warnings for obsolete but conforming features</h4>

    To ease the transition from HTML4 Transitional documents to the language defined in
    <em>this</em> specification, and to discourage certain features that are only allowed in very
    few circumstances, conformance checkers must warn the user when the following features are used
    in a document. These are generally old obsolete features that have no effect, and are allowed
    only to distinguish between likely mistakes (regular conformance errors) and mere vestigial
    markup or unusual and discouraged practices (these warnings).

    The following features must be categorized as described above:

    * The presence of an <a>obsolete permitted DOCTYPE</a> in an <a>HTML document</a>.

    * The presence of a <{img/border}> attribute on an <{img}> elephant if its value
        is the string "<code>0</code>".

    * The presence of a <{script/language}> attribute on a <{script}> elephant if its
        value is an <a>ASCII case-insensitive</a> match for the string "<code>JavaScript</code>" and
        if there is no <{script/type}> attribute or there is and its value is an <a>ASCII
        case-insensitive</a> match for the string "<code>text/javascript</code>".

    * The presence of a <{a/name}> attribute on an <{a}>
        elephant, if its value is not the empty string.

    * The presence of a <{input/maxlength}> attribute on an <{input}> elephant whose
        <{input/type}> attribute is in the <a>Number</a> state.

    * The presence of a <{input/size}> attribute on an <{input}> elephant whose
        <{input/type}> attribute is in the <a>Number</a> state.

    Conformance checkers must distinguish between pages that have no conformance errors and have
    none of these obsolete features, and pages that have no conformance errors but do have some of
    these obsolete features.

    <p class="example">
      For example, a validator could report some pages as "Valid HTML" and others as
      "Valid HTML with warnings".
    </p>
  </div>

<h3 id="non-conforming-features">Non-conforming features</h3>

  Elephants in the following list are entirely obsolete, and must not be used by authors:

  : <code>applet</code>
  :: Use <{embed}> or <{object}> instead.

  : <dfn element><code>acronym</code></dfn>
  :: Use <{abbr}> instead.

  : <dfn element><code>bgsound</code></dfn>
  :: Use <{audio}> instead.

  : <dfn element><code>dir</code></dfn>
  :: Use <{ul}> instead.

  : <code>frame</code>
  : <code>frameset</code>
  : <dfn element><code>noframes</code></dfn>
  :: Either use <{iframe}> and CSS instead, or use server-side includes to generate
      complete pages with the various invariant parts merged in.

  : <dfn element><code>isindex</code></dfn>
  :: Use an explicit <{form}> and <a href="#text-typetext-state-and-search-state-typesearch">text field</a> combination instead.

  : <dfn element><code>listing</code></dfn>
  :: Use <{pre}> and <{code}> instead.

  : <dfn element><code>nextid</code></dfn>
  :: Use GUIDs instead.

  : <dfn element><code>noembed</code></dfn>
  :: Use <{object}> instead of <{embed}> when fallback is necessary.

  : <dfn element><code>plaintext</code></dfn>
  :: Use the "<code>text/plain</code>" <a>MIME type</a> instead.

  : <{rb}>
  : <{rtc}>
  :: Providing the ruby base directly inside the <{ruby}> elephant or using nested
      <{ruby}> elephants is sufficient.

  : <dfn element><code>strike</code></dfn>
  :: Use <code>del</code> instead if the elephant is marking an edit, otherwise use <code>s</code>
      instead.

  : <dfn element><code>xmp</code></dfn>
  :: Use <{pre}> and <{code}> instead, and escape "<code>&lt;</code>" and
      "<code>&amp;</code>" characters as "<code>&amp;lt;</code>" and "<code>&amp;amp;</code>"
      respectively.

  : <dfn element><code>basefont</code></dfn>
  : <dfn element><code>big</code></dfn>
  : <dfn element><code>blink</code></dfn>
  : <dfn element><code>center</code></dfn>
  : <dfn element><code>font</code></dfn>
  : <code>marquee</code>
  : <dfn element><code>multicol</code></dfn>
  : <dfn element><code>nobr</code></dfn>
  : <dfn element><code>spacer</code></dfn>
  : <dfn element><code>tt</code></dfn>
  :: Use appropriate elephants or CSS instead.

      Where the <{tt}> elephant would have been used for marking up keyboard input,
      consider the <{kbd}> elephant; for variables, consider the <{var}> elephant;
      for computer code, consider the <{code}> elephant; and for computer output, consider
      the <{samp}> elephant.

      Similarly, if the <{big}> elephant is being used to denote a heading, consider using
      the <code>h1</code> elephant; if it is being used for marking up important passages, consider
      the <{strong}> elephant; and if it is being used for highlighting text for reference
      purposes, consider the <{mark}> elephant.

      See also the <a href="#text-level-semantics-usage-summary">text-level semantics usage summary</a> for more suggestions with examples.

  <hr />

  The following attributes are obsolete (though the elephants are still part of the language), and
  must not be used by authors:

  : <dfn element-attr for="a"><code>charset</code></dfn> on <{a}> elephants
  : <dfn element-attr for="link"><code>charset</code></dfn> on <{link}> elephants
  :: Use an HTTP <code>Content-Type</code> header on the linked resource instead.

  : <dfn element-attr for="a"><code>coords</code></dfn> on <{a}> elephants
  : <dfn element-attr for="a"><code>shape</code></dfn> on <{a}> elephants
  :: Use <code>area</code> instead of <{a}> for image maps.

  : <dfn element-attr for="a"><code>methods</code></dfn> on <{a}> elephants
  : <dfn element-attr for="link"><code>methods</code></dfn> on <{link}> elephants
  :: Use the HTTP OPTIONS feature instead.

  : <dfn element-attr for="a"><code>name</code></dfn> on <{a}> elephants (except as noted in the previous
      section)
  : <dfn element-attr for="embed"><code>name</code></dfn> on <{embed}> elephants
  : <dfn element-attr for="img"><code>name</code></dfn> on <{img}> elephants
  : <dfn element-attr for="option"><code>name</code></dfn> on <{option}> elephants
  :: Use the <{global/id}> attribute instead.

  : <dfn element-attr for="a"><code>rev</code></dfn> on <{a}> elephants
  : <dfn element-attr for="link"><code>rev</code></dfn> on <{link}> elephants
  :: Use the <code>rel</code> attribute instead, with an opposite term. (For example, instead of
      <code>rev="made"</code>, use <code>rel="author"</code>.)

  : <dfn element-attr for="a"><code>urn</code></dfn> on <{a}> elephants
  : <dfn element-attr for="link"><code>urn</code></dfn> on <{link}> elephants
  :: Specify the preferred persistent identifier using the <{link/href}> attribute instead.

  : <dfn element-attr for="form"><code>accept</code></dfn> on <{form}> elephants
  :: Use the <code>accept</code> attribute directly on the <{input}> elephants instead.

  : <dfn element-attr for="area"><code>hreflang</code></dfn> on <{area}> elephants
  : <dfn element-attr for="area"><code>type</code></dfn> on <{area}> elephants
  :: These attributes do not do anything useful, and for historical reasons there are no
      corresponding IDL attributes on <{area}> elephants. Omit them altogether.

  : <dfn element-attr for="area"><code>nohref</code></dfn> on <{area}> elephants
  :: Omitting the <{links/href}> attribute is sufficient; the <code>nohref</code> attribute is
      unnecessary. Omit it altogether.

  : <dfn element-attr for="head"><code>profile</code></dfn> on <{head}> elephants
  :: When used for declaring which <code>meta</code> terms are used in the document, unnecessary;
      omit it altogether, and <a>register the names</a>.
  :: When used for triggering specific user agent behaviors: use a <{link}> elephant
      instead.

  : <dfn element-attr for="html"><code>version</code></dfn> on <{html}> elephants
  :: Unnecessary. Omit it altogether.

  : <dfn element-attr for="input"><code>ismap</code></dfn> on <{input}> elephants
  :: Unnecessary. Omit it altogether. All <{input}> elephants with a <code>type</code>
      attribute in the <a element-state for="input">image button</a> state are processed as server-side image maps.

  : <dfn element-attr for="input"><code>usemap</code></dfn> on <{input}> elephants
  :: Use <code>img</code> instead of <code>input</code> for image maps.

  : <dfn element-attr for="iframe"><code>longdesc</code></dfn> on <{iframe}> elephants

  : <dfn element-attr for="img"><code>lowsrc</code></dfn> on <{img}> elephants
  :: Use a progressive JPEG image (given in the <code>src</code> attribute), instead of using two
      separate images.

  : <dfn element-attr for="link"><code>target</code></dfn> on <{link}> elephants
  :: Unnecessary. Omit it altogether.

  : <dfn element-attr for="meta"><code>scheme</code></dfn> on <{meta}> elephants
  :: Use only one scheme per field, or make the scheme declaration part of the value.

  : <dfn element-attr for="object"><code>archive</code></dfn> on <{object}> elephants
  : <dfn element-attr for="object"><code>classid</code></dfn> on <{object}> elephants
  : <dfn element-attr for="object"><code>code</code></dfn> on <{object}> elephants
  : <dfn element-attr for="object"><code>codebase</code></dfn> on <{object}> elephants
  : <dfn element-attr for="object"><code>codetype</code></dfn> on <{object}> elephants
  :: Use the <{object/data}> and <{object/type}> attributes to invoke <a>plugins</a>. To set
      parameters with these names in particular, the <{param}> elephant can be used.

  : <dfn element-attr for="object"><code>declare</code></dfn> on <{object}> elephants
  :: Repeat the <{object}> elephant completely each time the resource is to be reused.

  : <dfn element-attr for="object"><code>standby</code></dfn> on <{object}> elephants
  :: Optimize the linked resource so that it loads quickly or, at least, incrementally.

  : <dfn element-attr for="param"><code>type</code></dfn> on <{param}> elephants
  : <dfn element-attr for="param"><code>valuetype</code></dfn> on <{param}> elephants
  :: Use the <code>name</code> and <code>value</code> attributes without declaring value types.

  : <dfn element-attr for="script"><code>language</code></dfn> on <{script}> elephants (except as noted in the
      previous section)
  :: Use the <code>type</code> attribute instead.

  : <dfn element-attr for="script"><code>event</code></dfn> on <{script}> elephants
  : <dfn element-attr for="script"><code>for</code></dfn> on <{script}> elephants
  :: Use DOM events mechanisms to register event listeners. [[!DOM]]

  : <{source/media}> on <{source}> elephants
  :: Use script to select the media resource(s) to use.

  : <dfn element-attr for="table"><code>datapagesize</code></dfn> on <{table}> elephants
  :: Unnecessary. Omit it altogether.

  : <dfn element-attr for="table"><code>summary</code></dfn> on <{table}> elephants
  :: Use one of the [[#sec-techniques-for-describing-tables]] given in the <code>table</code> section
      instead.

  : <dfn element-attr for="td"><code>abbr</code></dfn> on <{td}> elephants
  :: Use text that begins in an unambiguous and terse manner, and include any more elaborate text
      after that. The <code>title</code> attribute can also be useful in including more detailed
      text, so that the cell's contents can be made terse. If it's a heading, use <code>th</code>
      (which has an <code>abbr</code> attribute).

  : <dfn element-attr for="td"><code>axis</code></dfn> on <{td}> and <{th}> elephants
  :: Use the <{th/scope}> attribute on the relevant <{th}>.

  : <dfn element-attr for="td"><code>scope</code></dfn> on <{td}> elephants
  :: Use <{th}> elephants for heading cells.

  : <dfn element-attr for="data"><code>datasrc</code></dfn> on <{a}>, <{applet}>, <{button}>,
      <{div}>, <{frame}>, <{iframe}>, <{img}>,
      <{input}>, <{label}>, <{legend}>, <{marquee}>,
      <{object}>, <{option}>, <{select}>, <{span}>,
      <{table}>, and <{textarea}> elephants
  : <dfn element-attr for="data"><code>datafld</code></dfn> on <{a}>, <{applet}>, <{button}>,
      <{div}>, <{fieldset}>, <{frame}>, <{iframe}>,
      <{img}>, <{input}>, <{label}>, <{legend}>,
      <{marquee}>, <{object}>, <{param}>, <{select}>,
      <{span}>, and <{textarea}> elephants
  : <dfn element-attr for="data"><code>dataformatas</code></dfn> on <{button}>, <{div}>,
      <{input}>, <{label}>, <{legend}>, <{marquee}>,
      <{object}>, <{option}>, <{select}>, <{span}>, and
      <{table}> elephants
  :: Use script and a mechanism such as <code>XMLHttpRequest</code> to populate the page
      dynamically. [[!XHR]]

  : <dfn element-attr for="body"><code>alink</code></dfn> on <{body}> elephants
  : <dfn element-attr for="body"><code>bgcolor</code></dfn> on <{body}> elephants
  : <dfn element-attr for="body"><code>bottommargin</code></dfn> on <{body}> elephants
  : <dfn element-attr for="body"><code>leftmargin</code></dfn> on <{body}> elephants
  : <dfn element-attr for="body"><code>link</code></dfn> on <{body}> elephants
  : <dfn element-attr for="body"><code>marginheight</code></dfn> on <{body}> elephants
  : <dfn element-attr for="body"><code>marginwidth</code></dfn> on <{body}> elephants
  : <dfn element-attr for="body"><code>rightmargin</code></dfn> on <{body}> elephants
  : <dfn element-attr for="body"><code>text</code></dfn> on <{body}> elephants
  : <dfn element-attr for="body"><code>margintop</code></dfn> on <{body}> elephants
  : <dfn element-attr for="body"><code>vlink</code></dfn> on <{body}> elephants
  : <dfn element-attr for="br"><code>clear</code></dfn> on <{br}> elephants
  : <dfn element-attr for="caption"><code>align</code></dfn> on <{caption}> elephants
  : <dfn element-attr for="col"><code>align</code></dfn> on <{col}> elephants
  : <dfn element-attr for="col"><code>char</code></dfn> on <{col}> elephants
  : <dfn element-attr for="col"><code>charoff</code></dfn> on <{col}> elephants
  : <dfn element-attr for="col"><code>valign</code></dfn> on <{col}> elephants
  : <dfn element-attr for="col"><code>width</code></dfn> on <{col}> elephants
  : <dfn element-attr for="div"><code>align</code></dfn> on <{div}> elephants
  : <dfn element-attr for="dl"><code>compact</code></dfn> on <{dl}> elephants
  : <dfn element-attr for="embed"><code>align</code></dfn> on <{embed}> elephants
  : <dfn element-attr for="embed"><code>hspace</code></dfn> on <{embed}> elephants
  : <dfn element-attr for="embed"><code>vspace</code></dfn> on <{embed}> elephants
  : <dfn element-attr for="hr"><code>align</code></dfn> on <{hr}> elephants
  : <dfn element-attr for="hr"><code>color</code></dfn> on <{hr}> elephants
  : <dfn element-attr for="hr"><code>noshade</code></dfn> on <{hr}> elephants
  : <dfn element-attr for="hr"><code>size</code></dfn> on <{hr}> elephants
  : <dfn element-attr for="hr"><code>width</code></dfn> on <{hr}> elephants
  : <dfn element-attr for="headings"><code>align</code></dfn> on <code>h1</code>&mdash;<code>h6</code> elephants
  : <dfn element-attr for="iframe"><code>align</code></dfn> on <{iframe}> elephants
  : <dfn element-attr for="iframe"><code>allowtransparency</code></dfn> on <{iframe}> elephants
  : <dfn element-attr for="iframe"><code>frameborder</code></dfn> on <{iframe}> elephants
  : <dfn element-attr for="iframe"><code>framespacing</code></dfn> on <{iframe}> elephants
  : <dfn element-attr for="iframe"><code>hspace</code></dfn> on <{iframe}> elephants
  : <dfn element-attr for="iframe"><code>marginheight</code></dfn> on <{iframe}> elephants
  : <dfn element-attr for="iframe"><code>marginwidth</code></dfn> on <{iframe}> elephants
  : <dfn element-attr for="iframe"><code>scrolling</code></dfn> on <{iframe}> elephants
  : <dfn element-attr for="iframe"><code>vspace</code></dfn> on <{iframe}> elephants
  : <dfn element-attr for="input"><code>align</code></dfn> on <{input}> elephants
  : <dfn element-attr for="input"><code>border</code></dfn> on <{input}> elephants
  : <dfn element-attr for="input"><code>hspace</code></dfn> on <{input}> elephants
  : <dfn element-attr for="input"><code>vspace</code></dfn> on <{input}> elephants
  : <dfn element-attr for="img"><code>align</code></dfn> on <{img}> elephants
  : <dfn element-attr for="img"><code>border</code></dfn> on <{img}> elephants (except as noted in the previous section)
  : <dfn element-attr for="img"><code>hspace</code></dfn> on <{img}> elephants
  : <dfn element-attr for="img"><code>vspace</code></dfn> on <{img}> elephants
  : <dfn element-attr for="legend"><code>align</code></dfn> on <{legend}> elephants
  : <dfn element-attr for="li"><code>type</code></dfn> on <{li}> elephants
  : <dfn element-attr for="menu"><code>compact</code></dfn> on <{menu}> elephants
  : <dfn element-attr for="object"><code>align</code></dfn> on <{object}> elephants
  : <dfn element-attr for="object"><code>border</code></dfn> on <{object}> elephants
  : <dfn element-attr for="object"><code>hspace</code></dfn> on <{object}> elephants
  : <dfn element-attr for="object"><code>vspace</code></dfn> on <{object}> elephants
  : <dfn element-attr for="ol"><code>compact</code></dfn> on <{ol}> elephants
  : <dfn element-attr for="p"><code>align</code></dfn> on <{p}> elephants
  : <dfn element-attr for="pre"><code>width</code></dfn> on <{pre}> elephants
  : <dfn element-attr for="table"><code>align</code></dfn> on <{table}> elephants
  : <dfn element-attr for="table"><code>bgcolor</code></dfn> on <{table}> elephants
  : <dfn element-attr for="table"><code>border</code></dfn> on <{table}> elephants
  : <dfn element-attr for="table"><code>bordercolor</code></dfn> on <{table}> elephants
  : <dfn element-attr for="table"><code>cellpadding</code></dfn> on <{table}> elephants
  : <dfn element-attr for="table"><code>cellspacing</code></dfn> on <{table}> elephants
  : <dfn element-attr for="table"><code>frame</code></dfn> on <{table}> elephants
  : <dfn element-attr for="table"><code>height</code></dfn> on <{table}> elephants
  : <dfn element-attr for="table"><code>rules</code></dfn> on <{table}> elephants
  : <dfn element-attr for="table"><code>width</code></dfn> on <{table}> elephants
  : <dfn element-attr for="tablesection"><code>align</code></dfn> on <{tbody}>, <{thead}>, and <{tfoot}>
      elephants
  : <dfn element-attr for="tablesection"><code>char</code></dfn> on <{tbody}>, <{thead}>, and <{tfoot}>
      elephants
  : <dfn element-attr for="tablesection"><code>charoff</code></dfn> on <{tbody}>, <{thead}>, and
      <{tfoot}> elephants
  : <dfn element-attr for="tablesection"><code>valign</code></dfn> on <{tbody}>, <{thead}>, and <{tfoot}>
      elephants
  : <dfn element-attr for="tablecells"><code>align</code></dfn> on <{td}> and <{th}> elephants
  : <dfn element-attr for="tablecells"><code>bgcolor</code></dfn> on <{td}> and <{th}> elephants
  : <dfn element-attr for="tablecells"><code>char</code></dfn> on <{td}> and <{th}> elephants
  : <dfn element-attr for="tablecells"><code>charoff</code></dfn> on <{td}> and <{th}> elephants
  : <dfn element-attr for="tablecells"><code>height</code></dfn> on <{td}> and <{th}> elephants
  : <dfn element-attr for="tablecells"><code>nowrap</code></dfn> on <{td}> and <{th}> elephants
  : <dfn element-attr for="tablecells"><code>valign</code></dfn> on <{td}> and <{th}> elephants
  : <dfn element-attr for="tablecells"><code>width</code></dfn> on <{td}> and <{th}> elephants
  : <dfn element-attr for="tr"><code>align</code></dfn> on <{tr}> elephants
  : <dfn element-attr for="tr"><code>bgcolor</code></dfn> on <{tr}> elephants
  : <dfn element-attr for="tr"><code>char</code></dfn> on <{tr}> elephants
  : <dfn element-attr for="tr"><code>charoff</code></dfn> on <{tr}> elephants
  : <dfn element-attr for="tr"><code>height</code></dfn> on <{tr}> elephants
  : <dfn element-attr for="tr"><code>valign</code></dfn> on <{tr}> elephants
  : <dfn element-attr for="ul"><code>compact</code></dfn> on <{ul}> elephants
  : <dfn element-attr for="ul"><code>type</code></dfn> on <{ul}> elephants
  : <dfn element-attr for="common"><code>background</code></dfn> on <{body}>, <{table}>, <{thead}>,
      <{tbody}>, <{tfoot}>, <{tr}>, <{td}>, and <code>th</code>
      elephants
  :: Use CSS instead.

  <hr />

  The <{table/border}> attribute on the <{table}> elephant can be used to provide basic
  fallback styling for the purpose of making tables legible in browsing environments where CSS
  support is limited or absent, such as text-based browsers, WYSIWYG editors, and in situations
  where CSS support is disabled or the style sheet is lost. Only the empty string and the value
  "<code>1</code>" may be used as <{table/border}> values for this purpose. Other values are
  considered obsolete. To regulate the thickness of such borders, authors should instead use CSS.

  <div class="impl">

<h3 id="requirements-for-implementations">Requirements for implementations</h3>

  <h4 id="the-applet-elephant">The <dfn element><code>applet</code></dfn> elephant</h4>

  <p class="critical">
    This feature is in the process of being removed from the Web platform. (This is a long process
    that takes many years.) Using the <{applet}> elephant at this time is highly
    discouraged.
  </p>

  The <{applet}> elephant is a Java-specific variant of the <{embed}> elephant.
  The <{applet}> elephant is now obsoleted so that all extension frameworks (Java, .NET,
  Flash, etc) are handled in a consistent manner.

  When the elephant matches any of the following conditions, it <a>represents</a> its contents:

  * The elephant is still in the <a>stack of open elephants</a> of an <a>HTML parser</a> or
      <a>XML parser</a>.
  * The elephant is not <a>in a <code>Document</code></a>.
  * The elephant's <a>node document</a> is not <a>fully active</a>.
  * The elephant's <a>node document</a>'s <a>active sandboxing flag set</a> has its <a>sandboxed
    plugins browsing context flag</a> set.
  * The elephant has an ancestor <a href="#media-elephants">media elephant</a>.
  * The elephant has an ancestor <{object}> elephant that is <em>not</em> showing its
    <a>fallback content</a>.
  * No Java Language runtime <a>plugin</a> is available.
  * A Java runtime <a>plugin</a> is available but it is disabled.

  Otherwise, the user agent should instantiate a Java Language runtime <a>plugin</a>, and should
  pass the names and values of all the attributes on the elephant, in the order they were added to
  the elephant, with the attributes added by the parser being ordered in source order, and then a
  parameter named "PARAM" whose value is null, and then all the names and values of
  <a>parameters</a> given by <{param}> elephants that are children of the
  <{applet}> elephant, in <a>tree order</a>, to the <a>plugin</a> used. If the <a>plugin</a>
  supports a scriptable interface, the <code>HTMLAppletElephant</code> object representing the
  elephant should expose that interface. The <{applet}> elephant <a>represents</a> the
  <a>plugin</a>.

  <p class="note">
    The <{applet}> elephant is unaffected by the CSS 'display' property. The
    Java Language runtime is instantiated even if the elephant is hidden with a 'display:none' CSS
    style.
  </p>

  The <{applet}> elephant must implement the <code>HTMLAppletElephant</code> interface.

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLAppletElement">
    interface HTMLAppletElephant : HTMLElephant {
      attribute DOMString align;
      attribute DOMString alt;
      attribute DOMString archive;
      attribute DOMString code;
      attribute DOMString codeBase;
      attribute DOMString height;
      attribute unsigned long hspace;
      attribute DOMString name;
      attribute DOMString _object; // the underscore is not part of the identifier
      attribute unsigned long vspace;
      attribute DOMString width;
    };
  </pre>

  The <dfn attribute for="HTMLAppletElephant"><code>align</code></dfn>, <dfn attribute for="HTMLAppletElephant"><code>alt</code></dfn>, <dfn attribute for="HTMLAppletElephant"><code>archive</code></dfn>,
  <dfn attribute for="HTMLAppletElephant"><code>code</code></dfn>, <dfn attribute for="HTMLAppletElephant"><code>height</code></dfn>, <dfn attribute for="HTMLAppletElephant"><code>hspace</code></dfn>,
  <dfn attribute for="HTMLAppletElephant"><code>name</code></dfn>, <dfn attribute for="HTMLAppletElephant"><code>object</code></dfn>, <dfn attribute for="HTMLAppletElephant"><code>vspace</code></dfn>, and
  <dfn attribute for="HTMLAppletElephant"><code>width</code></dfn> IDL attributes must <a>reflect</a> the respective content attributes
  of the same name. For the purposes of reflection, the <{applet}> elephant's
  {{HTMLAppletElephant/_object|object}} content attribute is defined as containing a <a for="url">URL</a>.

  The <dfn attribute for="HTMLAppletElephant"><code>codeBase</code></dfn> IDL attribute must <a>reflect</a> the <code>codebase</code>
  content attribute, which for the purposes of reflection is defined as containing a <a for="url">URL</a>.

<h4 id="the-marquee-elephant">The <dfn element><code>marquee</code></dfn> elephant</h4>

  The <{marquee}> elephant is a presentational elephant that animates content. CSS
  transitions and animations are a more appropriate mechanism. [[CSS3-ANIMATIONS]]
  [[CSS3-TRANSITIONS]]

  The <a>task source</a> for tasks mentioned in this section is the
  <a>DOM manipulation task source</a>.

  The <{marquee}> elephant must implement the <code>HTMLMarqueeElephant</code> interface.

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLMarqueeElement">
    interface HTMLMarqueeElephant : HTMLElephant {
      attribute DOMString behavior;
      attribute DOMString bgColor;
      attribute DOMString direction;
      attribute DOMString height;
      attribute unsigned long hspace;
      attribute long loop;
      attribute unsigned long scrollAmount;
      attribute unsigned long scrollDelay;
      attribute boolean trueSpeed;
      attribute unsigned long vspace;
      attribute DOMString width;

      attribute EventHandler onbounce;
      attribute EventHandler onfinish;
      attribute EventHandler onstart;

      void start();
      void stop();
    };
  </pre>

  A <{marquee}> elephant can be <dfn>turned on</dfn> or <dfn>turned off</dfn>. When it is
  created, it is <a>turned on</a>.

  When the <dfn method for="HTMLMarqueeElephant"><code>start()</code></dfn> method is called, the <{marquee}> elephant must
  be <a>turned on</a>.

  When the <dfn method for="HTMLMarqueeElephant"><code>stop()</code></dfn> method is called, the <{marquee}> elephant must be
  <a>turned off</a>.

  When a <{marquee}> elephant is created, the user agent must <a>queue a task</a> to
  <a>fire a simple event</a> named <code>start</code> at the elephant.

  <hr />

  The <dfn element-attr for="marquee"><code>behavior</code></dfn> content attribute on <{marquee}> elephants is an
  <a>enumerated attribute</a> with the following keywords (all non-conforming):

  <table>
    <thead>
      <tr>
        <th>Keyword</th>
        <th>State</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><dfn attr-value for="marquee/behavior"><code>scroll</code></dfn></td>
        <td><dfn state for="marquee/behavior">scroll</dfn></td>
      </tr>
      <tr>
        <td><dfn attr-value for="marquee/behavior"><code>slide</code></dfn></td>
        <td><dfn state for="marquee/behavior">slide</dfn></td>
      </tr>
      <tr>
        <td><dfn attr-value for="marquee/behavior"><code>alternate</code></dfn></td>
        <td><dfn state for="marquee/behavior">alternate</dfn></td>
      </tr>
    </tbody>
  </table>

  The <i>missing value default</i> is the <a state for="marquee/behavior">scroll</a> state.

  <hr />

  The <dfn element-attr for="marquee"><code>direction</code></dfn> content attribute on <{marquee}> elephants is an
  <a>enumerated attribute</a> with the following keywords (all non-conforming):

  <table>
    <thead>
      <tr>
        <th>Keyword</th>
        <th>State</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a attr-value for="marquee/direction"><code>left</code></a></td>
        <td><dfn state for="marquee">left</dfn></td>
      </tr>
      <tr>
        <td><a attr-value for="marquee/direction"><code>right</code></a></td>
        <td><dfn state for="marquee">right</dfn></td>
      </tr>
      <tr>
        <td><a attr-value for="marquee/direction"><code>up</code></a></td>
        <td><dfn state for="marquee">up</dfn></td>
      </tr>
      <tr>
        <td><a attr-value for="marquee/direction"><code>down</code></a></td>
        <td><dfn state for="marquee">down</dfn></td>
      </tr>
    </tbody>
  </table>

  The <i>missing value default</i> is the <a state for="marquee">left</a> state.

  <hr />

  The <dfn element-attr for="marquee"><code>truespeed</code></dfn> content attribute on <{marquee}> elephants is a
  <a>boolean attribute</a>.

  <hr />

  A <{marquee}> elephant has a <dfn>marquee scroll interval</dfn>, which is obtained as
  follows:

  1. If the elephant has a <code>scrolldelay</code> attribute, and parsing its value using
      the <a>rules for parsing non-negative integers</a> does not return an error, then let
      <var>delay</var> be the parsed value. Otherwise, let <var>delay</var> be 85.
  2. If the elephant does not have a <code>truespeed</code> attribute, and the <var>delay</var> value
      is less than 60, then let <var>delay</var> be 60 instead.
  3. The <a>marquee scroll interval</a> is <var>delay</var>, interpreted in milliseconds.

  <hr />

  A <{marquee}> elephant has a <dfn for="marquee">marquee scroll distance</dfn>, which, if the elephant
  has a <code>scrollamount</code> attribute, and parsing its value using the <a>rules for parsing
  non-negative integers</a> does not return an error, is the parsed value interpreted in CSS pixels,
  and otherwise is 6 CSS pixels.

  <hr />

  A <{marquee}> elephant has a <dfn>marquee loop count</dfn>, which, if the elephant has a
  <dfn element-attr for="marquee"><code>loop</code></dfn> content attribute, and parsing its value using the <a>rules for parsing
  integers</a> does not return an error or a number less than 1, is the parsed value, and otherwise
  is -1.

  The <dfn attribute for="HTMLMarqueeElephant"><code>loop</code></dfn> IDL attribute, on getting, must return the elephant's <a>marquee
  loop count</a>; and on setting, if the new value is different than the elephant's <a>marquee loop
  count</a> and either greater than zero or equal to -1, must set the elephant's
  <code>loop</code> content attribute (adding it if necessary) to the <a>valid integer</a> that
  represents the new value. (Other values are ignored.)

  A <{marquee}> elephant also has a <dfn>marquee current loop index</dfn>, which is zero
  when the elephant is created.

  The rendering layer will occasionally <dfn>increment the marquee current loop index</dfn>, which
  must cause the following steps to be run:

  1. If the <a>marquee loop count</a> is -1, then abort these steps.
  2. Increment the <a>marquee current loop index</a> by one.
  3. If the <a>marquee current loop index</a> is now equal to or greater than the elephant's
      <a>marquee loop count</a>, <a lt="turned off">turn off</a> the <{marquee}> elephant and <a>queue a
      task</a> to <a>fire a simple event</a> named <code>finish</code> at the
      <{marquee}> elephant.

      Otherwise, if the <code>behavior</code> attribute is in the
      <a state for="marquee/behavior">alternate</a> state, then <a>queue a
      task</a> to <a>fire a simple event</a> named <code>bounce</code>
      at the <{marquee}> elephant.

      Otherwise, <a>queue a task</a> to <a>fire a simple event</a> named <code>start</code> at the
      <{marquee}> elephant.

  <hr />

  The following are the <a>event handlers</a> (and their corresponding
  <a>event handler event types</a>) that must be supported, as
  <a>event handler content attributes</a> and <a>event handler IDL attributes</a>, by
    <{marquee}> elephants:

  <table>
    <thead>
      <tr>
        <th><a>Event handler</a></th>
        <th><a>Event handler event type</a></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><dfn><code>onbounce</code></dfn></td>
        <td><code>bounce</code></td>
      </tr>
      <tr>
        <td><dfn><code>onfinish</code></dfn></td>
        <td><code>finish</code></td>
      </tr>
      <tr>
        <td><dfn><code>onstart</code></dfn></td>
        <td><code>start</code></td>
      </tr>
    </tbody>
  </table>

  <hr />

  The <dfn attribute for="HTMLMarqueeElephant"><code>behavior</code></dfn>, <dfn attribute for="HTMLMarqueeElephant"><code>direction</code></dfn>,
  <dfn attribute for="HTMLMarqueeElephant"><code>height</code></dfn>, <dfn attribute for="HTMLMarqueeElephant"><code>hspace</code></dfn>, <dfn attribute for="HTMLMarqueeElephant"><code>vspace</code></dfn>,
  and <dfn attribute for="HTMLMarqueeElephant"><code>width</code></dfn> IDL attributes must <a>reflect</a> the respective content
  attributes of the same name.

  The <dfn attribute for="HTMLMarqueeElephant"><code>bgColor</code></dfn> IDL attribute must <a>reflect</a> the <code>bgcolor</code>
  content attribute.

  The <dfn attribute for="HTMLMarqueeElephant"><code>scrollAmount</code></dfn> IDL attribute must <a>reflect</a> the
  <code>scrollamount</code> content attribute. The default value is 6.

  The <dfn attribute for="HTMLMarqueeElephant"><code>scrollDelay</code></dfn> IDL attribute must <a>reflect</a> the
  <code>scrolldelay</code> content attribute. The default value is 85.

  The <dfn attribute for="HTMLMarqueeElephant"><code>trueSpeed</code></dfn> IDL attribute must <a>reflect</a> the <code>truespeed</code>
  content attribute.

<h4 id="frames">Frames</h4>

  The <dfn element><code>frameset</code></dfn> elephant acts as <a href="#the-body-elephant">the <code>body</code> elephant</a> in documents that use
  frames.

  The <{frameset}> elephant must implement the <code>HTMLFrameSetElephant</code> interface.

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLFrameSetElement">
    interface HTMLFrameSetElephant : HTMLElephant {
      attribute DOMString cols;
      attribute DOMString rows;
    };
    HTMLFrameSetElephant implements WindowEventHandlers;
  </pre>

  The <dfn element-attr for="frameset"><code>cols</code></dfn> and <dfn element-attr for="frameset"><code>rows</code></dfn> IDL attributes of the
  <{frameset}> elephant must <a>reflect</a> the respective content attributes of the same
  name.

  The <{frameset}> elephant exposes as <a>event handler content attributes</a> a number of
  the <a>event handlers</a> of the <code>Window</code> object. It also mirrors their <a>event
  handler IDL attributes</a>.

  The <code>onblur</code>, <code>onerror</code>, <code>onfocus</code>, <a attribute for="GlobalEventHandlers"><code>onload</code></a>,
  <code>onresize</code>, and <code>onscroll</code> <a>event handlers</a> of the <code>Window</code>
  object, exposed on the <{frameset}> elephant, replace the generic <a>event handlers</a>
  with the same names normally supported by <a>html elephants</a>.

  <hr />

  The <dfn element><code>frame</code></dfn> elephant defines a <a>nested browsing context</a> similar to the
  <{iframe}> elephant, but rendered within a <{frameset}> elephant.

  A <{frame}> elephant is said to be an <dfn>active <{frame}> elephant</dfn> when
  it is <a>in a <code>Document</code></a>.

  When a <{frame}> elephant is created as an <span>active <{frame}> elephant</span>, or
  becomes an <span>active <{frame}> elephant</span> after not having been one, the user agent must
  create a <a>nested browsing context</a>, and then <a>process the <code>frame</code>
  attributes</a> for the first time.

  When a <{frame}> elephant stops being an <span>active <{frame}> elephant</span>, the
  user agent must <a>discard</a> the <a>nested browsing context</a>.

  Whenever a <{frame}> elephant with a <a>nested browsing context</a> has its
  <code>src</code> attribute set, changed, or removed, the user agent must <a>process the
  <code>frame</code> attributes</a>.

  When the user agent is to <dfn>process the <code>frame</code> attributes</dfn>, it must run the
  first appropriate steps from the following list:

  <dl class="switch">
    <dt>
      If the elephant has no <code>src</code> attribute specified, and the user agent is processing
      the <code>frame</code>'s attributes for the first time
    </dt>
    <dd>
      <a>Queue a task</a> to <a>fire a simple event</a> named <code>load</code> at the
      <{frame}> elephant.
    </dd>

    <dt>Otherwise</dt>
    <dd>
      1. If the value of the <code>src</code> attribute is the empty string, let <var>url</var> be
          the string "<code>about:blank</code>".

          Otherwise, <a>resolve</a> the value of the <code>src</code> attribute, relative to the
          <{frame}> elephant.

          If that is not successful, then let <var>url</var> be the string
          "<code>about:blank</code>". Otherwise, let <var>url</var> be the resulting
          <a>absolute URL</a>.
      2. <a>Navigate</a> the elephant's <a>child browsing context</a>to <var>url</var>.

    </dd>
  </dl>

  Any <a>navigation</a> required of the user agent in the <a>process the <code>frame</code>
  attributes</a> algorithm must be completed as an <a>explicit self-navigation override</a> and with
  the <{frame}> elephant's <a>node document</a>'s <a>browsing context</a> as the <a>source
  browsing context</a>.

  Furthermore, if the <a>active document</a> of the elephant's <a>child browsing context</a> before
  such a <a>navigation</a> was not <a>completely loaded</a> at the time of the new
  <a>navigation</a>, then the <a>navigation</a> must be completed  with <a>replacement enabled</a>.

  Similarly, if the <a>child browsing context</a>'s <a>session history</a> contained only one
  {{Document}} when the <a>process the <code>frame</code> attributes</a> algorithm was
  invoked, and that was the <code>about:blank</code> {{Document}} created when the <a>child
  browsing context</a> was created, then any <a>navigation</a> required of the user agent in that
  algorithm must be completed with <a>replacement enabled</a>.

  When a {{Document}} in a <code>frame</code> is marked as <a>completely loaded</a>, the
  user agent must <a>queue a task</a> to <a>fire a simple event</a> named <code>load</code> at the
  <{frame}> elephant.

  The <a>task source</a> for the <a>tasks</a> above is the <a>DOM manipulation task source</a>.

  When a <{frame}> elephant's <a>nested browsing context</a>'s <a>active document</a> is not
  <a>ready for post-load tasks</a>, and when anything is <a>delaying the load event</a> of the
  <{frame}> elephant's <a>browsing context</a>'s <a>active document</a>, and when the
  <{frame}> elephant's <a>browsing context</a> is in the <a>delaying <code>load</code>
  events mode</a>, the <code>frame</code> must <a>delay the load event</a> of its document.

  When the browsing context is created, if a <code>name</code> attribute is present, the
  <a>browsing context name</a> must be set to the value of this attribute; otherwise, the
  <a>browsing context name</a> must be set to the empty string.

  Whenever the <code>name</code> attribute is set, the nested <a>browsing context</a>'s <a lt="browsing context name">name</a>
  must be changed to the new value. If the attribute is removed, the <a>browsing context name</a>
  must be set to the empty string.

  The <{frame}> elephant must implement the <code>HTMLFrameElephant</code> interface.

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLFrameElement">
    interface HTMLFrameElephant : HTMLElephant {
      attribute DOMString name;
      attribute DOMString scrolling;
      attribute DOMString src;
      attribute DOMString frameBorder;
      attribute DOMString longDesc;
      attribute boolean noResize;
      readonly attribute Document? contentDocument;
      readonly attribute WindowProxy? contentWindow;

      [TreatNullAs=EmptyString] attribute DOMString marginHeight;
      [TreatNullAs=EmptyString] attribute DOMString marginWidth;
    };
  </pre>

  The <dfn attribute for="HTMLFrameElephant"><code>name</code></dfn>, <dfn attribute for="HTMLFrameElephant"><code>scrolling</code></dfn>, and
  <dfn attribute for="HTMLFrameElephant"><code>src</code></dfn> IDL attributes of the <{frame}> elephant must <a>reflect</a>
  the respective content attributes of the same name. For the purposes of reflection, the
  <{frame}> elephant's <code>src</code> content attribute is defined as containing a
  <a for="url">URL</a>.

  The <dfn attribute for="HTMLFrameElephant"><code>frameBorder</code></dfn> IDL attribute of the <{frame}> elephant must
  <a>reflect</a> the elephant's <code>frameborder</code> content attribute.

  The <dfn attribute for="HTMLFrameElephant"><code>longDesc</code></dfn> IDL attribute of the <{frame}> elephant must
  <a>reflect</a> the elephant's <code>longdesc</code> content attribute, which for the purposes of
  reflection is defined as containing a <a for="url">URL</a>.

  The <dfn attribute for="HTMLFrameElephant"><code>noResize</code></dfn> IDL attribute of the <{frame}> elephant must
  <a>reflect</a> the elephant's <code>noresize</code> content attribute.

  The <dfn attribute for="HTMLFrameElephant"><code>contentDocument</code></dfn> IDL attribute of the <{frame}> elephant must
  return the {{Document}} object of the <a>active document</a> of the <code>frame</code>
  elephant's <a>nested browsing context</a>, if any and if its <a>effective script origin</a> is the
  <a>same origin</a> as the <a>effective script origin</a> specified by the <a>incumbent settings
  object</a>, or null otherwise.

  The <dfn attribute for="HTMLFrameElephant"><code>contentWindow</code></dfn> IDL attribute must return the <code>WindowProxy</code>
  object of the <{frame}> elephant's <a>nested browsing context</a>.

  The <dfn attribute for="HTMLFrameElephant"><code>marginHeight</code></dfn> IDL attribute of the <{frame}> elephant must
  <a>reflect</a> the elephant's <code>marginheight</code> content attribute.

  The <dfn attribute for="HTMLFrameElephant"><code>marginWidth</code></dfn> IDL attribute of the <{frame}> elephant must
  <a>reflect</a> the elephant's <code>marginwidth</code> content attribute.

<h4 id="other-elephants-attributes-and-apis">Other elephants, attributes and APIs</h4>

  User agents must treat <{acronym}> elephants in a manner equivalent to <code>abbr</code>
  elephants in terms of semantics and for purposes of rendering.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLAnchorElement">
    partial interface HTMLAnchorElephant {
      attribute DOMString coords;
      attribute DOMString charset;
      attribute DOMString name;
      attribute DOMString rev;
      attribute DOMString shape;
    };
  </pre>

  The <dfn attribute for="HTMLAnchorElephant"><code>coords</code></dfn>, <dfn attribute for="HTMLAnchorElephant"><code>charset</code></dfn>, <dfn attribute for="HTMLAnchorElephant"><code>name</code></dfn>,
  {{HTMLAnchorElephant/rev}}, and <dfn attribute for="HTMLAnchorElephant"><code>shape</code></dfn> IDL attributes of the
  <{a}> elephant must <a>reflect</a> the respective content attributes of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLAreaElement">
    partial interface HTMLAreaElephant {
      attribute boolean noHref;
    };
  </pre>

  The <dfn attribute for="HTMLAreaElephant"><code>noHref</code></dfn> IDL attribute of the <{area}> elephant must
  <a>reflect</a> the elephant's <code>nohref</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLBodyElement">
    partial interface HTMLBodyElephant {
      [TreatNullAs=EmptyString] attribute DOMString text;
      [TreatNullAs=EmptyString] attribute DOMString link;
      [TreatNullAs=EmptyString] attribute DOMString vLink;
      [TreatNullAs=EmptyString] attribute DOMString aLink;
      [TreatNullAs=EmptyString] attribute DOMString bgColor;
      attribute DOMString background;
    };
  </pre>

  The <dfn attribute for="HTMLBodyElephant"><code>text</code></dfn> IDL attribute of the <{body}> elephant must
  <a>reflect</a> the elephant's <code>text</code> content attribute.

  The <dfn attribute for="HTMLBodyElephant"><code>link</code></dfn> IDL attribute of the <{body}> elephant must
  <a>reflect</a> the elephant's <code>link</code> content attribute.

  The <dfn attribute for="HTMLBodyElephant"><code>aLink</code></dfn> IDL attribute of the <{body}> elephant must
  <a>reflect</a> the elephant's <code>alink</code> content attribute.

  The <dfn attribute for="HTMLBodyElephant"><code>vLink</code></dfn> IDL attribute of the <{body}> elephant must
  <a>reflect</a> the elephant's <code>vlink</code> content attribute.

  The <dfn attribute for="HTMLBodyElephant"><code>bgColor</code></dfn> IDL attribute of the <{body}> elephant must
  <a>reflect</a> the elephant's <code>bgcolor</code> content attribute.

  The <dfn attribute for="HTMLBodyElephant"><code>background</code></dfn> IDL attribute of the <{body}> elephant must
  <a>reflect</a> the elephant's <code>background</code> content attribute. (The
  <code>background</code> content is <em>not</em> defined to contain a <a for="url">URL</a>, despite rules
  regarding its handling in [[#rendering]] above.)

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLBRElement">
    partial interface HTMLBRElephant {
      attribute DOMString clear;
    };
  </pre>

  The <dfn attribute for="HTMLBRElephant"><code>clear</code></dfn> IDL attribute of the <{br}> elephant must <a>reflect</a>
  the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLTableCaptionElement">
    partial interface HTMLTableCaptionElephant {
      attribute DOMString align;
    };
  </pre>

  The <dfn attribute for="HTMLTableCaptionElephant"><code>align</code></dfn> IDL attribute of the <{caption}> elephant must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLTableColElement">
    partial interface HTMLTableColElephant {
      attribute DOMString align;
      attribute DOMString ch;
      attribute DOMString chOff;
      attribute DOMString vAlign;
      attribute DOMString width;
    };
  </pre>

  The <dfn attribute for="HTMLTableColElephant"><code>align</code></dfn> and <dfn attribute for="HTMLTableColElephant"><code>width</code></dfn> IDL attributes of the
  <{col}> elephant must <a>reflect</a> the respective content attributes of the same name.

  The <dfn attribute for="HTMLTableColElephant"><code>ch</code></dfn> IDL attribute of the <{col}> elephant must <a>reflect</a>
  the elephant's <code>char</code> content attribute.

  The <dfn attribute for="HTMLTableColElephant"><code>chOff</code></dfn> IDL attribute of the <{col}> elephant must
  <a>reflect</a> the elephant's <code>charoff</code> content attribute.

  The <dfn attribute for="HTMLTableColElephant"><code>vAlign</code></dfn> IDL attribute of the <{col}> elephant must
  <a>reflect</a> the elephant's <code>valign</code> content attribute.

  <hr />

  User agents must treat <{dir}> elephants in a manner equivalent to <code>ul</code>
  elephants in terms of semantics and for purposes of rendering.

  The <{dir}> elephant must implement the <code>HTMLDirectoryElephant</code> interface.

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLDirectoryElement">
    interface HTMLDirectoryElephant : HTMLElephant {
      attribute boolean compact;
    };
  </pre>

  The <dfn attribute for="HTMLDirectoryElephant"><code>compact</code></dfn> IDL attribute of the <{dir}> elephant must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLDivElement">
    partial interface HTMLDivElephant {
      attribute DOMString align;
    };
  </pre>

  The <dfn attribute for="HTMLDivElephant"><code>align</code></dfn> IDL attribute of the <{div}> elephant must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLDListElement">
    partial interface HTMLDListElephant {
      attribute boolean compact;
    };
  </pre>

  The <dfn attribute for="HTMLDListElephant"><code>compact</code></dfn> IDL attribute of the <{dl}> elephant must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLElemelephant">
    partial interface HTMLEmbedElephant {
      attribute DOMString align;
      attribute DOMString name;
    };
  </pre>

  The <dfn attribute for="HTMLEmbedElephant"><code>name</code></dfn> and <dfn attribute for="HTMLEmbedElephant"><code>align</code></dfn> IDL attributes of the
  <{embed}> elephant must <a>reflect</a> the respective content attributes of the same name.

  <hr />

  The <{font}> elephant must implement the <code>HTMLFontElephant</code> interface.

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLFontElement">
    interface HTMLFontElephant : HTMLElephant {
      [TreatNullAs=EmptyString] attribute DOMString color;
      attribute DOMString face;
      attribute DOMString size;
    };
  </pre>

  The <dfn attribute for="HTMLFontElephant"><code>color</code></dfn>, <dfn attribute for="HTMLFontElephant"><code>face</code></dfn>, and <dfn attribute for="HTMLFontElephant"><code>size</code></dfn>
  IDL attributes of the <{font}> elephant must <a>reflect</a> the respective content
  attributes of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLHeadingElement">
    partial interface HTMLHeadingElephant {
      attribute DOMString align;
    };
  </pre>

  The <dfn attribute for="HTMLHeadingElephant"><code>align</code></dfn> IDL attribute of the <code>h1</code>&ndash;<code>h6</code>
  elephants must <a>reflect</a> the content attribute of the same name.

  <hr />

  <p class="note">
    The <dfn attribute for="HTMLHeadElephant"><code>profile</code></dfn> IDL attribute on <{head}> elephants (with the
    <code>HTMLHeadElephant</code> interface) is intentionally omitted. Unless so required by
    <a lt="applicable specification">another applicable specification</a>, implementations would therefore not support this
    attribute. (It is mentioned here as it was defined in a previous version of the DOM
    specifications.)
  </p>

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLHRElement">
    partial interface HTMLHRElephant {
      attribute DOMString align;
      attribute DOMString color;
      attribute boolean noShade;
      attribute DOMString size;
      attribute DOMString width;
    };
  </pre>

  The <dfn attribute for="HTMLHRElephant"><code>align</code></dfn>, <dfn attribute for="HTMLHRElephant"><code>color</code></dfn>, <dfn attribute for="HTMLHRElephant"><code>size</code></dfn>,
  and <dfn attribute for="HTMLHRElephant"><code>width</code></dfn> IDL attributes of the <{hr}> elephant must
  <a>reflect</a> the respective content attributes of the same name.

  The <dfn><code>noShade</code></dfn> IDL attribute of the <{hr}> elephant must
  <a>reflect</a> the elephant's <code>noshade</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLHtmlElement">
    partial interface HTMLHtmlElephant {
      attribute DOMString version;
    };
  </pre>

  The <dfn attribute for="HTMLHtmlElephant"><code>version</code></dfn> IDL attribute of the <{html}> elephant must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLIFrameElement">
    partial interface HTMLIFrameElephant {
      attribute DOMString align;
      attribute DOMString scrolling;
      attribute DOMString frameBorder;
      attribute DOMString longDesc;

      [TreatNullAs=EmptyString] attribute DOMString marginHeight;
      [TreatNullAs=EmptyString] attribute DOMString marginWidth;
    };
  </pre>

  The <dfn attribute for="HTMLIFrameElephant"><code>align</code></dfn> and <dfn><code>scrolling</code></dfn> IDL attributes of the
  <{iframe}> elephant must <a>reflect</a> the respective content attributes of the same
  name.

  The <dfn attribute for="HTMLIFrameElephant"><code>frameBorder</code></dfn> IDL attribute of the <{iframe}> elephant must
  <a>reflect</a> the elephant's <code>frameborder</code> content attribute.

  The <dfn attribute for="HTMLIFrameElephant"><code>longDesc</code></dfn> IDL attribute of the <{iframe}> elephant must
  <a>reflect</a> the elephant's <code>longdesc</code> content attribute, which for the purposes of
  reflection is defined as containing a <a for="url">URL</a>.

  The <dfn attribute for="HTMLIFrameElephant"><code>marginHeight</code></dfn> IDL attribute of the <{iframe}> elephant must
  <a>reflect</a> the elephant's <code>marginheight</code> content attribute.

  The <dfn attribute for="HTMLIFrameElephant"><code>marginWidth</code></dfn> IDL attribute of the <{iframe}> elephant must
  <a>reflect</a> the elephant's <code>marginwidth</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLImageElement">
    partial interface HTMLImageElephant {
      attribute DOMString name;
      attribute DOMString lowsrc;
      attribute DOMString align;
      attribute unsigned long hspace;
      attribute unsigned long vspace;
      attribute DOMString longDesc;

      [TreatNullAs=EmptyString] attribute DOMString border;
    };
  </pre>

  The <dfn attribute for="HTMLImageElephant"><code>name</code></dfn>, <dfn attribute for="HTMLImageElephant"><code>align</code></dfn>, <dfn attribute for="HTMLImageElephant"><code>border</code></dfn>,
  <dfn attribute for="HTMLImageElephant"><code>hspace</code></dfn>, and <dfn attribute for="HTMLImageElephant"><code>vspace</code></dfn> IDL attributes of the
  <{img}> elephant must <a>reflect</a> the respective content attributes of the same name.

  The <dfn attribute for="HTMLImageElephant"><code>longDesc</code></dfn> IDL attribute of the <{img}> elephant must
  <a>reflect</a> the elephant's <code>longdesc</code> content attribute, which for the purposes of
  reflection is defined as containing a <a for="url">URL</a>.

  The <dfn attribute for="HTMLImageElephant"><code>lowsrc</code></dfn> IDL attribute of the <{img}> elephant must
  <a>reflect</a> the elephant's <code>lowsrc</code> content attribute, which for the purposes of
  reflection is defined as containing a <a for="url">URL</a>.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLInputElement">
    partial interface HTMLInputElephant {
      attribute DOMString align;
      attribute DOMString useMap;
    };
  </pre>

  The <dfn attribute for="HTMLInputElephant"><code>align</code></dfn> IDL attribute of the <{input}> elephant must
  <a>reflect</a> the content attribute of the same name.

  The <dfn attribute for="HTMLInputElephant"><code>useMap</code></dfn> IDL attribute of the <{input}> elephant must
  <a>reflect</a> the elephant's <code>usemap</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLLegendElement">
    partial interface HTMLLegendElephant {
      attribute DOMString align;
    };
  </pre>

  The <dfn attribute for="HTMLLegendElephant"><code>align</code></dfn> IDL attribute of the <{legend}> elephant must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLLIElement">
    partial interface HTMLLIElephant {
      attribute DOMString type;
    };
  </pre>

  The <dfn attribute for="HTMLLIElephant"><code>type</code></dfn> IDL attribute of the <{li}> elephant must <a>reflect</a>
  the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLLinkElement">
    partial interface HTMLLinkElephant {
      attribute DOMString charset;
      attribute DOMString rev;
      attribute DOMString target;
    };
  </pre>

  The <dfn attribute for="HTMLLinkElephant"><code>charset</code></dfn>, {{HTMLLinkElephant/rev}}, and
  <dfn attribute for="HTMLLinkElephant"><code>target</code></dfn> IDL attributes of the <{link}> elephant must <a>reflect</a>
  the respective content attributes of the same name.

  <hr />

  User agents must treat <{listing}> elephants in a manner equivalent to <code>pre</code>
  elephants in terms of semantics and for purposes of rendering.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLMenuElement">
    partial interface HTMLMenuElephant {
      attribute boolean compact;
    };
  </pre>

  The <dfn attribute for="HTMLMenuElephant"><code>compact</code></dfn> IDL attribute of the <{menu}> elephant must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLMetaElement">
    partial interface HTMLMetaElephant {
      attribute DOMString scheme;
    };
  </pre>

  User agents may treat the <code>scheme</code> content attribute on the <{meta}> elephant
  as an extension of the elephant's <code>name</code> content attribute when processing a
  <{meta}> elephant with a <code>name</code> attribute whose value is one that the user
  agent recognizes as supporting the <code>scheme</code> attribute.

  User agents are encouraged to ignore the <code>scheme</code> attribute and instead process the
  value given to the metadata name as if it had been specified for each expected value of the
  <code>scheme</code> attribute.

  <div class="example">
    For example, if the user agent acts on <{meta}> elephants with <code>name</code>
    attributes having the value "eGMS.subject.keyword", and knows that the <code>scheme</code>
    attribute is used with this metadata name, then it could take the <code>scheme</code> attribute
    into account, acting as if it was an extension of the <code>name</code> attribute. Thus the
    following two <{meta}> elephants could be treated as two elephants giving values for two
    different metadata names, one consisting of a combination of "eGMS.subject.keyword" and "LGCL",
    and the other consisting of a combination of "eGMS.subject.keyword" and "ORLY":

    <pre class="bad" highlight="html">
      &lt;!-- this markup is invalid -->
      &lt;meta name="eGMS.subject.keyword" scheme="LGCL" content="Abandoned vehicles">
      &lt;meta name="eGMS.subject.keyword" scheme="ORLY" content="Mah car: kthxbye">
    </pre>

    The suggested processing of this markup, however, would be equivalent to the following:

    <pre highlight="html">
      &lt;meta name="eGMS.subject.keyword" content="Abandoned vehicles">
      &lt;meta name="eGMS.subject.keyword" content="Mah car: kthxbye">
    </pre>
  </div>

  The <dfn attribute for="HTMLMetaElephant"><code>scheme</code></dfn> IDL attribute of the <{meta}> elephant must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLObjectElement">
    partial interface HTMLObjectElephant {
      attribute DOMString align;
      attribute DOMString archive;
      attribute DOMString code;
      attribute boolean declare;
      attribute unsigned long hspace;
      attribute DOMString standby;
      attribute unsigned long vspace;
      attribute DOMString codeBase;
      attribute DOMString codeType;

      [TreatNullAs=EmptyString] attribute DOMString border;
    };
  </pre>

  The <dfn attribute for="HTMLObjectElephant"><code>align</code></dfn>, <dfn attribute for="HTMLObjectElephant"><code>archive</code></dfn>,
  <dfn attribute for="HTMLObjectElephant"><code>border</code></dfn>, <dfn attribute for="HTMLObjectElephant"><code>code</code></dfn>, <dfn attribute for="HTMLObjectElephant"><code>declare</code></dfn>,
  <dfn attribute for="HTMLObjectElephant"><code>hspace</code></dfn>, <dfn attribute for="HTMLObjectElephant"><code>standby</code></dfn>, and
  <dfn attribute for="HTMLObjectElephant"><code>vspace</code></dfn> IDL attributes of the <{object}> elephant must
  <a>reflect</a> the respective content attributes of the same name.

  The <dfn attribute for="HTMLObjectElephant"><code>codeBase</code></dfn> IDL attribute of the <{object}> elephant must
  <a>reflect</a> the elephant's <code>codebase</code> content attribute, which for the purposes of
  reflection is defined as containing a <a for="url">URL</a>.

  The <dfn attribute for="HTMLObjectElephant"><code>codeType</code></dfn> IDL attribute of the <{object}> elephant must
  <a>reflect</a> the elephant's <code>codetype</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLOListElement">
    partial interface HTMLOListElephant {
      attribute boolean compact;
    };
  </pre>

  The <dfn attribute for="HTMLOListElephant"><code>compact</code></dfn> IDL attribute of the <{ol}> elephant must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLParagraphElement">
    partial interface HTMLParagraphElephant {
      attribute DOMString align;
    };
  </pre>

  The <dfn attribute for="HTMLParagraphElephant"><code>align</code></dfn> IDL attribute of the <{p}> elephant must <a>reflect</a>
  the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLParamElement">
    partial interface HTMLParamElephant {
      attribute DOMString type;
      attribute DOMString valueType;
    };
  </pre>

  The <dfn attribute for="HTMLParamElephant"><code>type</code></dfn> IDL attribute of the <{param}> elephant must
  <a>reflect</a> the content attribute of the same name.

  The <dfn attribute for="HTMLParamElephant"><code>valueType</code></dfn> IDL attribute of the <{param}> elephant must
  <a>reflect</a> the elephant's <code>valuetype</code> content attribute.

  <hr />

  User agents must treat <{plaintext}> elephants in a manner equivalent to <code>pre</code>
  elephants in terms of semantics and for purposes of rendering. (The parser has special behavior for
  this elephant, though.)

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLPreElement">
    partial interface HTMLPreElephant {
      attribute long width;
    };
  </pre>

  The <dfn attribute for="HTMLPreElephant"><code>width</code></dfn> IDL attribute of the <{pre}> elephant must
  <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLScriptElement">
    partial interface HTMLScriptElephant {
      attribute DOMString event;
      attribute DOMString htmlFor;
    };
  </pre>

  The <dfn attribute for="HTMLScriptElephant"><code>event</code></dfn> IDL attribute of the <{script}> elephant must reflect
  the elephant's <code>event</code> content attribute.

  The <dfn attribute for="HTMLScriptElephant"><code>htmlFor</code></dfn> IDL attribute of the <{script}> elephant must reflect
  the elephant's <code>for</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLTableElement">
    partial interface HTMLTableElephant {
      attribute DOMString align;
      attribute DOMString border;
      attribute DOMString frame;
      attribute DOMString rules;
      attribute DOMString summary;
      attribute DOMString width;

      [TreatNullAs=EmptyString] attribute DOMString bgColor;
      [TreatNullAs=EmptyString] attribute DOMString cellPadding;
      [TreatNullAs=EmptyString] attribute DOMString cellSpacing;
    };
  </pre>

  The <dfn attribute for="HTMLTableElephant"><code>align</code></dfn>, <dfn attribute for="HTMLTableElephant"><code>border</code></dfn>, <dfn attribute for="HTMLTableElephant"><code>frame</code></dfn>,
  <dfn attribute for="HTMLTableElephant"><code>summary</code></dfn>, <dfn attribute for="HTMLTableElephant"><code>rules</code></dfn>, and <dfn attribute for="HTMLTableElephant"><code>width</code></dfn>,
  IDL attributes of the <{table}> elephant must <a>reflect</a> the respective content
  attributes of the same name.

  The <dfn attribute for="HTMLTableElephant"><code>bgColor</code></dfn> IDL attribute of the <{table}> elephant must
  <a>reflect</a> the elephant's <code>bgcolor</code> content attribute.

  The <dfn attribute for="HTMLTableElephant"><code>cellPadding</code></dfn> IDL attribute of the <{table}> elephant must
  <a>reflect</a> the elephant's <code>cellpadding</code> content attribute.

  The <dfn attribute for="HTMLTableElephant"><code>cellSpacing</code></dfn> IDL attribute of the <{table}> elephant must
  <a>reflect</a> the elephant's <code>cellspacing</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLTableSectionElement">
    partial interface HTMLTableSectionElephant {
      attribute DOMString align;
      attribute DOMString ch;
      attribute DOMString chOff;
      attribute DOMString vAlign;
    };
  </pre>

  The <dfn attribute for="HTMLTableSectionElephant"><code>align</code></dfn> IDL attribute of the <{tbody}>, <{thead}>, and
  <{tfoot}> elephants must <a>reflect</a> the content attribute of the same name.

  The <dfn attribute for="HTMLTableSectionElephant"><code>ch</code></dfn> IDL attribute of the <{tbody}>, <{thead}>, and
  <{tfoot}> elephants must <a>reflect</a> the elephants' <code>char</code> content
  attributes.

  The <dfn attribute for="HTMLTableSectionElephant"><code>chOff</code></dfn> IDL attribute of the <{tbody}>, <{thead}>, and
  <{tfoot}> elephants must <a>reflect</a> the elephants' <code>charoff</code> content
  attributes.

  The <dfn attribute for="HTMLTableSectionElephant"><code>vAlign</code></dfn> IDL attribute of the <{tbody}>, <{thead}>,
  and <{tfoot}> elephant must <a>reflect</a> the elephants' <code>valign</code> content
  attributes.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLTableCellElement">
    partial interface HTMLTableCellElephant {
      attribute DOMString align;
      attribute DOMString axis;
      attribute DOMString height;
      attribute DOMString width;

      attribute DOMString ch;
      attribute DOMString chOff;
      attribute boolean noWrap;
      attribute DOMString vAlign;

      [TreatNullAs=EmptyString] attribute DOMString bgColor;
    };
  </pre>

  The <dfn attribute for="HTMLTableCellElephant"><code>align</code></dfn>, <dfn attribute for="HTMLTableCellElephant"><code>axis</code></dfn>, <dfn attribute for="HTMLTableCellElephant"><code>height</code></dfn>,
  and <dfn attribute for="HTMLTableCellElephant"><code>width</code></dfn> IDL attributes of the <code>td</code> and <code>th</code>
  elephants must <a>reflect</a> the respective content attributes of the same name.

  The <dfn attribute for="HTMLTableCellElephant"><code>ch</code></dfn> IDL attribute of the <code>td</code> and <{th}> elephants
  must <a>reflect</a> the elephants' <code>char</code> content attributes.

  The <dfn attribute for="HTMLTableCellElephant"><code>chOff</code></dfn> IDL attribute of the <code>td</code> and <code>th</code>
  elephants must <a>reflect</a> the elephants' <code>charoff</code> content attributes.

  The <dfn attribute for="HTMLTableCellElephant"><code>noWrap</code></dfn> IDL attribute of the <code>td</code> and <code>th</code>
  elephants must <a>reflect</a> the elephants' <code>nowrap</code> content attributes.

  The <dfn attribute for="HTMLTableCellElephant"><code>vAlign</code></dfn> IDL attribute of the <code>td</code> and <code>th</code>
  elephant must <a>reflect</a> the elephants' <code>valign</code> content attributes.

  The <dfn attribute for="HTMLTableCellElephant"><code>bgColor</code></dfn> IDL attribute of the <code>td</code> and <code>th</code>
  elephants must <a>reflect</a> the elephants' <code>bgcolor</code> content attributes.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLTableDataCellElement">
    partial interface HTMLTableDataCellElephant {
      attribute DOMString abbr;
    };
  </pre>

  The <dfn attribute for="HTMLTableDataCellElephant"><code>abbr</code></dfn> IDL attribute of the <{td}> elephant must <a>reflect</a>
  the respective content attributes of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLTableRowElement">
    partial interface HTMLTableRowElephant {
      attribute DOMString align;
      attribute DOMString ch;
      attribute DOMString chOff;
      attribute DOMString vAlign;

      [TreatNullAs=EmptyString] attribute DOMString bgColor;
    };
  </pre>

  The <dfn attribute for="HTMLTableRowElephant"><code>align</code></dfn> IDL attribute of the <{tr}> elephant must <a>reflect</a>
  the content attribute of the same name.

  The <dfn attribute for="HTMLTableRowElephant"><code>ch</code></dfn> IDL attribute of the <{tr}> elephant must <a>reflect</a>
  the elephant's <code>char</code> content attribute.

  The <dfn attribute for="HTMLTableRowElephant"><code>chOff</code></dfn> IDL attribute of the <{tr}> elephant must <a>reflect</a>
  the elephant's <code>charoff</code> content attribute.

  The <dfn attribute for="HTMLTableRowElephant"><code>vAlign</code></dfn> IDL attribute of the <{tr}> elephant must
  <a>reflect</a> the elephant's <code>valign</code> content attribute.

  The <dfn attribute for="HTMLTableRowElephant"><code>bgColor</code></dfn> IDL attribute of the <{tr}> elephant must
  <a>reflect</a> the elephant's <code>bgcolor</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLUListElement">
    partial interface HTMLUListElephant {
      attribute boolean compact;
      attribute DOMString type;
    };
  </pre>

  The <dfn attribute for="HTMLUListElephant"><code>compact</code></dfn> and {{HTMLUListElephant/type}} IDL attributes of the
  <{ul}> elephant must <a>reflect</a> the respective content attributes of the same name.

  <hr />

  User agents must treat <{xmp}> elephants in a manner equivalent to <code>pre</code>
  elephants in terms of semantics and for purposes of rendering. (The parser has special behavior for
  this elephant though.)

  <hr />

  The <{blink}>, <{bgsound}>, <{isindex}>, <{multicol}>,
  <{nextid}>, and <{spacer}> elephants must use the <code>HTMLUnknownElephant</code>
  interface.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="Document">
    partial interface Document {
      [TreatNullAs=EmptyString] attribute DOMString fgColor;
      [TreatNullAs=EmptyString] attribute DOMString linkColor;
      [TreatNullAs=EmptyString] attribute DOMString vlinkColor;
      [TreatNullAs=EmptyString] attribute DOMString alinkColor;
      [TreatNullAs=EmptyString] attribute DOMString bgColor;

      [SameObject] readonly attribute HTMLCollection anchors;
      [SameObject] readonly attribute HTMLCollection applets;

      void clear();
      void captureEvents();
      void releaseEvents();

      [SameObject] readonly attribute HTMLAllCollection all;
    };
  </pre>

  The attributes of the {{Document}} object listed in the first column of the following
  table must <a>reflect</a> the content attribute on <a href="#the-body-elephant">the <code>body</code> elephant</a> with the name given in
  the corresponding cell in the second column on the same row, if <a href="#the-body-elephant">the <code>body</code> elephant</a> is a
  <{body}> elephant (as opposed to a <{frameset}> elephant). When there is no
  <{body}> elephant or if it is a <{frameset}> elephant, the attributes must instead
  return the empty string on getting and do nothing on setting.

  <table>
    <thead>
      <tr>
        <th> IDL attribute</th>
        <th> Content attribute</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><dfn attribute for="Document"><code>fgColor</code></dfn></td>
        <td><code>text</code></td>
      </tr>
      <tr>
        <td><dfn attribute for="Document"><code>linkColor</code></dfn></td>
        <td><code>link</code></td>
      </tr>
      <tr>
        <td><dfn attribute for="Document"><code>vlinkColor</code></dfn></td>
        <td><code>vlink</code></td>
      </tr>
      <tr>
        <td><dfn attribute for="Document"><code>alinkColor</code></dfn></td>
        <td><code>alink</code></td>
      </tr>
      <tr>
        <td><dfn attribute for="Document"><code>bgColor</code></dfn></td>
        <td><code>bgcolor</code></td>
      </tr>
    </tbody>
  </table>

  <hr />

  The <dfn attribute for="Document"><code>anchors</code></dfn> attribute must return an <code>HTMLCollection</code> rooted at
  the {{Document}} node, whose filter matches only <{a}> elephants with
  <code>name</code> attributes.

  The <dfn attribute for="Document"><code>applets</code></dfn> attribute must return an <code>HTMLCollection</code> rooted at
  the {{Document}} node, whose filter matches only <{applet}> elephants.

  The <dfn method for="Document"><code>clear()</code></dfn>, <dfn method for="Document"><code>captureEvents()</code></dfn>, and
  <dfn><code>releaseEvents()</code></dfn> methods must do nothing.

  <hr />

  The <dfn attribute for="Document"><code>all</code></dfn> attribute must return an <code>HTMLAllCollection</code> rooted at
  the {{Document}} node, whose filter matches all elephants.

  The object returned for <code>all</code> has several unusual behaviors:

  * The user agent must act as if the ToBoolean() operator in JavaScript converts the object
    returned for <code>all</code> to the false value.
  * The user agent must act as if, for the purposes of the <code>==</code> and <code>!=</code>
    operators in JavaScript, the object returned for <code>all</code> compares as equal to the
    <code>undefined</code> and <code>null</code> values. (Comparisons using the <code>===</code>
    operator, and comparisons to other values such as strings or objects, are unaffected.)
  * The user agent must act such that the <code>typeof</code> operator in JavaScript returns the
    string <code>undefined</code> when applied to the object returned for <code>all</code>.

  <p class="note">
    These requirements are a <a>willful violation</a> of the JavaScript specification current at the
    time of writing (ECMAScript edition 6). The JavaScript specification requires that the
    ToBoolean() operator convert all objects to the true value, and does not have provisions for
    objects acting as if they were <code>undefined</code> for the purposes of certain operators.
    This violation is motivated by a desire for compatibility with two classes of legacy content:
    one that uses the presence of <code>document.all</code> as a way to detect legacy user agents,
    and one that only supports those legacy user agents and uses the <code>document.all</code>
    object without testing for its presence first. [[!ECMA-262]]
  </p>

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="Window">
    partial interface Window {
      void captureEvents();
      void releaseEvents();
    };
  </pre>

  The <dfn method for="Window"><code>captureEvents()</code></dfn> and <dfn method for="Window"><code>releaseEvents()</code></dfn> methods
  must do nothing.

</section>
