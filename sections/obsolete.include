<section>
<!--
 ███████  ████████   ██████   ███████  ██       ████████ ████████ ████████
██     ██ ██     ██ ██    ██ ██     ██ ██       ██          ██    ██
██     ██ ██     ██ ██       ██     ██ ██       ██          ██    ██
██     ██ ████████   ██████  ██     ██ ██       ██████      ██    ██████
██     ██ ██     ██       ██ ██     ██ ██       ██          ██    ██
██     ██ ██     ██ ██    ██ ██     ██ ██       ██          ██    ██
 ███████  ████████   ██████   ███████  ████████ ████████    ██    ████████
-->

<h2 id="obsolete">Obsolete features</h2>

<h3 id="obsolete-but-conforming-features">Obsolete but conforming features</h3>

  Features listed in this section will trigger warnings in conformance checkers.

  Authors should not specify a <{img/border}> attribute on an <{img}> element. If the
  attribute is present, its value must be the string "<code>0</code>". CSS should be used instead.

  Authors should not specify a <{script/language}> attribute on a <{script}> element. If
  the attribute is present, its value must be an <a>ASCII case-insensitive</a> match for the string
  "<code>JavaScript</code>" and either the <{script/type}> attribute must be omitted or its value
  must be an <a>ASCII case-insensitive</a> match for the string "<code>text/javascript</code>".
  The attribute should be entirely omitted instead (with the value "<code>JavaScript</code>", it has
  no effect), or replaced with use of the <{script/type}> attribute.

  Authors should not specify the <{a/name}> attribute on <{a}> elements. If the
  attribute is present, its value must not be the empty string and must neither be equal to the
  value of any of the <a>IDs</a> in the element's <a>home subtree</a> other than the element's own
  <{global/id}>, if any, nor be equal to the value of any of the other <{a/name}> attributes on
  <{a}> elements in the element's <a>home subtree</a>. If this attribute is present and the
  element has an <{global/id}>, then the attribute's value must be equal to the element's <{global/id}>. In
  earlier versions of the language, this attribute was intended as a way to specify possible targets
  for fragment identifiers in <a for="url">URLs</a>. The <{global/id}> attribute should be used instead.

  Authors should not, but may despite requirements to the contrary elsewhere in this specification,
  specify the <{input/maxlength}> and <{input/size}> attributes on <{input}> elements
  whose <{input/type}> attributes are in the <a element-state for="input">Number</a> state. One
  valid reason for using these attributes regardless is to help legacy user agents that do not
  support <{input}> elements with <code>type="number"</code> to still render the text field with a
  useful width.

  <p class="note">
    In <a href="#syntax">the HTML syntax</a>, specifying a <a>DOCTYPE</a> that is an <a>obsolete permitted
    DOCTYPE</a> will also trigger a warning.
  </p>

    <h4 id="warnings-for-obsolete-but-conforming-features">Warnings for obsolete but conforming features</h4>

  To ease the transition from HTML Transitional documents to the language defined in <em>this</em>
  specification, and to discourage certain features that are only allowed in very few circumstances,
  conformance checkers must warn the user when the following features are used in a document. These
  are generally old obsolete features that have no effect, and are allowed only to distinguish
  between likely mistakes (regular conformance errors) and mere vestigial markup or unusual and
  discouraged practices (these warnings).

    The following features must be categorized as described above:

    * The presence of an <a>obsolete permitted DOCTYPE</a> in an <a>HTML document</a>.

  * The presence of a <{img/border}> attribute on an <{img}> element if its value is the string
    "<code>0</code>".

  * The presence of a <{script/language}> attribute on a <{script}> element if its value is an
    <a>ASCII case-insensitive</a> match for the string "<code>JavaScript</code>" and if there is no
    <{script/type}> attribute or there is and its value is an <a>ASCII case-insensitive</a> match
    for the string "<code>text/javascript</code>".

  * The presence of a <{a/name}> attribute on an <{a}> element, if its value is not the empty string.

  * The presence of a <{input/maxlength}> attribute on an <{input}> element whose <{input/type}>
    attribute is in the <a element-state for="input">Number</a> state.

  * The presence of a <{input/size}> attribute on an <{input}> element whose <{input/type}>
    attribute is in the <a element-state for="input">Number</a> state.

  Conformance checkers must distinguish between pages that have no conformance errors and have none
  of these obsolete features, and pages that have no conformance errors but do have some of these
  obsolete features.

    <p class="example">
    For example, a validator could report some pages as "Valid HTML" and others as "Valid HTML with
    warnings".
    </p>

<h3 id="non-conforming-features">Non-conforming features</h3>

  Elements in the following list are entirely obsolete, and must not be used by authors:

  : <code>applet</code>
  :: Use <{embed}> or <{object}> instead.

  : <dfn element><code>acronym</code></dfn>
  :: Use <{abbr}> instead.

  : <dfn element><code>bgsound</code></dfn>
  :: Use <{audio}> instead.

  : <dfn element><code>dir</code></dfn>
  :: Use <{ul}> instead.

  : <code>frame</code>
  : <code>frameset</code>
  : <dfn element><code>noframes</code></dfn>
  :: Either use <{iframe}> and CSS instead, or use server-side includes to generate
      complete pages with the various invariant parts merged in.

  : <dfn element><code>isindex</code></dfn>
  :: Use an explicit <{form}> and <a element-state for="input" lt="Text">text field</a> combination instead.

  : <dfn element><code>listing</code></dfn>
  :: Use <{pre}> and <{code}> instead.

  : <dfn element><code>nextid</code></dfn>
  :: Use GUIDs instead.

  : <dfn element><code>noembed</code></dfn>
  :: Use <{object}> instead of <{embed}> when fallback is necessary.

  : <dfn element><code>plaintext</code></dfn>
  :: Use the "<code>text/plain</code>" <a>MIME type</a> instead.

  : <{rb}>
  : <{rtc}>
  :: Providing the ruby base directly inside the <{ruby}> element or using nested <{ruby}> elements
      is sufficient.

  : <dfn element><code>strike</code></dfn>
  :: Use <code>del</code> instead if the element is marking an edit, otherwise use <code>s</code>
      instead.

  : <dfn element><code>xmp</code></dfn>
  :: Use <{pre}> and <{code}> instead, and escape "<code>&lt;</code>" and
      "<code>&amp;</code>" characters as "<code>&amp;lt;</code>" and "<code>&amp;amp;</code>"
      respectively.

  : <dfn element><code>basefont</code></dfn>
  : <dfn element><code>big</code></dfn>
  : <dfn element><code>blink</code></dfn>
  : <dfn element><code>center</code></dfn>
  : <dfn element><code>font</code></dfn>
  : <{marquee}>
  : <dfn element><code>multicol</code></dfn>
  : <dfn element><code>nobr</code></dfn>
  : <dfn element><code>spacer</code></dfn>
  : <dfn element><code>tt</code></dfn>
  :: Use appropriate elements or CSS instead.

      Where the <{tt}> element would have been used for marking up keyboard input,
      consider the <{kbd}> element; for variables, consider the <{var}> element;
      for computer code, consider the <{code}> element; and for computer output, consider
      the <{samp}> element.

      Similarly, if the <{big}> element is being used to denote a heading, consider using
      the <code>h1</code> element; if it is being used for marking up important passages, consider
      the <{strong}> element; and if it is being used for highlighting text for reference
      purposes, consider the <{mark}> element.

      See also the <a href="#text-level-semantics-usage-summary">text-level semantics usage summary</a> for more suggestions with examples.

  <hr />

  The following attributes are obsolete (though the elements are still part of the language), and
  must not be used by authors:

  : <dfn element-attr for="a"><code>charset</code></dfn> on <{a}> elements
  : <dfn element-attr for="link"><code>charset</code></dfn> on <{link}> elements
  :: Use an HTTP <code>Content-Type</code> header on the linked resource instead.

  : <dfn element-attr for="a"><code>coords</code></dfn> on <{a}> elements
  : <dfn element-attr for="a"><code>shape</code></dfn> on <{a}> elements
  :: Use <code>area</code> instead of <{a}> for image maps.

  : <dfn element-attr for="a"><code>methods</code></dfn> on <{a}> elements
  : <dfn element-attr for="link"><code>methods</code></dfn> on <{link}> elements
  :: Use the HTTP OPTIONS feature instead.

  : <dfn element-attr for="a"><code>name</code></dfn> on <{a}> elements (except as noted in the
      previous section)
  : <dfn element-attr for="embed"><code>name</code></dfn> on <{embed}> elements
  : <dfn element-attr for="img"><code>name</code></dfn> on <{img}> elements
  : <dfn element-attr for="option"><code>name</code></dfn> on <{option}> elements
  :: Use the <{global/id}> attribute instead.

  : <dfn element-attr for="a"><code>urn</code></dfn> on <{a}> elements
  : <dfn element-attr for="link"><code>urn</code></dfn> on <{link}> elements
  :: Specify the preferred persistent identifier using the <{link/href}> attribute instead.

  : <dfn element-attr for="form"><code>accept</code></dfn> on <{form}> elements
  :: Use the <{input/accept}> attribute directly on the <{input}> elements instead.

  : <dfn element-attr for="area"><code>type</code></dfn> on <{area}> elements
  :: These attributes do not do anything useful, and for historical reasons there are no
      corresponding IDL attributes on <{area}> elements. Omit them altogether.

  : <dfn element-attr for="area"><code>nohref</code></dfn> on <{area}> elements
  :: Omitting the <{links/href}> attribute is sufficient; the <code>nohref</code> attribute is
      unnecessary. Omit it altogether.

  : <dfn element-attr for="head"><code>profile</code></dfn> on <{head}> elements
  :: When used for declaring which <code>meta</code> terms are used in the document, unnecessary;
      omit it altogether, and <a>register the names</a>.
  :: When used for triggering specific user agent behaviors: use a <{link}> element
      instead.

  : <dfn element-attr for="html"><code>version</code></dfn> on <{html}> elements
  :: Unnecessary. Omit it altogether.

  : <dfn element-attr for="html"><code>manifest</code></dfn> on <{html}> elements
  :: The use of application caches is not recommended. Alternative mechanisms to support offline applications
       include the use of [[WEBSTORAGE]], [[IndexedDB]], and [[SERVICE-WORKERS]].

  : <dfn element-attr for="input"><code>ismap</code></dfn> on <{input}> elements
  :: Unnecessary. Omit it altogether. All <{input}> elements with a <code>type</code> attribute in
      the <a element-state for="input">image button</a> state are processed as server-side image
      maps.

  : <dfn element-attr for="input"><code>usemap</code></dfn> on <{input}> elements
  :: Use <code>img</code> instead of <code>input</code> for image maps.

  : <dfn element-attr for="iframe,frame"><code>longdesc</code></dfn> on <{iframe}> and <{frame}> elements

  : <dfn element-attr for="img"><code>lowsrc</code></dfn> on <{img}> elements
  :: Use a progressive JPEG image (given in the <code>src</code> attribute), instead of using two
      separate images.

  : <dfn element-attr for="link"><code>target</code></dfn> on <{link}> elements
  :: Unnecessary. Omit it altogether.

  : <dfn element-attr for="meta"><code>scheme</code></dfn> on <{meta}> elements
  :: Use only one scheme per field, or make the scheme declaration part of the value.

  : <dfn element-attr for="object"><code>archive</code></dfn> on <{object}> elements
  : <dfn element-attr for="object"><code>classid</code></dfn> on <{object}> elements
  : <dfn element-attr for="object"><code>code</code></dfn> on <{object}> elements
  : <dfn element-attr for="object"><code>codebase</code></dfn> on <{object}> elements
  : <dfn element-attr for="object"><code>codetype</code></dfn> on <{object}> elements
  :: Use the <{object/data}> and <{object/type}> attributes to invoke <a>plugins</a>. To set
      parameters with these names in particular, the <{param}> element can be used.

  : <dfn element-attr for="object"><code>declare</code></dfn> on <{object}> elements
  :: Repeat the <{object}> element completely each time the resource is to be reused.

  : <dfn element-attr for="object"><code>standby</code></dfn> on <{object}> elements
  :: Optimize the linked resource so that it loads quickly or, at least, incrementally.
  : <dfn element-attr for="object"><code>usemap</code></dfn> on <{object}> elements
  :: Use <code>img</code> instead of <code>object</code> for image maps.

  : <dfn element-attr for="param"><code>type</code></dfn> on <{param}> elements
  : <dfn element-attr for="param"><code>valuetype</code></dfn> on <{param}> elements
  :: Use the <code>name</code> and <code>value</code> attributes without declaring value types.

  : <dfn element-attr for="script"><code>language</code></dfn> on <{script}> elements (except as
      noted in the previous section)
  :: Use the <code>type</code> attribute instead.

  : <dfn element-attr for="script"><code>event</code></dfn> on <{script}> elements
  : <dfn element-attr for="script"><code>for</code></dfn> on <{script}> elements
  :: Use DOM events mechanisms to register event listeners. [[!DOM]]

  : <{source/media}> on <{source}> elements
  :: Use script to select the media resource(s) to use.

  : <dfn element-attr for="table"><code>datapagesize</code></dfn> on <{table}> elements
  :: Unnecessary. Omit it altogether.

  : <dfn element-attr for="table"><code>summary</code></dfn> on <{table}> elements
  :: Use one of the [[#sec-techniques-for-describing-tables]] given in the <code>table</code>
      section instead.

  : <dfn element-attr for="td"><code>abbr</code></dfn> on <{td}> elements
  :: Use text that begins in an unambiguous and terse manner, and include any more elaborate text
      after that. The <code>title</code> attribute can also be useful in including more detailed
      text, so that the cell's contents can be made terse. If it's a heading, use <code>th</code>
      (which has an <code>abbr</code> attribute).

  : <dfn element-attr for="td"><code>axis</code></dfn> on <{td}> and <{th}> elements
  :: Use the <{th/scope}> attribute on the relevant <{th}>.

  : <dfn element-attr for="td"><code>scope</code></dfn> on <{td}> elements
  :: Use <{th}> elements for heading cells.

  : <dfn element-attr for="data"><code>datasrc</code></dfn> on <{a}>, <{applet}>, <{button}>,
      <{div}>, <{frame}>, <{iframe}>, <{img}>, <{input}>, <{label}>, <{legend}>, <{marquee}>,
      <{object}>, <{option}>, <{select}>, <{span}>, <{table}>, and <{textarea}> elements
  : <dfn element-attr for="data"><code>datafld</code></dfn> on <{a}>, <{applet}>, <{button}>,
      <{div}>, <{fieldset}>, <{frame}>, <{iframe}>, <{img}>, <{input}>, <{label}>, <{legend}>,
      <{marquee}>, <{object}>, <{param}>, <{select}>, <{span}>, and <{textarea}> elements
  : <dfn element-attr for="data"><code>dataformatas</code></dfn> on <{button}>, <{div}>,
      <{input}>, <{label}>, <{legend}>, <{marquee}>, <{object}>, <{option}>, <{select}>, <{span}>,
      and <{table}> elements
  :: Use script and a mechanism such as <code>XMLHttpRequest</code> to populate the page
      dynamically. [[XHR]]

  : <dfn element-attr for="body"><code>alink</code></dfn> on <{body}> elements
  : <dfn element-attr for="body"><code>bgcolor</code></dfn> on <{body}> elements
  : <dfn element-attr for="body"><code>bottommargin</code></dfn> on <{body}> elements
  : <dfn element-attr for="body"><code>leftmargin</code></dfn> on <{body}> elements
  : <dfn element-attr for="body"><code>link</code></dfn> on <{body}> elements
  : <dfn element-attr for="body"><code>marginheight</code></dfn> on <{body}> elements
  : <dfn element-attr for="body"><code>marginwidth</code></dfn> on <{body}> elements
  : <dfn element-attr for="body"><code>rightmargin</code></dfn> on <{body}> elements
  : <dfn element-attr for="body"><code>text</code></dfn> on <{body}> elements
  : <dfn element-attr for="body"><code>margintop</code></dfn> on <{body}> elements
  : <dfn element-attr for="body"><code>vlink</code></dfn> on <{body}> elements
  : <dfn element-attr for="br"><code>clear</code></dfn> on <{br}> elements
  : <dfn element-attr for="caption"><code>align</code></dfn> on <{caption}> elements
  : <dfn element-attr for="col"><code>align</code></dfn> on <{col}> elements
  : <dfn element-attr for="col"><code>char</code></dfn> on <{col}> elements
  : <dfn element-attr for="col"><code>charoff</code></dfn> on <{col}> elements
  : <dfn element-attr for="col"><code>valign</code></dfn> on <{col}> elements
  : <dfn element-attr for="col"><code>width</code></dfn> on <{col}> elements
  : <dfn element-attr for="div"><code>align</code></dfn> on <{div}> elements
  : <dfn element-attr for="dl"><code>compact</code></dfn> on <{dl}> elements
  : <dfn element-attr for="embed"><code>align</code></dfn> on <{embed}> elements
  : <dfn element-attr for="embed"><code>hspace</code></dfn> on <{embed}> elements
  : <dfn element-attr for="embed"><code>vspace</code></dfn> on <{embed}> elements
  : <dfn element-attr for="hr"><code>align</code></dfn> on <{hr}> elements
  : <dfn element-attr for="hr"><code>color</code></dfn> on <{hr}> elements
  : <dfn element-attr for="hr"><code>noshade</code></dfn> on <{hr}> elements
  : <dfn element-attr for="hr"><code>size</code></dfn> on <{hr}> elements
  : <dfn element-attr for="hr"><code>width</code></dfn> on <{hr}> elements
  : <dfn element-attr for="headings"><code>align</code></dfn> on <{h1}>&mdash;<{h6}> elements
  : <dfn element-attr for="iframe"><code>align</code></dfn> on <{iframe}> elements
  : <dfn element-attr for="iframe"><code>allowtransparency</code></dfn> on <{iframe}> elements
  : <dfn element-attr for="iframe"><code>frameborder</code></dfn> on <{iframe}> elements
  : <dfn element-attr for="iframe"><code>framespacing</code></dfn> on <{iframe}> elements
  : <dfn element-attr for="iframe"><code>hspace</code></dfn> on <{iframe}> elements
  : <dfn element-attr for="iframe"><code>marginheight</code></dfn> on <{iframe}> elements
  : <dfn element-attr for="iframe"><code>marginwidth</code></dfn> on <{iframe}> elements
  : <dfn element-attr for="iframe"><code>scrolling</code></dfn> on <{iframe}> elements
  : <dfn element-attr for="iframe"><code>vspace</code></dfn> on <{iframe}> elements
  : <dfn element-attr for="input"><code>align</code></dfn> on <{input}> elements
  : <dfn element-attr for="input"><code>border</code></dfn> on <{input}> elements
  : <dfn element-attr for="input"><code>hspace</code></dfn> on <{input}> elements
  : <dfn element-attr for="input"><code>vspace</code></dfn> on <{input}> elements
  : <dfn element-attr for="img"><code>align</code></dfn> on <{img}> elements
  : <dfn element-attr for="img"><code>border</code></dfn> on <{img}> elements (except as noted in the previous section)
  : <dfn element-attr for="img"><code>hspace</code></dfn> on <{img}> elements
  : <dfn element-attr for="img"><code>vspace</code></dfn> on <{img}> elements
  : <dfn element-attr for="legend"><code>align</code></dfn> on <{legend}> elements
  : <dfn element-attr for="li"><code>type</code></dfn> on <{li}> elements
  : <dfn element-attr for="menu"><code>compact</code></dfn> on <{menu}> elements
  : <dfn element-attr for="object"><code>align</code></dfn> on <{object}> elements
  : <dfn element-attr for="object"><code>border</code></dfn> on <{object}> elements
  : <dfn element-attr for="object"><code>hspace</code></dfn> on <{object}> elements
  : <dfn element-attr for="object"><code>vspace</code></dfn> on <{object}> elements
  : <dfn element-attr for="ol"><code>compact</code></dfn> on <{ol}> elements
  : <dfn element-attr for="p"><code>align</code></dfn> on <{p}> elements
  : <dfn element-attr for="pre"><code>width</code></dfn> on <{pre}> elements
  : <dfn element-attr for="table"><code>align</code></dfn> on <{table}> elements
  : <dfn element-attr for="table"><code>bgcolor</code></dfn> on <{table}> elements
  : <dfn element-attr for="table"><code>border</code></dfn> on <{table}> elements
  : <dfn element-attr for="table"><code>bordercolor</code></dfn> on <{table}> elements
  : <dfn element-attr for="table"><code>cellpadding</code></dfn> on <{table}> elements
  : <dfn element-attr for="table"><code>cellspacing</code></dfn> on <{table}> elements
  : <dfn element-attr for="table"><code>frame</code></dfn> on <{table}> elements
  : <dfn element-attr for="table"><code>height</code></dfn> on <{table}> elements
  : <dfn element-attr for="table"><code>rules</code></dfn> on <{table}> elements
  : <dfn element-attr for="table"><code>width</code></dfn> on <{table}> elements
  : <dfn element-attr for="tbody,thead,tfoot,tablesection"><code>align</code></dfn> on <{tbody}>,
      <{thead}>, and <{tfoot}> elements
  : <dfn element-attr for="tbody,thead,tfoot,tablesection"><code>char</code></dfn> on <{tbody}>,
      <{thead}>, and <{tfoot}> elements
  : <dfn element-attr for="tbody,thead,tfoot,tablesection"><code>charoff</code></dfn> on <{tbody}>,
      <{thead}>, and <{tfoot}> elements
  : <dfn element-attr for="tbody,thead,tfoot,tablesection"><code>valign</code></dfn> on <{tbody}>,
      <{thead}>, and <{tfoot}> elements
  : <dfn element-attr for="td,th,tablecells"><code>align</code></dfn> on <{td}> and <{th}> elements
  : <dfn element-attr for="td,th,tablecells"><code>bgcolor</code></dfn> on <{td}> and <{th}> elements
  : <dfn element-attr for="td,th,tablecells"><code>char</code></dfn> on <{td}> and <{th}> elements
  : <dfn element-attr for="td,th,tablecells"><code>charoff</code></dfn> on <{td}> and <{th}> elements
  : <dfn element-attr for="td,th,tablecells"><code>height</code></dfn> on <{td}> and <{th}> elements
  : <dfn element-attr for="td,th,tablecells"><code>nowrap</code></dfn> on <{td}> and <{th}> elements
  : <dfn element-attr for="td,th,tablecells"><code>valign</code></dfn> on <{td}> and <{th}> elements
  : <dfn element-attr for="td,th,tablecells"><code>width</code></dfn> on <{td}> and <{th}> elements
  : <dfn element-attr for="tr"><code>align</code></dfn> on <{tr}> elements
  : <dfn element-attr for="tr"><code>bgcolor</code></dfn> on <{tr}> elements
  : <dfn element-attr for="tr"><code>char</code></dfn> on <{tr}> elements
  : <dfn element-attr for="tr"><code>charoff</code></dfn> on <{tr}> elements
  : <dfn element-attr for="tr"><code>height</code></dfn> on <{tr}> elements
  : <dfn element-attr for="tr"><code>valign</code></dfn> on <{tr}> elements
  : <dfn element-attr for="ul"><code>compact</code></dfn> on <{ul}> elements
  : <dfn element-attr for="ul"><code>type</code></dfn> on <{ul}> elements
  : <dfn element-attr for="body,table,thead,tbody,tfoot,tr,td,th,common"><code>background</code></dfn> on <{body}>, <{table}>, <{thead}>,
      <{tbody}>, <{tfoot}>, <{tr}>, <{td}>, and <{th}> elements
  :: Use CSS instead.

  <hr />

  The <{table/border}> attribute on the <{table}> element can be used to provide basic  fallback
  styling for the purpose of making tables legible in browsing environments where CSS support is
  limited or absent, such as text-based browsers, WYSIWYG editors, and in situations where CSS
  support is disabled or the style sheet is lost. Only the empty string and the value
  "<code>1</code>" may be used as <{table/border}> values for this purpose. Other values are
  considered obsolete. To regulate the thickness of such borders, authors should instead use CSS.

<h3 id="requirements-for-implementations">Requirements for implementations</h3>

  <h4 id="the-applet-element">The <dfn element><code>applet</code></dfn> element</h4>

  <p class="critical">
    This feature is in the process of being removed from the Web platform. (This is a long process
    that takes many years.) Using the <{applet}> element at this time is highly
    discouraged.
  </p>

  The <{applet}> element is a Java-specific variant of the <{embed}> element.
  The <{applet}> element is now obsoleted so that all extension frameworks (Java, .NET,
  Flash, etc) are handled in a consistent manner.

  When the element matches any of the following conditions, it <a>represents</a> its contents:

  * The element is still in the <a>stack of open elements</a> of an <a>HTML parser</a> or
      <a>XML parser</a>.
  * The element is not <a>in a <code>Document</code></a>.
  * The element's <a>node document</a> is not <a>fully active</a>.
  * The element's <a>node document</a>'s <a>active sandboxing flag set</a> has its <a>sandboxed
    plugins browsing context flag</a> set.
  * The element has an ancestor <a>media element</a>.
  * The element has an ancestor <{object}> element that is <em>not</em> showing its
    <a>fallback content</a>.
  * No Java Language runtime <a>plugin</a> is available.
  * A Java runtime <a>plugin</a> is available but it is disabled.

  Otherwise, the user agent should instantiate a Java Language runtime <a>plugin</a>, and should
  pass the names and values of all the attributes on the element, in the order they were added to
  the element, with the attributes added by the parser being ordered in source order, and then a
  parameter named "PARAM" whose value is null, and then all the names and values of
  <a>parameters</a> given by <{param}> elements that are children of the
  <{applet}> element, in <a>tree order</a>, to the <a>plugin</a> used. If the <a>plugin</a>
  supports a scriptable interface, the <code>HTMLAppletElement</code> object representing the
  element should expose that interface. The <{applet}> element <a>represents</a> the
  <a>plugin</a>.

  <p class="note">
    The <{applet}> element is unaffected by the CSS 'display' property. The
    Java Language runtime is instantiated even if the element is hidden with a 'display:none' CSS
    style.
  </p>

  The <{applet}> element must implement the <code>HTMLAppletElement</code> interface.

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLAppletElement">
    interface HTMLAppletElement : HTMLElement {
      attribute DOMString align;
      attribute DOMString alt;
      attribute DOMString archive;
      attribute DOMString code;
      attribute DOMString codeBase;
      attribute DOMString height;
      attribute unsigned long hspace;
      attribute DOMString name;
      attribute DOMString _object; // the underscore is not part of the identifier
      attribute unsigned long vspace;
      attribute DOMString width;
    };
  </pre>

  The <dfn attribute for="HTMLAppletElement"><code>align</code></dfn>,
  <dfn attribute for="HTMLAppletElement"><code>alt</code></dfn>,
  <dfn attribute for="HTMLAppletElement"><code>archive</code></dfn>,
  <dfn attribute for="HTMLAppletElement"><code>code</code></dfn>,
  <dfn attribute for="HTMLAppletElement"><code>height</code></dfn>,
  <dfn attribute for="HTMLAppletElement"><code>hspace</code></dfn>,
  <dfn attribute for="HTMLAppletElement"><code>name</code></dfn>,
  <dfn attribute for="HTMLAppletElement"><code>object</code></dfn>,
  <dfn attribute for="HTMLAppletElement"><code>vspace</code></dfn>, and
  <dfn attribute for="HTMLAppletElement"><code>width</code></dfn> IDL attributes must <a>reflect</a>
  the respective content attributes of the same name. For the purposes of reflection, the <{applet}>
  element's {{HTMLAppletElement/_object|object}} content attribute is defined as containing a
  <a for="url">URL</a>.

  The <dfn attribute for="HTMLAppletElement"><code>codeBase</code></dfn> IDL attribute must
  <a>reflect</a> the <code>codebase</code> content attribute, which for the purposes of reflection
  is defined as containing a <a for="url">URL</a>.

<h4 id="the-marquee-element">The <dfn element><code>marquee</code></dfn> element</h4>

  The <{marquee}> element is a presentational element that animates content. CSS transitions and
  animations are a more appropriate mechanism. [[CSS3-ANIMATIONS]] [[CSS3-TRANSITIONS]]

  The <a>task source</a> for tasks mentioned in this section is the <a>DOM manipulation task source</a>.

  The <{marquee}> element must implement the <code>HTMLMarqueeElement</code> interface.

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLMarqueeElement">
    interface HTMLMarqueeElement : HTMLElement {
      attribute DOMString behavior;
      attribute DOMString bgColor;
      attribute DOMString direction;
      attribute DOMString height;
      attribute unsigned long hspace;
      attribute long loop;
      attribute unsigned long scrollAmount;
      attribute unsigned long scrollDelay;
      attribute boolean trueSpeed;
      attribute unsigned long vspace;
      attribute DOMString width;

      attribute EventHandler onbounce;
      attribute EventHandler onfinish;
      attribute EventHandler onstart;

      void start();
      void stop();
    };
  </pre>

  A <{marquee}> element can be <dfn>turned on</dfn> or <dfn>turned off</dfn>. When it is created, it
  is <a>turned on</a>.

  When the <dfn method for="HTMLMarqueeElement"><code>start()</code></dfn> method is called, the
  <{marquee}> element must be <a>turned on</a>.

  When the <dfn method for="HTMLMarqueeElement"><code>stop()</code></dfn> method is called, the
  <{marquee}> element must be <a>turned off</a>.

  When a <{marquee}> element is created, the user agent must <a>queue a task</a> to
  <a>fire a simple event</a> named <code>start</code> at the element.

  <hr />

  The <dfn element-attr for="marquee"><code>behavior</code></dfn> content attribute on <{marquee}>
  elements is an <a>enumerated attribute</a> with the following keywords (all non-conforming):

  <table>
    <thead>
      <tr>
        <th>Keyword</th>
        <th>State</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><dfn attr-value for="marquee/behavior"><code>scroll</code></dfn></td>
        <td><dfn state for="marquee/behavior">scroll</dfn></td>
      </tr>
      <tr>
        <td><dfn attr-value for="marquee/behavior"><code>slide</code></dfn></td>
        <td><dfn state for="marquee/behavior">slide</dfn></td>
      </tr>
      <tr>
        <td><dfn attr-value for="marquee/behavior"><code>alternate</code></dfn></td>
        <td><dfn state for="marquee/behavior">alternate</dfn></td>
      </tr>
    </tbody>
  </table>

  The <i>missing value default</i> is the <a state for="marquee/behavior">scroll</a> state.

  <hr />

  The <dfn element-attr for="marquee"><code>direction</code></dfn> content attribute on <{marquee}>
  elements is an <a>enumerated attribute</a> with the following keywords (all non-conforming):

  <table>
    <thead>
      <tr>
        <th>Keyword</th>
        <th>State</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><a attr-value for="marquee/direction"><code>left</code></a></td>
        <td><dfn state for="marquee">left</dfn></td>
      </tr>
      <tr>
        <td><a attr-value for="marquee/direction"><code>right</code></a></td>
        <td><dfn state for="marquee">right</dfn></td>
      </tr>
      <tr>
        <td><a attr-value for="marquee/direction"><code>up</code></a></td>
        <td><dfn state for="marquee">up</dfn></td>
      </tr>
      <tr>
        <td><a attr-value for="marquee/direction"><code>down</code></a></td>
        <td><dfn state for="marquee">down</dfn></td>
      </tr>
    </tbody>
  </table>

  The <i>missing value default</i> is the <a state for="marquee">left</a> state.

  <hr />

  The <dfn element-attr for="marquee"><code>truespeed</code></dfn> content attribute on <{marquee}>
  elements is a <a>boolean attribute</a>.

  <hr />

  A <{marquee}> element has a <dfn>marquee scroll interval</dfn>, which is obtained as follows:

  1. If the element has a <dfn element-attr for="marquee"><code>scrolldelay</code></dfn> content
      attribute, and parsing its value using the <a>rules for parsing non-negative integers</a> does
      not return an error, then let <var>delay</var> be the parsed value. Otherwise, let
      <var>delay</var> be 85.
  2. If the element does not have a <{marquee/truespeed}> attribute, and the <var>delay</var> value
      is less than 60, then let <var>delay</var> be 60 instead.
  3. The <a>marquee scroll interval</a> is <var>delay</var>, interpreted in milliseconds.

  <hr />

  A <{marquee}> element has a <dfn for="marquee">marquee scroll distance</dfn>, which, if the
  element has a <dfn element-attr for="marquee"><code>scrollamount</code></dfn> content attribute,
  and parsing its value using the <a>rules for parsing non-negative integers</a> does not return an
  error, is the parsed value interpreted in CSS pixels, and otherwise is 6 CSS pixels.

  <hr />

  A <{marquee}> element has a <dfn>marquee loop count</dfn>, which, if the element has a
  <dfn element-attr for="marquee"><code>loop</code></dfn> content attribute, and parsing its value
  using the <a>rules for parsing integers</a> does not return an error or a number less than 1, is
  the parsed value, and otherwise is -1.

  The <dfn attribute for="HTMLMarqueeElement"><code>loop</code></dfn> IDL attribute, on getting,
  must return the element's <a>marquee loop count</a>; and on setting, if the new value is different
  than the element's <a>marquee loop count</a> and either greater than zero or equal to -1, must set
  the element's <{marquee/loop}> content attribute (adding it if necessary) to the
  <a>valid integer</a> that represents the new value. (Other values are ignored.)

  A <{marquee}> element also has a <dfn>marquee current loop index</dfn>, which is zero when the
  element is created.

  The rendering layer will occasionally <dfn>increment the marquee current loop index</dfn>, which
  must cause the following steps to be run:

  1. If the <a>marquee loop count</a> is -1, then abort these steps.
  2. Increment the <a>marquee current loop index</a> by one.
  3. If the <a>marquee current loop index</a> is now equal to or greater than the element's
      <a>marquee loop count</a>, <a lt="turned off">turn off</a> the <{marquee}> element and
      <a>queue a task</a> to <a>fire a simple event</a> named <a event><code>finish</code></a> at
      the <{marquee}> element.

      Otherwise, if the {{HTMLMarqueeElement/behavior}} attribute is in the
      <a state for="marquee/behavior">alternate</a> state, then <a>queue a task</a> to <a>fire a
      simple event</a> named <a event><code>bounce</code></a> at the <{marquee}> element.

      Otherwise, <a>queue a task</a> to <a>fire a simple event</a> named
      <a event><code>start</code></a> at the <{marquee}> element.

  <hr />

  The following are the <a>event handlers</a> (and their corresponding
  <a>event handler event types</a>) that must be supported, as
  <a>event handler content attributes</a> and <a>event handler IDL attributes</a>, by
    <{marquee}> elements:

  <table>
    <thead>
      <tr>
        <th><a>Event handler</a></th>
        <th><a>Event handler event type</a></th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><dfn attribute for="HTMLMarqueeElement"><code>onbounce</code></dfn></td>
        <td><dfn event for="marquee"><code>bounce</code></dfn></td>
      </tr>
      <tr>
        <td><dfn attribute for="HTMLMarqueeElement"><code>onfinish</code></dfn></td>
        <td><dfn event for="marquee"><code>finish</code></dfn></td>
      </tr>
      <tr>
        <td><dfn attribute for="HTMLMarqueeElement"><code>onstart</code></dfn></td>
        <td><dfn event for="marquee"><code>start</code></dfn></td>
      </tr>
    </tbody>
  </table>

  <hr />

  The <dfn attribute for="HTMLMarqueeElement"><code>behavior</code></dfn>,
  <dfn attribute for="HTMLMarqueeElement"><code>direction</code></dfn>,
  <dfn attribute for="HTMLMarqueeElement"><code>height</code></dfn>,
  <dfn attribute for="HTMLMarqueeElement"><code>hspace</code></dfn>,
  <dfn attribute for="HTMLMarqueeElement"><code>vspace</code></dfn>,
  and <dfn attribute for="HTMLMarqueeElement"><code>width</code></dfn> IDL attributes must
  <a>reflect</a> the respective content attributes of the same name.

  The <dfn attribute for="HTMLMarqueeElement"><code>bgColor</code></dfn> IDL attribute must
  <a>reflect</a> the <code>bgcolor</code> content attribute.

  The <dfn attribute for="HTMLMarqueeElement"><code>scrollAmount</code></dfn> IDL attribute must
  <a>reflect</a> the <{marquee/scrollamount}> content attribute. The default value is 6.

  The <dfn attribute for="HTMLMarqueeElement"><code>scrollDelay</code></dfn> IDL attribute must
  <a>reflect</a> the <{marquee/scrolldelay}> content attribute. The default value is 85.

  The <dfn attribute for="HTMLMarqueeElement"><code>trueSpeed</code></dfn> IDL attribute must
  <a>reflect</a> the <{marquee/truespeed}> content attribute.

<h4 id="frames">Frames</h4>

  The <dfn element><code>frameset</code></dfn> element acts as the <{body}> element in documents
  that use frames.

  The <{frameset}> element must implement the <code>HTMLFrameSetElement</code> interface.

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLFrameSetElement">
    interface HTMLFrameSetElement : HTMLElement {
      attribute DOMString cols;
      attribute DOMString rows;
    };
    HTMLFrameSetElement implements WindowEventHandlers;
  </pre>

  The <dfn element-attr for="frameset"><code>cols</code></dfn> and
  <dfn element-attr for="frameset"><code>rows</code></dfn> IDL attributes of the <{frameset}>
  element must <a>reflect</a> the respective content attributes of the same name.

  The <{frameset}> element exposes as <a>event handler content attributes</a> a number of the
  <a>event handlers</a> of the <code>Window</code> object. It also mirrors their
  <a>event handler IDL attributes</a>.

  The <a attribute for="GlobalEventHandlers"><code>onblur</code></a>,
  <a attribute for="GlobalEventHandlers"><code>onerror</code></a>,
  <a attribute for="GlobalEventHandlers"><code>onfocus</code></a>,
  <a attribute for="GlobalEventHandlers"><code>onload</code></a>,
  <a attribute for="GlobalEventHandlers"><code>onresize</code></a>, and
  <a attribute for="GlobalEventHandlers"><code>onscroll</code></a> <a>event handlers</a> of the
  {{Window}} object, exposed on the <{frameset}> element, replace the generic <a>event handlers</a>
  with the same names normally supported by <a>html elements</a>.

  <hr />

  The <dfn element><code>frame</code></dfn> element defines a <a>nested browsing context</a> similar
  to the <{iframe}> element, but rendered within a <{frameset}> element.

  A <{frame}> element is said to be an <dfn>active <{frame}> element</dfn> when it is
  <a>in a <code>Document</code></a>.

  When a <{frame}> element is created as an <a>active <code>frame</code> element</a>, or becomes an
  <a>active <code>frame</code> element</a> after not having been one, the user agent must create a
  <a>nested browsing context</a>, and then <a>process the <code>frame</code> attributes</a> for the
  first time.

  When a <{frame}> element stops being an <a>active <code>frame</code> element</a>, the
  user agent must <a>discard</a> the <a>nested browsing context</a>.

  Whenever a <{frame}> element with a <a>nested browsing context</a> has its <{frame/src}> attribute
  set, changed, or removed, the user agent must <a>process the <code>frame</code> attributes</a>.

  When the user agent is to <dfn>process the <{frame}> attributes</dfn>, it must run the
  first appropriate steps from the following list:

  <dl class="switch">
    <dt>
      If the element has no <dfn element-attr for="frame"><code>src</code></dfn> attribute
      specified, and the user agent is processing the <{frame}>'s attributes for the first time
    </dt>
    <dd>
      <a>Queue a task</a> to <a>fire a simple event</a> named
      <a event for="global"><code>load</code></a> at the <{frame}> element.
    </dd>

    <dt>Otherwise</dt>
    <dd>
      1. If the value of the <{frame/src}> attribute is the empty string, let <var>url</var> be
          the string "<code>about:blank</code>".

          Otherwise, <a>resolve</a> the value of the <{frame/src}> attribute, relative to the
          <{frame}> element.

          If that is not successful, then let <var>url</var> be the string
          "<code>about:blank</code>". Otherwise, let <var>url</var> be the resulting
          <a>absolute URL</a>.
      2. <a>Navigate</a> the element's <a>child browsing context</a>to <var>url</var>.

    </dd>
  </dl>

  Furthermore, if the <a>active document</a> of the element's <a>child browsing context</a> before
  such a <a>navigation</a> was not <a>completely loaded</a> at the time of the new
  <a>navigation</a>, then the <a>navigation</a> must be completed  with <a>replacement enabled</a>.

  Similarly, if the <a>child browsing context</a>'s <a>session history</a> contained only one
  {{Document}} when the <a>process the <code>frame</code> attributes</a> algorithm was
  invoked, and that was the <code>about:blank</code> {{Document}} created when the <a>child
  browsing context</a> was created, then any <a>navigation</a> required of the user agent in that
  algorithm must be completed with <a>replacement enabled</a>.

  When a {{Document}} in a <{frame}> is marked as <a>completely loaded</a>, the user agent
  must <a>queue a task</a> to <a>fire a simple event</a> named
  <a event for="global"><code>load</code></a> at the <{frame}> element.

  The <a>task source</a> for the <a>tasks</a> above is the <a>DOM manipulation task source</a>.

  When a <{frame}> element's <a>nested browsing context</a>'s <a>active document</a> is not
  <a>ready for post-load tasks</a>, and when anything is <a>delaying the load event</a> of the
  <{frame}> element's <a>browsing context</a>'s <a>active document</a>, and when the <{frame}>
  element's <a>browsing context</a> is in the <a>delaying <code>load</code> events mode</a>, the
  <{frame}> must <a>delay the load event</a> of its document.

  When the browsing context is created, if a <dfn element-attr for="frame"><code>name</code></dfn>
  content attribute is present, the <a>browsing context name</a> must be set to the value of this
  attribute; otherwise, the <a>browsing context name</a> must be set to the empty string.

  Whenever the <{frame/name}> attribute is set, the nested <a>browsing context</a>'s
  <a lt="browsing context name">name</a> must be changed to the new value. If the attribute is
  removed, the <a>browsing context name</a> must be set to the empty string.

  The <{frame}> element must implement the {{HTMLFrameElement}} interface.

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLFrameElement">
    interface HTMLFrameElement : HTMLElement {
      attribute DOMString name;
      attribute DOMString scrolling;
      attribute DOMString src;
      attribute DOMString frameBorder;
      attribute DOMString longDesc;
      attribute boolean noResize;
      readonly attribute Document? contentDocument;
      readonly attribute WindowProxy? contentWindow;

      [TreatNullAs=EmptyString] attribute DOMString marginHeight;
      [TreatNullAs=EmptyString] attribute DOMString marginWidth;
    };
  </pre>

  The <dfn attribute for="HTMLFrameElement"><code>name</code></dfn>,
  <dfn attribute for="HTMLFrameElement"><code>scrolling</code></dfn>, and
  <dfn attribute for="HTMLFrameElement"><code>src</code></dfn> IDL attributes of the <{frame}>
  element must <a>reflect</a> the respective content attributes of the same name. For the purposes
  of reflection, the <{frame}> element's <{frame/src}> content attribute is defined as containing a
  <a for="url">URL</a>.

  The <dfn attribute for="HTMLFrameElement"><code>frameBorder</code></dfn> IDL attribute of the
  <{frame}> element must <a>reflect</a> the element's <code>frameborder</code> content attribute.

  The <dfn attribute for="HTMLFrameElement"><code>longDesc</code></dfn> IDL attribute of the
  <{frame}> element must <a>reflect</a> the element's <{frame/longdesc}> content attribute, which
  for the purposes of reflection is defined as containing a <a for="url">URL</a>.

  The <dfn attribute for="HTMLFrameElement"><code>noResize</code></dfn> IDL attribute of the
  <{frame}> element must <a>reflect</a> the element's <code>noresize</code> content attribute.

  The <dfn attribute for="HTMLFrameElement"><code>contentDocument</code></dfn> IDL attribute of the
  <{frame}> element must return the {{Document}} object of the <a>active document</a> of the
  <{frame}> element's <a>nested browsing context</a>, if any and if its
  <a for="concept">origin</a> is the <a>same origin-domain</a> as the <a for="concept">origin</a>
  specified by the <a>incumbent settings object</a>, or null otherwise.

  The <dfn attribute for="HTMLFrameElement"><code>contentWindow</code></dfn> IDL attribute must
  return the <code>WindowProxy</code> object of the <{frame}> element's
  <a>nested browsing context</a>.

  The <dfn attribute for="HTMLFrameElement"><code>marginHeight</code></dfn> IDL attribute of the
  <{frame}> element must <a>reflect</a> the element's <code>marginheight</code> content attribute.

  The <dfn attribute for="HTMLFrameElement"><code>marginWidth</code></dfn> IDL attribute of the
  <{frame}> element must <a>reflect</a> the element's <code>marginwidth</code> content attribute.


<h4 id="application-caches">Application caches</h4>

  An <dfn lt="application cache manifest|application cache">application cache</dfn> is a set of cached resources consisting of:

  <ul>

    <li>

    One or more resources (including their out-of-band metadata, such as HTTP headers, if any),
    identified by URLs, each falling into one (or more) of the following categories:

    <dl>

      <dt><dfn lt="master|master entries">Master entries</dfn>

      <dd><p class="note">
  These are documents that were added to the cache because a <a>browsing
      context</a> was <a>navigated</a> to that document and the document
      indicated that this was its cache, using the <code>manifest</code>
      attribute.
  </p>

      <dt><dfn lt="the manifest|manifest">The manifest</dfn>

      <dd><p class="note">
  This is the resource corresponding to the URL that was given in a master
      entry's <{html}> element's <code>manifest</code> attribute.
      The manifest is fetched and processed during the <a>application cache download
      process</a>. All the <a>master entries</a> have the
      <a>same origin</a> as the manifest.
  </p>

      <dt><dfn lt="an explicit entry|explicit entries">Explicit entries</dfn>

      <dd><p class="note">
  These are the resources that were listed in the cache's <a>manifest</a> in an <a>explicit section</a>.
  </p>

      <dt><dfn lt="a fallback entry|fallback entries">Fallback entries</dfn>

      <dd><p class="note">
  These are the resources that were listed in the cache's <a>manifest</a> in a <a>fallback section</a>.
  </p>

    </dl>

    <a>Explicit entries</a> and <a>Fallback entries</a> can be marked as <dfn>foreign</dfn>, which means that they have a <code>manifest</code> attribute but that it doesn't point at this cache's
    <a>manifest</a>.

    <p class="note">
  A URL in the list can be flagged with multiple different types, and thus an
    entry can end up being categorized as multiple entries. For example, an entry can be a manifest
    entry and an explicit entry at the same time, if the manifest is listed within the manifest.
  </p>

    </li>

    <li>

    Zero or more <dfn>fallback namespaces</dfn>, each of
    which is mapped to a <a>fallback entry</a>.

    <p class="note">
  These are URLs used as <a>prefix
    match patterns</a> for resources that are to be fetched from the network if possible, or to
    be replaced by the corresponding <a>fallback entry</a>
    if not. Each namespace URL has the <a>same origin</a> as <a>the manifest</a>.
  </p>

    </li>

    <li>

    Zero or more URLs that form the <dfn>online
    safelist namespaces</dfn>.

    <p class="note">
  These are used as prefix match patterns, and declare URLs for which the user
    agent will ignore the application cache, instead fetching them normally (i.e., from the network
    or local HTTP cache as appropriate).
  </p>

    </li>

    <li>

    An <dfn>online safelist wildcard
    flag</dfn>, which is either <i>open</i> or <i>blocking</i>.

    <p class="note">
  The <i>open</i> state indicates that any URL not listed as cached is to
    be implicitly treated as being in the <a>online
    safelist namespaces</a>; the <i>blocking</i> state indicates that URLs not listed
    explicitly in the manifest are to be treated as unavailable.
  </p>

    </li>

    <li>

    A <dfn lt="application cache mode|cache mode flag">cache mode flag</dfn>, which is either in the <dfn><i>fast</i></dfn> state or the <dfn><i>prefer-online</i></dfn> state.

    </li>

  </ul>

  Each <a>application cache</a> has a <dfn>completeness flag</dfn>, which is either <i>complete</i> or
  <i>incomplete</i>.

  <hr />

  An <dfn>application cache group</dfn> is a group of <a>application
  caches</a>, identified by the <a>absolute URL</a> of a resource <a>manifest</a> which is used to populate the caches in the
  group.

  An <a>application cache</a> is <dfn lt="newest|newer">newer</dfn> than
  another if it was created after the other (in other words, <a>application caches</a> in an <a>application cache group</a> have a chronological
  order).

  Only the newest <a>application cache</a> in an <a>application cache group</a> can
  have its <a>completeness flag</a> set to
  <i>incomplete</i>; the others are always all <i>complete</i>.

  Each <a>application cache group</a> has an <dfn>update status</dfn>, which is one of the following: <i>idle</i>, <i>checking</i>, <i>downloading</i>.

  A <dfn>relevant application cache</dfn> is an <a>application cache</a> that is the <a>newest</a> in its <a>group</a> to be <i>complete</i>.

  Each <a>application cache group</a> has a <dfn>list of pending master entries</dfn>. Each entry in this
  list consists of a resource and a corresponding {{Document}} object. It is used during
  the <a>application cache download process</a> to ensure that new master entries are cached
  even if the <a>application cache download process</a> was already running for their
  <a>application cache group</a> when they were loaded.

  An <a>application cache group</a> can be marked as <dfn for="ApplicationCache">obsolete</dfn>, meaning that it must be ignored when looking at
  what <a>application cache groups</a> exist.

  <hr />

  A <dfn>cache host</dfn> is a {{Document}} or a <code>SharedWorkerGlobalScope</code>
  object. A <a>cache host</a> can be associated with an <a>application cache</a>.

  [[!WEBWORKERS]]

  A {{Document}} initially is not associated with an <a>application cache</a>, but
  can become associated with one early during the page load process, when steps <a>in the parser</a> and in the <a>navigation</a>
  sections cause <a>cache selection</a> to occur.

  A <code>SharedWorkerGlobalScope</code> can be associated with an <a>application cache</a>
  when it is created.

  [[!WEBWORKERS]]

  Each <a>cache host</a> has an associated <code>ApplicationCache</code> object.

  <hr />

  Multiple <a>application caches</a> in different <a>application cache groups</a> can contain the same resource,
  e.g., if the manifests all reference that resource. If the user agent is to <dfn lt="most appropriate application cache|select an application cache">select an application cache</dfn> from a list of <a>relevant application caches</a> that contain a resource, the
  user agent must use the application cache that the user most likely wants to see the resource
  from, taking into account the following:

  <ul>

    <li>which application cache was most recently updated,

    <li>which application cache was being used to display the resource from which the user decided to
    look at the new resource, and

    <li>which application cache the user prefers.

  </ul>

  <hr />

  A URL <dfn lt="matches the fallback namespace|matches a fallback namespace|prefix match patterns">matches a fallback namespace</dfn> if
  there exists a <a>relevant application cache</a> whose <a>manifest</a>'s URL has the <a>same origin</a> as the
  URL in question, and that has a <a>fallback
  namespace</a> that is a <a>prefix match</a> for the URL being examined. If multiple
  fallback namespaces match the same URL, the longest one is the one that matches. A URL looking for
  a fallback namespace can match more than one application cache at a time, but only matches one
  namespace in each cache.


<h5 id="parsing-cache-manifests">Parsing cache manifests</h5>

  When a user agent is to <dfn lt="rules for parsing manifests|parse a manifest">parse a manifest</dfn>, it means that the user agent must run the
  following steps:

  <ol>

    <li>

    <a>UTF-8 decode</a> the byte stream corresponding with the manifest to be parsed.

    <p class="note">
  The <a>UTF-8 decode</a> algorithm strips a leading BOM, if any.
  </p>

    </li>

    <li>Let <var>base URL</var> be the <a>absolute URL</a> representing the
    manifest.</li>

    <li>Apply the <a>URL parser</a> to <var>base URL</var>, and let <var>manifest path</var>
    be the <a>path</a> component thus obtained.</li>

    <li>Remove all the characters in <var>manifest path</var> after the last U+002F SOLIDUS
    character (/), if any. (The first character and the last character in <var>manifest path</var>
    after this step will both be slashes, the URL path separator character.)</li>

    <li>Apply the <a>URL parser</a> steps to the <var>base URL</var>, so that the
    components from its <a>URL record</a> can be used by the subsequent steps of this
    algorithm.</li>

    <li>Let <var>explicit URLs</var> be an initially empty list of <a>absolute URLs</a> for <a>explicit
    entries</a>.</li>

    <li>Let <var>fallback URLs</var> be an initially empty mapping of <a>fallback namespaces</a> to <a>absolute URLs</a> for <a>fallback
    entries</a>.</li>

    <li>Let <var>online safelist namespaces</var> be an initially empty list of <a>absolute URLs</a> for an <a>online safelist</a>.</li>

    <li>Let <var>online safelist wildcard flag</var> be <i>blocking</i>. </li>

    <li>Let <var>cache mode flag</var> be <i>fast</i>. </li>

    <li>Let <var>input</var> be the decoded text of the manifest's byte stream.</li>

    <li>Let <var>position</var> be a pointer into <var>input</var>, initially
    pointing at the first character.</li>

    <li>If the characters starting from <var>position</var> are "CACHE", followed by a
    U+0020 SPACE character, followed by "MANIFEST", then advance <var>position</var> to the
    next character after those. Otherwise, this isn't a cache manifest; abort this algorithm with a
    failure while checking for the magic signature.</li>

    <li>If the character at <var>position</var> is neither a U+0020 SPACE character, a
    U+0009 CHARACTER TABULATION (tab) character, U+000A LINE FEED (LF) character, nor a U+000D
    CARRIAGE RETURN (CR) character, then this isn't a cache manifest; abort this algorithm with a
    failure while checking for the magic signature.</li>

    <li>This is a cache manifest. The algorithm cannot fail beyond
    this point (though bogus lines can get ignored).</li>

    <li><a>Collect a sequence of characters</a> that are <em>not</em> U+000A LINE FEED (LF)
    or U+000D CARRIAGE RETURN (CR) characters, and ignore those characters. (Extra text on the first
    line, after the signature, is ignored.)</li>

    <li>Let <var>mode</var> be "explicit".</li>

    <li><var>Start of line</var>: If <var>position</var> is past the end of <var>input</var>, then jump to the last step. Otherwise, <a>collect a sequence of
    characters</a> that are U+000A LINE FEED (LF), U+000D CARRIAGE RETURN (CR), U+0020 SPACE, or
    U+0009 CHARACTER TABULATION (tab) characters.</li>

    <li>Now, <a>collect a sequence of characters</a> that are <em>not</em> U+000A LINE FEED
    (LF) or U+000D CARRIAGE RETURN (CR) characters, and let the result be <var>line</var>.</li>

    <li>Drop any trailing U+0020 SPACE and U+0009 CHARACTER TABULATION (tab) characters at the end
    of <var>line</var>.</li>

    <li>If <var>line</var> is the empty string, then jump back to the step labeled <i>start
    of line</i>.</li>

    <li>If the first character in <var>line</var> is a U+0023 NUMBER SIGN character (#),
    then jump back to the step labeled <var>Start of line</var>.</li>

    <li>If <var>line</var> equals "CACHE:" (the word "CACHE" followed by a U+003A COLON
    character (:)), then set <var>mode</var> to "explicit" and jump back to the step labeled
    <var>Start of line</var>.</li>

    <li>If <var>line</var> equals "FALLBACK:" (the word "FALLBACK" followed by a U+003A
    COLON character (:)), then set <var>mode</var> to "fallback" and jump back to the step
    labeled <var>Start of line</var>.</li>

    <li>If <var>line</var> equals "NETWORK:" (the word "NETWORK" followed by a U+003A
    COLON character (:)), then set <var>mode</var> to "online safelist" and jump back to
    the step labeled <var>Start of line</var>.</li>

    <li>If <var>line</var> equals "SETTINGS:" (the word "SETTINGS" followed by a U+003A
    COLON character (:)), then set <var>mode</var> to "settings" and jump back to the step
    labeled <var>Start of line</var>.</li>

    <li>If <var>line</var> ends with a U+003A COLON character (:), then set <var>mode</var> to "unknown" and jump back to the step labeled <var>Start of line</var>.</li>

    <li>This is either a data line or it is syntactically incorrect.</li>

    <li>Let <var>position</var> be a pointer into <var>line</var>, initially
    pointing at the start of the string.</li>

    <li>Let <var>tokens</var> be a list of strings, initially empty.</li>

    <li>

    While <var>position</var> doesn't point past the end of <var>line</var>:

    <ol>

      <li>Let <var>current token</var> be an empty string.</li>

      <li>While <var>position</var> doesn't point past the end of <var>line</var> and the character at <var>position</var> is neither a U+0020 SPACE
      nor a U+0009 CHARACTER TABULATION (tab) character, add the character at <var>position</var> to <var>current token</var> and advance <var>position</var> to the next character in <var>input</var>.</li>

      <li>Add <var>current token</var> to the <var>tokens</var> list.</li>

      <li>While <var>position</var> doesn't point past the end of <var>line</var> and the character at <var>position</var> is either a U+0020 SPACE
      or a U+0009 CHARACTER TABULATION (tab) character, advance <var>position</var> to the
      next character in <var>input</var>.</li>

    </ol>

    </li>

    <li>

    Process <var>tokens</var> as follows:

    <dl class="switch">

      <dt>If <var>mode</var> is "<dfn lt="explicit section">explicit</dfn>"</dt>

      <dd>

      Let <var>urlRecord</var> be the result of <a lt="url parser">parsing</a> the first item in
      <var>tokens</var>, with <var>base URL</var>; ignore the rest.

      If <var>urlRecord</var> is failure, then jump back to the step labeled
      <var>Start of line</var>.

      If <var>urlRecord</var> has a different <a for="url">scheme</a> component than
      <var>base URL</var> (the manifest's URL), then jump back to the step labeled
      <var>Start of line</var>.

      Let <var>new URL</var> be the result of applying the <a>URL serializer</a> algorithm to
      <var>urlRecord</var>, with the <var>exclude fragment flag</var> set.

      Add <var>new URL</var> to the <var>explicit URLs</var>.

      </dd>

      <dt>If <var>mode</var> is "<dfn lt="fallback section">fallback</dfn>"</dt>

      <dd>Let <var>part one</var> be the first token in <var>tokens</var>, and let
      <var>part two</var> be the second token in <var>tokens</var>.

      Let <var>urlRecordOne</var> be the result of <a lt="url parser">parsing</a>
      <var>part one</var> with <var>base URL</var>.

      Let <var>urlRecordTwo</var> be the result of <a lt="url parser">parsing</a>
      <var>part two</var> with <var>base URL</var>.

      If either <var>urlRecordOne</var> or <var>urlRecordTwo</var> is failure, then jump back to the
      step labeled <var>Start of line</var>.

      If the <a for="url">origin</a> of either <var>urlRecordOne</var> or <var>urlRecordTwo</var> is
      not <a>same origin</a> with the manifest's URL <a for="url">origin</a>, then jump back to the
      step labeled <var>Start of line</var>.

      Let <var>part one path</var> be the <a>path</a> component of <var>urlRecordOne</var>.

      If <var>manifest path</var> is not a <a>prefix match</a> for <var>part one path</var>, then
      jump back to the step labeled <var>Start of line</var>.

      Let <var>part one</var> be the result of applying the <a>URL serializer</a> algorithm to
      <var>urlRecordOne</var>, with the <var>exclude fragment flag</var> set.

      Let <var>part two</var> be the result of applying the <a>URL serializer</a> algorithm to
      <var>urlRecordTwo</var>, with the <var>exclude fragment flag</var> set.

      If <var>part one</var> is already in the <var>fallback URLs</var> mapping as a
      <a>fallback namespace</a>, then jump back to the step labeled <var>Start of line</var>.

      Otherwise, add <var>part one</var> to the <var>fallback URLs</var> mapping as a
      <a>fallback namespace</a>, mapped to <var>part two</var> as the <a>fallback entry</a>.

      </dd>

      <dt>If <var>mode</var> is "<dfn>online safelist</dfn>"</dt>

      <dd>

      If the first item in <var>tokens</var> is a U+002A ASTERISK character (*), then
      set <var>online safelist wildcard flag</var> to <i>open</i> and jump back
      to the step labeled <var>Start of line</var>.

      Otherwise, let <var>urlRecord</var> be the result of <a>parsing</a> the first item in
      <var>tokens</var> with <var>base URL</var>.

      If <var>urlRecord</var> is failure, then jump back to the step labeled <var>Start of line</var>.

      If <var>urlRecord</var> has a different <a for="url">scheme</a> component than <var>base URL</var> (the
      manifest's URL), then jump back to the step labeled <var>Start of line</var>.

      Let <var>new URL</var> be the result of applying the <a>URL serializer</a> algorithm to
      <var>urlRecord</var>, with the <var>exclude fragment flag</var> set.

      Add <var>new URL</var> to the <var>online safelist namespaces</var>.

      </dd>

      <dt>If <var>mode</var> is "settings"</dt>

      <dd>

      If <var>tokens</var> contains a single token, and that token is a
      <a>case-sensitive</a> match for the string "<code>prefer-online</code>", then
      set <var>cache mode flag</var> to <i>prefer-online</i> and jump back to the
      step labeled <var>Start of line</var>.

      Otherwise, the line is an unsupported setting: do nothing; the line is ignored.

      </dd>

      <dt>If <var>mode</var> is "unknown"</dt>

      <dd>

      Do nothing. The line is ignored.

      </dd>

    </dl>

    </li>

    <li>Jump back to the step labeled <var>Start of line</var>. (That step jumps to the next, and last,
    step when the end of the file is reached.)</li>

    <li>Return the <var>explicit URLs</var> list, the <var>fallback URLs</var>
    mapping, the <var>online safelist namespaces</var>, the <var>online safelist
    wildcard flag</var>, and the <var>cache mode flag</var>.</li>

  </ol>

<h5 id="downloading-or-updating-an-application-cache">Downloading or updating an application cache</h5>

  When the user agent is required (by other parts of this specification) to start the
  <dfn>application cache download process</dfn> for an <a>absolute URL</a> purported to
  identify a <a>manifest</a>, or for an <a>application
  cache group</a>, potentially given a particular <a>cache host</a>, and potentially given
  a <a>master</a> resource, the user agent must run the steps
  below. These steps are always run <a>in parallel</a> with the <a>event loop</a>
  <a>tasks</a>.

  Some of these steps have requirements that only apply if the user agent <dfn>shows caching
  progress</dfn>. Support for this is optional. Certain events
  fired during the <a>application cache download process</a> allow the script to override the
  display of such an interface. (Such events are delayed until after the <code>load</code> event has fired.)

  User agents are encouraged not to show
  prominent update progress notifications for applications that cancel the relevant events.

  The <a>application cache download process</a> steps are as follows:

  <ol>

    <li>Optionally, wait until the permission to start the <a>application cache download
    process</a> has been obtained from the user and until the user agent is confident that the
    network is available. This could include doing nothing until the user explicitly opts-in to
    caching the site, or could involve prompting the user for permission. The algorithm might never
    get past this point. (This step is particularly intended to be used by user agents running on
    severely space-constrained devices or in highly privacy-sensitive environments).</li>

    <li>

    Atomically, so as to avoid race conditions, perform the following substeps:

    <ol>

      <li>

      Pick the appropriate substeps:

      <dl class="switch">

        <dt>If these steps were invoked with an <a>absolute URL</a> purported to identify a
        <a>manifest</a></dt>

        <dd>

        Let <var>manifest URL</var> be that <a>absolute URL</a>.

        If there is no <a>application cache group</a> identified by <var>manifest
        URL</var>, then create a new <a>application cache group</a> identified by <var>manifest URL</var>. Initially, it has no <a>application caches</a>. One will be created later in this algorithm.

        </dd>

        <dt>If these steps were invoked with an <a>application cache group</a></dt>

        <dd>

        Let <var>manifest URL</var> be the <a>absolute URL</a> of the <a>manifest</a> used to identify the <a>application
        cache group</a> to be updated.

        If that <a>application cache group</a> is <a>obsolete</a>, then abort this instance of the
        <a>application cache download process</a>. This can happen if another instance of this
        algorithm found the manifest to be 404 or 410 while this algorithm was waiting in the first
        step above.

        </dd>

      </dl>

      </li>

      <li>Let <var>cache group</var> be the <a>application cache group</a>
      identified by <var>manifest URL</var>.</li>

      <li>If these steps were invoked with a <a>master</a>
      resource, then add the resource, along with the resource's {{Document}}, to <var>cache group</var>'s <a>list of pending
      master entries</a>.</li>

      <li>If these steps were invoked with a <a>cache host</a>, and the <a>status</a> of <var>cache group</var> is
      <i>checking</i> or <i>downloading</i>, then <a>queue a post-load task</a> to <a>fire a
      simple event</a> named <code>checking</code> that is
      cancelable at the <code>ApplicationCache</code> singleton of that <a>cache host</a>. The
      default action of this event must be, if the user agent <a>shows caching progress</a>,
      the display of some sort of user interface indicating to the user that the user agent is
      checking to see if it can download the application.</li>

      <li>If these steps were invoked with a <a>cache host</a>, and the <a>status</a> of <var>cache group</var> is
      <i>downloading</i>, then also <a>queue a post-load task</a> to <a>fire a simple
      event</a> named <code>downloading</code> that is
      cancelable at the <code>ApplicationCache</code> singleton of that <a>cache host</a>. The
      default action of this event must be, if the user agent <a>shows caching progress</a>,
      the display of some sort of user interface indicating to the user the application is being
      downloaded.</li>

      <li>If the <a>status</a> of the <var>cache
      group</var> is either <i>checking</i> or <i>downloading</i>, then abort this instance of the
      <a>application cache download process</a>, as an update is already in progress.</li>

      <li>Set the <a>status</a> of <var>cache
      group</var> to <i>checking</i>.

      <li>For each <a>cache host</a> associated with an <a>application cache</a> in
      <var>cache group</var>, <a>queue a post-load task</a> to <a>fire a simple
      event</a> that is cancelable named <code>checking</code> at
      the <code>ApplicationCache</code> singleton of the <a>cache host</a>. The default action
      of these events must be, if the user agent <a>shows caching progress</a>, the display of
      some sort of user interface indicating to the user that the user agent is checking for the
      availability of updates.</li>

    </ol>

    <p class="note">
  The remainder of the steps run <a>in parallel</a>.
  </p>

    If <var>cache group</var> already has an <a>application cache</a> in it, then
    this is an <dfn>upgrade attempt</dfn>. Otherwise, this is a
    <dfn>cache attempt</dfn>.

    </li>

    <li>If this is a <a>cache attempt</a>, then this
    algorithm was invoked with a <a>cache host</a>; <a>queue a post-load task</a> to
    <a>fire a simple event</a> named <code>checking</code> that
    is cancelable at the <code>ApplicationCache</code> singleton of that <a>cache host</a>. The
    default action of this event must be, if the user agent <a>shows caching progress</a>, the
    display of some sort of user interface indicating to the user that the user agent is checking for
    the availability of updates.</li>

    <li>Let <var>request</var> be a new <a>request</a> whose
    <a for="url">URL</a> is <var>manifest URL</var>, <a>client</a> is null, <a>destination</a> is "<code>subresource</code>",
    <a>omit-<code>Origin</code>-header flag</a> is set, <a>referrer</a> is "<code>no-referrer</code>",
    <a>synchronous flag</a> is set, <a>credentials
    mode</a> is "<code>include</code>", and whose <a>use-URL-credentials
    flag</a> is set.</li>

    <li>

    <i>Fetching the manifest</i>: Let <var>manifest</var> be the result of <a>fetching</a> <var>request</var>. HTTP caching semantics should be
    honored for this request.

    Parse <var>manifest</var>'s <a for="response">body</a> according to the
    <a>rules for parsing manifests</a>, obtaining a list of
    <a>explicit entries</a>, <a>fallback entries</a> and the <a>fallback namespaces</a> that map to them, entries for
    the <a>online safelist</a>, and values for the
    <a>online safelist wildcard flag</a>
    and the <a>cache mode flag</a>.

    <p class="note">
  The <a>MIME type</a> of the resource is ignored &mdash; it is assumed to
    be <code>text/cache-manifest</code>. In the future, if new manifest formats are supported, the
    different types will probably be distinguished on the basis of the file signatures (for the
    current format, that is the "<code>CACHE&nbsp;MANIFEST</code>" string at the top of the
    file).
  </p>

    </li>

    <li>

    If <i>fetching the manifest</i> fails due to a 404 or 410 response status, then run these
    substeps:

    <ol>

      <li>Mark <var>cache group</var> as <a>obsolete</a>. This <var>cache group</var> no
      longer exists for any purpose other than the processing of {{Document}} objects
      already associated with an <a>application cache</a> in the <var>cache
      group</var>.</li>

      <li>Let <var>task list</var> be an empty list of <a>tasks</a>.

      <li>For each <a>cache host</a> associated with an <a>application cache</a> in
      <var>cache group</var>, create a <a>task</a> to <a>fire
      a simple event</a> named <code>obsolete</code> that is
      cancelable at the <code>ApplicationCache</code> singleton of the <a>cache host</a>, and
      append it to <var>task list</var>. The default action of these events must be, if the
      user agent <a>shows caching progress</a>, the display of some sort of user interface
      indicating to the user that the application is no longer available for offline use.</li>

      <li>For each entry in <var>cache group</var>'s <a>list of pending master entries</a>, create a <a>task</a> to <a>fire a simple event</a> that is cancelable named
      <code>error</code> (not <code>obsolete</code>!) at the <code>ApplicationCache</code>
      singleton of the {{Document}} for this entry, if there still is one, and append it to
      <var>task list</var>. The default action of this event must be, if the user agent
      <a>shows caching progress</a>, the display of some sort of user interface indicating to
      the user that the user agent failed to save the application for offline use.</li>

      <li>If <var>cache group</var> has an <a>application cache</a> whose <a>completeness flag</a> is <i>incomplete</i>, then
      discard that <a>application cache</a>.

      <li>If appropriate, remove any user interface indicating that an update for this cache is in
      progress.</li>

      <li>Let the <a>status</a> of <var>cache
      group</var> be <i>idle</i>.</li>

      <li>For each <a>task</a> in <var>task list</var>, <a>queue that task as a post-load task</a>.</li>

      <li>Abort the <a>application cache download process</a>.</li>

    </ol>

    </li>

    <li>

    Otherwise, if <i>fetching the manifest</i> fails in some other way (e.g., the server returns
    another 4xx or 5xx response, or there is a DNS error, or the connection times out, or the user
    cancels the download, or the parser for manifests fails when checking the magic signature), or
    if the server returned a redirect, then run the <a>cache failure steps</a>. [[!HTTP]]

    </li>

    <li>

    If this is an <a>upgrade attempt</a> and the newly
    downloaded <var>manifest</var> is byte-for-byte identical to the manifest found in the
    <a>newest</a> <a>application cache</a> in <var>cache
    group</var>, or the response status is <code>304</code>, then run these substeps:

    <ol>

      <li>Let <var>cache</var> be the <a>newest</a>
      <a>application cache</a> in <var>cache group</var>.</li>

      <li>Let <var>task list</var> be an empty list of <a>tasks</a>.

      <li>

      For each entry in <var>cache group</var>'s <a>list of pending master entries</a>, wait for the
      resource for this entry to have either completely downloaded or failed.

      If the download failed (e.g., the server returns a 4xx or 5xx response, or there is a DNS
      error, the connection times out, or the user cancels the download), or if the resource is
      labeled with the "no-store" cache directive, then create a <a>task</a> to <a>fire a simple event</a> that is cancelable named
      <code>error</code> at the <code>ApplicationCache</code>
      singleton of the {{Document}} for this entry, if there still is one, and append it to
      <var>task list</var>. The default action of this event must be, if the user agent <a>shows
      caching progress</a>, the display of some sort of user interface indicating to the user
      that the user agent failed to save the application for offline use.

      Otherwise, associate the {{Document}} for this entry with <var>cache</var>; store the resource for this entry in <var>cache</var>, if it
      isn't already there, and categorize its entry as a <a>master entry</a>. If applying the <a>URL parser</a>
      algorithm to the resource's <a for="url">URL</a> results in a <a>resulting URL record</a> that has a
      non-null <a for="url">fragment</a> component, the <a for="url">URL</a>
      used for the entry in <var>cache</var> must instead be the <a>absolute URL</a>
      obtained from applying the <a>URL serializer</a>
      algorithm to the <a>resulting URL record</a> with the <var>exclude fragment flag</var> set
      (application caches never include fragment identifiers).

      </li>

      <li>For each <a>cache host</a> associated with an <a>application cache</a> in
      <var>cache group</var>, create a <a>task</a> to <a>fire
      a simple event</a> that is cancelable named <code>noupdate</code> at the <code>ApplicationCache</code> singleton
      of the <a>cache host</a>, and append it to <var>task list</var>. The default
      action of these events must be, if the user agent <a>shows caching progress</a>, the
      display of some sort of user interface indicating to the user that the application is up to
      date.</li>

      <li>Empty <var>cache group</var>'s <a>list of pending master entries</a>.</li>

      <li>If appropriate, remove any user interface indicating that an update for this cache is in
      progress.</li>

      <li>Let the <a>status</a> of <var>cache
      group</var> be <i>idle</i>.</li>

      <li>For each <a>task</a> in <var>task list</var>, <a>queue that task as a post-load task</a>.</li>

      <li>Abort the <a>application cache download process</a>.</li>

    </ol>

    </li>

    <li>Let <var>new cache</var> be a newly created <a>application cache</a> in
    <var>cache group</var>. Set its <a>completeness
    flag</a> to <i>incomplete</i>.</li>

    <li>For each entry in <var>cache group</var>'s <a>list of pending master entries</a>, associate the
    {{Document}} for this entry with <var>new cache</var>.</li>

    <li>Set the <a>status</a> of <var>cache
    group</var> to <i>downloading</i>.</li>

    <li>For each <a>cache host</a> associated with an <a>application cache</a> in <var>cache group</var>, <a>queue a post-load task</a> to <a>fire a simple
    event</a> that is cancelable named <code>downloading</code>
    at the <code>ApplicationCache</code> singleton of the <a>cache host</a>. The default action
    of these events must be, if the user agent <a>shows caching progress</a>, the display of
    some sort of user interface indicating to the user that a new version is being
    downloaded.</li>

    <li>Let <var>file list</var> be an empty list of URLs with flags.</li>

    <li>Add all the URLs in the list of <a>explicit
    entries</a> obtained by parsing <var>manifest</var> to <var>file list</var>,
    each flagged with "explicit entry".</li>

    <li>Add all the URLs in the list of <a>fallback
    entries</a> obtained by parsing <var>manifest</var> to <var>file list</var>,
    each flagged with "fallback entry".</li>

    <li>If this is an <a>upgrade attempt</a>, then add all
    the URLs of <a>master entries</a> in the <a>newest</a> <a>application cache</a> in <var>cache group</var> whose <a>completeness
    flag</a> is <i>complete</i> to <var>file list</var>, each flagged with "master
    entry".</li>

    <li>If any URL is in <var>file list</var> more than once, then merge the entries into
    one entry for that URL, that entry having all the flags that the original entries had.</li>

    <li>

    For each URL in <var>file list</var>, run the following steps. These steps may be
    run in parallel for two or more of the URLs at a time. If, while running these steps, the
    <code>ApplicationCache</code> object's <code>abort()</code> method
    <a>sends a signal</a> to this instance of the <a>application
    cache download process</a> algorithm, then run the <a>cache failure steps</a>
    instead.

    <ol>

      <li>

      If the resource URL being processed was flagged as neither an "explicit entry" nor or a
      "fallback entry", then the user agent may skip this URL.

      <p class="note">
  This is intended to allow user agents to expire resources not listed in the
      manifest from the cache. Generally, implementors are urged to use an approach that expires
      lesser-used resources first.
  </p>

      </li>

      <li>For each <a>cache host</a> associated with an <a>application cache</a> in
      <var>cache group</var>, <a>queue a progress post-load task</a> to <a>fire</a> a <a>trusted</a>
      event with the name <code>progress</code>, which does not
      bubble, which is cancelable, and which uses the <code>ProgressEvent</code> interface, at the
      <code>ApplicationCache</code> singleton of the <a>cache host</a>. The <code>lengthComputable</code> attribute must be set to
      true, the <code>total</code> attribute must be set to the
      number of files in <var>file list</var>, and the <code>loaded</code> attribute must be set to the number of files in
      <var>file list</var> that have been either downloaded or skipped so far. The default
      action of these events must be, if the user agent <a>shows caching progress</a>, the
      display of some sort of user interface indicating to the user that a file is being downloaded
      in preparation for updating the application. [[!XHR]]</li>

      <li>Let <var>request</var> be a new <a>request</a> whose
      <a for="url">URL</a> is URL, <a>client</a> is null, <a>destination</a> is
      "<code>subresource</code>", <a for="request">origin</a> is
      <var>manifest URL</var>'s <a for="concept">origin</a>, <a>referrer</a> is
      "<code>no-referrer</code>", <a>synchronous flag</a> is set, <a>credentials mode</a> is
      "<code>include</code>", <a>use-URL-credentials flag</a> is set, and <a>redirect mode</a> is
      "<code>manual</code>".</li>

      <li><a>Fetch</a> <var>request</var>. If this is an
      <a>upgrade attempt</a>, then use the <a>newest</a> <a>application cache</a> in <var>cache
      group</var> as an HTTP cache, and honor HTTP caching semantics (such as expiration, ETags, and
      so forth) with respect to that cache. User agents may also have other caches in place that are
      also honored.</li>

      <li>

      If the previous step fails (e.g., the server returns a 4xx or 5xx response, or there is a
      DNS error, or the connection times out, or the user cancels the download), or if the server
      returned a redirect, or if the resource is labeled with the "no-store" cache directive, then
      run the first appropriate step from the following list: [[!HTTP]]

      <dl class="switch">

        <dt>If the URL being processed was flagged as an "explicit entry" or a "fallback entry"</dt>

        <dd>

        If these steps are being run in parallel for any other URLs in <var>file
        list</var>, then abort these steps for those other URLs. Run the <a>cache failure
        steps</a>.

        <p class="note">
  Redirects are fatal because they are either indicative of a network problem
        (e.g., a captive portal); or would allow resources to be added to the cache under URLs that
        differ from any URL that the networking model will allow access to, leaving orphan entries;
        or would allow resources to be stored under URLs different than their true URLs. All of
        these situations are bad.
  </p>

        </dd>

        <dt>If the error was a 404 or 410 HTTP response</dt>

        <dt>If the resource was labeled with the "no-store" cache directive</dt>

        <dd>

        Skip this resource. It is dropped from the cache.

        </dd>

        <dt>Otherwise</dt>

        <dd>

        Copy the resource and its metadata from the <a>newest</a> <a>application cache</a> in <var>cache group</var> whose <a>completeness
        flag</a> is <i>complete</i>, and act as if that was the fetched resource, ignoring the
        resource obtained from the network.

        </dd>

      </dl>

      <p class="note">
  These rules make errors for resources listed in the manifest fatal, while
      making it possible for other resources to be removed from caches when they are removed from
      the server, without errors, and making non-manifest resources survive server-side errors.
  </p>

      <p class="note">
  Except for the "no-store" directive, HTTP caching rules that would cause a
      file to be expired or otherwise not cached are ignored for the purposes of the
      <a>application cache download process</a>.
  </p>

      </li>

      <li>

      Otherwise, the fetching succeeded. Store the resource in the <var>new
      cache</var>.

      If the user agent is not able to store the resource (e.g., because of quota restrictions),
      the user agent may prompt the user or try to resolve the problem in some other manner (e.g.,
      automatically pruning content in other caches). If the problem cannot be resolved, the user
      agent must run the <a>cache failure steps</a>.

      </li>

      <li>If the URL being processed was flagged as an "explicit entry" in <var>file
      list</var>, then categorize the entry as an <a>explicit
      entry</a>.</li>

      <li>If the URL being processed was flagged as a "fallback entry" in <var>file
      list</var>, then categorize the entry as a <a>fallback
      entry</a>.</li>

      <li>If the URL being processed was flagged as an "master entry" in <var>file
      list</var>, then categorize the entry as a <a>master
      entry</a>.</li>

      <li>As an optimization, if the resource is an HTML or XML file whose root element is an
      <{html}> element with a <code>manifest</code> attribute
      whose value doesn't match the manifest URL of the application cache being processed, then the
      user agent should mark the entry as being <a>foreign</a>.

    </ol>

    </li>

    <li>For each <a>cache host</a> associated with an <a>application cache</a> in <var>cache group</var>, <a>queue a progress post-load task</a> to <a>fire</a> a <a>trusted</a>
    event with the name <code>progress</code>, which does not bubble,
    which is cancelable, and which uses the <code>ProgressEvent</code> interface, at the
    <code>ApplicationCache</code> singleton of the <a>cache host</a>. The <code>lengthComputable</code> attribute must be set to
    true, the <code>total</code> and the <code>loaded</code> attributes must be set to the number of files in
    <var>file list</var>. The default action of these events must be, if the user agent
    <a>shows caching progress</a>, the display of some sort of user interface indicating to the
    user that all the files have been downloaded. [[!XHR]]</li>

    <li>Store the list of <a>fallback namespaces</a>,
    and the URLs of the <a>fallback entries</a> that they map
    to, in <var>new cache</var>.</li>

    <li>Store the URLs that form the new <a>online
    safelist</a> in <var>new cache</var>.</li>

    <li>Store the value of the new <a>online
    safelist wildcard flag</a> in <var>new cache</var>.</li>

    <li>Store the value of the new <a>cache mode flag</a> in
    <var>new cache</var>.</li>

    <li>

    For each entry in <var>cache group</var>'s <a>list of pending master entries</a>, wait for the
    resource for this entry to have either completely downloaded or failed.

    If the download failed (e.g., the server returns a 4xx or 5xx response, or there is a DNS
    error, the connection times out, or the user cancels the download), or if the resource is
    labeled with the "no-store" cache directive, then run these substeps:

    <ol>

      <li>Unassociate the {{Document}} for this entry from <var>new
      cache</var>.</li>

      <li><a>Queue a post-load task</a> to <a>fire a simple event</a> that is
      cancelable named <code>error</code> at the
      <code>ApplicationCache</code> singleton of the {{Document}} for this entry, if there
      still is one. The default action of this event must be, if the user agent <a>shows caching
      progress</a>, the display of some sort of user interface indicating to the user that the
      user agent failed to save the application for offline use.

      <li>

      If this is a <a>cache attempt</a> and this entry is
      the last entry in <var>cache group</var>'s <a>list of pending master entries</a>, then run these
      further substeps:

      <ol>

        <li>Discard <var>cache group</var> and its only <a>application cache</a>,
        <var>new cache</var>.

        <li>If appropriate, remove any user interface indicating that an update for this cache is
        in progress.</li>

        <li>Abort the <a>application cache download process</a>.</li>

      </ol>

      </li>

      <li>Otherwise, remove this entry from <var>cache group</var>'s <a>list of pending master entries</a>.</li>

    </ol>

    Otherwise, store the resource for this entry in <var>new cache</var>, if it isn't
    already there, and categorize its entry as a <a>master
    entry</a>.

    </li>

    <li>Let <var>request</var> be a new <a>request</a> whose
    <a for="url">URL</a> is <var>manifest URL</var>, <a>client</a> is null, <a>destination</a> is "<code>subresource</code>",
    <a>referrer</a> is "<code>no-referrer</code>",
    <a>synchronous flag</a> is set, <a>credentials
    mode</a> is "<code>include</code>", and whose <a>use-URL-credentials
    flag</a> is set.</li>

    <li>

    Let <var>second manifest</var> be the result of <a>fetching</a> <var>request</var>. HTTP caching semantics should again
    be honored for this request.

    </li>

    <li>

    If the previous step failed for any reason, or if the fetching attempt involved a redirect,
    or if <var>second manifest</var> and <var>manifest</var> are not byte-for-byte
    identical, then schedule a rerun of the entire algorithm with the same parameters after a short
    delay, and run the <a>cache failure steps</a>.

    </li>

    <li>

    Otherwise, store <var>manifest</var> in <var>new cache</var>, if it's not
    there already, and categorize its entry as <a>the
    manifest</a>.

    </li>

    <li>Set the <a>completeness flag</a> of <var>new cache</var> to <i>complete</i>.</li>

    <li>Let <var>task list</var> be an empty list of <a>tasks</a>.

    <li>

    If this is a <a>cache attempt</a>, then for each
    <a>cache host</a> associated with an <a>application cache</a> in <var>cache
    group</var>, create a <a>task</a> to <a>fire a simple event</a>
    that is cancelable named <code>cached</code> at the
    <code>ApplicationCache</code> singleton of the <a>cache host</a>, and append it to <var>task list</var>. The default action of these events must be, if the user agent
    <a>shows caching progress</a>, the display of some sort of user interface indicating to
    the user that the application has been cached and that they can now use it offline.

    Otherwise, it is an <a>upgrade attempt</a>. For each
    <a>cache host</a> associated with an <a>application cache</a> in <var>cache
    group</var>, create a <a>task</a> to <a>fire a simple event</a>
    that is cancelable named <code>updateready</code> at the
    <code>ApplicationCache</code> singleton of the <a>cache host</a>, and append it to <var>task list</var>. The default action of these events must be, if the user agent
    <a>shows caching progress</a>, the display of some sort of user interface indicating to
    the user that a new version is available and that they can activate it by reloading the
    page.

    </li>

    <li>If appropriate, remove any user interface indicating that an update for this cache is in
    progress.</li>

    <li>Set the <a>update status</a> of <var>cache
    group</var> to <i>idle</i>.</li>

    <li>For each <a>task</a> in <var>task list</var>, <a>queue that task as a post-load task</a>.</li>

  </ol>

  The <dfn>cache failure steps</dfn> are as follows:

  <ol>

    <li>Let <var>task list</var> be an empty list of <a>tasks</a>.

    <li>

    For each entry in <var>cache group</var>'s <a>list of pending master entries</a>, run the
    following further substeps. These steps may be run in parallel for two or more entries at a
    time.

    <ol>

      <li>Wait for the resource for this entry to have either completely downloaded or failed.

      <li>Unassociate the {{Document}} for this entry from its <a>application
      cache</a>, if it has one.</li>

      <li>Create a <a>task</a> to <a>fire a simple event</a> that
      is cancelable named <code>error</code> at the
      <code>ApplicationCache</code> singleton of the {{Document}} for this entry, if there
      still is one, and append it to <var>task list</var>. The default action of these
      events must be, if the user agent <a>shows caching progress</a>, the display of some sort
      of user interface indicating to the user that the user agent failed to save the application for
      offline use.

    </ol>

    </li>

    <li>For each <a>cache host</a> still associated with an <a>application cache</a>
    in <var>cache group</var>, create a <a>task</a> to <a>fire
    a simple event</a> that is cancelable named <code>error</code> at
    the <code>ApplicationCache</code> singleton of the <a>cache host</a>, and append it to <var>task list</var>. The default action of these events must be, if the user agent
    <a>shows caching progress</a>, the display of some sort of user interface indicating to the
    user that the user agent failed to save the application for offline use.</li>

    <li>Empty <var>cache group</var>'s <a>list of pending master entries</a>.</li>

    <li>If <var>cache group</var> has an <a>application cache</a> whose <a>completeness flag</a> is <i>incomplete</i>, then discard
    that <a>application cache</a>.

    <li>If appropriate, remove any user interface indicating that an update for this cache is in
    progress.</li>

    <li>Let the <a>status</a> of <var>cache
    group</var> be <i>idle</i>.</li>

    <li>If this was a <a>cache attempt</a>, discard <var>cache group</var> altogether.

    <li>For each <a>task</a> in <var>task list</var>, <a>queue that task as a post-load task</a>.</li>

    <li>Abort the <a>application cache download process</a>.</li>

  </ol>

  Attempts to fetch resources as part of the <a>application cache download process</a> may
  be done with cache-defeating semantics, to avoid problems with stale or inconsistent intermediary
  caches.

  <hr />

  User agents may invoke the <a>application cache download process</a>, in the background,
  for any <a>application cache group</a>, at any time (with no <a>cache host</a>). This
  allows user agents to keep caches primed and to update caches even before the user visits a
  site.

  <hr />

  Each {{Document}} has a list of <dfn>pending application cache download process
  tasks</dfn> that is used to delay events fired by the algorithm above until the document's <code>load</code> event has fired. When the {{Document}} is created, the
  list must be empty.

  When the steps above say to <dfn lt="queue that task as a post-load task|queue a post-load task">queue a post-load task</dfn> <var>task</var>, where
  <var>task</var> is a <a>task</a> that dispatches an event on a
  target <code>ApplicationCache</code> object <var>target</var>, the user agent must run
  the appropriate steps from the following list:

  <dl>

    <dt>If <var>target</var>'s <a>node document</a> is
    <a>ready for post-load tasks</a></dt>

    <dd><a lt="queue a task">Queue</a> the task <var>task</var>.</dd>

    <dt>Otherwise</dt>

    <dd>Add <var>task</var> to <var>target</var>'s <a>node document</a>'s list
    of <a>pending application cache download process tasks</a>.</dd>

  </dl>

  When the steps above say to <dfn>queue a progress post-load task</dfn> <var>task</var>, where
  <var>task</var> is a <a>task</a> that dispatches an event on a
  target <code>ApplicationCache</code> object <var>target</var>, the user agent must run
  the following steps:

  <ol>

    <li>If there is a <var>task</var> in <var>target</var>'s <a>node document</a>'s list
    of <a>pending application cache download process tasks</a> that is labeled as a
    <i>progress task</i>, then remove that task from the list.</li>

    <li>Label <var>task</var> as a <i>progress task</i>.</li>

    <li><a>Queue a post-load task</a> <var>task</var>.</li>

  </ol>

  The <a>task source</a> for these <a>tasks</a> is the
  <a>networking task source</a>.

<h5 id="the-application-cache-selection-algorithm">The application cache selection algorithm</h5>

  When the <dfn lt="has an effect|application cache selection algorithm|application cache selection|cache selection">application cache selection algorithm</dfn>
  algorithm is invoked with a {{Document}} <var>document</var> and optionally a
  manifest <a for="url">URL</a> <var>manifest URL</var>, the user agent must run the first
  applicable set of steps from the following list:

  <dl class="switch">

    <dt>If there is a <var>manifest URL</var>, and <var>document</var> was loaded
    from an <a>application cache</a>, and the URL of the <a>manifest</a> of that cache's <a>application cache
    group</a> is <em>not</em> the same as <var>manifest URL</var></dt>

    <dd>

    Mark the entry for the resource from which <var>document</var> was taken in the
    <a>application cache</a> from which it was loaded as <a>foreign</a>.

    Restart the current navigation from the top of the <a>navigation
    algorithm</a>, undoing any changes that were made as part of the initial load (changes can be
    avoided by ensuring that the step to <a>update the session history with the new page</a>
    is only ever completed <em>after</em> this <a>application cache
    selection algorithm</a> is run, though this is not required).

    </dd>

    <dt>If <var>document</var> was loaded from an <a>application cache</a>, and that
    <a>application cache</a> still exists (it is not now <a>obsolete</a>)</dt>

    <dd>

    Associate <var>document</var> with the <a>application cache</a> from which it
    was loaded. Invoke, in the background, the <a>application cache download process</a> for
    that <a>application cache</a>'s <a>application cache group</a>, with <var>document</var> as the <a>cache host</a>.

    </dd>

    <dt>If <var>document</var>  was loaded using <code>GET</code>, and, there is a
    <var>manifest URL</var>, and <var>manifest URL</var> has the <a>same origin</a> as
    <var>document</var></dt>

    <dd>

    Invoke, in the background, the <a>application cache download process</a> for <var>manifest URL</var>, with <var>document</var> as the <a>cache host</a>
    and with the resource from which <var>document</var> was parsed as the <a>master</a> resource.

    If there are <a>relevant application caches</a> that
    are identified by a URL with the <a>same origin</a> as the URL of <var>document</var>, and that have this URL as one of their entries, excluding entries
    marked as <a>foreign</a>, then the user agent should use
    the <a>most appropriate application cache</a> of those
    that match as an HTTP cache for any subresource loads. User agents may also have other caches in
    place that are also honored.

    </dd>

    <dt>Otherwise</dt>

    <dd>

    The {{Document}} is not associated with any <a>application cache</a>.

    If there was a <var>manifest URL</var>, the user agent may report to the user that
    it was ignored, to aid in application development.

    </dd>

  </dl>

<h5 id="changes-to-the-networking-model">Changes to the networking model</h5>

  When a <a>cache host</a> is associated with an <a>application cache</a> whose <a>completeness flag</a> is <i>complete</i>, any and all
  loads for resources related to that <a>cache host</a> other than those for <a>child browsing contexts</a> must go through the following steps
  instead of immediately invoking the mechanisms appropriate to that resource's scheme:

  <ol>

    <li>If the resource is not to be fetched using the GET method, or if applying the <a>URL
    parser</a> algorithm to both its <a for="url">URL</a> and the <a>application cache</a>'s
    <a>manifest</a>'s URL results in two <a>URL records</a> with different <a for="url">scheme</a> components,
    then fetch the resource normally and abort these steps.</li>

    <li>If the resource's URL is a <a>master entry</a>,
    <a>the manifest</a>, <a>an explicit entry</a>, or <a>a fallback entry</a> in the <a>application cache</a>,
    then get the resource from the cache (instead of fetching it), and abort these steps.</li>

    <li>If there is an entry in the <a>application cache</a>'s <a>online safelist</a> that has the <a>same
    origin</a> as the resource's URL and that is a <a>prefix match</a> for the resource's
    URL, then fetch the resource normally and abort these steps.</li>

    <li>

    If the resource's URL has the <a>same origin</a> as the manifest's URL, and there is a
    <a>fallback namespace</a> <var>f</var> in
    the <a>application cache</a> that is a <a>prefix match</a> for the resource's URL,
    then:

    Fetch the resource normally. If this results in a redirect to a resource with another
    <a for="concept">origin</a> (indicative of a captive portal), or a 4xx or 5xx status code, or if
    there were network errors (but not if the user canceled the download), then instead get, from
    the cache, the resource of the <a>fallback entry</a> corresponding to the
    <a>fallback namespace</a> <var>f</var>. Abort these steps.

    </li>

    <li>If the <a>application cache</a>'s <a>online safelist wildcard flag</a> is
    <i>open</i>, then fetch the resource normally and abort these steps.</li>

    <li>Fail the resource load as if there had been a generic network error.</li>

  </ol>

  <p class="note">
  The above algorithm ensures that so long as the <a>online safelist wildcard flag</a> is
  <i>blocking</i>, resources that are not present in the <a>manifest</a> will always fail to load (at least, after the
  <a>application cache</a> has been primed the first time), making the testing of offline
  applications simpler.
  </p>

<h5 id="expiring-application-caches">Expiring application caches</h5>

  As a general rule, user agents should not expire application caches, except on request from the
  user, or after having been left unused for an extended period of time.

  Application caches and cookies have similar implications with respect to privacy (e.g., if the
  site can identify the user when providing the cache, it can store data in the cache that can be
  used for cookie resurrection). Implementors are therefore encouraged to expose application caches
  in a manner related to HTTP cookies, allowing caches to be expunged together with cookies and
  other origin-specific data.


<h5 id="disk-space">Disk space</h5>

  User agents should consider applying constraints on disk usage of <a>application caches</a>, and care should be taken to ensure that the restrictions cannot
  be easily worked around using subdomains.

  User agents should allow users to see how much space each domain is using, and may offer the
  user the ability to delete specific <a>application caches</a>.


<h5 id="security-concerns-with-offline-applications-caches">Security concerns with offline applications caches</h5>

  <em>This section is non-normative.</em>

  The main risk introduced by offline application caches is that an injection attack can be
  elevated into persistent site-wide page replacement. This attack involves using an injection
  vulnerability to upload two files to the victim site. The first file is an application cache
  manifest consisting of just a fallback entry pointing to the second file, which is an HTML page
  whose manifest is declared as that first file. Once the user has been directed to that second
  file, all subsequent accesses to any file covered by the given fallback namespace while either the
  user or the site is offline will instead show that second file. Targeted denial-of-service
  attacks or cookie bombing attacks (where the client is made to send so many cookies that the
  server refuses to process the request) can be used to ensure that the site appears offline.

  To mitigate this, manifests can only specify fallbacks that are in the same path as the
  manifest itself. This means that a content injection upload vulnerability in a particular
  directory on a server can only be escalated to a take-over of that directory and its
  subdirectories. If there is no way to inject a file into the root directory, the entire site
  cannot be taken over.

  If a site has been attacked in this way, simply removing the offending manifest might eventually
  clear the problem, since the next time the manifest is updated, a 404 error will be seen, and the
  user agent will clear the cache. "Eventually" is the key word here, however; while the attack on
  the user or server is ongoing, such that connections from an affected user to the affected site
  are blocked, the user agent will simply assume that the user is offline and will continue to use
  the hostile manifest. Unfortunately, if a cookie bombing attack has also been used, merely
  removing the manifest is insufficient; in addition, the server has to be configured to return a
  404 or 410 response instead of the 413 "Request Entity Too Large" response.

  TLS does not inherently protect a site from this attack, since the attack relies on content
  being served from the server itself. Not using application caches also does not prevent this
  attack, since the attack relies on an attacker-provided manifest.

<h5 id="application-cache-api">Application cache API</h5>

  <pre class="idl" data-highlight="webidl" dfn-for="ApplicationCache">
    [Exposed=(Window, SharedWorker)]
    interface ApplicationCache : EventTarget {
      // update status
      const unsigned short UNCACHED = 0;
      const unsigned short IDLE = 1;
      const unsigned short CHECKING = 2;
      const unsigned short DOWNLOADING = 3;
      const unsigned short UPDATEREADY = 4;
      const unsigned short OBSOLETE = 5;
      readonly attribute unsigned short status;

      // updates
      void update();
      void abort();
      void swapCache();

      // events
      attribute EventHandler onchecking;
      attribute EventHandler onerror;
      attribute EventHandler onnoupdate;
      attribute EventHandler ondownloading;
      attribute EventHandler onprogress;
      attribute EventHandler onupdateready;
      attribute EventHandler oncached;
      attribute EventHandler onobsolete;
    };
  </pre>

  <dl class="domintro">

    <dt><var>cache</var> = <var>window</var> . <code>applicationCache</code></dt>
    <dd>

    (In a window.) Returns the <code>ApplicationCache</code> object that applies to the
    <a>active document</a> of that {{Window}}.

    </dd>

    <dt><var>cache</var> = <var>self</var> . <code>applicationCache</code></dt> <dd>

    (In a shared worker.) Returns the <code>ApplicationCache</code> object that applies to the
    current shared worker.

    </dd>

    <dt><var>cache</var> . <code>status</code></dt>
    <dd>

    Returns the current status of the application cache, as given by the constants defined
    below.

    </dd>

    <dt><var>cache</var> . <code>update</code>()</dt>
    <dd>

    Invokes the <a>application cache download process</a>.

    Throws an <code>InvalidStateError</code> exception if there is no application cache to
    update.

    </dd>

    <dt><var>cache</var> . <code>abort</code>()</dt>
    <dd>

    Cancels the <a>application cache download process</a>.

    </dd>

    <dt><var>cache</var> . <code>swapCache</code>()</dt>
    <dd>

    Switches to the most recent application cache, if there is a newer one. If there isn't,
    throws an <code>InvalidStateError</code> exception.

    </dd>

  </dl>


  There is a one-to-one mapping from <a>cache hosts</a> to
  <code>ApplicationCache</code> objects. The <dfn attribute for="Window"><code>applicationCache</code></dfn> attribute on <code>Window</code>
  objects must return the <code>ApplicationCache</code> object associated with the
  <code>Window</code> object's <a>active document</a>. The <dfn attribute for="SharedWorkerGlobalScope"><code>applicationCache</code></dfn> attribute
  on <code>SharedWorkerGlobalScope</code> objects must return the <code>ApplicationCache</code>
  object associated with the worker.

  <p class="note">
  A <code>Window</code> or <code>SharedWorkerGlobalScope</code> object has an
  associated <code>ApplicationCache</code> object even if that <a>cache host</a> has no actual
  <a>application cache</a>.
  </p>

  <hr />

  The <dfn attribute for="ApplicationCache"><code>status</code></dfn> attribute, on getting, must
  return the current state of the <a>application cache</a> that the
  <code>ApplicationCache</code> object's <a>cache host</a> is associated with, if any. This
  must be the appropriate value from the following list:

  <dl>

    <dt><dfn const for="ApplicationCache"><code>UNCACHED</code></dfn> (numeric value 0)</dt>

    <dd>The <code>ApplicationCache</code> object's <a>cache host</a> is not associated with
    an <a>application cache</a> at this time.</dd>

    <dt><dfn const for="ApplicationCache"><code>IDLE</code></dfn> (numeric value 1)</dt>

    <dd>The <code>ApplicationCache</code> object's <a>cache host</a> is associated with an
    <a>application cache</a> whose <a>application cache group</a>'s <a>update status</a> is <i>idle</i>, and that <a>application
    cache</a> is the <a>newest</a> cache in its
    <a>application cache group</a>, and the <a>application cache group</a> is not marked
    as <a>obsolete</a>.</dd>

    <dt><dfn const for="ApplicationCache"><code>CHECKING</code></dfn> (numeric value 2)</dt>

    <dd>The <code>ApplicationCache</code> object's <a>cache host</a> is associated with an
    <a>application cache</a> whose <a>application cache group</a>'s <a>update status</a> is <i>checking</i>.</dd>

    <dt><dfn const for="ApplicationCache"><code>DOWNLOADING</code></dfn> (numeric value 3)</dt>

    <dd>The <code>ApplicationCache</code> object's <a>cache host</a> is associated with an
    <a>application cache</a> whose <a>application cache group</a>'s <a>update status</a> is <i>downloading</i>.</dd>

    <dt><dfn const for="ApplicationCache"><code>UPDATEREADY</code></dfn> (numeric value 4)</dt>

    <dd>The <code>ApplicationCache</code> object's <a>cache host</a> is associated with an
    <a>application cache</a> whose <a>application cache group</a>'s <a>update status</a> is <i>idle</i>, and whose <a>application
    cache group</a> is not marked as <a>obsolete</a>, but
    that <a>application cache</a> is <em>not</em> the <a>newest</a> cache in its group.</dd>

    <dt><dfn const for="ApplicationCache"><code>OBSOLETE</code></dfn> (numeric value 5)</dt>

    <dd>The <code>ApplicationCache</code> object's <a>cache host</a> is associated with an
    <a>application cache</a> whose <a>application cache group</a> is marked as <a>obsolete</a>.</dd>

  </dl>


  <hr />

  If the <dfn method for="ApplicationCache"><code>update()</code></dfn> method is invoked, the user
  agent must invoke the <a>application cache download process</a>, in the background, for the
  <a>application cache group</a> of the <a>application cache</a> with which the
  <code>ApplicationCache</code> object's <a>cache host</a> is associated, but without giving
  that <a>cache host</a> to the algorithm. If there is no such <a>application cache</a>,
  or if its <a>application cache group</a> is marked as <a>obsolete</a>, then the method must throw an
  <code>InvalidStateError</code> exception instead.

  If the <dfn method for="ApplicationCache"><code>abort()</code></dfn> method is invoked, the user
  agent must <dfn lt="sends a signal|send a signal">send a signal</dfn> to the current <a>application cache download process</a>
  for the <a>application cache group</a> of the <a>application cache</a> with which the
  <code>ApplicationCache</code> object's <a>cache host</a> is associated, if any. If there is
  no such <a>application cache</a>, or it does not have a current <a>application cache
  download process</a>, then do nothing.

  If the <dfn method for="ApplicationCache"><code>swapCache()</code></dfn> method is invoked,
  the user agent must run the following steps:

  <ol>

    <li>Check that <code>ApplicationCache</code> object's <a>cache host</a> is associated
    with an <a>application cache</a>. If it is not, then throw an
    <code>InvalidStateError</code> exception and abort these steps.</li>

    <li>Let <var>cache</var> be the <a>application cache</a> with which the
    <code>ApplicationCache</code> object's <a>cache host</a> is associated. (By definition,
    this is the same as the one that was found in the previous step.)</li>

    <li>If <var>cache</var>'s <a>application cache group</a> is marked as <a>obsolete</a>, then unassociate the
    <code>ApplicationCache</code> object's <a>cache host</a> from <var>cache</var> and
    abort these steps. (Resources will now load from the network instead of the cache.)</li>

    <li>Check that there is an application cache in the same <a>application cache group</a>
    as <var>cache</var> whose <a>completeness
    flag</a> is <i>complete</i> and that is <a>newer</a> than
    <var>cache</var>. If there is not, then throw an <code>InvalidStateError</code>
    exception and abort these steps.</li>

    <li>Let <var>new cache</var> be the <a>newest</a> <a>application cache</a> in the same
    <a>application cache group</a> as <var>cache</var> whose <a>completeness flag</a> is <i>complete</i>.</li>

    <li>Unassociate the <code>ApplicationCache</code> object's <a>cache host</a> from <var>cache</var> and instead associate it with <var>new cache</var>.</li>

  </ol>

  The following are the <a>event handlers</a> (and their corresponding <a>event handler event types</a>) <span class="impl">that must be</span>
  supported, as <a>event handler IDL attributes</a>, by all objects implementing the
  <code>ApplicationCache</code> interface:

  <table>
    <thead>
    <tr><th><a>Event handler</a> <th><a>Event handler event type</a>
    <tbody>
    <tr><td><dfn attribute for="ApplicationCache"><code>onchecking</code></dfn> <td> <code>checking</code>
    <tr><td><dfn attribute for="ApplicationCache"><code>onerror</code></dfn> <td> <code>error</code>
    <tr><td><dfn attribute for="ApplicationCache"><code>onnoupdate</code></dfn> <td> <code>noupdate</code>
    <tr><td><dfn attribute for="ApplicationCache"><code>ondownloading</code></dfn> <td> <code>downloading</code>
    <tr><td><dfn attribute for="ApplicationCache"><code>onprogress</code></dfn> <td> <code>progress</code>
    <tr><td><dfn attribute for="ApplicationCache"><code>onupdateready</code></dfn> <td> <code>updateready</code>
    <tr><td><dfn attribute for="ApplicationCache"><code>oncached</code></dfn> <td> <code>cached</code>
    <tr><td><dfn attribute for="ApplicationCache"><code>onobsolete</code></dfn> <td> <code>obsolete</code>
  </table>



<h4 id="other-elements-attributes-and-apis">Other elements, attributes and APIs</h4>

  User agents must treat <{acronym}> elements in a manner equivalent to <{abbr}> elements in terms
  of semantics and for purposes of rendering.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLAnchorElement">
    partial interface HTMLAnchorElement {
      attribute DOMString coords;
      attribute DOMString charset;
      attribute DOMString name;
      attribute DOMString shape;
    };
  </pre>

  The <dfn attribute for="HTMLAnchorElement"><code>coords</code></dfn>,
  <dfn attribute for="HTMLAnchorElement"><code>charset</code></dfn>,
  <dfn attribute for="HTMLAnchorElement"><code>name</code></dfn>, and
  <dfn attribute for="HTMLAnchorElement"><code>shape</code></dfn> IDL attributes of the
  <{th}> element must <a>reflect</a> the respective content attributes of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLAreaElement">
    partial interface HTMLAreaElement {
      attribute boolean noHref;
    };
  </pre>

  The <dfn attribute for="HTMLAreaElement"><code>noHref</code></dfn> IDL attribute of the <{area}>
  element must <a>reflect</a> the element's <{area/nohref}> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLBodyElement">
    partial interface HTMLBodyElement {
      [TreatNullAs=EmptyString] attribute DOMString text;
      [TreatNullAs=EmptyString] attribute DOMString link;
      [TreatNullAs=EmptyString] attribute DOMString vLink;
      [TreatNullAs=EmptyString] attribute DOMString aLink;
      [TreatNullAs=EmptyString] attribute DOMString bgColor;
      attribute DOMString background;
    };
  </pre>

  The <dfn attribute for="HTMLBodyElement"><code>text</code></dfn> IDL attribute of the <{body}>
  element must <a>reflect</a> the element's <{body/text}> content attribute.

  The <dfn attribute for="HTMLBodyElement"><code>link</code></dfn> IDL attribute of the <{body}>
  element must <a>reflect</a> the element's <{body/link}> content attribute.

  The <dfn attribute for="HTMLBodyElement"><code>aLink</code></dfn> IDL attribute of the <{body}>
  element must <a>reflect</a> the element's <{body/alink}> content attribute.

  The <dfn attribute for="HTMLBodyElement"><code>vLink</code></dfn> IDL attribute of the <{body}>
  element must <a>reflect</a> the element's <{body/vlink}> content attribute.

  The <dfn attribute for="HTMLBodyElement"><code>bgColor</code></dfn> IDL attribute of the <{body}>
  element must <a>reflect</a> the element's <{body/bgcolor}> content attribute.

  The <dfn attribute for="HTMLBodyElement"><code>background</code></dfn> IDL attribute of the
  <{body}> element must <a>reflect</a> the element's <{body/background}> content attribute. (The
  <{body/background}> content is <em>not</em> defined to contain a <a for="url">URL</a>, despite
  rules regarding its handling in [[#rendering]] above.)

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLBRElement">
    partial interface HTMLBRElement {
      attribute DOMString clear;
    };
  </pre>

  The <dfn attribute for="HTMLBRElement"><code>clear</code></dfn> IDL attribute of the <{br}>
  element must <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLTableCaptionElement">
    partial interface HTMLTableCaptionElement {
      attribute DOMString align;
    };
  </pre>

  The <dfn attribute for="HTMLTableCaptionElement"><code>align</code></dfn> IDL attribute of the
  <{caption}> element must <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLTableColElement">
    partial interface HTMLTableColElement {
      attribute DOMString align;
      attribute DOMString ch;
      attribute DOMString chOff;
      attribute DOMString vAlign;
      attribute DOMString width;
    };
  </pre>

  The <dfn attribute for="HTMLTableColElement"><code>align</code></dfn> and
  <dfn attribute for="HTMLTableColElement"><code>width</code></dfn> IDL attributes of the <{col}>
  element must <a>reflect</a> the respective content attributes of the same name.

  The <dfn attribute for="HTMLTableColElement"><code>ch</code></dfn> IDL attribute of the <{col}>
  element must <a>reflect</a> the element's <{col/char}> content attribute.

  The <dfn attribute for="HTMLTableColElement"><code>chOff</code></dfn> IDL attribute of the
  <{col}> element must <a>reflect</a> the element's <{col/charoff}> content attribute.

  The <dfn attribute for="HTMLTableColElement"><code>vAlign</code></dfn> IDL attribute of the
  <{col}> element must <a>reflect</a> the element's <{col/valign}> content attribute.

  <hr />

  User agents must treat <{dir}> elements in a manner equivalent to <code>ul</code>
  elements in terms of semantics and for purposes of rendering.

  The <{dir}> element must implement the <code>HTMLDirectoryElement</code> interface.

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLDirectoryElement">
    interface HTMLDirectoryElement : HTMLElement {
      attribute boolean compact;
    };
  </pre>

  The <dfn attribute for="HTMLDirectoryElement"><code>compact</code></dfn> IDL attribute of the
  <{dir}> element must <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLDivElement">
    partial interface HTMLDivElement {
      attribute DOMString align;
    };
  </pre>

  The <dfn attribute for="HTMLDivElement"><code>align</code></dfn> IDL attribute of the <{div}>
  element must <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLDListElement">
    partial interface HTMLDListElement {
      attribute boolean compact;
    };
  </pre>

  The <dfn attribute for="HTMLDListElement"><code>compact</code></dfn> IDL attribute of the <{dl}>
  element must <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLEmbedElement">
    partial interface HTMLEmbedElement {
      attribute DOMString align;
      attribute DOMString name;
    };
  </pre>

  The <dfn attribute for="HTMLEmbedElement"><code>name</code></dfn> and
  <dfn attribute for="HTMLEmbedElement"><code>align</code></dfn> IDL attributes of the <{embed}>
  element must <a>reflect</a> the respective content attributes of the same name.

  <hr />

  The <{font}> element must implement the <code>HTMLFontElement</code> interface.

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLFontElement">
    interface HTMLFontElement : HTMLElement {
      [TreatNullAs=EmptyString] attribute DOMString color;
      attribute DOMString face;
      attribute DOMString size;
    };
  </pre>

  The <dfn attribute for="HTMLFontElement"><code>color</code></dfn>,
  <dfn attribute for="HTMLFontElement"><code>face</code></dfn>, and
  <dfn attribute for="HTMLFontElement"><code>size</code></dfn>
  IDL attributes of the <{font}> element must <a>reflect</a> the respective content
  attributes of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLHeadingElement">
    partial interface HTMLHeadingElement {
      attribute DOMString align;
    };
  </pre>

  The <dfn attribute for="HTMLHeadingElement"><code>align</code></dfn> IDL attribute of the
  <{h1}>&ndash;<{h6}> elements must <a>reflect</a> the content attribute of the same name.

  <hr />

  <p class="note">
    The <dfn attribute for="HTMLHeadElement"><code>profile</code></dfn> IDL attribute on <{head}>
    elements (with the {{HTMLHeadElement}} interface) is intentionally omitted. Unless so required
    by <a lt="applicable specification">another applicable specification</a>, implementations would
    therefore not support this attribute. (It is mentioned here as it was defined in a previous
    version of the DOM specifications.)
  </p>

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLHRElement">
    partial interface HTMLHRElement {
      attribute DOMString align;
      attribute DOMString color;
      attribute boolean noShade;
      attribute DOMString size;
      attribute DOMString width;
    };
  </pre>

  The <dfn attribute for="HTMLHRElement"><code>align</code></dfn>,
  <dfn attribute for="HTMLHRElement"><code>color</code></dfn>,
  <dfn attribute for="HTMLHRElement"><code>size</code></dfn>,
  and <dfn attribute for="HTMLHRElement"><code>width</code></dfn> IDL attributes of the <{hr}>
  element must <a>reflect</a> the respective content attributes of the same name.

  The <dfn><code>noShade</code></dfn> IDL attribute of the <{hr}> element must
  <a>reflect</a> the element's <code>noshade</code> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLHtmlElement">
    partial interface HTMLHtmlElement {
      attribute DOMString version;
    };
  </pre>

  The <dfn attribute for="HTMLHtmlElement"><code>version</code></dfn> IDL attribute of the <{html}>
  element must <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLIFrameElement">
    partial interface HTMLIFrameElement {
      attribute DOMString align;
      attribute DOMString scrolling;
      attribute DOMString frameBorder;
      attribute DOMString longDesc;

      [TreatNullAs=EmptyString] attribute DOMString marginHeight;
      [TreatNullAs=EmptyString] attribute DOMString marginWidth;
    };
  </pre>

  The <dfn attribute for="HTMLIFrameElement"><code>align</code></dfn> and
  <dfn attribute for="HTMLIFrameElement"><code>scrolling</code></dfn> IDL attributes of the
  <{iframe}> element must <a>reflect</a> the respective content attributes of the same name.

  The <dfn attribute for="HTMLIFrameElement"><code>frameBorder</code></dfn> IDL attribute of the
  <{iframe}> element must <a>reflect</a> the element's <{iframe/frameborder}> content attribute.

  The <dfn attribute for="HTMLIFrameElement"><code>longDesc</code></dfn> IDL attribute of the
  <{iframe}> element must <a>reflect</a> the element's <{iframe/longdesc}> content attribute,
  which for the purposes of reflection is defined as containing a <a for="url">URL</a>.

  The <dfn attribute for="HTMLIFrameElement"><code>marginHeight</code></dfn> IDL attribute of the
  <{iframe}> element must <a>reflect</a> the element's <{iframe/marginheight}> content attribute.

  The <dfn attribute for="HTMLIFrameElement"><code>marginWidth</code></dfn> IDL attribute of the
  <{iframe}> element must <a>reflect</a> the element's <{iframe/marginwidth}> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLImageElement">
    partial interface HTMLImageElement {
      attribute DOMString name;
      attribute DOMString lowsrc;
      attribute DOMString align;
      attribute unsigned long hspace;
      attribute unsigned long vspace;

      [TreatNullAs=EmptyString] attribute DOMString border;
    };
  </pre>

  The <dfn attribute for="HTMLImageElement"><code>name</code></dfn>,
  <dfn attribute for="HTMLImageElement"><code>align</code></dfn>,
  <dfn attribute for="HTMLImageElement"><code>border</code></dfn>,
  <dfn attribute for="HTMLImageElement"><code>hspace</code></dfn>, and
  <dfn attribute for="HTMLImageElement"><code>vspace</code></dfn> IDL attributes of the <{img}>
  element must <a>reflect</a> the respective content attributes of the same name.

  The <dfn attribute for="HTMLImageElement"><code>lowsrc</code></dfn> IDL attribute of the <{img}>
  element must <a>reflect</a> the element's <{img/lowsrc}> content attribute, which for the
  purposes of reflection is defined as containing a <a for="url">URL</a>.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLInputElement">
    partial interface HTMLInputElement {
      attribute DOMString align;
      attribute DOMString useMap;
    };
  </pre>

  The <dfn attribute for="HTMLInputElement"><code>align</code></dfn> IDL attribute of the <{input}>
  element must <a>reflect</a> the content attribute of the same name.

  The <dfn attribute for="HTMLInputElement"><code>useMap</code></dfn> IDL attribute of the <{input}>
  element must <a>reflect</a> the element's <{input/usemap}> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLLegendElement">
    partial interface HTMLLegendElement {
      attribute DOMString align;
    };
  </pre>

  The <dfn attribute for="HTMLLegendElement"><code>align</code></dfn> IDL attribute of the
  <{legend}> element must <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLLIElement">
    partial interface HTMLLIElement {
      attribute DOMString type;
    };
  </pre>

  The <dfn attribute for="HTMLLIElement"><code>type</code></dfn> IDL attribute of the <{li}> element
  must <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLLinkElement">
    partial interface HTMLLinkElement {
      attribute DOMString charset;
      attribute DOMString target;
    };
  </pre>

  The <dfn attribute for="HTMLLinkElement"><code>charset</code></dfn> and
  <dfn attribute for="HTMLLinkElement"><code>target</code></dfn> IDL attributes of the <{link}>
  element must <a>reflect</a> the respective content attributes of the same name.

  <hr />

  User agents must treat <{listing}> elements in a manner equivalent to <code>pre</code> elements in
  terms of semantics and for purposes of rendering.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLMenuElement">
    partial interface HTMLMenuElement {
      attribute boolean compact;
    };
  </pre>

  The <dfn attribute for="HTMLMenuElement"><code>compact</code></dfn> IDL attribute of the <{menu}>
  element must <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLMetaElement">
    partial interface HTMLMetaElement {
      attribute DOMString scheme;
    };
  </pre>

  User agents may treat the <{meta/scheme}> content attribute
  on the <{meta}> element as an extension of the element's <{meta/name}> content attribute when
  processing a <{meta}> element with a <{meta/name}> attribute whose value is one that the user
  agent recognizes as supporting the <{meta/scheme}> attribute.

  User agents are encouraged to ignore the <{meta/scheme}> attribute and instead process the
  value given to the metadata name as if it had been specified for each expected value of the
  <{meta/scheme}> attribute.

  <div class="example">
    For example, if the user agent acts on <{meta}> elements with <{meta/name}>
    attributes having the value "eGMS.subject.keyword", and knows that the <{meta/scheme}>
    attribute is used with this metadata name, then it could take the <{meta/scheme}> attribute
    into account, acting as if it was an extension of the <{meta/name}> attribute. Thus the
    following two <{meta}> elements could be treated as two elements giving values for two
    different metadata names, one consisting of a combination of "eGMS.subject.keyword" and "LGCL",
    and the other consisting of a combination of "eGMS.subject.keyword" and "ORLY":

    <pre class="bad" highlight="html">
      &lt;!-- this markup is invalid -->
      &lt;meta name="eGMS.subject.keyword" scheme="LGCL" content="Abandoned vehicles">
      &lt;meta name="eGMS.subject.keyword" scheme="ORLY" content="Mah car: kthxbye">
    </pre>

    The suggested processing of this markup, however, would be equivalent to the following:

    <pre highlight="html">
      &lt;meta name="eGMS.subject.keyword" content="Abandoned vehicles">
      &lt;meta name="eGMS.subject.keyword" content="Mah car: kthxbye">
    </pre>
  </div>

  The <dfn attribute for="HTMLMetaElement"><code>scheme</code></dfn> IDL attribute of the <{meta}>
  element must <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLObjectElement">
    partial interface HTMLObjectElement {
      attribute DOMString align;
      attribute DOMString archive;
      attribute DOMString code;
      attribute boolean declare;
      attribute unsigned long hspace;
      attribute DOMString standby;
      attribute unsigned long vspace;
      attribute DOMString codeBase;
      attribute DOMString codeType;
      attribute DOMString useMap;

      [TreatNullAs=EmptyString] attribute DOMString border;
    };
  </pre>

  The <dfn attribute for="HTMLObjectElement"><code>align</code></dfn>,
  <dfn attribute for="HTMLObjectElement"><code>archive</code></dfn>,
  <dfn attribute for="HTMLObjectElement"><code>border</code></dfn>,
  <dfn attribute for="HTMLObjectElement"><code>code</code></dfn>,
  <dfn attribute for="HTMLObjectElement"><code>declare</code></dfn>,
  <dfn attribute for="HTMLObjectElement"><code>hspace</code></dfn>,
  <dfn attribute for="HTMLObjectElement"><code>standby</code></dfn>, and
  <dfn attribute for="HTMLObjectElement"><code>vspace</code></dfn> IDL attributes of the <{object}>
  element must <a>reflect</a> the respective content attributes of the same name.

  The <dfn attribute for="HTMLObjectElement"><code>codeBase</code></dfn> IDL attribute of the
  <{object}> element must <a>reflect</a> the element's <{object/codebase}> content attribute,
  which for the purposes of reflection is defined as containing a <a for="url">URL</a>.

  The <dfn attribute for="HTMLObjectElement"><code>codeType</code></dfn> IDL attribute of the
  <{object}> element must <a>reflect</a> the element's <{object/codetype}> content attribute.

  The <dfn attribute for="HTMLObjectElement"><code>useMap</code></dfn> IDL attribute of the
  <{object}> element must <a>reflect</a> the element's <{object/usemap}> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLOListElement">
    partial interface HTMLOListElement {
      attribute boolean compact;
    };
  </pre>

  The <dfn attribute for="HTMLOListElement"><code>compact</code></dfn> IDL attribute of the <{ol}>
  element must <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLParagraphElement">
    partial interface HTMLParagraphElement {
      attribute DOMString align;
    };
  </pre>

  The <dfn attribute for="HTMLParagraphElement"><code>align</code></dfn> IDL attribute of the <{p}>
  element must <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLParamElement">
    partial interface HTMLParamElement {
      attribute DOMString type;
      attribute DOMString valueType;
    };
  </pre>

  The <dfn attribute for="HTMLParamElement"><code>type</code></dfn> IDL attribute of the <{param}>
  element must <a>reflect</a> the content attribute of the same name.

  The <dfn attribute for="HTMLParamElement"><code>valueType</code></dfn> IDL attribute of the
  <{param}> element must <a>reflect</a> the element's <{param/valuetype}> content attribute.

  <hr />

  User agents must treat <{plaintext}> elements in a manner equivalent to <code>pre</code> elements
  in terms of semantics and for purposes of rendering. (The parser has special behavior for this
  element, though.)

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLPreElement">
    partial interface HTMLPreElement {
      attribute long width;
    };
  </pre>

  The <dfn attribute for="HTMLPreElement"><code>width</code></dfn> IDL attribute of the <{pre}>
  element must <a>reflect</a> the content attribute of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLScriptElement">
    partial interface HTMLScriptElement {
      attribute DOMString event;
      attribute DOMString htmlFor;
    };
  </pre>

  The <dfn attribute for="HTMLScriptElement"><code>event</code></dfn> IDL attribute of the
 <{script}> element must reflect the element's <{script/event}> content attribute.

  The <dfn attribute for="HTMLScriptElement"><code>htmlFor</code></dfn> IDL attribute of the
  <{script}> element must reflect the element's <{script/for}> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLTableElement">
    partial interface HTMLTableElement {
      attribute DOMString align;
      attribute DOMString border;
      attribute DOMString frame;
      attribute DOMString rules;
      attribute DOMString summary;
      attribute DOMString width;

      [TreatNullAs=EmptyString] attribute DOMString bgColor;
      [TreatNullAs=EmptyString] attribute DOMString cellPadding;
      [TreatNullAs=EmptyString] attribute DOMString cellSpacing;
    };
  </pre>

  The <dfn attribute for="HTMLTableElement"><code>align</code></dfn>,
  <dfn attribute for="HTMLTableElement"><code>border</code></dfn>,
  <dfn attribute for="HTMLTableElement"><code>frame</code></dfn>,
  <dfn attribute for="HTMLTableElement"><code>summary</code></dfn>,
  <dfn attribute for="HTMLTableElement"><code>rules</code></dfn>, and
  <dfn attribute for="HTMLTableElement"><code>width</code></dfn>,
  IDL attributes of the <{table}> element must <a>reflect</a> the respective content
  attributes of the same name.

  The <dfn attribute for="HTMLTableElement"><code>bgColor</code></dfn> IDL attribute of the
  <{table}> element must <a>reflect</a> the element's <{table/bgcolor}> content attribute.

  The <dfn attribute for="HTMLTableElement"><code>cellPadding</code></dfn> IDL attribute of the
  <{table}> element must <a>reflect</a> the element's <{table/cellpadding}> content attribute.

  The <dfn attribute for="HTMLTableElement"><code>cellSpacing</code></dfn> IDL attribute of the
  <{table}> element must <a>reflect</a> the element's <{table/cellspacing}> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLTableSectionElement">
    partial interface HTMLTableSectionElement {
      attribute DOMString align;
      attribute DOMString ch;
      attribute DOMString chOff;
      attribute DOMString vAlign;
    };
  </pre>

  The <dfn attribute for="HTMLTableSectionElement"><code>align</code></dfn> IDL attribute of the
  <{tbody}>, <{thead}>, and <{tfoot}> elements must <a>reflect</a> the content attribute of the same
  name.

  The <dfn attribute for="HTMLTableSectionElement"><code>ch</code></dfn> IDL attribute of the
  <{tbody}>, <{thead}>, and <{tfoot}> elements must <a>reflect</a> the elements'
  <{tablesection/char}> content attributes.

  The <dfn attribute for="HTMLTableSectionElement"><code>chOff</code></dfn> IDL attribute of the
  <{tbody}>, <{thead}>, and <{tfoot}> elements must <a>reflect</a> the elements'
  <{tablesection/charoff}> content attributes.

  The <dfn attribute for="HTMLTableSectionElement"><code>vAlign</code></dfn> IDL attribute of the
  <{tbody}>, <{thead}>, and <{tfoot}> element must <a>reflect</a> the elements'
  <{tablesection/valign}> content attributes.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLTableCellElement">
    partial interface HTMLTableCellElement {
      attribute DOMString align;
      attribute DOMString axis;
      attribute DOMString height;
      attribute DOMString width;

      attribute DOMString ch;
      attribute DOMString chOff;
      attribute boolean noWrap;
      attribute DOMString vAlign;

      [TreatNullAs=EmptyString] attribute DOMString bgColor;
    };
  </pre>

  The <dfn attribute for="HTMLTableCellElement"><code>align</code></dfn>,
  <dfn attribute for="HTMLTableCellElement"><code>axis</code></dfn>,
  <dfn attribute for="HTMLTableCellElement"><code>height</code></dfn>,
  and <dfn attribute for="HTMLTableCellElement"><code>width</code></dfn> IDL attributes of the
 <{td}> and <{th}> elements must <a>reflect</a> the respective content attributes of the same name.

  The <dfn attribute for="HTMLTableCellElement"><code>ch</code></dfn> IDL attribute of the <{td}>
  and <{th}> elements must <a>reflect</a> the elements' <{tablecells/char}> content attributes.

  The <dfn attribute for="HTMLTableCellElement"><code>chOff</code></dfn> IDL attribute of the <{td}>
  and <{th}> elements must <a>reflect</a> the elements' <{tablecells/charoff}> content attributes.

  The <dfn attribute for="HTMLTableCellElement"><code>noWrap</code></dfn> IDL attribute of the
  <{td}> and <{th}> elements must <a>reflect</a> the elements' <{tablecells/nowrap}> content
  attributes.

  The <dfn attribute for="HTMLTableCellElement"><code>vAlign</code></dfn> IDL attribute of the
  <{td}> and <{th}> element must <a>reflect</a> the elements' <{tablecells/valign}> content
  attributes.

  The <dfn attribute for="HTMLTableCellElement"><code>bgColor</code></dfn> IDL attribute of the
  <{td}> and <{th}> elements must <a>reflect</a> the elements' <{tablecells/bgcolor}> content
  attributes.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLTableDataCellElement">
    partial interface HTMLTableDataCellElement {
      attribute DOMString abbr;
    };
  </pre>

  The <dfn attribute for="HTMLTableDataCellElement"><code>abbr</code></dfn> IDL attribute of the
  <{td}> element must <a>reflect</a> the respective content attributes of the same name.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLTableRowElement">
    partial interface HTMLTableRowElement {
      attribute DOMString align;
      attribute DOMString ch;
      attribute DOMString chOff;
      attribute DOMString vAlign;

      [TreatNullAs=EmptyString] attribute DOMString bgColor;
    };
  </pre>

  The <dfn attribute for="HTMLTableRowElement"><code>align</code></dfn> IDL attribute of the <{tr}>
  element must <a>reflect</a> the content attribute of the same name.

  The <dfn attribute for="HTMLTableRowElement"><code>ch</code></dfn> IDL attribute of the <{tr}>
  element must <a>reflect</a> the element's <{tr/char}> content attribute.

  The <dfn attribute for="HTMLTableRowElement"><code>chOff</code></dfn> IDL attribute of the <{tr}>
  element must <a>reflect</a> the element's <{tr/charoff}> content attribute.

  The <dfn attribute for="HTMLTableRowElement"><code>vAlign</code></dfn> IDL attribute of the <{tr}>
  element must <a>reflect</a> the element's <{tr/valign}> content attribute.

  The <dfn attribute for="HTMLTableRowElement"><code>bgColor</code></dfn> IDL attribute of the
  <{tr}> element must <a>reflect</a> the element's <{tr/bgcolor}> content attribute.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="HTMLUListElement">
    partial interface HTMLUListElement {
      attribute boolean compact;
      attribute DOMString type;
    };
  </pre>

  The <dfn attribute for="HTMLUListElement"><code>compact</code></dfn> and {{HTMLUListElement/type}}
  IDL attributes of the <{ul}> element must <a>reflect</a> the respective content attributes of the
  same name.

  <hr />

  User agents must treat <{xmp}> elements in a manner equivalent to <{pre}> elements in terms of
  semantics and for purposes of rendering. (The parser has special behavior for this element though.)

  <hr />

  The <{blink}>, <{bgsound}>, <{isindex}>, <{multicol}>, <{nextid}>, and <{spacer}> elements must
  use the {{HTMLUnknownElement}} interface.

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="Document">
    partial interface Document {
      [TreatNullAs=EmptyString] attribute DOMString fgColor;
      [TreatNullAs=EmptyString] attribute DOMString linkColor;
      [TreatNullAs=EmptyString] attribute DOMString vlinkColor;
      [TreatNullAs=EmptyString] attribute DOMString alinkColor;
      [TreatNullAs=EmptyString] attribute DOMString bgColor;

      [SameObject] readonly attribute HTMLCollection anchors;
      [SameObject] readonly attribute HTMLCollection applets;

      void clear();
      void captureEvents();
      void releaseEvents();

      [SameObject] readonly attribute HTMLAllCollection all;
    };
  </pre>

  The attributes of the {{Document}} object listed in the first column of the following table must
  <a>reflect</a> the content attribute on the <{body}> element with the name given in the
  corresponding cell in the second column on the same row, if the <{body}> element is a <{body}>
  element (as opposed to a <{frameset}> element). When there is no <{body}> element or if it is a
  <{frameset}> element, the attributes must instead return the empty string on getting and do
  nothing on setting.

  <table>
    <thead>
      <tr>
        <th>IDL attribute</th>
        <th>Content attribute</th>
      </tr>
    </thead>
    <tbody>
      <tr>
        <td><dfn attribute for="Document"><code>fgColor</code></dfn></td>
        <td><{body/text}></td>
      </tr>
      <tr>
        <td><dfn attribute for="Document"><code>linkColor</code></dfn></td>
        <td><{body/link}></td>
      </tr>
      <tr>
        <td><dfn attribute for="Document"><code>vlinkColor</code></dfn></td>
        <td><{body/vlink}></td>
      </tr>
      <tr>
        <td><dfn attribute for="Document"><code>alinkColor</code></dfn></td>
        <td><{body/alink}></td>
      </tr>
      <tr>
        <td><dfn attribute for="Document"><code>bgColor</code></dfn></td>
        <td><{body/bgcolor}></td>
      </tr>
    </tbody>
  </table>

  <hr />

  The <dfn attribute for="Document"><code>anchors</code></dfn> attribute must return an
  {{HTMLCollection}} rooted at the {{Document}} node, whose filter matches only <{a}> elements with
  <{a/name}> attributes.

  The <dfn attribute for="Document"><code>applets</code></dfn> attribute must return an
  {{HTMLCollection}} rooted at the {{Document}} node, whose filter matches only <{applet}> elements.

  The <dfn method for="Document"><code>clear()</code></dfn>,
  <dfn method for="Document"><code>captureEvents()</code></dfn>, and
  <dfn method for="Document"><code>releaseEvents()</code></dfn> methods must do nothing.

  <hr />

  The <dfn attribute for="Document"><code>all</code></dfn> attribute must return an
  {{HTMLAllCollection}} rooted at the {{Document}} node, whose filter matches all elements.

  The object returned for <code>all</code> has several unusual behaviors:

  * The user agent must act as if the ToBoolean() operator in JavaScript converts the object
    returned for <code>all</code> to the false value.
  * The user agent must act as if, for the purposes of the <code>==</code> and <code>!=</code>
    operators in JavaScript, the object returned for <code>all</code> compares as equal to the
    <code>undefined</code> and <code>null</code> values. (Comparisons using the <code>===</code>
    operator, and comparisons to other values such as strings or objects, are unaffected.)
  * The user agent must act such that the <code>typeof</code> operator in JavaScript returns the
    string <code>undefined</code> when applied to the object returned for <code>all</code>.

  <p class="note">
    These requirements are a <a>willful violation</a> of the JavaScript specification current at the
    time of writing (ECMAScript edition 6). The JavaScript specification requires that the
    ToBoolean() operator convert all objects to the true value, and does not have provisions for
    objects acting as if they were <code>undefined</code> for the purposes of certain operators.
    This violation is motivated by a desire for compatibility with two classes of legacy content:
    one that uses the presence of <code>document.all</code> as a way to detect legacy user agents,
    and one that only supports those legacy user agents and uses the <code>document.all</code>
    object without testing for its presence first. [[!ECMA-262]]
  </p>

  <hr />

  <pre class="idl" data-highlight="webidl" dfn-for="Window">
    partial interface Window {
      void captureEvents();
      void releaseEvents();

      [Replaceable, SameObject] readonly attribute External external;
    };
  </pre>

  The <dfn method for="Window"><code>captureEvents()</code></dfn> and
  <dfn method for="Window"><code>releaseEvents()</code></dfn> methods must do nothing.

  The <dfn attribute for="Window"><code>external</code></dfn> attribute of the {{Window}} interface
  must return an instance of the {{External}} interface:

  <pre class="idl" data-highlight="webidl" dfn-for="Extenal">
    [NoInterfaceObject]
    interface External {
      void AddSearchProvider();
      void IsSearchProviderInstalled();
    };
  </pre>

  The <dfn method for="External"><code>AddSearchProvider()</code></dfn> and
  <dfn method for="External"><code>IsSearchProviderInstalled()</code></dfn> methods
  must do nothing.

</section>
